
R30M_Star.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011aa0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000098  20000000  00011aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00030098  2**0
                  CONTENTS
  3 .bss          00002218  20000098  00011b38  00030098  2**2
                  ALLOC
  4 .stack        00002000  200022b0  00013d50  00030098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
  6 .comment      0000008c  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006077c  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000a1c1  00000000  00000000  000908c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016873  00000000  00000000  0009aa89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001020  00000000  00000000  000b12fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c30  00000000  00000000  000b231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029310  00000000  00000000  000b3f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024be1  00000000  00000000  000dd25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009cce8  00000000  00000000  00101e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035e8  00000000  00000000  0019eb28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	b0 42 00 20 61 83 00 00 5d 83 00 00 5d 83 00 00     .B. a...]...]...
	...
				    | config->prescaler;
      2c:	5d 83 00 00 00 00 00 00 00 00 00 00 5d 83 00 00     ]...........]...
	switch (config->mode) {
      3c:	5d 83 00 00 5d 83 00 00 5d 83 00 00 e9 68 00 00     ]...]...]....h..
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	29 64 00 00 5d 83 00 00 5d 83 00 00 5d 83 00 00     )d..]...]...]...
				rtc_count_set_compare(module, config->compare_values[i],
      5c:	5d 83 00 00 19 6d 00 00 29 6d 00 00 39 6d 00 00     ]....m..)m..9m..
				return STATUS_ERR_INVALID_ARG;
      6c:	49 6d 00 00 59 6d 00 00 69 6d 00 00 5d 83 00 00     Im..Ym..im..]...
				rtc_count_set_compare(module, config->compare_values[i],
      7c:	5d 83 00 00 5d 83 00 00 45 7f 00 00 55 7f 00 00     ]...]...E...U...
	...
	return STATUS_OK;
      94:	65 7f 00 00 5d 83 00 00 5d 83 00 00 00 00 00 00     e...]...].......
      a4:	5d 83 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ]...............
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_MYINDEX_ID>:
    6100:	00010009 20001f8c 00000000 00000000     ....... ........

00006110 <pds_ff_PDS_ROLE_ID>:
    6110:	00010008 20002074 00000000 00000000     ....t . ........

00006120 <pds_ff_PDS_EDC_ID>:
    6120:	00010007 200003f2 00000000 00000000     ....... ........

00006130 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    6130:	01400006 20002168 00000000 00000000     ..@.h!. ........

00006140 <pds_ff_PDS_CONNECTION_MODE_ID>:
    6140:	00010005 2000000b 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    6150:	00010004 2000000d 00000000 00000000     ....... ........

00006160 <pds_ff_PDS_LONGADDR_ID>:
    6160:	00080003 20000010 00000000 00000000     ....... ........

00006170 <pds_ff_PDS_PANID_ID>:
    6170:	00020002 20001f94 00000000 00000000     ....... ........

00006180 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    6180:	00040001 20001de8 00000000 00000000     ....... ........

00006190 <MiWiFullParamsDirDescr>:
    6190:	00011390 40010009                       .......@

00006198 <__do_global_dtors_aux>:
    6198:	b510      	push	{r4, lr}
    619a:	4c06      	ldr	r4, [pc, #24]	; (61b4 <__do_global_dtors_aux+0x1c>)
    619c:	7823      	ldrb	r3, [r4, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d107      	bne.n	61b2 <__do_global_dtors_aux+0x1a>
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__do_global_dtors_aux+0x20>)
    61a4:	2b00      	cmp	r3, #0
    61a6:	d002      	beq.n	61ae <__do_global_dtors_aux+0x16>
    61a8:	4804      	ldr	r0, [pc, #16]	; (61bc <__do_global_dtors_aux+0x24>)
    61aa:	e000      	b.n	61ae <__do_global_dtors_aux+0x16>
    61ac:	bf00      	nop
    61ae:	2301      	movs	r3, #1
    61b0:	7023      	strb	r3, [r4, #0]
    61b2:	bd10      	pop	{r4, pc}
    61b4:	20000098 	.word	0x20000098
    61b8:	00000000 	.word	0x00000000
    61bc:	00011aa0 	.word	0x00011aa0

000061c0 <frame_dummy>:
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <frame_dummy+0x24>)
    61c2:	b510      	push	{r4, lr}
    61c4:	2b00      	cmp	r3, #0
    61c6:	d003      	beq.n	61d0 <frame_dummy+0x10>
    61c8:	4907      	ldr	r1, [pc, #28]	; (61e8 <frame_dummy+0x28>)
    61ca:	4808      	ldr	r0, [pc, #32]	; (61ec <frame_dummy+0x2c>)
    61cc:	e000      	b.n	61d0 <frame_dummy+0x10>
    61ce:	bf00      	nop
    61d0:	4807      	ldr	r0, [pc, #28]	; (61f0 <frame_dummy+0x30>)
    61d2:	6803      	ldr	r3, [r0, #0]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d100      	bne.n	61da <frame_dummy+0x1a>
    61d8:	bd10      	pop	{r4, pc}
    61da:	4b06      	ldr	r3, [pc, #24]	; (61f4 <frame_dummy+0x34>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fb      	beq.n	61d8 <frame_dummy+0x18>
    61e0:	4798      	blx	r3
    61e2:	e7f9      	b.n	61d8 <frame_dummy+0x18>
    61e4:	00000000 	.word	0x00000000
    61e8:	2000009c 	.word	0x2000009c
    61ec:	00011aa0 	.word	0x00011aa0
    61f0:	00011aa0 	.word	0x00011aa0
    61f4:	00000000 	.word	0x00000000

000061f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    61f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    61fa:	2000      	movs	r0, #0
    61fc:	4b08      	ldr	r3, [pc, #32]	; (6220 <delay_init+0x28>)
    61fe:	4798      	blx	r3
    6200:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    6202:	4c08      	ldr	r4, [pc, #32]	; (6224 <delay_init+0x2c>)
    6204:	21fa      	movs	r1, #250	; 0xfa
    6206:	0089      	lsls	r1, r1, #2
    6208:	47a0      	blx	r4
    620a:	4b07      	ldr	r3, [pc, #28]	; (6228 <delay_init+0x30>)
    620c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    620e:	4907      	ldr	r1, [pc, #28]	; (622c <delay_init+0x34>)
    6210:	0028      	movs	r0, r5
    6212:	47a0      	blx	r4
    6214:	4b06      	ldr	r3, [pc, #24]	; (6230 <delay_init+0x38>)
    6216:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    6218:	2205      	movs	r2, #5
    621a:	4b06      	ldr	r3, [pc, #24]	; (6234 <delay_init+0x3c>)
    621c:	601a      	str	r2, [r3, #0]
}
    621e:	bd70      	pop	{r4, r5, r6, pc}
    6220:	00007c75 	.word	0x00007c75
    6224:	0000e991 	.word	0x0000e991
    6228:	20000000 	.word	0x20000000
    622c:	000f4240 	.word	0x000f4240
    6230:	20000004 	.word	0x20000004
    6234:	e000e010 	.word	0xe000e010

00006238 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6238:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    623a:	4b08      	ldr	r3, [pc, #32]	; (625c <delay_cycles_us+0x24>)
    623c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    623e:	4a08      	ldr	r2, [pc, #32]	; (6260 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    6240:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6242:	2180      	movs	r1, #128	; 0x80
    6244:	0249      	lsls	r1, r1, #9
	while (n--) {
    6246:	3801      	subs	r0, #1
    6248:	d307      	bcc.n	625a <delay_cycles_us+0x22>
	if (n > 0) {
    624a:	2c00      	cmp	r4, #0
    624c:	d0fb      	beq.n	6246 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    624e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6250:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6252:	6813      	ldr	r3, [r2, #0]
    6254:	420b      	tst	r3, r1
    6256:	d0fc      	beq.n	6252 <delay_cycles_us+0x1a>
    6258:	e7f5      	b.n	6246 <delay_cycles_us+0xe>
	}
}
    625a:	bd30      	pop	{r4, r5, pc}
    625c:	20000004 	.word	0x20000004
    6260:	e000e010 	.word	0xe000e010

00006264 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    6264:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    6266:	4b08      	ldr	r3, [pc, #32]	; (6288 <delay_cycles_ms+0x24>)
    6268:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    626a:	4a08      	ldr	r2, [pc, #32]	; (628c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    626c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    626e:	2180      	movs	r1, #128	; 0x80
    6270:	0249      	lsls	r1, r1, #9
	while (n--) {
    6272:	3801      	subs	r0, #1
    6274:	d307      	bcc.n	6286 <delay_cycles_ms+0x22>
	if (n > 0) {
    6276:	2c00      	cmp	r4, #0
    6278:	d0fb      	beq.n	6272 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    627a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    627c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    627e:	6813      	ldr	r3, [r2, #0]
    6280:	420b      	tst	r3, r1
    6282:	d0fc      	beq.n	627e <delay_cycles_ms+0x1a>
    6284:	e7f5      	b.n	6272 <delay_cycles_ms+0xe>
	}
}
    6286:	bd30      	pop	{r4, r5, pc}
    6288:	20000000 	.word	0x20000000
    628c:	e000e010 	.word	0xe000e010

00006290 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6290:	4b0c      	ldr	r3, [pc, #48]	; (62c4 <cpu_irq_enter_critical+0x34>)
    6292:	681b      	ldr	r3, [r3, #0]
    6294:	2b00      	cmp	r3, #0
    6296:	d106      	bne.n	62a6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    6298:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    629c:	2b00      	cmp	r3, #0
    629e:	d007      	beq.n	62b0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    62a0:	2200      	movs	r2, #0
    62a2:	4b09      	ldr	r3, [pc, #36]	; (62c8 <cpu_irq_enter_critical+0x38>)
    62a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    62a6:	4a07      	ldr	r2, [pc, #28]	; (62c4 <cpu_irq_enter_critical+0x34>)
    62a8:	6813      	ldr	r3, [r2, #0]
    62aa:	3301      	adds	r3, #1
    62ac:	6013      	str	r3, [r2, #0]
}
    62ae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    62b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    62b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    62b6:	2200      	movs	r2, #0
    62b8:	4b04      	ldr	r3, [pc, #16]	; (62cc <cpu_irq_enter_critical+0x3c>)
    62ba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    62bc:	3201      	adds	r2, #1
    62be:	4b02      	ldr	r3, [pc, #8]	; (62c8 <cpu_irq_enter_critical+0x38>)
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	e7f0      	b.n	62a6 <cpu_irq_enter_critical+0x16>
    62c4:	200000b4 	.word	0x200000b4
    62c8:	200000b8 	.word	0x200000b8
    62cc:	20000008 	.word	0x20000008

000062d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    62d0:	4b08      	ldr	r3, [pc, #32]	; (62f4 <cpu_irq_leave_critical+0x24>)
    62d2:	681a      	ldr	r2, [r3, #0]
    62d4:	3a01      	subs	r2, #1
    62d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    62d8:	681b      	ldr	r3, [r3, #0]
    62da:	2b00      	cmp	r3, #0
    62dc:	d109      	bne.n	62f2 <cpu_irq_leave_critical+0x22>
    62de:	4b06      	ldr	r3, [pc, #24]	; (62f8 <cpu_irq_leave_critical+0x28>)
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	2b00      	cmp	r3, #0
    62e4:	d005      	beq.n	62f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    62e6:	2201      	movs	r2, #1
    62e8:	4b04      	ldr	r3, [pc, #16]	; (62fc <cpu_irq_leave_critical+0x2c>)
    62ea:	701a      	strb	r2, [r3, #0]
    62ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    62f0:	b662      	cpsie	i
	}
}
    62f2:	4770      	bx	lr
    62f4:	200000b4 	.word	0x200000b4
    62f8:	200000b8 	.word	0x200000b8
    62fc:	20000008 	.word	0x20000008

00006300 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	46ce      	mov	lr, r9
    6304:	4647      	mov	r7, r8
    6306:	b580      	push	{r7, lr}
    6308:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    630a:	ac01      	add	r4, sp, #4
    630c:	2601      	movs	r6, #1
    630e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6310:	2700      	movs	r7, #0
    6312:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6314:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6316:	0021      	movs	r1, r4
    6318:	200e      	movs	r0, #14
    631a:	4d23      	ldr	r5, [pc, #140]	; (63a8 <system_board_init+0xa8>)
    631c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    631e:	4b23      	ldr	r3, [pc, #140]	; (63ac <system_board_init+0xac>)
    6320:	4698      	mov	r8, r3
    6322:	2380      	movs	r3, #128	; 0x80
    6324:	01db      	lsls	r3, r3, #7
    6326:	4642      	mov	r2, r8
    6328:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    632a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    632c:	0021      	movs	r1, r4
    632e:	2012      	movs	r0, #18
    6330:	47a8      	blx	r5
    6332:	2380      	movs	r3, #128	; 0x80
    6334:	02db      	lsls	r3, r3, #11
    6336:	4699      	mov	r9, r3
    6338:	4643      	mov	r3, r8
    633a:	464a      	mov	r2, r9
    633c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    633e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6340:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6342:	0021      	movs	r1, r4
    6344:	2007      	movs	r0, #7
    6346:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    6348:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    634a:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    634c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    634e:	0021      	movs	r1, r4
    6350:	2052      	movs	r0, #82	; 0x52
    6352:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    6354:	0021      	movs	r1, r4
    6356:	203e      	movs	r0, #62	; 0x3e
    6358:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    635a:	0021      	movs	r1, r4
    635c:	203f      	movs	r0, #63	; 0x3f
    635e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    6360:	0021      	movs	r1, r4
    6362:	202f      	movs	r0, #47	; 0x2f
    6364:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    6366:	0021      	movs	r1, r4
    6368:	2014      	movs	r0, #20
    636a:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    636c:	4b10      	ldr	r3, [pc, #64]	; (63b0 <system_board_init+0xb0>)
    636e:	464a      	mov	r2, r9
    6370:	619a      	str	r2, [r3, #24]
    6372:	4b10      	ldr	r3, [pc, #64]	; (63b4 <system_board_init+0xb4>)
    6374:	2280      	movs	r2, #128	; 0x80
    6376:	05d2      	lsls	r2, r2, #23
    6378:	619a      	str	r2, [r3, #24]
    637a:	2280      	movs	r2, #128	; 0x80
    637c:	0612      	lsls	r2, r2, #24
    637e:	619a      	str	r2, [r3, #24]
    6380:	2680      	movs	r6, #128	; 0x80
    6382:	0236      	lsls	r6, r6, #8
    6384:	619e      	str	r6, [r3, #24]
    6386:	2380      	movs	r3, #128	; 0x80
    6388:	035b      	lsls	r3, r3, #13
    638a:	4642      	mov	r2, r8
    638c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    638e:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    6390:	0021      	movs	r1, r4
    6392:	2053      	movs	r0, #83	; 0x53
    6394:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    6396:	4b08      	ldr	r3, [pc, #32]	; (63b8 <system_board_init+0xb8>)
    6398:	69da      	ldr	r2, [r3, #28]
    639a:	4316      	orrs	r6, r2
    639c:	61de      	str	r6, [r3, #28]
// 	
// 	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
// 	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
// 	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
 #endif	
}
    639e:	b003      	add	sp, #12
    63a0:	bc0c      	pop	{r2, r3}
    63a2:	4690      	mov	r8, r2
    63a4:	4699      	mov	r9, r3
    63a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63a8:	000068c5 	.word	0x000068c5
    63ac:	40002800 	.word	0x40002800
    63b0:	40002900 	.word	0x40002900
    63b4:	40002880 	.word	0x40002880
    63b8:	40000400 	.word	0x40000400

000063bc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63bc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    63be:	2a00      	cmp	r2, #0
    63c0:	d001      	beq.n	63c6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    63c2:	0018      	movs	r0, r3
    63c4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    63c6:	008b      	lsls	r3, r1, #2
    63c8:	4a06      	ldr	r2, [pc, #24]	; (63e4 <extint_register_callback+0x28>)
    63ca:	589b      	ldr	r3, [r3, r2]
    63cc:	2b00      	cmp	r3, #0
    63ce:	d003      	beq.n	63d8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    63d0:	4283      	cmp	r3, r0
    63d2:	d005      	beq.n	63e0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    63d4:	231d      	movs	r3, #29
    63d6:	e7f4      	b.n	63c2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    63d8:	0089      	lsls	r1, r1, #2
    63da:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    63dc:	2300      	movs	r3, #0
    63de:	e7f0      	b.n	63c2 <extint_register_callback+0x6>
		return STATUS_OK;
    63e0:	2300      	movs	r3, #0
    63e2:	e7ee      	b.n	63c2 <extint_register_callback+0x6>
    63e4:	20001cac 	.word	0x20001cac

000063e8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63ea:	2900      	cmp	r1, #0
    63ec:	d001      	beq.n	63f2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    63ee:	0018      	movs	r0, r3
    63f0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    63f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    63f4:	281f      	cmp	r0, #31
    63f6:	d800      	bhi.n	63fa <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    63f8:	4a02      	ldr	r2, [pc, #8]	; (6404 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    63fa:	2301      	movs	r3, #1
    63fc:	4083      	lsls	r3, r0
    63fe:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    6400:	2300      	movs	r3, #0
    6402:	e7f4      	b.n	63ee <extint_chan_enable_callback+0x6>
    6404:	40002400 	.word	0x40002400

00006408 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6408:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    640a:	2900      	cmp	r1, #0
    640c:	d001      	beq.n	6412 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    640e:	0018      	movs	r0, r3
    6410:	4770      	bx	lr
		return NULL;
    6412:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    6414:	281f      	cmp	r0, #31
    6416:	d800      	bhi.n	641a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    6418:	4a02      	ldr	r2, [pc, #8]	; (6424 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    641a:	2301      	movs	r3, #1
    641c:	4083      	lsls	r3, r0
    641e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    6420:	2300      	movs	r3, #0
    6422:	e7f4      	b.n	640e <extint_chan_disable_callback+0x6>
    6424:	40002400 	.word	0x40002400

00006428 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6428:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    642a:	2200      	movs	r2, #0
    642c:	4b10      	ldr	r3, [pc, #64]	; (6470 <EIC_Handler+0x48>)
    642e:	701a      	strb	r2, [r3, #0]
    6430:	2300      	movs	r3, #0
    6432:	4910      	ldr	r1, [pc, #64]	; (6474 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6434:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6436:	4e10      	ldr	r6, [pc, #64]	; (6478 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6438:	4c0d      	ldr	r4, [pc, #52]	; (6470 <EIC_Handler+0x48>)
    643a:	e00a      	b.n	6452 <EIC_Handler+0x2a>
		return eics[eic_index];
    643c:	490d      	ldr	r1, [pc, #52]	; (6474 <EIC_Handler+0x4c>)
    643e:	e008      	b.n	6452 <EIC_Handler+0x2a>
    6440:	7823      	ldrb	r3, [r4, #0]
    6442:	3301      	adds	r3, #1
    6444:	b2db      	uxtb	r3, r3
    6446:	7023      	strb	r3, [r4, #0]
    6448:	2b0f      	cmp	r3, #15
    644a:	d810      	bhi.n	646e <EIC_Handler+0x46>
		return NULL;
    644c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    644e:	2b1f      	cmp	r3, #31
    6450:	d9f4      	bls.n	643c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6452:	0028      	movs	r0, r5
    6454:	4018      	ands	r0, r3
    6456:	2201      	movs	r2, #1
    6458:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    645a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    645c:	4210      	tst	r0, r2
    645e:	d0ef      	beq.n	6440 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6460:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6462:	009b      	lsls	r3, r3, #2
    6464:	599b      	ldr	r3, [r3, r6]
    6466:	2b00      	cmp	r3, #0
    6468:	d0ea      	beq.n	6440 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    646a:	4798      	blx	r3
    646c:	e7e8      	b.n	6440 <EIC_Handler+0x18>
			}
		}
	}
}
    646e:	bd70      	pop	{r4, r5, r6, pc}
    6470:	20001ca8 	.word	0x20001ca8
    6474:	40002400 	.word	0x40002400
    6478:	20001cac 	.word	0x20001cac

0000647c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    647c:	4a06      	ldr	r2, [pc, #24]	; (6498 <_extint_enable+0x1c>)
    647e:	7813      	ldrb	r3, [r2, #0]
    6480:	2102      	movs	r1, #2
    6482:	430b      	orrs	r3, r1
    6484:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6486:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    6488:	6853      	ldr	r3, [r2, #4]
    648a:	4219      	tst	r1, r3
    648c:	d1fc      	bne.n	6488 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    648e:	6853      	ldr	r3, [r2, #4]
    6490:	4218      	tst	r0, r3
    6492:	d1f9      	bne.n	6488 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6494:	4770      	bx	lr
    6496:	46c0      	nop			; (mov r8, r8)
    6498:	40002400 	.word	0x40002400

0000649c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    649c:	4a06      	ldr	r2, [pc, #24]	; (64b8 <_extint_disable+0x1c>)
    649e:	7813      	ldrb	r3, [r2, #0]
    64a0:	2102      	movs	r1, #2
    64a2:	438b      	bics	r3, r1
    64a4:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64a6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    64a8:	6853      	ldr	r3, [r2, #4]
    64aa:	4219      	tst	r1, r3
    64ac:	d1fc      	bne.n	64a8 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64ae:	6853      	ldr	r3, [r2, #4]
    64b0:	4218      	tst	r0, r3
    64b2:	d1f9      	bne.n	64a8 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    64b4:	4770      	bx	lr
    64b6:	46c0      	nop			; (mov r8, r8)
    64b8:	40002400 	.word	0x40002400

000064bc <_system_extint_init>:
{
    64bc:	b500      	push	{lr}
    64be:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    64c0:	4a17      	ldr	r2, [pc, #92]	; (6520 <_system_extint_init+0x64>)
    64c2:	6951      	ldr	r1, [r2, #20]
    64c4:	2380      	movs	r3, #128	; 0x80
    64c6:	009b      	lsls	r3, r3, #2
    64c8:	430b      	orrs	r3, r1
    64ca:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    64cc:	a901      	add	r1, sp, #4
    64ce:	2300      	movs	r3, #0
    64d0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    64d2:	2003      	movs	r0, #3
    64d4:	4b13      	ldr	r3, [pc, #76]	; (6524 <_system_extint_init+0x68>)
    64d6:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    64d8:	2003      	movs	r0, #3
    64da:	4b13      	ldr	r3, [pc, #76]	; (6528 <_system_extint_init+0x6c>)
    64dc:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    64de:	4a13      	ldr	r2, [pc, #76]	; (652c <_system_extint_init+0x70>)
    64e0:	7813      	ldrb	r3, [r2, #0]
    64e2:	2101      	movs	r1, #1
    64e4:	430b      	orrs	r3, r1
    64e6:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    64e8:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64ea:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    64ec:	6853      	ldr	r3, [r2, #4]
    64ee:	4219      	tst	r1, r3
    64f0:	d1fc      	bne.n	64ec <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64f2:	6853      	ldr	r3, [r2, #4]
    64f4:	4218      	tst	r0, r3
    64f6:	d1f9      	bne.n	64ec <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    64f8:	4a0c      	ldr	r2, [pc, #48]	; (652c <_system_extint_init+0x70>)
    64fa:	7813      	ldrb	r3, [r2, #0]
    64fc:	2110      	movs	r1, #16
    64fe:	438b      	bics	r3, r1
    6500:	7013      	strb	r3, [r2, #0]
    6502:	4b0b      	ldr	r3, [pc, #44]	; (6530 <_system_extint_init+0x74>)
    6504:	0019      	movs	r1, r3
    6506:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6508:	2200      	movs	r2, #0
    650a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    650c:	428b      	cmp	r3, r1
    650e:	d1fc      	bne.n	650a <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6510:	2208      	movs	r2, #8
    6512:	4b08      	ldr	r3, [pc, #32]	; (6534 <_system_extint_init+0x78>)
    6514:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6516:	4b08      	ldr	r3, [pc, #32]	; (6538 <_system_extint_init+0x7c>)
    6518:	4798      	blx	r3
}
    651a:	b003      	add	sp, #12
    651c:	bd00      	pop	{pc}
    651e:	46c0      	nop			; (mov r8, r8)
    6520:	40000400 	.word	0x40000400
    6524:	00007d51 	.word	0x00007d51
    6528:	00007ce1 	.word	0x00007ce1
    652c:	40002400 	.word	0x40002400
    6530:	20001cac 	.word	0x20001cac
    6534:	e000e100 	.word	0xe000e100
    6538:	0000647d 	.word	0x0000647d

0000653c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    653c:	2300      	movs	r3, #0
    653e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    6540:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6542:	2201      	movs	r2, #1
    6544:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    6546:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6548:	3201      	adds	r2, #1
    654a:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    654c:	7243      	strb	r3, [r0, #9]
}
    654e:	4770      	bx	lr

00006550 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6550:	b5f0      	push	{r4, r5, r6, r7, lr}
    6552:	b083      	sub	sp, #12
    6554:	0005      	movs	r5, r0
    6556:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    6558:	4b1c      	ldr	r3, [pc, #112]	; (65cc <extint_chan_set_config+0x7c>)
    655a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    655c:	a901      	add	r1, sp, #4
    655e:	2300      	movs	r3, #0
    6560:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    6562:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    6564:	7923      	ldrb	r3, [r4, #4]
    6566:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6568:	7a23      	ldrb	r3, [r4, #8]
    656a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    656c:	7820      	ldrb	r0, [r4, #0]
    656e:	4b18      	ldr	r3, [pc, #96]	; (65d0 <extint_chan_set_config+0x80>)
    6570:	4798      	blx	r3
		return NULL;
    6572:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6574:	2d1f      	cmp	r5, #31
    6576:	d800      	bhi.n	657a <extint_chan_set_config+0x2a>
		return eics[eic_index];
    6578:	4916      	ldr	r1, [pc, #88]	; (65d4 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    657a:	2207      	movs	r2, #7
    657c:	402a      	ands	r2, r5
    657e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6580:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6582:	7aa3      	ldrb	r3, [r4, #10]
    6584:	2b00      	cmp	r3, #0
    6586:	d001      	beq.n	658c <extint_chan_set_config+0x3c>
    6588:	2308      	movs	r3, #8
    658a:	431f      	orrs	r7, r3
    658c:	08eb      	lsrs	r3, r5, #3
    658e:	009b      	lsls	r3, r3, #2
    6590:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6592:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6594:	260f      	movs	r6, #15
    6596:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6598:	43b0      	bics	r0, r6
			(new_config << config_pos);
    659a:	4097      	lsls	r7, r2
    659c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    659e:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    65a0:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    65a2:	7a63      	ldrb	r3, [r4, #9]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d10b      	bne.n	65c0 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    65a8:	698a      	ldr	r2, [r1, #24]
    65aa:	2301      	movs	r3, #1
    65ac:	40ab      	lsls	r3, r5
    65ae:	43db      	mvns	r3, r3
    65b0:	041b      	lsls	r3, r3, #16
    65b2:	0c1b      	lsrs	r3, r3, #16
    65b4:	4013      	ands	r3, r2
    65b6:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    65b8:	4b07      	ldr	r3, [pc, #28]	; (65d8 <extint_chan_set_config+0x88>)
    65ba:	4798      	blx	r3
}
    65bc:	b003      	add	sp, #12
    65be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    65c0:	698a      	ldr	r2, [r1, #24]
    65c2:	2301      	movs	r3, #1
    65c4:	40ab      	lsls	r3, r5
    65c6:	4313      	orrs	r3, r2
    65c8:	618b      	str	r3, [r1, #24]
    65ca:	e7f5      	b.n	65b8 <extint_chan_set_config+0x68>
    65cc:	0000649d 	.word	0x0000649d
    65d0:	00007e4d 	.word	0x00007e4d
    65d4:	40002400 	.word	0x40002400
    65d8:	0000647d 	.word	0x0000647d

000065dc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    65dc:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    65de:	4a1e      	ldr	r2, [pc, #120]	; (6658 <nvm_set_config+0x7c>)
    65e0:	6993      	ldr	r3, [r2, #24]
    65e2:	2104      	movs	r1, #4
    65e4:	430b      	orrs	r3, r1
    65e6:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    65e8:	4b1c      	ldr	r3, [pc, #112]	; (665c <nvm_set_config+0x80>)
    65ea:	2220      	movs	r2, #32
    65ec:	32ff      	adds	r2, #255	; 0xff
    65ee:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    65f0:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    65f2:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    65f4:	07d2      	lsls	r2, r2, #31
    65f6:	d401      	bmi.n	65fc <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    65f8:	0018      	movs	r0, r3
    65fa:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    65fc:	7803      	ldrb	r3, [r0, #0]
    65fe:	021b      	lsls	r3, r3, #8
    6600:	22c0      	movs	r2, #192	; 0xc0
    6602:	0092      	lsls	r2, r2, #2
    6604:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6606:	7841      	ldrb	r1, [r0, #1]
    6608:	01c9      	lsls	r1, r1, #7
    660a:	22ff      	movs	r2, #255	; 0xff
    660c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    660e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6610:	7881      	ldrb	r1, [r0, #2]
    6612:	0049      	lsls	r1, r1, #1
    6614:	221e      	movs	r2, #30
    6616:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6618:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    661a:	78c2      	ldrb	r2, [r0, #3]
    661c:	0492      	lsls	r2, r2, #18
    661e:	2180      	movs	r1, #128	; 0x80
    6620:	02c9      	lsls	r1, r1, #11
    6622:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6624:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    6626:	7902      	ldrb	r2, [r0, #4]
    6628:	0412      	lsls	r2, r2, #16
    662a:	21c0      	movs	r1, #192	; 0xc0
    662c:	0289      	lsls	r1, r1, #10
    662e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6630:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    6632:	4a0a      	ldr	r2, [pc, #40]	; (665c <nvm_set_config+0x80>)
    6634:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    6636:	6893      	ldr	r3, [r2, #8]
    6638:	035b      	lsls	r3, r3, #13
    663a:	0f5b      	lsrs	r3, r3, #29
    663c:	4908      	ldr	r1, [pc, #32]	; (6660 <nvm_set_config+0x84>)
    663e:	2408      	movs	r4, #8
    6640:	409c      	lsls	r4, r3
    6642:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6644:	6893      	ldr	r3, [r2, #8]
    6646:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    6648:	7843      	ldrb	r3, [r0, #1]
    664a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    664c:	8b13      	ldrh	r3, [r2, #24]
    664e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    6650:	0fdb      	lsrs	r3, r3, #31
    6652:	011b      	lsls	r3, r3, #4
    6654:	e7d0      	b.n	65f8 <nvm_set_config+0x1c>
    6656:	46c0      	nop			; (mov r8, r8)
    6658:	40000400 	.word	0x40000400
    665c:	41004000 	.word	0x41004000
    6660:	200000bc 	.word	0x200000bc

00006664 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    6664:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6666:	4a30      	ldr	r2, [pc, #192]	; (6728 <nvm_execute_command+0xc4>)
    6668:	8814      	ldrh	r4, [r2, #0]
    666a:	8853      	ldrh	r3, [r2, #2]
    666c:	4363      	muls	r3, r4
    666e:	428b      	cmp	r3, r1
    6670:	d20b      	bcs.n	668a <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6672:	2280      	movs	r2, #128	; 0x80
    6674:	0192      	lsls	r2, r2, #6
    6676:	4b2d      	ldr	r3, [pc, #180]	; (672c <nvm_execute_command+0xc8>)
    6678:	18cb      	adds	r3, r1, r3
    667a:	4293      	cmp	r3, r2
    667c:	d905      	bls.n	668a <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    667e:	4c2c      	ldr	r4, [pc, #176]	; (6730 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6680:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6682:	4a2c      	ldr	r2, [pc, #176]	; (6734 <nvm_execute_command+0xd0>)
    6684:	188a      	adds	r2, r1, r2
    6686:	42a2      	cmp	r2, r4
    6688:	d80e      	bhi.n	66a8 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    668a:	4b2b      	ldr	r3, [pc, #172]	; (6738 <nvm_execute_command+0xd4>)
    668c:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    668e:	2280      	movs	r2, #128	; 0x80
    6690:	02d2      	lsls	r2, r2, #11
    6692:	4322      	orrs	r2, r4
    6694:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6696:	2220      	movs	r2, #32
    6698:	32ff      	adds	r2, #255	; 0xff
    669a:	831a      	strh	r2, [r3, #24]
    669c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    669e:	07db      	lsls	r3, r3, #31
    66a0:	d404      	bmi.n	66ac <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    66a2:	4b25      	ldr	r3, [pc, #148]	; (6738 <nvm_execute_command+0xd4>)
    66a4:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    66a6:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    66a8:	0018      	movs	r0, r3
    66aa:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    66ac:	2845      	cmp	r0, #69	; 0x45
    66ae:	d829      	bhi.n	6704 <nvm_execute_command+0xa0>
    66b0:	0083      	lsls	r3, r0, #2
    66b2:	4a22      	ldr	r2, [pc, #136]	; (673c <nvm_execute_command+0xd8>)
    66b4:	58d3      	ldr	r3, [r2, r3]
    66b6:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    66b8:	4b1f      	ldr	r3, [pc, #124]	; (6738 <nvm_execute_command+0xd4>)
    66ba:	8b1b      	ldrh	r3, [r3, #24]
    66bc:	05db      	lsls	r3, r3, #23
    66be:	d503      	bpl.n	66c8 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    66c0:	4b1d      	ldr	r3, [pc, #116]	; (6738 <nvm_execute_command+0xd4>)
    66c2:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    66c4:	2310      	movs	r3, #16
    66c6:	e7ef      	b.n	66a8 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    66c8:	0889      	lsrs	r1, r1, #2
    66ca:	0049      	lsls	r1, r1, #1
    66cc:	4b1a      	ldr	r3, [pc, #104]	; (6738 <nvm_execute_command+0xd4>)
    66ce:	61d9      	str	r1, [r3, #28]
			break;
    66d0:	e003      	b.n	66da <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    66d2:	0889      	lsrs	r1, r1, #2
    66d4:	0049      	lsls	r1, r1, #1
    66d6:	4b18      	ldr	r3, [pc, #96]	; (6738 <nvm_execute_command+0xd4>)
    66d8:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    66da:	23fd      	movs	r3, #253	; 0xfd
    66dc:	0005      	movs	r5, r0
    66de:	3d1a      	subs	r5, #26
    66e0:	401d      	ands	r5, r3
    66e2:	d013      	beq.n	670c <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    66e4:	23a5      	movs	r3, #165	; 0xa5
    66e6:	021b      	lsls	r3, r3, #8
    66e8:	4318      	orrs	r0, r3
    66ea:	4b13      	ldr	r3, [pc, #76]	; (6738 <nvm_execute_command+0xd4>)
    66ec:	8018      	strh	r0, [r3, #0]
    66ee:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    66f0:	2201      	movs	r2, #1
    66f2:	7d0b      	ldrb	r3, [r1, #20]
    66f4:	4213      	tst	r3, r2
    66f6:	d0fc      	beq.n	66f2 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    66f8:	2d00      	cmp	r5, #0
    66fa:	d00f      	beq.n	671c <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    66fc:	4b0e      	ldr	r3, [pc, #56]	; (6738 <nvm_execute_command+0xd4>)
    66fe:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    6700:	2300      	movs	r3, #0
    6702:	e7d1      	b.n	66a8 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    6704:	4b0c      	ldr	r3, [pc, #48]	; (6738 <nvm_execute_command+0xd4>)
    6706:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    6708:	2317      	movs	r3, #23
    670a:	e7cd      	b.n	66a8 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    670c:	4b0a      	ldr	r3, [pc, #40]	; (6738 <nvm_execute_command+0xd4>)
    670e:	6859      	ldr	r1, [r3, #4]
    6710:	2280      	movs	r2, #128	; 0x80
    6712:	02d2      	lsls	r2, r2, #11
    6714:	430a      	orrs	r2, r1
    6716:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    6718:	685b      	ldr	r3, [r3, #4]
    671a:	e7e3      	b.n	66e4 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    671c:	4a06      	ldr	r2, [pc, #24]	; (6738 <nvm_execute_command+0xd4>)
    671e:	6853      	ldr	r3, [r2, #4]
    6720:	4907      	ldr	r1, [pc, #28]	; (6740 <nvm_execute_command+0xdc>)
    6722:	400b      	ands	r3, r1
    6724:	6053      	str	r3, [r2, #4]
    6726:	e7e9      	b.n	66fc <nvm_execute_command+0x98>
    6728:	200000bc 	.word	0x200000bc
    672c:	ff7fc000 	.word	0xff7fc000
    6730:	00001fff 	.word	0x00001fff
    6734:	ffc00000 	.word	0xffc00000
    6738:	41004000 	.word	0x41004000
    673c:	00010bcc 	.word	0x00010bcc
    6740:	fffbffff 	.word	0xfffbffff

00006744 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6746:	4b2f      	ldr	r3, [pc, #188]	; (6804 <nvm_write_buffer+0xc0>)
    6748:	881c      	ldrh	r4, [r3, #0]
    674a:	885b      	ldrh	r3, [r3, #2]
    674c:	4363      	muls	r3, r4
	if (destination_address >
    674e:	4283      	cmp	r3, r0
    6750:	d207      	bcs.n	6762 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6752:	4e2d      	ldr	r6, [pc, #180]	; (6808 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6754:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6756:	4b2d      	ldr	r3, [pc, #180]	; (680c <nvm_write_buffer+0xc8>)
    6758:	18c3      	adds	r3, r0, r3
    675a:	42b3      	cmp	r3, r6
    675c:	d806      	bhi.n	676c <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    675e:	2601      	movs	r6, #1
    6760:	e000      	b.n	6764 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    6762:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6764:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    6766:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6768:	4218      	tst	r0, r3
    676a:	d001      	beq.n	6770 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    676c:	0028      	movs	r0, r5
    676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6770:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    6772:	4294      	cmp	r4, r2
    6774:	d3fa      	bcc.n	676c <nvm_write_buffer+0x28>
    6776:	4b26      	ldr	r3, [pc, #152]	; (6810 <nvm_write_buffer+0xcc>)
    6778:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    677a:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    677c:	07db      	lsls	r3, r3, #31
    677e:	d5f5      	bpl.n	676c <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    6780:	4c24      	ldr	r4, [pc, #144]	; (6814 <nvm_write_buffer+0xd0>)
    6782:	4b23      	ldr	r3, [pc, #140]	; (6810 <nvm_write_buffer+0xcc>)
    6784:	801c      	strh	r4, [r3, #0]
    6786:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    6788:	2401      	movs	r4, #1
    678a:	7d2b      	ldrb	r3, [r5, #20]
    678c:	4223      	tst	r3, r4
    678e:	d0fc      	beq.n	678a <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6790:	2420      	movs	r4, #32
    6792:	34ff      	adds	r4, #255	; 0xff
    6794:	4b1e      	ldr	r3, [pc, #120]	; (6810 <nvm_write_buffer+0xcc>)
    6796:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    6798:	2a00      	cmp	r2, #0
    679a:	d02c      	beq.n	67f6 <nvm_write_buffer+0xb2>
    679c:	2301      	movs	r3, #1
    679e:	0005      	movs	r5, r0
    67a0:	439d      	bics	r5, r3
    67a2:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    67a4:	1e54      	subs	r4, r2, #1
    67a6:	46a4      	mov	ip, r4
    67a8:	e009      	b.n	67be <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    67aa:	18cf      	adds	r7, r1, r3
    67ac:	787f      	ldrb	r7, [r7, #1]
    67ae:	023f      	lsls	r7, r7, #8
    67b0:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    67b2:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    67b4:	3302      	adds	r3, #2
    67b6:	b29b      	uxth	r3, r3
    67b8:	3502      	adds	r5, #2
    67ba:	429a      	cmp	r2, r3
    67bc:	d904      	bls.n	67c8 <nvm_write_buffer+0x84>
		data = buffer[i];
    67be:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    67c0:	4563      	cmp	r3, ip
    67c2:	dbf2      	blt.n	67aa <nvm_write_buffer+0x66>
		data = buffer[i];
    67c4:	b2a4      	uxth	r4, r4
    67c6:	e7f4      	b.n	67b2 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67c8:	4b0e      	ldr	r3, [pc, #56]	; (6804 <nvm_write_buffer+0xc0>)
    67ca:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    67cc:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67ce:	2b00      	cmp	r3, #0
    67d0:	d1cc      	bne.n	676c <nvm_write_buffer+0x28>
    67d2:	2a3f      	cmp	r2, #63	; 0x3f
    67d4:	d8ca      	bhi.n	676c <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    67d6:	2e00      	cmp	r6, #0
    67d8:	d106      	bne.n	67e8 <nvm_write_buffer+0xa4>
    67da:	2200      	movs	r2, #0
    67dc:	0001      	movs	r1, r0
    67de:	2004      	movs	r0, #4
    67e0:	4b0d      	ldr	r3, [pc, #52]	; (6818 <nvm_write_buffer+0xd4>)
    67e2:	4798      	blx	r3
    67e4:	0005      	movs	r5, r0
    67e6:	e7c1      	b.n	676c <nvm_write_buffer+0x28>
    67e8:	2200      	movs	r2, #0
    67ea:	0001      	movs	r1, r0
    67ec:	201c      	movs	r0, #28
    67ee:	4b0a      	ldr	r3, [pc, #40]	; (6818 <nvm_write_buffer+0xd4>)
    67f0:	4798      	blx	r3
    67f2:	0005      	movs	r5, r0
    67f4:	e7ba      	b.n	676c <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67f6:	4b03      	ldr	r3, [pc, #12]	; (6804 <nvm_write_buffer+0xc0>)
    67f8:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    67fa:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67fc:	2b00      	cmp	r3, #0
    67fe:	d0ea      	beq.n	67d6 <nvm_write_buffer+0x92>
    6800:	e7b4      	b.n	676c <nvm_write_buffer+0x28>
    6802:	46c0      	nop			; (mov r8, r8)
    6804:	200000bc 	.word	0x200000bc
    6808:	00001fff 	.word	0x00001fff
    680c:	ffc00000 	.word	0xffc00000
    6810:	41004000 	.word	0x41004000
    6814:	ffffa544 	.word	0xffffa544
    6818:	00006665 	.word	0x00006665

0000681c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    681c:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    681e:	4a22      	ldr	r2, [pc, #136]	; (68a8 <nvm_erase_row+0x8c>)
    6820:	8813      	ldrh	r3, [r2, #0]
    6822:	8852      	ldrh	r2, [r2, #2]
    6824:	435a      	muls	r2, r3
	if (row_address >
    6826:	4282      	cmp	r2, r0
    6828:	d207      	bcs.n	683a <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    682a:	4c20      	ldr	r4, [pc, #128]	; (68ac <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    682c:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    682e:	4920      	ldr	r1, [pc, #128]	; (68b0 <nvm_erase_row+0x94>)
    6830:	1841      	adds	r1, r0, r1
    6832:	42a1      	cmp	r1, r4
    6834:	d807      	bhi.n	6846 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    6836:	2401      	movs	r4, #1
    6838:	e000      	b.n	683c <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    683a:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    683c:	009b      	lsls	r3, r3, #2
    683e:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    6840:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6842:	4218      	tst	r0, r3
    6844:	d001      	beq.n	684a <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    6846:	0010      	movs	r0, r2
    6848:	bd10      	pop	{r4, pc}
    684a:	4b1a      	ldr	r3, [pc, #104]	; (68b4 <nvm_erase_row+0x98>)
    684c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    684e:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    6850:	07db      	lsls	r3, r3, #31
    6852:	d5f8      	bpl.n	6846 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6854:	4b17      	ldr	r3, [pc, #92]	; (68b4 <nvm_erase_row+0x98>)
    6856:	2220      	movs	r2, #32
    6858:	32ff      	adds	r2, #255	; 0xff
    685a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    685c:	0880      	lsrs	r0, r0, #2
    685e:	0040      	lsls	r0, r0, #1
    6860:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    6862:	2c00      	cmp	r4, #0
    6864:	d01b      	beq.n	689e <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    6866:	6859      	ldr	r1, [r3, #4]
    6868:	2280      	movs	r2, #128	; 0x80
    686a:	02d2      	lsls	r2, r2, #11
    686c:	430a      	orrs	r2, r1
    686e:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    6870:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6872:	4a11      	ldr	r2, [pc, #68]	; (68b8 <nvm_erase_row+0x9c>)
    6874:	801a      	strh	r2, [r3, #0]
    6876:	490f      	ldr	r1, [pc, #60]	; (68b4 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    6878:	2201      	movs	r2, #1
    687a:	7d0b      	ldrb	r3, [r1, #20]
    687c:	4213      	tst	r3, r2
    687e:	d0fc      	beq.n	687a <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    6880:	2c00      	cmp	r4, #0
    6882:	d004      	beq.n	688e <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    6884:	4a0b      	ldr	r2, [pc, #44]	; (68b4 <nvm_erase_row+0x98>)
    6886:	6853      	ldr	r3, [r2, #4]
    6888:	490c      	ldr	r1, [pc, #48]	; (68bc <nvm_erase_row+0xa0>)
    688a:	400b      	ands	r3, r1
    688c:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    688e:	4b09      	ldr	r3, [pc, #36]	; (68b4 <nvm_erase_row+0x98>)
    6890:	8b1a      	ldrh	r2, [r3, #24]
    6892:	201c      	movs	r0, #28
    6894:	4002      	ands	r2, r0
	return STATUS_OK;
    6896:	1e50      	subs	r0, r2, #1
    6898:	4182      	sbcs	r2, r0
    689a:	0092      	lsls	r2, r2, #2
    689c:	e7d3      	b.n	6846 <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    689e:	4a08      	ldr	r2, [pc, #32]	; (68c0 <nvm_erase_row+0xa4>)
    68a0:	4b04      	ldr	r3, [pc, #16]	; (68b4 <nvm_erase_row+0x98>)
    68a2:	801a      	strh	r2, [r3, #0]
    68a4:	e7e7      	b.n	6876 <nvm_erase_row+0x5a>
    68a6:	46c0      	nop			; (mov r8, r8)
    68a8:	200000bc 	.word	0x200000bc
    68ac:	00001fff 	.word	0x00001fff
    68b0:	ffc00000 	.word	0xffc00000
    68b4:	41004000 	.word	0x41004000
    68b8:	ffffa51a 	.word	0xffffa51a
    68bc:	fffbffff 	.word	0xfffbffff
    68c0:	ffffa502 	.word	0xffffa502

000068c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    68c4:	b500      	push	{lr}
    68c6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    68c8:	ab01      	add	r3, sp, #4
    68ca:	2280      	movs	r2, #128	; 0x80
    68cc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    68ce:	780a      	ldrb	r2, [r1, #0]
    68d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    68d2:	784a      	ldrb	r2, [r1, #1]
    68d4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    68d6:	788a      	ldrb	r2, [r1, #2]
    68d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    68da:	0019      	movs	r1, r3
    68dc:	4b01      	ldr	r3, [pc, #4]	; (68e4 <port_pin_set_config+0x20>)
    68de:	4798      	blx	r3
}
    68e0:	b003      	add	sp, #12
    68e2:	bd00      	pop	{pc}
    68e4:	00007e4d 	.word	0x00007e4d

000068e8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    68e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68ea:	46de      	mov	lr, fp
    68ec:	4657      	mov	r7, sl
    68ee:	464e      	mov	r6, r9
    68f0:	4645      	mov	r5, r8
    68f2:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    68f4:	4b2b      	ldr	r3, [pc, #172]	; (69a4 <RTC_Handler+0xbc>)
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    68fa:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    68fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    68fe:	4652      	mov	r2, sl
    6900:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    6902:	401a      	ands	r2, r3
    6904:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    6906:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    6908:	8973      	ldrh	r3, [r6, #10]
    690a:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    690c:	b21a      	sxth	r2, r3
    690e:	2a00      	cmp	r2, #0
    6910:	db08      	blt.n	6924 <RTC_Handler+0x3c>
    6912:	27ff      	movs	r7, #255	; 0xff
    6914:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    6916:	d02a      	beq.n	696e <RTC_Handler+0x86>
    6918:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    691a:	2301      	movs	r3, #1
    691c:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    691e:	33fe      	adds	r3, #254	; 0xfe
    6920:	469b      	mov	fp, r3
    6922:	e014      	b.n	694e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    6924:	4643      	mov	r3, r8
    6926:	055b      	lsls	r3, r3, #21
    6928:	d407      	bmi.n	693a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    692a:	4b1f      	ldr	r3, [pc, #124]	; (69a8 <RTC_Handler+0xc0>)
    692c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    692e:	bc3c      	pop	{r2, r3, r4, r5}
    6930:	4690      	mov	r8, r2
    6932:	4699      	mov	r9, r3
    6934:	46a2      	mov	sl, r4
    6936:	46ab      	mov	fp, r5
    6938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    693a:	4653      	mov	r3, sl
    693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    693e:	4798      	blx	r3
    6940:	e7f3      	b.n	692a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6942:	465b      	mov	r3, fp
    6944:	401d      	ands	r5, r3
    6946:	81b5      	strh	r5, [r6, #12]
    6948:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    694a:	2c08      	cmp	r4, #8
    694c:	d0ef      	beq.n	692e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    694e:	0023      	movs	r3, r4
    6950:	464d      	mov	r5, r9
    6952:	40a5      	lsls	r5, r4
    6954:	422f      	tst	r7, r5
    6956:	d0f4      	beq.n	6942 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    6958:	4642      	mov	r2, r8
    695a:	4122      	asrs	r2, r4
    695c:	4649      	mov	r1, r9
    695e:	4211      	tst	r1, r2
    6960:	d0ef      	beq.n	6942 <RTC_Handler+0x5a>
				module->callbacks[i]();
    6962:	3302      	adds	r3, #2
    6964:	009b      	lsls	r3, r3, #2
    6966:	4652      	mov	r2, sl
    6968:	589b      	ldr	r3, [r3, r2]
    696a:	4798      	blx	r3
    696c:	e7e9      	b.n	6942 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    696e:	05da      	lsls	r2, r3, #23
    6970:	d50a      	bpl.n	6988 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    6972:	4643      	mov	r3, r8
    6974:	05db      	lsls	r3, r3, #23
    6976:	d403      	bmi.n	6980 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    6978:	2380      	movs	r3, #128	; 0x80
    697a:	005b      	lsls	r3, r3, #1
    697c:	81b3      	strh	r3, [r6, #12]
    697e:	e7d6      	b.n	692e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    6980:	4653      	mov	r3, sl
    6982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6984:	4798      	blx	r3
    6986:	e7f7      	b.n	6978 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    6988:	059b      	lsls	r3, r3, #22
    698a:	d5d0      	bpl.n	692e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    698c:	4643      	mov	r3, r8
    698e:	059b      	lsls	r3, r3, #22
    6990:	d403      	bmi.n	699a <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    6992:	2380      	movs	r3, #128	; 0x80
    6994:	009b      	lsls	r3, r3, #2
    6996:	81b3      	strh	r3, [r6, #12]
}
    6998:	e7c9      	b.n	692e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    699a:	4653      	mov	r3, sl
    699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    699e:	4798      	blx	r3
    69a0:	e7f7      	b.n	6992 <RTC_Handler+0xaa>
    69a2:	46c0      	nop			; (mov r8, r8)
    69a4:	20001cec 	.word	0x20001cec
    69a8:	ffff8000 	.word	0xffff8000

000069ac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    69ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ae:	46de      	mov	lr, fp
    69b0:	4657      	mov	r7, sl
    69b2:	464e      	mov	r6, r9
    69b4:	4645      	mov	r5, r8
    69b6:	b5e0      	push	{r5, r6, r7, lr}
    69b8:	b087      	sub	sp, #28
    69ba:	4680      	mov	r8, r0
    69bc:	9104      	str	r1, [sp, #16]
    69be:	0016      	movs	r6, r2
    69c0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    69c2:	2200      	movs	r2, #0
    69c4:	2300      	movs	r3, #0
    69c6:	2100      	movs	r1, #0
    69c8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    69ca:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    69cc:	2001      	movs	r0, #1
    69ce:	0021      	movs	r1, r4
    69d0:	9600      	str	r6, [sp, #0]
    69d2:	9701      	str	r7, [sp, #4]
    69d4:	465c      	mov	r4, fp
    69d6:	9403      	str	r4, [sp, #12]
    69d8:	4644      	mov	r4, r8
    69da:	9405      	str	r4, [sp, #20]
    69dc:	e013      	b.n	6a06 <long_division+0x5a>
    69de:	2420      	movs	r4, #32
    69e0:	1a64      	subs	r4, r4, r1
    69e2:	0005      	movs	r5, r0
    69e4:	40e5      	lsrs	r5, r4
    69e6:	46a8      	mov	r8, r5
    69e8:	e014      	b.n	6a14 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    69ea:	9c00      	ldr	r4, [sp, #0]
    69ec:	9d01      	ldr	r5, [sp, #4]
    69ee:	1b12      	subs	r2, r2, r4
    69f0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    69f2:	465c      	mov	r4, fp
    69f4:	464d      	mov	r5, r9
    69f6:	432c      	orrs	r4, r5
    69f8:	46a3      	mov	fp, r4
    69fa:	9c03      	ldr	r4, [sp, #12]
    69fc:	4645      	mov	r5, r8
    69fe:	432c      	orrs	r4, r5
    6a00:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    6a02:	3901      	subs	r1, #1
    6a04:	d325      	bcc.n	6a52 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    6a06:	2420      	movs	r4, #32
    6a08:	4264      	negs	r4, r4
    6a0a:	190c      	adds	r4, r1, r4
    6a0c:	d4e7      	bmi.n	69de <long_division+0x32>
    6a0e:	0005      	movs	r5, r0
    6a10:	40a5      	lsls	r5, r4
    6a12:	46a8      	mov	r8, r5
    6a14:	0004      	movs	r4, r0
    6a16:	408c      	lsls	r4, r1
    6a18:	46a1      	mov	r9, r4
		r = r << 1;
    6a1a:	1892      	adds	r2, r2, r2
    6a1c:	415b      	adcs	r3, r3
    6a1e:	0014      	movs	r4, r2
    6a20:	001d      	movs	r5, r3
		if (n & bit_shift) {
    6a22:	9e05      	ldr	r6, [sp, #20]
    6a24:	464f      	mov	r7, r9
    6a26:	403e      	ands	r6, r7
    6a28:	46b4      	mov	ip, r6
    6a2a:	9e04      	ldr	r6, [sp, #16]
    6a2c:	4647      	mov	r7, r8
    6a2e:	403e      	ands	r6, r7
    6a30:	46b2      	mov	sl, r6
    6a32:	4666      	mov	r6, ip
    6a34:	4657      	mov	r7, sl
    6a36:	433e      	orrs	r6, r7
    6a38:	d003      	beq.n	6a42 <long_division+0x96>
			r |= 0x01;
    6a3a:	0006      	movs	r6, r0
    6a3c:	4326      	orrs	r6, r4
    6a3e:	0032      	movs	r2, r6
    6a40:	002b      	movs	r3, r5
		if (r >= d) {
    6a42:	9c00      	ldr	r4, [sp, #0]
    6a44:	9d01      	ldr	r5, [sp, #4]
    6a46:	429d      	cmp	r5, r3
    6a48:	d8db      	bhi.n	6a02 <long_division+0x56>
    6a4a:	d1ce      	bne.n	69ea <long_division+0x3e>
    6a4c:	4294      	cmp	r4, r2
    6a4e:	d8d8      	bhi.n	6a02 <long_division+0x56>
    6a50:	e7cb      	b.n	69ea <long_division+0x3e>
    6a52:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    6a54:	4658      	mov	r0, fp
    6a56:	0019      	movs	r1, r3
    6a58:	b007      	add	sp, #28
    6a5a:	bc3c      	pop	{r2, r3, r4, r5}
    6a5c:	4690      	mov	r8, r2
    6a5e:	4699      	mov	r9, r3
    6a60:	46a2      	mov	sl, r4
    6a62:	46ab      	mov	fp, r5
    6a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a66 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6a66:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6a68:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a6a:	2340      	movs	r3, #64	; 0x40
    6a6c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    6a6e:	4281      	cmp	r1, r0
    6a70:	d202      	bcs.n	6a78 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6a72:	0018      	movs	r0, r3
    6a74:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6a76:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    6a78:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    6a7a:	1c63      	adds	r3, r4, #1
    6a7c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    6a7e:	4288      	cmp	r0, r1
    6a80:	d9f9      	bls.n	6a76 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a82:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6a84:	2cff      	cmp	r4, #255	; 0xff
    6a86:	d8f4      	bhi.n	6a72 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    6a88:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    6a8a:	2300      	movs	r3, #0
    6a8c:	e7f1      	b.n	6a72 <_sercom_get_sync_baud_val+0xc>
    6a8e:	Address 0x00006a8e is out of bounds.


00006a90 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a92:	b083      	sub	sp, #12
    6a94:	000f      	movs	r7, r1
    6a96:	0016      	movs	r6, r2
    6a98:	aa08      	add	r2, sp, #32
    6a9a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6a9c:	0004      	movs	r4, r0
    6a9e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6aa0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6aa2:	42bc      	cmp	r4, r7
    6aa4:	d902      	bls.n	6aac <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    6aa6:	0010      	movs	r0, r2
    6aa8:	b003      	add	sp, #12
    6aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6aac:	2b00      	cmp	r3, #0
    6aae:	d114      	bne.n	6ada <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6ab0:	0002      	movs	r2, r0
    6ab2:	0008      	movs	r0, r1
    6ab4:	2100      	movs	r1, #0
    6ab6:	4c19      	ldr	r4, [pc, #100]	; (6b1c <_sercom_get_async_baud_val+0x8c>)
    6ab8:	47a0      	blx	r4
    6aba:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6abc:	003a      	movs	r2, r7
    6abe:	2300      	movs	r3, #0
    6ac0:	2000      	movs	r0, #0
    6ac2:	4c17      	ldr	r4, [pc, #92]	; (6b20 <_sercom_get_async_baud_val+0x90>)
    6ac4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6ac6:	2200      	movs	r2, #0
    6ac8:	2301      	movs	r3, #1
    6aca:	1a12      	subs	r2, r2, r0
    6acc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6ace:	0c12      	lsrs	r2, r2, #16
    6ad0:	041b      	lsls	r3, r3, #16
    6ad2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6ad4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    6ad6:	2200      	movs	r2, #0
    6ad8:	e7e5      	b.n	6aa6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    6ada:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6adc:	2b01      	cmp	r3, #1
    6ade:	d1f9      	bne.n	6ad4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6ae0:	000a      	movs	r2, r1
    6ae2:	2300      	movs	r3, #0
    6ae4:	2100      	movs	r1, #0
    6ae6:	4c0d      	ldr	r4, [pc, #52]	; (6b1c <_sercom_get_async_baud_val+0x8c>)
    6ae8:	47a0      	blx	r4
    6aea:	0002      	movs	r2, r0
    6aec:	000b      	movs	r3, r1
    6aee:	9200      	str	r2, [sp, #0]
    6af0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6af2:	0038      	movs	r0, r7
    6af4:	2100      	movs	r1, #0
    6af6:	4c0a      	ldr	r4, [pc, #40]	; (6b20 <_sercom_get_async_baud_val+0x90>)
    6af8:	47a0      	blx	r4
    6afa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6afc:	2380      	movs	r3, #128	; 0x80
    6afe:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6b00:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6b02:	4298      	cmp	r0, r3
    6b04:	d8cf      	bhi.n	6aa6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6b06:	0f79      	lsrs	r1, r7, #29
    6b08:	00f8      	lsls	r0, r7, #3
    6b0a:	9a00      	ldr	r2, [sp, #0]
    6b0c:	9b01      	ldr	r3, [sp, #4]
    6b0e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6b10:	00ea      	lsls	r2, r5, #3
    6b12:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6b14:	b2d2      	uxtb	r2, r2
    6b16:	0352      	lsls	r2, r2, #13
    6b18:	432a      	orrs	r2, r5
    6b1a:	e7db      	b.n	6ad4 <_sercom_get_async_baud_val+0x44>
    6b1c:	0000ecf1 	.word	0x0000ecf1
    6b20:	000069ad 	.word	0x000069ad

00006b24 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6b24:	b510      	push	{r4, lr}
    6b26:	b082      	sub	sp, #8
    6b28:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6b2a:	4b0e      	ldr	r3, [pc, #56]	; (6b64 <sercom_set_gclk_generator+0x40>)
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d007      	beq.n	6b42 <sercom_set_gclk_generator+0x1e>
    6b32:	2900      	cmp	r1, #0
    6b34:	d105      	bne.n	6b42 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    6b36:	4b0b      	ldr	r3, [pc, #44]	; (6b64 <sercom_set_gclk_generator+0x40>)
    6b38:	785b      	ldrb	r3, [r3, #1]
    6b3a:	4283      	cmp	r3, r0
    6b3c:	d010      	beq.n	6b60 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6b3e:	201d      	movs	r0, #29
    6b40:	e00c      	b.n	6b5c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    6b42:	a901      	add	r1, sp, #4
    6b44:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6b46:	2011      	movs	r0, #17
    6b48:	4b07      	ldr	r3, [pc, #28]	; (6b68 <sercom_set_gclk_generator+0x44>)
    6b4a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6b4c:	2011      	movs	r0, #17
    6b4e:	4b07      	ldr	r3, [pc, #28]	; (6b6c <sercom_set_gclk_generator+0x48>)
    6b50:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    6b52:	4b04      	ldr	r3, [pc, #16]	; (6b64 <sercom_set_gclk_generator+0x40>)
    6b54:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    6b56:	2201      	movs	r2, #1
    6b58:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    6b5a:	2000      	movs	r0, #0
}
    6b5c:	b002      	add	sp, #8
    6b5e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    6b60:	2000      	movs	r0, #0
    6b62:	e7fb      	b.n	6b5c <sercom_set_gclk_generator+0x38>
    6b64:	200000c4 	.word	0x200000c4
    6b68:	00007d51 	.word	0x00007d51
    6b6c:	00007ce1 	.word	0x00007ce1

00006b70 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    6b70:	4b2c      	ldr	r3, [pc, #176]	; (6c24 <_sercom_get_default_pad+0xb4>)
    6b72:	4298      	cmp	r0, r3
    6b74:	d026      	beq.n	6bc4 <_sercom_get_default_pad+0x54>
    6b76:	d90a      	bls.n	6b8e <_sercom_get_default_pad+0x1e>
    6b78:	4b2b      	ldr	r3, [pc, #172]	; (6c28 <_sercom_get_default_pad+0xb8>)
    6b7a:	4298      	cmp	r0, r3
    6b7c:	d03a      	beq.n	6bf4 <_sercom_get_default_pad+0x84>
    6b7e:	4b2b      	ldr	r3, [pc, #172]	; (6c2c <_sercom_get_default_pad+0xbc>)
    6b80:	4298      	cmp	r0, r3
    6b82:	d041      	beq.n	6c08 <_sercom_get_default_pad+0x98>
    6b84:	4b2a      	ldr	r3, [pc, #168]	; (6c30 <_sercom_get_default_pad+0xc0>)
    6b86:	4298      	cmp	r0, r3
    6b88:	d024      	beq.n	6bd4 <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    6b8a:	2000      	movs	r0, #0
}
    6b8c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    6b8e:	2384      	movs	r3, #132	; 0x84
    6b90:	05db      	lsls	r3, r3, #23
    6b92:	4298      	cmp	r0, r3
    6b94:	d008      	beq.n	6ba8 <_sercom_get_default_pad+0x38>
    6b96:	4b27      	ldr	r3, [pc, #156]	; (6c34 <_sercom_get_default_pad+0xc4>)
    6b98:	4298      	cmp	r0, r3
    6b9a:	d1f6      	bne.n	6b8a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6b9c:	2902      	cmp	r1, #2
    6b9e:	d00d      	beq.n	6bbc <_sercom_get_default_pad+0x4c>
    6ba0:	2903      	cmp	r1, #3
    6ba2:	d00d      	beq.n	6bc0 <_sercom_get_default_pad+0x50>
    6ba4:	2000      	movs	r0, #0
    6ba6:	e7f1      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6ba8:	2902      	cmp	r1, #2
    6baa:	d003      	beq.n	6bb4 <_sercom_get_default_pad+0x44>
    6bac:	2903      	cmp	r1, #3
    6bae:	d003      	beq.n	6bb8 <_sercom_get_default_pad+0x48>
    6bb0:	2000      	movs	r0, #0
    6bb2:	e7eb      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bb4:	4820      	ldr	r0, [pc, #128]	; (6c38 <_sercom_get_default_pad+0xc8>)
    6bb6:	e7e9      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bb8:	4820      	ldr	r0, [pc, #128]	; (6c3c <_sercom_get_default_pad+0xcc>)
    6bba:	e7e7      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bbc:	4820      	ldr	r0, [pc, #128]	; (6c40 <_sercom_get_default_pad+0xd0>)
    6bbe:	e7e5      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bc0:	4820      	ldr	r0, [pc, #128]	; (6c44 <_sercom_get_default_pad+0xd4>)
    6bc2:	e7e3      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bc4:	2901      	cmp	r1, #1
    6bc6:	d003      	beq.n	6bd0 <_sercom_get_default_pad+0x60>
    6bc8:	2900      	cmp	r1, #0
    6bca:	d027      	beq.n	6c1c <_sercom_get_default_pad+0xac>
    6bcc:	2000      	movs	r0, #0
    6bce:	e7dd      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bd0:	481d      	ldr	r0, [pc, #116]	; (6c48 <_sercom_get_default_pad+0xd8>)
    6bd2:	e7db      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bd4:	2901      	cmp	r1, #1
    6bd6:	d007      	beq.n	6be8 <_sercom_get_default_pad+0x78>
    6bd8:	2900      	cmp	r1, #0
    6bda:	d021      	beq.n	6c20 <_sercom_get_default_pad+0xb0>
    6bdc:	2902      	cmp	r1, #2
    6bde:	d005      	beq.n	6bec <_sercom_get_default_pad+0x7c>
    6be0:	2903      	cmp	r1, #3
    6be2:	d005      	beq.n	6bf0 <_sercom_get_default_pad+0x80>
	return 0;
    6be4:	2000      	movs	r0, #0
    6be6:	e7d1      	b.n	6b8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6be8:	4818      	ldr	r0, [pc, #96]	; (6c4c <_sercom_get_default_pad+0xdc>)
    6bea:	e7cf      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bec:	4818      	ldr	r0, [pc, #96]	; (6c50 <_sercom_get_default_pad+0xe0>)
    6bee:	e7cd      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bf0:	4818      	ldr	r0, [pc, #96]	; (6c54 <_sercom_get_default_pad+0xe4>)
    6bf2:	e7cb      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6bf4:	2902      	cmp	r1, #2
    6bf6:	d003      	beq.n	6c00 <_sercom_get_default_pad+0x90>
    6bf8:	2903      	cmp	r1, #3
    6bfa:	d003      	beq.n	6c04 <_sercom_get_default_pad+0x94>
    6bfc:	2000      	movs	r0, #0
    6bfe:	e7c5      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c00:	4815      	ldr	r0, [pc, #84]	; (6c58 <_sercom_get_default_pad+0xe8>)
    6c02:	e7c3      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c04:	4815      	ldr	r0, [pc, #84]	; (6c5c <_sercom_get_default_pad+0xec>)
    6c06:	e7c1      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c08:	2902      	cmp	r1, #2
    6c0a:	d003      	beq.n	6c14 <_sercom_get_default_pad+0xa4>
    6c0c:	2903      	cmp	r1, #3
    6c0e:	d003      	beq.n	6c18 <_sercom_get_default_pad+0xa8>
    6c10:	2000      	movs	r0, #0
    6c12:	e7bb      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c14:	4812      	ldr	r0, [pc, #72]	; (6c60 <_sercom_get_default_pad+0xf0>)
    6c16:	e7b9      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c18:	4812      	ldr	r0, [pc, #72]	; (6c64 <_sercom_get_default_pad+0xf4>)
    6c1a:	e7b7      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c1c:	4812      	ldr	r0, [pc, #72]	; (6c68 <_sercom_get_default_pad+0xf8>)
    6c1e:	e7b5      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c20:	4812      	ldr	r0, [pc, #72]	; (6c6c <_sercom_get_default_pad+0xfc>)
    6c22:	e7b3      	b.n	6b8c <_sercom_get_default_pad+0x1c>
    6c24:	42000800 	.word	0x42000800
    6c28:	42001000 	.word	0x42001000
    6c2c:	43000400 	.word	0x43000400
    6c30:	42000c00 	.word	0x42000c00
    6c34:	42000400 	.word	0x42000400
    6c38:	00060003 	.word	0x00060003
    6c3c:	00070003 	.word	0x00070003
    6c40:	001e0003 	.word	0x001e0003
    6c44:	001f0003 	.word	0x001f0003
    6c48:	00090003 	.word	0x00090003
    6c4c:	00110003 	.word	0x00110003
    6c50:	00120003 	.word	0x00120003
    6c54:	00130003 	.word	0x00130003
    6c58:	000e0003 	.word	0x000e0003
    6c5c:	000f0003 	.word	0x000f0003
    6c60:	00180003 	.word	0x00180003
    6c64:	00190003 	.word	0x00190003
    6c68:	00080003 	.word	0x00080003
    6c6c:	00100003 	.word	0x00100003

00006c70 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6c70:	b530      	push	{r4, r5, lr}
    6c72:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6c74:	4b0b      	ldr	r3, [pc, #44]	; (6ca4 <_sercom_get_sercom_inst_index+0x34>)
    6c76:	466a      	mov	r2, sp
    6c78:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c7a:	c232      	stmia	r2!, {r1, r4, r5}
    6c7c:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c7e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6c80:	9b00      	ldr	r3, [sp, #0]
    6c82:	4283      	cmp	r3, r0
    6c84:	d00b      	beq.n	6c9e <_sercom_get_sercom_inst_index+0x2e>
    6c86:	2301      	movs	r3, #1
    6c88:	009a      	lsls	r2, r3, #2
    6c8a:	4669      	mov	r1, sp
    6c8c:	5852      	ldr	r2, [r2, r1]
    6c8e:	4282      	cmp	r2, r0
    6c90:	d006      	beq.n	6ca0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c92:	3301      	adds	r3, #1
    6c94:	2b06      	cmp	r3, #6
    6c96:	d1f7      	bne.n	6c88 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6c98:	2000      	movs	r0, #0
}
    6c9a:	b007      	add	sp, #28
    6c9c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c9e:	2300      	movs	r3, #0
			return i;
    6ca0:	b2d8      	uxtb	r0, r3
    6ca2:	e7fa      	b.n	6c9a <_sercom_get_sercom_inst_index+0x2a>
    6ca4:	00010ce4 	.word	0x00010ce4

00006ca8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    6ca8:	4770      	bx	lr
    6caa:	Address 0x00006caa is out of bounds.


00006cac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6cae:	4b0a      	ldr	r3, [pc, #40]	; (6cd8 <_sercom_set_handler+0x2c>)
    6cb0:	781b      	ldrb	r3, [r3, #0]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d10c      	bne.n	6cd0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6cb6:	4f09      	ldr	r7, [pc, #36]	; (6cdc <_sercom_set_handler+0x30>)
    6cb8:	4e09      	ldr	r6, [pc, #36]	; (6ce0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    6cba:	4d0a      	ldr	r5, [pc, #40]	; (6ce4 <_sercom_set_handler+0x38>)
    6cbc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6cbe:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    6cc0:	195a      	adds	r2, r3, r5
    6cc2:	6014      	str	r4, [r2, #0]
    6cc4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6cc6:	2b18      	cmp	r3, #24
    6cc8:	d1f9      	bne.n	6cbe <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    6cca:	2201      	movs	r2, #1
    6ccc:	4b02      	ldr	r3, [pc, #8]	; (6cd8 <_sercom_set_handler+0x2c>)
    6cce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6cd0:	0080      	lsls	r0, r0, #2
    6cd2:	4b02      	ldr	r3, [pc, #8]	; (6cdc <_sercom_set_handler+0x30>)
    6cd4:	50c1      	str	r1, [r0, r3]
}
    6cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cd8:	200000c6 	.word	0x200000c6
    6cdc:	200000c8 	.word	0x200000c8
    6ce0:	00006ca9 	.word	0x00006ca9
    6ce4:	20001cf0 	.word	0x20001cf0

00006ce8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6ce8:	b500      	push	{lr}
    6cea:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6cec:	2308      	movs	r3, #8
    6cee:	466a      	mov	r2, sp
    6cf0:	7013      	strb	r3, [r2, #0]
    6cf2:	3301      	adds	r3, #1
    6cf4:	7053      	strb	r3, [r2, #1]
    6cf6:	3301      	adds	r3, #1
    6cf8:	7093      	strb	r3, [r2, #2]
    6cfa:	3301      	adds	r3, #1
    6cfc:	70d3      	strb	r3, [r2, #3]
    6cfe:	3301      	adds	r3, #1
    6d00:	7113      	strb	r3, [r2, #4]
    6d02:	3301      	adds	r3, #1
    6d04:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6d06:	4b03      	ldr	r3, [pc, #12]	; (6d14 <_sercom_get_interrupt_vector+0x2c>)
    6d08:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6d0a:	466b      	mov	r3, sp
    6d0c:	5618      	ldrsb	r0, [r3, r0]
}
    6d0e:	b003      	add	sp, #12
    6d10:	bd00      	pop	{pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	00006c71 	.word	0x00006c71

00006d18 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6d18:	b510      	push	{r4, lr}
    6d1a:	4b02      	ldr	r3, [pc, #8]	; (6d24 <SERCOM0_Handler+0xc>)
    6d1c:	681b      	ldr	r3, [r3, #0]
    6d1e:	2000      	movs	r0, #0
    6d20:	4798      	blx	r3
    6d22:	bd10      	pop	{r4, pc}
    6d24:	200000c8 	.word	0x200000c8

00006d28 <SERCOM1_Handler>:
    6d28:	b510      	push	{r4, lr}
    6d2a:	4b02      	ldr	r3, [pc, #8]	; (6d34 <SERCOM1_Handler+0xc>)
    6d2c:	685b      	ldr	r3, [r3, #4]
    6d2e:	2001      	movs	r0, #1
    6d30:	4798      	blx	r3
    6d32:	bd10      	pop	{r4, pc}
    6d34:	200000c8 	.word	0x200000c8

00006d38 <SERCOM2_Handler>:
    6d38:	b510      	push	{r4, lr}
    6d3a:	4b02      	ldr	r3, [pc, #8]	; (6d44 <SERCOM2_Handler+0xc>)
    6d3c:	689b      	ldr	r3, [r3, #8]
    6d3e:	2002      	movs	r0, #2
    6d40:	4798      	blx	r3
    6d42:	bd10      	pop	{r4, pc}
    6d44:	200000c8 	.word	0x200000c8

00006d48 <SERCOM3_Handler>:
    6d48:	b510      	push	{r4, lr}
    6d4a:	4b02      	ldr	r3, [pc, #8]	; (6d54 <SERCOM3_Handler+0xc>)
    6d4c:	68db      	ldr	r3, [r3, #12]
    6d4e:	2003      	movs	r0, #3
    6d50:	4798      	blx	r3
    6d52:	bd10      	pop	{r4, pc}
    6d54:	200000c8 	.word	0x200000c8

00006d58 <SERCOM4_Handler>:
    6d58:	b510      	push	{r4, lr}
    6d5a:	4b02      	ldr	r3, [pc, #8]	; (6d64 <SERCOM4_Handler+0xc>)
    6d5c:	691b      	ldr	r3, [r3, #16]
    6d5e:	2004      	movs	r0, #4
    6d60:	4798      	blx	r3
    6d62:	bd10      	pop	{r4, pc}
    6d64:	200000c8 	.word	0x200000c8

00006d68 <SERCOM5_Handler>:
    6d68:	b510      	push	{r4, lr}
    6d6a:	4b02      	ldr	r3, [pc, #8]	; (6d74 <SERCOM5_Handler+0xc>)
    6d6c:	695b      	ldr	r3, [r3, #20]
    6d6e:	2005      	movs	r0, #5
    6d70:	4798      	blx	r3
    6d72:	bd10      	pop	{r4, pc}
    6d74:	200000c8 	.word	0x200000c8

00006d78 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d7a:	46d6      	mov	lr, sl
    6d7c:	464f      	mov	r7, r9
    6d7e:	4646      	mov	r6, r8
    6d80:	b5c0      	push	{r6, r7, lr}
    6d82:	b08a      	sub	sp, #40	; 0x28
    6d84:	0006      	movs	r6, r0
    6d86:	000f      	movs	r7, r1
    6d88:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6d8a:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6d8c:	680b      	ldr	r3, [r1, #0]
    6d8e:	079b      	lsls	r3, r3, #30
    6d90:	d40a      	bmi.n	6da8 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6d92:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    6d94:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6d96:	07db      	lsls	r3, r3, #31
    6d98:	d400      	bmi.n	6d9c <spi_init+0x24>
    6d9a:	e097      	b.n	6ecc <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    6d9c:	b00a      	add	sp, #40	; 0x28
    6d9e:	bc1c      	pop	{r2, r3, r4}
    6da0:	4690      	mov	r8, r2
    6da2:	4699      	mov	r9, r3
    6da4:	46a2      	mov	sl, r4
    6da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    6da8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6daa:	9305      	str	r3, [sp, #20]
    6dac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6dae:	9306      	str	r3, [sp, #24]
    6db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6db2:	9307      	str	r3, [sp, #28]
    6db4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    6db6:	9308      	str	r3, [sp, #32]
    6db8:	2500      	movs	r5, #0
    6dba:	e00a      	b.n	6dd2 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6dbc:	0038      	movs	r0, r7
    6dbe:	4b9a      	ldr	r3, [pc, #616]	; (7028 <spi_init+0x2b0>)
    6dc0:	4798      	blx	r3
    6dc2:	e00e      	b.n	6de2 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6dc4:	230f      	movs	r3, #15
    6dc6:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6dc8:	4581      	cmp	r9, r0
    6dca:	d130      	bne.n	6e2e <spi_init+0xb6>
    6dcc:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6dce:	2d04      	cmp	r5, #4
    6dd0:	d031      	beq.n	6e36 <spi_init+0xbe>
    6dd2:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6dd4:	00ab      	lsls	r3, r5, #2
    6dd6:	aa02      	add	r2, sp, #8
    6dd8:	200c      	movs	r0, #12
    6dda:	1812      	adds	r2, r2, r0
    6ddc:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    6dde:	2800      	cmp	r0, #0
    6de0:	d0ec      	beq.n	6dbc <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    6de2:	1c43      	adds	r3, r0, #1
    6de4:	d0f2      	beq.n	6dcc <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    6de6:	0401      	lsls	r1, r0, #16
    6de8:	0c0b      	lsrs	r3, r1, #16
    6dea:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    6dec:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    6dee:	b2c3      	uxtb	r3, r0
    6df0:	469c      	mov	ip, r3
		return NULL;
    6df2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6df4:	0602      	lsls	r2, r0, #24
    6df6:	d405      	bmi.n	6e04 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    6df8:	4663      	mov	r3, ip
    6dfa:	095b      	lsrs	r3, r3, #5
    6dfc:	01db      	lsls	r3, r3, #7
    6dfe:	4a8b      	ldr	r2, [pc, #556]	; (702c <spi_init+0x2b4>)
    6e00:	4690      	mov	r8, r2
    6e02:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    6e04:	221f      	movs	r2, #31
    6e06:	4660      	mov	r0, ip
    6e08:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6e0a:	1898      	adds	r0, r3, r2
    6e0c:	3040      	adds	r0, #64	; 0x40
    6e0e:	7800      	ldrb	r0, [r0, #0]
    6e10:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    6e12:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6e14:	4651      	mov	r1, sl
    6e16:	07c9      	lsls	r1, r1, #31
    6e18:	d5d6      	bpl.n	6dc8 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    6e1a:	0852      	lsrs	r2, r2, #1
    6e1c:	189b      	adds	r3, r3, r2
    6e1e:	3330      	adds	r3, #48	; 0x30
    6e20:	7818      	ldrb	r0, [r3, #0]
    6e22:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    6e24:	4663      	mov	r3, ip
    6e26:	07db      	lsls	r3, r3, #31
    6e28:	d5cc      	bpl.n	6dc4 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    6e2a:	0900      	lsrs	r0, r0, #4
    6e2c:	e7cc      	b.n	6dc8 <spi_init+0x50>
			module->hw = NULL;
    6e2e:	2300      	movs	r3, #0
    6e30:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    6e32:	201c      	movs	r0, #28
    6e34:	e7b2      	b.n	6d9c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    6e36:	2011      	movs	r0, #17
    6e38:	4b7d      	ldr	r3, [pc, #500]	; (7030 <spi_init+0x2b8>)
    6e3a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6e3c:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    6e3e:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    6e40:	2a01      	cmp	r2, #1
    6e42:	d026      	beq.n	6e92 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    6e44:	6863      	ldr	r3, [r4, #4]
    6e46:	68a2      	ldr	r2, [r4, #8]
    6e48:	4313      	orrs	r3, r2
    6e4a:	68e2      	ldr	r2, [r4, #12]
    6e4c:	4313      	orrs	r3, r2
    6e4e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    6e50:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    6e52:	7c61      	ldrb	r1, [r4, #17]
    6e54:	2900      	cmp	r1, #0
    6e56:	d001      	beq.n	6e5c <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6e58:	2180      	movs	r1, #128	; 0x80
    6e5a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    6e5c:	7ca1      	ldrb	r1, [r4, #18]
    6e5e:	2900      	cmp	r1, #0
    6e60:	d002      	beq.n	6e68 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6e62:	2180      	movs	r1, #128	; 0x80
    6e64:	0289      	lsls	r1, r1, #10
    6e66:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    6e68:	7ce1      	ldrb	r1, [r4, #19]
    6e6a:	2900      	cmp	r1, #0
    6e6c:	d002      	beq.n	6e74 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6e6e:	2180      	movs	r1, #128	; 0x80
    6e70:	0089      	lsls	r1, r1, #2
    6e72:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6e74:	7d21      	ldrb	r1, [r4, #20]
    6e76:	2900      	cmp	r1, #0
    6e78:	d002      	beq.n	6e80 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6e7a:	2180      	movs	r1, #128	; 0x80
    6e7c:	0189      	lsls	r1, r1, #6
    6e7e:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    6e80:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    6e82:	2002      	movs	r0, #2
    6e84:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    6e86:	428b      	cmp	r3, r1
    6e88:	d017      	beq.n	6eba <spi_init+0x142>
	module->hw = NULL;
    6e8a:	2300      	movs	r3, #0
    6e8c:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    6e8e:	201c      	movs	r0, #28
    6e90:	e784      	b.n	6d9c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    6e92:	aa04      	add	r2, sp, #16
    6e94:	0001      	movs	r1, r0
    6e96:	69a0      	ldr	r0, [r4, #24]
    6e98:	4b66      	ldr	r3, [pc, #408]	; (7034 <spi_init+0x2bc>)
    6e9a:	4798      	blx	r3
    6e9c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    6e9e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d000      	beq.n	6ea6 <spi_init+0x12e>
    6ea4:	e77a      	b.n	6d9c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6ea6:	7b3b      	ldrb	r3, [r7, #12]
    6ea8:	b2db      	uxtb	r3, r3
    6eaa:	aa04      	add	r2, sp, #16
    6eac:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    6eae:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6eb0:	429a      	cmp	r2, r3
    6eb2:	d000      	beq.n	6eb6 <spi_init+0x13e>
    6eb4:	e772      	b.n	6d9c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    6eb6:	350c      	adds	r5, #12
    6eb8:	e7c4      	b.n	6e44 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    6eba:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    6ebc:	4293      	cmp	r3, r2
    6ebe:	d1e4      	bne.n	6e8a <spi_init+0x112>
		module->mode           = config->mode;
    6ec0:	7823      	ldrb	r3, [r4, #0]
    6ec2:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    6ec4:	7c23      	ldrb	r3, [r4, #16]
    6ec6:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6ec8:	2000      	movs	r0, #0
    6eca:	e767      	b.n	6d9c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ecc:	0008      	movs	r0, r1
    6ece:	4b5a      	ldr	r3, [pc, #360]	; (7038 <spi_init+0x2c0>)
    6ed0:	4798      	blx	r3
	if (sercom_index == 5) {
    6ed2:	2805      	cmp	r0, #5
    6ed4:	d100      	bne.n	6ed8 <spi_init+0x160>
    6ed6:	e09f      	b.n	7018 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6ed8:	0003      	movs	r3, r0
    6eda:	3312      	adds	r3, #18
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    6edc:	4957      	ldr	r1, [pc, #348]	; (703c <spi_init+0x2c4>)
    6ede:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6ee0:	2201      	movs	r2, #1
    6ee2:	4082      	lsls	r2, r0
    6ee4:	432a      	orrs	r2, r5
    6ee6:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6ee8:	a909      	add	r1, sp, #36	; 0x24
    6eea:	2524      	movs	r5, #36	; 0x24
    6eec:	5d62      	ldrb	r2, [r4, r5]
    6eee:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6ef0:	b2db      	uxtb	r3, r3
    6ef2:	9301      	str	r3, [sp, #4]
    6ef4:	0018      	movs	r0, r3
    6ef6:	4b52      	ldr	r3, [pc, #328]	; (7040 <spi_init+0x2c8>)
    6ef8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6efa:	9801      	ldr	r0, [sp, #4]
    6efc:	4b51      	ldr	r3, [pc, #324]	; (7044 <spi_init+0x2cc>)
    6efe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6f00:	5d60      	ldrb	r0, [r4, r5]
    6f02:	2100      	movs	r1, #0
    6f04:	4b50      	ldr	r3, [pc, #320]	; (7048 <spi_init+0x2d0>)
    6f06:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6f08:	7823      	ldrb	r3, [r4, #0]
    6f0a:	2b01      	cmp	r3, #1
    6f0c:	d019      	beq.n	6f42 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6f0e:	6833      	ldr	r3, [r6, #0]
    6f10:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6f12:	ab04      	add	r3, sp, #16
    6f14:	2280      	movs	r2, #128	; 0x80
    6f16:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6f18:	2200      	movs	r2, #0
    6f1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6f1c:	2101      	movs	r1, #1
    6f1e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    6f20:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    6f22:	7823      	ldrb	r3, [r4, #0]
    6f24:	2b00      	cmp	r3, #0
    6f26:	d101      	bne.n	6f2c <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6f28:	ab04      	add	r3, sp, #16
    6f2a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6f2e:	9305      	str	r3, [sp, #20]
    6f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6f32:	9306      	str	r3, [sp, #24]
    6f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6f36:	9307      	str	r3, [sp, #28]
    6f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f3a:	9308      	str	r3, [sp, #32]
    6f3c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6f3e:	ad05      	add	r5, sp, #20
    6f40:	e011      	b.n	6f66 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6f42:	683b      	ldr	r3, [r7, #0]
    6f44:	220c      	movs	r2, #12
    6f46:	4313      	orrs	r3, r2
    6f48:	603b      	str	r3, [r7, #0]
    6f4a:	e7e0      	b.n	6f0e <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6f4c:	4640      	mov	r0, r8
    6f4e:	4b36      	ldr	r3, [pc, #216]	; (7028 <spi_init+0x2b0>)
    6f50:	4798      	blx	r3
    6f52:	e00d      	b.n	6f70 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6f54:	a904      	add	r1, sp, #16
    6f56:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6f58:	0c00      	lsrs	r0, r0, #16
    6f5a:	b2c0      	uxtb	r0, r0
    6f5c:	4b3b      	ldr	r3, [pc, #236]	; (704c <spi_init+0x2d4>)
    6f5e:	4798      	blx	r3
    6f60:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6f62:	2f04      	cmp	r7, #4
    6f64:	d007      	beq.n	6f76 <spi_init+0x1fe>
    6f66:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6f68:	00bb      	lsls	r3, r7, #2
    6f6a:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    6f6c:	2800      	cmp	r0, #0
    6f6e:	d0ed      	beq.n	6f4c <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    6f70:	1c43      	adds	r3, r0, #1
    6f72:	d1ef      	bne.n	6f54 <spi_init+0x1dc>
    6f74:	e7f4      	b.n	6f60 <spi_init+0x1e8>
	module->mode             = config->mode;
    6f76:	7823      	ldrb	r3, [r4, #0]
    6f78:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    6f7a:	7c23      	ldrb	r3, [r4, #16]
    6f7c:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    6f7e:	7ca3      	ldrb	r3, [r4, #18]
    6f80:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    6f82:	7d23      	ldrb	r3, [r4, #20]
    6f84:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    6f86:	2200      	movs	r2, #0
    6f88:	ab02      	add	r3, sp, #8
    6f8a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    6f8c:	7823      	ldrb	r3, [r4, #0]
    6f8e:	2b01      	cmp	r3, #1
    6f90:	d02a      	beq.n	6fe8 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    6f92:	6863      	ldr	r3, [r4, #4]
    6f94:	68a2      	ldr	r2, [r4, #8]
    6f96:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    6f98:	68e2      	ldr	r2, [r4, #12]
    6f9a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    6f9c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    6f9e:	7c62      	ldrb	r2, [r4, #17]
    6fa0:	2a00      	cmp	r2, #0
    6fa2:	d103      	bne.n	6fac <spi_init+0x234>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6fa4:	4a2a      	ldr	r2, [pc, #168]	; (7050 <spi_init+0x2d8>)
    6fa6:	7892      	ldrb	r2, [r2, #2]
    6fa8:	0792      	lsls	r2, r2, #30
    6faa:	d501      	bpl.n	6fb0 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6fac:	2280      	movs	r2, #128	; 0x80
    6fae:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    6fb0:	7ca2      	ldrb	r2, [r4, #18]
    6fb2:	2a00      	cmp	r2, #0
    6fb4:	d002      	beq.n	6fbc <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6fb6:	2280      	movs	r2, #128	; 0x80
    6fb8:	0292      	lsls	r2, r2, #10
    6fba:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    6fbc:	7ce2      	ldrb	r2, [r4, #19]
    6fbe:	2a00      	cmp	r2, #0
    6fc0:	d002      	beq.n	6fc8 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6fc2:	2280      	movs	r2, #128	; 0x80
    6fc4:	0092      	lsls	r2, r2, #2
    6fc6:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6fc8:	7d22      	ldrb	r2, [r4, #20]
    6fca:	2a00      	cmp	r2, #0
    6fcc:	d002      	beq.n	6fd4 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6fce:	2280      	movs	r2, #128	; 0x80
    6fd0:	0192      	lsls	r2, r2, #6
    6fd2:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    6fd4:	4642      	mov	r2, r8
    6fd6:	6812      	ldr	r2, [r2, #0]
    6fd8:	4313      	orrs	r3, r2
    6fda:	4642      	mov	r2, r8
    6fdc:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    6fde:	6853      	ldr	r3, [r2, #4]
    6fe0:	430b      	orrs	r3, r1
    6fe2:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    6fe4:	2000      	movs	r0, #0
    6fe6:	e6d9      	b.n	6d9c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6fe8:	6830      	ldr	r0, [r6, #0]
    6fea:	4b13      	ldr	r3, [pc, #76]	; (7038 <spi_init+0x2c0>)
    6fec:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6fee:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6ff0:	b2c0      	uxtb	r0, r0
    6ff2:	4b0f      	ldr	r3, [pc, #60]	; (7030 <spi_init+0x2b8>)
    6ff4:	4798      	blx	r3
    6ff6:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    6ff8:	ab02      	add	r3, sp, #8
    6ffa:	1d9a      	adds	r2, r3, #6
    6ffc:	69a0      	ldr	r0, [r4, #24]
    6ffe:	4b0d      	ldr	r3, [pc, #52]	; (7034 <spi_init+0x2bc>)
    7000:	4798      	blx	r3
    7002:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7004:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7006:	2b00      	cmp	r3, #0
    7008:	d000      	beq.n	700c <spi_init+0x294>
    700a:	e6c7      	b.n	6d9c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    700c:	ab02      	add	r3, sp, #8
    700e:	3306      	adds	r3, #6
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	4642      	mov	r2, r8
    7014:	7313      	strb	r3, [r2, #12]
    7016:	e7bc      	b.n	6f92 <spi_init+0x21a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    7018:	4a08      	ldr	r2, [pc, #32]	; (703c <spi_init+0x2c4>)
    701a:	6a13      	ldr	r3, [r2, #32]
    701c:	2102      	movs	r1, #2
    701e:	430b      	orrs	r3, r1
    7020:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    7022:	2318      	movs	r3, #24
    7024:	e760      	b.n	6ee8 <spi_init+0x170>
    7026:	46c0      	nop			; (mov r8, r8)
    7028:	00006b71 	.word	0x00006b71
    702c:	40002800 	.word	0x40002800
    7030:	00007d75 	.word	0x00007d75
    7034:	00006a67 	.word	0x00006a67
    7038:	00006c71 	.word	0x00006c71
    703c:	40000400 	.word	0x40000400
    7040:	00007d51 	.word	0x00007d51
    7044:	00007ce1 	.word	0x00007ce1
    7048:	00006b25 	.word	0x00006b25
    704c:	00007e4d 	.word	0x00007e4d
    7050:	41002000 	.word	0x41002000

00007054 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7054:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7056:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7058:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    705a:	2c01      	cmp	r4, #1
    705c:	d001      	beq.n	7062 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    705e:	0018      	movs	r0, r3
    7060:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7062:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7064:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7066:	2c00      	cmp	r4, #0
    7068:	d1f9      	bne.n	705e <spi_select_slave+0xa>
		if (select) {
    706a:	2a00      	cmp	r2, #0
    706c:	d058      	beq.n	7120 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    706e:	784b      	ldrb	r3, [r1, #1]
    7070:	2b00      	cmp	r3, #0
    7072:	d044      	beq.n	70fe <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7074:	6803      	ldr	r3, [r0, #0]
    7076:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7078:	07db      	lsls	r3, r3, #31
    707a:	d410      	bmi.n	709e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    707c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    707e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7080:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7082:	2900      	cmp	r1, #0
    7084:	d104      	bne.n	7090 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7086:	0953      	lsrs	r3, r2, #5
    7088:	01db      	lsls	r3, r3, #7
    708a:	492e      	ldr	r1, [pc, #184]	; (7144 <spi_select_slave+0xf0>)
    708c:	468c      	mov	ip, r1
    708e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7090:	211f      	movs	r1, #31
    7092:	4011      	ands	r1, r2
    7094:	2201      	movs	r2, #1
    7096:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7098:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    709a:	2305      	movs	r3, #5
    709c:	e7df      	b.n	705e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    709e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    70a0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    70a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    70a4:	2c00      	cmp	r4, #0
    70a6:	d104      	bne.n	70b2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    70a8:	0953      	lsrs	r3, r2, #5
    70aa:	01db      	lsls	r3, r3, #7
    70ac:	4c25      	ldr	r4, [pc, #148]	; (7144 <spi_select_slave+0xf0>)
    70ae:	46a4      	mov	ip, r4
    70b0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    70b2:	241f      	movs	r4, #31
    70b4:	4014      	ands	r4, r2
    70b6:	2201      	movs	r2, #1
    70b8:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    70ba:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    70bc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    70be:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    70c0:	07d2      	lsls	r2, r2, #31
    70c2:	d501      	bpl.n	70c8 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    70c4:	788a      	ldrb	r2, [r1, #2]
    70c6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    70c8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    70ca:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    70cc:	2a00      	cmp	r2, #0
    70ce:	d1c6      	bne.n	705e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    70d0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    70d2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    70d4:	7e13      	ldrb	r3, [r2, #24]
    70d6:	420b      	tst	r3, r1
    70d8:	d0fc      	beq.n	70d4 <spi_select_slave+0x80>
    70da:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    70dc:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    70de:	0749      	lsls	r1, r1, #29
    70e0:	d5bd      	bpl.n	705e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    70e2:	8b53      	ldrh	r3, [r2, #26]
    70e4:	075b      	lsls	r3, r3, #29
    70e6:	d501      	bpl.n	70ec <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    70e8:	2304      	movs	r3, #4
    70ea:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    70ec:	7983      	ldrb	r3, [r0, #6]
    70ee:	2b01      	cmp	r3, #1
    70f0:	d002      	beq.n	70f8 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    70f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    70f4:	2300      	movs	r3, #0
    70f6:	e7b2      	b.n	705e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    70f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    70fa:	2300      	movs	r3, #0
    70fc:	e7af      	b.n	705e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    70fe:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7100:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7102:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7104:	2900      	cmp	r1, #0
    7106:	d104      	bne.n	7112 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7108:	0953      	lsrs	r3, r2, #5
    710a:	01db      	lsls	r3, r3, #7
    710c:	490d      	ldr	r1, [pc, #52]	; (7144 <spi_select_slave+0xf0>)
    710e:	468c      	mov	ip, r1
    7110:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7112:	211f      	movs	r1, #31
    7114:	4011      	ands	r1, r2
    7116:	2201      	movs	r2, #1
    7118:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    711a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    711c:	2300      	movs	r3, #0
    711e:	e79e      	b.n	705e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7120:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7122:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7124:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7126:	2900      	cmp	r1, #0
    7128:	d104      	bne.n	7134 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    712a:	0953      	lsrs	r3, r2, #5
    712c:	01db      	lsls	r3, r3, #7
    712e:	4905      	ldr	r1, [pc, #20]	; (7144 <spi_select_slave+0xf0>)
    7130:	468c      	mov	ip, r1
    7132:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7134:	211f      	movs	r1, #31
    7136:	4011      	ands	r1, r2
    7138:	2201      	movs	r2, #1
    713a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    713c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    713e:	2300      	movs	r3, #0
    7140:	e78d      	b.n	705e <spi_select_slave+0xa>
    7142:	46c0      	nop			; (mov r8, r8)
    7144:	40002800 	.word	0x40002800

00007148 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7148:	b5f0      	push	{r4, r5, r6, r7, lr}
    714a:	46de      	mov	lr, fp
    714c:	4657      	mov	r7, sl
    714e:	464e      	mov	r6, r9
    7150:	4645      	mov	r5, r8
    7152:	b5e0      	push	{r5, r6, r7, lr}
    7154:	b091      	sub	sp, #68	; 0x44
    7156:	0005      	movs	r5, r0
    7158:	000c      	movs	r4, r1
    715a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    715c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    715e:	0008      	movs	r0, r1
    7160:	4bc4      	ldr	r3, [pc, #784]	; (7474 <usart_init+0x32c>)
    7162:	4798      	blx	r3
    7164:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    7166:	2805      	cmp	r0, #5
    7168:	d00d      	beq.n	7186 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    716a:	0007      	movs	r7, r0
    716c:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    716e:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7170:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7172:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7174:	07c9      	lsls	r1, r1, #31
    7176:	d509      	bpl.n	718c <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    7178:	b011      	add	sp, #68	; 0x44
    717a:	bc3c      	pop	{r2, r3, r4, r5}
    717c:	4690      	mov	r8, r2
    717e:	4699      	mov	r9, r3
    7180:	46a2      	mov	sl, r4
    7182:	46ab      	mov	fp, r5
    7184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    7186:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    7188:	2301      	movs	r3, #1
    718a:	e7f1      	b.n	7170 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    718c:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    718e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7190:	0789      	lsls	r1, r1, #30
    7192:	d4f1      	bmi.n	7178 <usart_init+0x30>
	if (sercom_index == 5) {
    7194:	2a05      	cmp	r2, #5
    7196:	d049      	beq.n	722c <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    7198:	49b7      	ldr	r1, [pc, #732]	; (7478 <usart_init+0x330>)
    719a:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    719c:	2201      	movs	r2, #1
    719e:	409a      	lsls	r2, r3
    71a0:	0013      	movs	r3, r2
    71a2:	4303      	orrs	r3, r0
    71a4:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    71a6:	a90f      	add	r1, sp, #60	; 0x3c
    71a8:	232d      	movs	r3, #45	; 0x2d
    71aa:	4698      	mov	r8, r3
    71ac:	5cf3      	ldrb	r3, [r6, r3]
    71ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    71b0:	b2ff      	uxtb	r7, r7
    71b2:	0038      	movs	r0, r7
    71b4:	4bb1      	ldr	r3, [pc, #708]	; (747c <usart_init+0x334>)
    71b6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    71b8:	0038      	movs	r0, r7
    71ba:	4bb1      	ldr	r3, [pc, #708]	; (7480 <usart_init+0x338>)
    71bc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    71be:	4643      	mov	r3, r8
    71c0:	5cf0      	ldrb	r0, [r6, r3]
    71c2:	2100      	movs	r1, #0
    71c4:	4baf      	ldr	r3, [pc, #700]	; (7484 <usart_init+0x33c>)
    71c6:	4798      	blx	r3
	module->character_size = config->character_size;
    71c8:	7af3      	ldrb	r3, [r6, #11]
    71ca:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    71cc:	2324      	movs	r3, #36	; 0x24
    71ce:	5cf3      	ldrb	r3, [r6, r3]
    71d0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    71d2:	2325      	movs	r3, #37	; 0x25
    71d4:	5cf3      	ldrb	r3, [r6, r3]
    71d6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    71d8:	7ef3      	ldrb	r3, [r6, #27]
    71da:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    71dc:	7f33      	ldrb	r3, [r6, #28]
    71de:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    71e0:	682b      	ldr	r3, [r5, #0]
    71e2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    71e4:	0018      	movs	r0, r3
    71e6:	4ba3      	ldr	r3, [pc, #652]	; (7474 <usart_init+0x32c>)
    71e8:	4798      	blx	r3
	if (sercom_index == 5) {
    71ea:	2805      	cmp	r0, #5
    71ec:	d026      	beq.n	723c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    71ee:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    71f0:	2200      	movs	r2, #0
    71f2:	230e      	movs	r3, #14
    71f4:	a906      	add	r1, sp, #24
    71f6:	468c      	mov	ip, r1
    71f8:	4463      	add	r3, ip
    71fa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    71fc:	8a32      	ldrh	r2, [r6, #16]
    71fe:	9202      	str	r2, [sp, #8]
    7200:	2380      	movs	r3, #128	; 0x80
    7202:	01db      	lsls	r3, r3, #7
    7204:	429a      	cmp	r2, r3
    7206:	d100      	bne.n	720a <usart_init+0xc2>
    7208:	e0a7      	b.n	735a <usart_init+0x212>
    720a:	d919      	bls.n	7240 <usart_init+0xf8>
    720c:	23c0      	movs	r3, #192	; 0xc0
    720e:	01db      	lsls	r3, r3, #7
    7210:	9a02      	ldr	r2, [sp, #8]
    7212:	429a      	cmp	r2, r3
    7214:	d100      	bne.n	7218 <usart_init+0xd0>
    7216:	e09b      	b.n	7350 <usart_init+0x208>
    7218:	2380      	movs	r3, #128	; 0x80
    721a:	021b      	lsls	r3, r3, #8
    721c:	429a      	cmp	r2, r3
    721e:	d000      	beq.n	7222 <usart_init+0xda>
    7220:	e123      	b.n	746a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    7222:	2303      	movs	r3, #3
    7224:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7226:	2300      	movs	r3, #0
    7228:	9307      	str	r3, [sp, #28]
    722a:	e012      	b.n	7252 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    722c:	4992      	ldr	r1, [pc, #584]	; (7478 <usart_init+0x330>)
    722e:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    7230:	3a04      	subs	r2, #4
    7232:	409a      	lsls	r2, r3
    7234:	0013      	movs	r3, r2
    7236:	4303      	orrs	r3, r0
    7238:	620b      	str	r3, [r1, #32]
    723a:	e7b4      	b.n	71a6 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    723c:	2018      	movs	r0, #24
    723e:	e7d7      	b.n	71f0 <usart_init+0xa8>
	switch (config->sample_rate) {
    7240:	2380      	movs	r3, #128	; 0x80
    7242:	019b      	lsls	r3, r3, #6
    7244:	429a      	cmp	r2, r3
    7246:	d000      	beq.n	724a <usart_init+0x102>
    7248:	e10f      	b.n	746a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    724a:	2310      	movs	r3, #16
    724c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    724e:	3b0f      	subs	r3, #15
    7250:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    7252:	6833      	ldr	r3, [r6, #0]
    7254:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7256:	68f3      	ldr	r3, [r6, #12]
    7258:	469b      	mov	fp, r3
		config->sample_adjustment |
    725a:	6973      	ldr	r3, [r6, #20]
    725c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    725e:	7e33      	ldrb	r3, [r6, #24]
    7260:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7262:	2326      	movs	r3, #38	; 0x26
    7264:	5cf3      	ldrb	r3, [r6, r3]
    7266:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7268:	6873      	ldr	r3, [r6, #4]
    726a:	4699      	mov	r9, r3
	switch (transfer_mode)
    726c:	2b00      	cmp	r3, #0
    726e:	d100      	bne.n	7272 <usart_init+0x12a>
    7270:	e09b      	b.n	73aa <usart_init+0x262>
    7272:	2380      	movs	r3, #128	; 0x80
    7274:	055b      	lsls	r3, r3, #21
    7276:	4599      	cmp	r9, r3
    7278:	d104      	bne.n	7284 <usart_init+0x13c>
			if (!config->use_external_clock) {
    727a:	2327      	movs	r3, #39	; 0x27
    727c:	5cf3      	ldrb	r3, [r6, r3]
    727e:	2b00      	cmp	r3, #0
    7280:	d100      	bne.n	7284 <usart_init+0x13c>
    7282:	e080      	b.n	7386 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    7284:	7e73      	ldrb	r3, [r6, #25]
    7286:	2b00      	cmp	r3, #0
    7288:	d002      	beq.n	7290 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    728a:	7eb3      	ldrb	r3, [r6, #26]
    728c:	4642      	mov	r2, r8
    728e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    7290:	230e      	movs	r3, #14
    7292:	aa06      	add	r2, sp, #24
    7294:	4694      	mov	ip, r2
    7296:	4463      	add	r3, ip
    7298:	881b      	ldrh	r3, [r3, #0]
    729a:	4642      	mov	r2, r8
    729c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    729e:	9b05      	ldr	r3, [sp, #20]
    72a0:	465a      	mov	r2, fp
    72a2:	4313      	orrs	r3, r2
    72a4:	9a03      	ldr	r2, [sp, #12]
    72a6:	4313      	orrs	r3, r2
    72a8:	464a      	mov	r2, r9
    72aa:	4313      	orrs	r3, r2
    72ac:	9f02      	ldr	r7, [sp, #8]
    72ae:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    72b0:	9b04      	ldr	r3, [sp, #16]
    72b2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    72b4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    72b6:	4653      	mov	r3, sl
    72b8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    72ba:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    72bc:	2327      	movs	r3, #39	; 0x27
    72be:	5cf3      	ldrb	r3, [r6, r3]
    72c0:	2b00      	cmp	r3, #0
    72c2:	d101      	bne.n	72c8 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    72c4:	3304      	adds	r3, #4
    72c6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    72c8:	7e73      	ldrb	r3, [r6, #25]
    72ca:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    72cc:	7f32      	ldrb	r2, [r6, #28]
    72ce:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    72d0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    72d2:	7f72      	ldrb	r2, [r6, #29]
    72d4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    72d6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    72d8:	2224      	movs	r2, #36	; 0x24
    72da:	5cb2      	ldrb	r2, [r6, r2]
    72dc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    72de:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    72e0:	2225      	movs	r2, #37	; 0x25
    72e2:	5cb2      	ldrb	r2, [r6, r2]
    72e4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    72e6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    72e8:	7ab1      	ldrb	r1, [r6, #10]
    72ea:	7af2      	ldrb	r2, [r6, #11]
    72ec:	4311      	orrs	r1, r2
    72ee:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    72f0:	8933      	ldrh	r3, [r6, #8]
    72f2:	2bff      	cmp	r3, #255	; 0xff
    72f4:	d07d      	beq.n	73f2 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    72f6:	2280      	movs	r2, #128	; 0x80
    72f8:	0452      	lsls	r2, r2, #17
    72fa:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    72fc:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    72fe:	232c      	movs	r3, #44	; 0x2c
    7300:	5cf3      	ldrb	r3, [r6, r3]
    7302:	2b00      	cmp	r3, #0
    7304:	d103      	bne.n	730e <usart_init+0x1c6>
    7306:	4b60      	ldr	r3, [pc, #384]	; (7488 <usart_init+0x340>)
    7308:	789b      	ldrb	r3, [r3, #2]
    730a:	079b      	lsls	r3, r3, #30
    730c:	d501      	bpl.n	7312 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    730e:	2380      	movs	r3, #128	; 0x80
    7310:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7312:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7314:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7316:	2b00      	cmp	r3, #0
    7318:	d1fc      	bne.n	7314 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    731a:	4643      	mov	r3, r8
    731c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    731e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7320:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7322:	2b00      	cmp	r3, #0
    7324:	d1fc      	bne.n	7320 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    7326:	4643      	mov	r3, r8
    7328:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    732a:	ab0e      	add	r3, sp, #56	; 0x38
    732c:	2280      	movs	r2, #128	; 0x80
    732e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7330:	2200      	movs	r2, #0
    7332:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7334:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7336:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7338:	6b33      	ldr	r3, [r6, #48]	; 0x30
    733a:	930a      	str	r3, [sp, #40]	; 0x28
    733c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    733e:	930b      	str	r3, [sp, #44]	; 0x2c
    7340:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7342:	930c      	str	r3, [sp, #48]	; 0x30
    7344:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    7346:	9302      	str	r3, [sp, #8]
    7348:	930d      	str	r3, [sp, #52]	; 0x34
    734a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    734c:	ae0a      	add	r6, sp, #40	; 0x28
    734e:	e05e      	b.n	740e <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7350:	2308      	movs	r3, #8
    7352:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7354:	3b07      	subs	r3, #7
    7356:	9307      	str	r3, [sp, #28]
    7358:	e77b      	b.n	7252 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    735a:	6833      	ldr	r3, [r6, #0]
    735c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    735e:	68f3      	ldr	r3, [r6, #12]
    7360:	469b      	mov	fp, r3
		config->sample_adjustment |
    7362:	6973      	ldr	r3, [r6, #20]
    7364:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7366:	7e33      	ldrb	r3, [r6, #24]
    7368:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    736a:	2326      	movs	r3, #38	; 0x26
    736c:	5cf3      	ldrb	r3, [r6, r3]
    736e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7370:	6873      	ldr	r3, [r6, #4]
    7372:	4699      	mov	r9, r3
	switch (transfer_mode)
    7374:	2b00      	cmp	r3, #0
    7376:	d014      	beq.n	73a2 <usart_init+0x25a>
    7378:	2380      	movs	r3, #128	; 0x80
    737a:	055b      	lsls	r3, r3, #21
    737c:	4599      	cmp	r9, r3
    737e:	d100      	bne.n	7382 <usart_init+0x23a>
    7380:	e77b      	b.n	727a <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    7382:	2000      	movs	r0, #0
    7384:	e020      	b.n	73c8 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7386:	6a33      	ldr	r3, [r6, #32]
    7388:	001f      	movs	r7, r3
    738a:	b2c0      	uxtb	r0, r0
    738c:	4b3f      	ldr	r3, [pc, #252]	; (748c <usart_init+0x344>)
    738e:	4798      	blx	r3
    7390:	0001      	movs	r1, r0
    7392:	220e      	movs	r2, #14
    7394:	ab06      	add	r3, sp, #24
    7396:	469c      	mov	ip, r3
    7398:	4462      	add	r2, ip
    739a:	0038      	movs	r0, r7
    739c:	4b3c      	ldr	r3, [pc, #240]	; (7490 <usart_init+0x348>)
    739e:	4798      	blx	r3
    73a0:	e012      	b.n	73c8 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    73a2:	2308      	movs	r3, #8
    73a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    73a6:	2300      	movs	r3, #0
    73a8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    73aa:	2327      	movs	r3, #39	; 0x27
    73ac:	5cf3      	ldrb	r3, [r6, r3]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d00e      	beq.n	73d0 <usart_init+0x288>
				status_code =
    73b2:	9b06      	ldr	r3, [sp, #24]
    73b4:	9300      	str	r3, [sp, #0]
    73b6:	9b07      	ldr	r3, [sp, #28]
    73b8:	220e      	movs	r2, #14
    73ba:	a906      	add	r1, sp, #24
    73bc:	468c      	mov	ip, r1
    73be:	4462      	add	r2, ip
    73c0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    73c2:	6a30      	ldr	r0, [r6, #32]
    73c4:	4f33      	ldr	r7, [pc, #204]	; (7494 <usart_init+0x34c>)
    73c6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    73c8:	2800      	cmp	r0, #0
    73ca:	d000      	beq.n	73ce <usart_init+0x286>
    73cc:	e6d4      	b.n	7178 <usart_init+0x30>
    73ce:	e759      	b.n	7284 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    73d0:	6a33      	ldr	r3, [r6, #32]
    73d2:	001f      	movs	r7, r3
    73d4:	b2c0      	uxtb	r0, r0
    73d6:	4b2d      	ldr	r3, [pc, #180]	; (748c <usart_init+0x344>)
    73d8:	4798      	blx	r3
    73da:	0001      	movs	r1, r0
				status_code =
    73dc:	9b06      	ldr	r3, [sp, #24]
    73de:	9300      	str	r3, [sp, #0]
    73e0:	9b07      	ldr	r3, [sp, #28]
    73e2:	220e      	movs	r2, #14
    73e4:	a806      	add	r0, sp, #24
    73e6:	4684      	mov	ip, r0
    73e8:	4462      	add	r2, ip
    73ea:	0038      	movs	r0, r7
    73ec:	4f29      	ldr	r7, [pc, #164]	; (7494 <usart_init+0x34c>)
    73ee:	47b8      	blx	r7
    73f0:	e7ea      	b.n	73c8 <usart_init+0x280>
		if(config->lin_slave_enable) {
    73f2:	7ef3      	ldrb	r3, [r6, #27]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d082      	beq.n	72fe <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    73f8:	2380      	movs	r3, #128	; 0x80
    73fa:	04db      	lsls	r3, r3, #19
    73fc:	431f      	orrs	r7, r3
    73fe:	e77e      	b.n	72fe <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7400:	0020      	movs	r0, r4
    7402:	4b25      	ldr	r3, [pc, #148]	; (7498 <usart_init+0x350>)
    7404:	4798      	blx	r3
    7406:	e007      	b.n	7418 <usart_init+0x2d0>
    7408:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    740a:	2f04      	cmp	r7, #4
    740c:	d00d      	beq.n	742a <usart_init+0x2e2>
    740e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7410:	00bb      	lsls	r3, r7, #2
    7412:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7414:	2800      	cmp	r0, #0
    7416:	d0f3      	beq.n	7400 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    7418:	1c43      	adds	r3, r0, #1
    741a:	d0f5      	beq.n	7408 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    741c:	a90e      	add	r1, sp, #56	; 0x38
    741e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7420:	0c00      	lsrs	r0, r0, #16
    7422:	b2c0      	uxtb	r0, r0
    7424:	4b1d      	ldr	r3, [pc, #116]	; (749c <usart_init+0x354>)
    7426:	4798      	blx	r3
    7428:	e7ee      	b.n	7408 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    742a:	2300      	movs	r3, #0
    742c:	60eb      	str	r3, [r5, #12]
    742e:	612b      	str	r3, [r5, #16]
    7430:	616b      	str	r3, [r5, #20]
    7432:	61ab      	str	r3, [r5, #24]
    7434:	61eb      	str	r3, [r5, #28]
    7436:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7438:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    743a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    743c:	2200      	movs	r2, #0
    743e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7440:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7442:	3330      	adds	r3, #48	; 0x30
    7444:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7446:	3301      	adds	r3, #1
    7448:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    744a:	3301      	adds	r3, #1
    744c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    744e:	3301      	adds	r3, #1
    7450:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7452:	6828      	ldr	r0, [r5, #0]
    7454:	4b07      	ldr	r3, [pc, #28]	; (7474 <usart_init+0x32c>)
    7456:	4798      	blx	r3
    7458:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    745a:	4911      	ldr	r1, [pc, #68]	; (74a0 <usart_init+0x358>)
    745c:	4b11      	ldr	r3, [pc, #68]	; (74a4 <usart_init+0x35c>)
    745e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7460:	00a4      	lsls	r4, r4, #2
    7462:	4b11      	ldr	r3, [pc, #68]	; (74a8 <usart_init+0x360>)
    7464:	50e5      	str	r5, [r4, r3]
	return status_code;
    7466:	2000      	movs	r0, #0
    7468:	e686      	b.n	7178 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    746a:	2310      	movs	r3, #16
    746c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    746e:	2300      	movs	r3, #0
    7470:	9307      	str	r3, [sp, #28]
    7472:	e6ee      	b.n	7252 <usart_init+0x10a>
    7474:	00006c71 	.word	0x00006c71
    7478:	40000400 	.word	0x40000400
    747c:	00007d51 	.word	0x00007d51
    7480:	00007ce1 	.word	0x00007ce1
    7484:	00006b25 	.word	0x00006b25
    7488:	41002000 	.word	0x41002000
    748c:	00007d75 	.word	0x00007d75
    7490:	00006a67 	.word	0x00006a67
    7494:	00006a91 	.word	0x00006a91
    7498:	00006b71 	.word	0x00006b71
    749c:	00007e4d 	.word	0x00007e4d
    74a0:	00007691 	.word	0x00007691
    74a4:	00006cad 	.word	0x00006cad
    74a8:	20001cf0 	.word	0x20001cf0

000074ac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    74ac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    74ae:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    74b0:	2a00      	cmp	r2, #0
    74b2:	d101      	bne.n	74b8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    74b4:	0018      	movs	r0, r3
    74b6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    74b8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    74ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    74bc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    74be:	2a00      	cmp	r2, #0
    74c0:	d1f8      	bne.n	74b4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    74c2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    74c4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    74c6:	2102      	movs	r1, #2
    74c8:	7e13      	ldrb	r3, [r2, #24]
    74ca:	420b      	tst	r3, r1
    74cc:	d0fc      	beq.n	74c8 <usart_write_wait+0x1c>
	return STATUS_OK;
    74ce:	2300      	movs	r3, #0
    74d0:	e7f0      	b.n	74b4 <usart_write_wait+0x8>

000074d2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    74d2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    74d4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    74d6:	2a00      	cmp	r2, #0
    74d8:	d101      	bne.n	74de <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    74da:	0018      	movs	r0, r3
    74dc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    74de:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    74e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    74e2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    74e4:	2a00      	cmp	r2, #0
    74e6:	d1f8      	bne.n	74da <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    74e8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    74ea:	7e10      	ldrb	r0, [r2, #24]
    74ec:	0740      	lsls	r0, r0, #29
    74ee:	d5f4      	bpl.n	74da <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    74f0:	8b53      	ldrh	r3, [r2, #26]
    74f2:	b2db      	uxtb	r3, r3
	if (error_code) {
    74f4:	0698      	lsls	r0, r3, #26
    74f6:	d01d      	beq.n	7534 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    74f8:	0798      	lsls	r0, r3, #30
    74fa:	d503      	bpl.n	7504 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    74fc:	2302      	movs	r3, #2
    74fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    7500:	3318      	adds	r3, #24
    7502:	e7ea      	b.n	74da <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7504:	0758      	lsls	r0, r3, #29
    7506:	d503      	bpl.n	7510 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7508:	2304      	movs	r3, #4
    750a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    750c:	331a      	adds	r3, #26
    750e:	e7e4      	b.n	74da <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7510:	07d8      	lsls	r0, r3, #31
    7512:	d503      	bpl.n	751c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7514:	2301      	movs	r3, #1
    7516:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7518:	3312      	adds	r3, #18
    751a:	e7de      	b.n	74da <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    751c:	06d8      	lsls	r0, r3, #27
    751e:	d503      	bpl.n	7528 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7520:	2310      	movs	r3, #16
    7522:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    7524:	3332      	adds	r3, #50	; 0x32
    7526:	e7d8      	b.n	74da <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7528:	069b      	lsls	r3, r3, #26
    752a:	d503      	bpl.n	7534 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    752c:	2320      	movs	r3, #32
    752e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7530:	3321      	adds	r3, #33	; 0x21
    7532:	e7d2      	b.n	74da <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7534:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    7536:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7538:	2300      	movs	r3, #0
    753a:	e7ce      	b.n	74da <usart_read_wait+0x8>

0000753c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    753c:	b5f0      	push	{r4, r5, r6, r7, lr}
    753e:	46ce      	mov	lr, r9
    7540:	4647      	mov	r7, r8
    7542:	b580      	push	{r7, lr}
    7544:	b083      	sub	sp, #12
    7546:	0005      	movs	r5, r0
    7548:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    754a:	2017      	movs	r0, #23
	if (length == 0) {
    754c:	2a00      	cmp	r2, #0
    754e:	d104      	bne.n	755a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    7550:	b003      	add	sp, #12
    7552:	bc0c      	pop	{r2, r3}
    7554:	4690      	mov	r8, r2
    7556:	4699      	mov	r9, r3
    7558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    755a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    755c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    755e:	2b00      	cmp	r3, #0
    7560:	d0f6      	beq.n	7550 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7562:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    7564:	3a01      	subs	r2, #1
    7566:	b293      	uxth	r3, r2
    7568:	4699      	mov	r9, r3
    756a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    756c:	2701      	movs	r7, #1
	while (length--) {
    756e:	4b20      	ldr	r3, [pc, #128]	; (75f0 <usart_write_buffer_wait+0xb4>)
    7570:	4698      	mov	r8, r3
    7572:	e011      	b.n	7598 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    7574:	1c73      	adds	r3, r6, #1
    7576:	b29b      	uxth	r3, r3
    7578:	9a01      	ldr	r2, [sp, #4]
    757a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    757c:	796a      	ldrb	r2, [r5, #5]
    757e:	2a01      	cmp	r2, #1
    7580:	d017      	beq.n	75b2 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    7582:	b289      	uxth	r1, r1
    7584:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    7586:	0028      	movs	r0, r5
    7588:	4b1a      	ldr	r3, [pc, #104]	; (75f4 <usart_write_buffer_wait+0xb8>)
    758a:	4798      	blx	r3
	while (length--) {
    758c:	464b      	mov	r3, r9
    758e:	3b01      	subs	r3, #1
    7590:	b29b      	uxth	r3, r3
    7592:	4699      	mov	r9, r3
    7594:	4543      	cmp	r3, r8
    7596:	d013      	beq.n	75c0 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7598:	7e23      	ldrb	r3, [r4, #24]
    759a:	423b      	tst	r3, r7
    759c:	d1ea      	bne.n	7574 <usart_write_buffer_wait+0x38>
    759e:	4b14      	ldr	r3, [pc, #80]	; (75f0 <usart_write_buffer_wait+0xb4>)
    75a0:	7e22      	ldrb	r2, [r4, #24]
    75a2:	423a      	tst	r2, r7
    75a4:	d1e6      	bne.n	7574 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    75a6:	2b01      	cmp	r3, #1
    75a8:	d019      	beq.n	75de <usart_write_buffer_wait+0xa2>
    75aa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    75ac:	2b00      	cmp	r3, #0
    75ae:	d1f7      	bne.n	75a0 <usart_write_buffer_wait+0x64>
    75b0:	e7e0      	b.n	7574 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    75b2:	3602      	adds	r6, #2
    75b4:	b2b6      	uxth	r6, r6
    75b6:	9a01      	ldr	r2, [sp, #4]
    75b8:	5cd3      	ldrb	r3, [r2, r3]
    75ba:	021b      	lsls	r3, r3, #8
    75bc:	4319      	orrs	r1, r3
    75be:	e7e2      	b.n	7586 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    75c0:	7e23      	ldrb	r3, [r4, #24]
    75c2:	079b      	lsls	r3, r3, #30
    75c4:	d40d      	bmi.n	75e2 <usart_write_buffer_wait+0xa6>
    75c6:	4b0a      	ldr	r3, [pc, #40]	; (75f0 <usart_write_buffer_wait+0xb4>)
    75c8:	2102      	movs	r1, #2
    75ca:	7e22      	ldrb	r2, [r4, #24]
    75cc:	420a      	tst	r2, r1
    75ce:	d10a      	bne.n	75e6 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    75d0:	2b01      	cmp	r3, #1
    75d2:	d00a      	beq.n	75ea <usart_write_buffer_wait+0xae>
    75d4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    75d6:	2b00      	cmp	r3, #0
    75d8:	d1f7      	bne.n	75ca <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    75da:	2000      	movs	r0, #0
    75dc:	e7b8      	b.n	7550 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    75de:	2012      	movs	r0, #18
    75e0:	e7b6      	b.n	7550 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    75e2:	2000      	movs	r0, #0
    75e4:	e7b4      	b.n	7550 <usart_write_buffer_wait+0x14>
    75e6:	2000      	movs	r0, #0
    75e8:	e7b2      	b.n	7550 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    75ea:	2012      	movs	r0, #18
    75ec:	e7b0      	b.n	7550 <usart_write_buffer_wait+0x14>
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	0000ffff 	.word	0x0000ffff
    75f4:	000074ad 	.word	0x000074ad

000075f8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fa:	46d6      	mov	lr, sl
    75fc:	b500      	push	{lr}
    75fe:	b084      	sub	sp, #16
    7600:	0004      	movs	r4, r0
    7602:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7604:	2017      	movs	r0, #23
	if (length == 0) {
    7606:	2a00      	cmp	r2, #0
    7608:	d103      	bne.n	7612 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    760a:	b004      	add	sp, #16
    760c:	bc04      	pop	{r2}
    760e:	4692      	mov	sl, r2
    7610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7612:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7614:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7616:	2b00      	cmp	r3, #0
    7618:	d0f7      	beq.n	760a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    761a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    761c:	3a01      	subs	r2, #1
    761e:	b293      	uxth	r3, r2
    7620:	469a      	mov	sl, r3
    7622:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7624:	2704      	movs	r7, #4
    7626:	e019      	b.n	765c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    7628:	2300      	movs	r3, #0
    762a:	aa02      	add	r2, sp, #8
    762c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    762e:	1d91      	adds	r1, r2, #6
    7630:	0020      	movs	r0, r4
    7632:	4b15      	ldr	r3, [pc, #84]	; (7688 <usart_read_buffer_wait+0x90>)
    7634:	4798      	blx	r3
		if (retval != STATUS_OK) {
    7636:	2800      	cmp	r0, #0
    7638:	d1e7      	bne.n	760a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    763a:	1c69      	adds	r1, r5, #1
    763c:	b289      	uxth	r1, r1
    763e:	ab02      	add	r3, sp, #8
    7640:	88db      	ldrh	r3, [r3, #6]
    7642:	9a01      	ldr	r2, [sp, #4]
    7644:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7646:	7962      	ldrb	r2, [r4, #5]
    7648:	2a01      	cmp	r2, #1
    764a:	d014      	beq.n	7676 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    764c:	000d      	movs	r5, r1
	while (length--) {
    764e:	4653      	mov	r3, sl
    7650:	3b01      	subs	r3, #1
    7652:	b29b      	uxth	r3, r3
    7654:	469a      	mov	sl, r3
    7656:	4b0d      	ldr	r3, [pc, #52]	; (768c <usart_read_buffer_wait+0x94>)
    7658:	459a      	cmp	sl, r3
    765a:	d0d6      	beq.n	760a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    765c:	7e33      	ldrb	r3, [r6, #24]
    765e:	423b      	tst	r3, r7
    7660:	d1e2      	bne.n	7628 <usart_read_buffer_wait+0x30>
    7662:	4b0a      	ldr	r3, [pc, #40]	; (768c <usart_read_buffer_wait+0x94>)
    7664:	7e32      	ldrb	r2, [r6, #24]
    7666:	423a      	tst	r2, r7
    7668:	d1de      	bne.n	7628 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    766a:	2b01      	cmp	r3, #1
    766c:	d009      	beq.n	7682 <usart_read_buffer_wait+0x8a>
    766e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7670:	2b00      	cmp	r3, #0
    7672:	d1f7      	bne.n	7664 <usart_read_buffer_wait+0x6c>
    7674:	e7d8      	b.n	7628 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    7676:	3502      	adds	r5, #2
    7678:	b2ad      	uxth	r5, r5
    767a:	0a1b      	lsrs	r3, r3, #8
    767c:	9a01      	ldr	r2, [sp, #4]
    767e:	5453      	strb	r3, [r2, r1]
    7680:	e7e5      	b.n	764e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7682:	2012      	movs	r0, #18
    7684:	e7c1      	b.n	760a <usart_read_buffer_wait+0x12>
    7686:	46c0      	nop			; (mov r8, r8)
    7688:	000074d3 	.word	0x000074d3
    768c:	0000ffff 	.word	0x0000ffff

00007690 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7692:	0080      	lsls	r0, r0, #2
    7694:	4b62      	ldr	r3, [pc, #392]	; (7820 <_usart_interrupt_handler+0x190>)
    7696:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7698:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    769a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    769c:	2b00      	cmp	r3, #0
    769e:	d1fc      	bne.n	769a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    76a0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    76a2:	7da6      	ldrb	r6, [r4, #22]
    76a4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    76a6:	2330      	movs	r3, #48	; 0x30
    76a8:	5ceb      	ldrb	r3, [r5, r3]
    76aa:	2231      	movs	r2, #49	; 0x31
    76ac:	5caf      	ldrb	r7, [r5, r2]
    76ae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    76b0:	07f3      	lsls	r3, r6, #31
    76b2:	d522      	bpl.n	76fa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    76b4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    76b6:	b29b      	uxth	r3, r3
    76b8:	2b00      	cmp	r3, #0
    76ba:	d01c      	beq.n	76f6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    76bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    76be:	7813      	ldrb	r3, [r2, #0]
    76c0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    76c2:	1c51      	adds	r1, r2, #1
    76c4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    76c6:	7969      	ldrb	r1, [r5, #5]
    76c8:	2901      	cmp	r1, #1
    76ca:	d00e      	beq.n	76ea <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    76cc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    76ce:	05db      	lsls	r3, r3, #23
    76d0:	0ddb      	lsrs	r3, r3, #23
    76d2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    76d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    76d6:	3b01      	subs	r3, #1
    76d8:	b29b      	uxth	r3, r3
    76da:	85eb      	strh	r3, [r5, #46]	; 0x2e
    76dc:	2b00      	cmp	r3, #0
    76de:	d10c      	bne.n	76fa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76e0:	3301      	adds	r3, #1
    76e2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    76e4:	3301      	adds	r3, #1
    76e6:	75a3      	strb	r3, [r4, #22]
    76e8:	e007      	b.n	76fa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    76ea:	7851      	ldrb	r1, [r2, #1]
    76ec:	0209      	lsls	r1, r1, #8
    76ee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    76f0:	3202      	adds	r2, #2
    76f2:	62aa      	str	r2, [r5, #40]	; 0x28
    76f4:	e7eb      	b.n	76ce <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76f6:	2301      	movs	r3, #1
    76f8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    76fa:	07b3      	lsls	r3, r6, #30
    76fc:	d506      	bpl.n	770c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    76fe:	2302      	movs	r3, #2
    7700:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7702:	2200      	movs	r2, #0
    7704:	3331      	adds	r3, #49	; 0x31
    7706:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7708:	07fb      	lsls	r3, r7, #31
    770a:	d41a      	bmi.n	7742 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    770c:	0773      	lsls	r3, r6, #29
    770e:	d565      	bpl.n	77dc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7710:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7712:	b29b      	uxth	r3, r3
    7714:	2b00      	cmp	r3, #0
    7716:	d05f      	beq.n	77d8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7718:	8b63      	ldrh	r3, [r4, #26]
    771a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    771c:	071a      	lsls	r2, r3, #28
    771e:	d414      	bmi.n	774a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7720:	223f      	movs	r2, #63	; 0x3f
    7722:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7724:	2b00      	cmp	r3, #0
    7726:	d034      	beq.n	7792 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7728:	079a      	lsls	r2, r3, #30
    772a:	d511      	bpl.n	7750 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    772c:	221a      	movs	r2, #26
    772e:	2332      	movs	r3, #50	; 0x32
    7730:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7732:	3b30      	subs	r3, #48	; 0x30
    7734:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7736:	077b      	lsls	r3, r7, #29
    7738:	d550      	bpl.n	77dc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    773a:	0028      	movs	r0, r5
    773c:	696b      	ldr	r3, [r5, #20]
    773e:	4798      	blx	r3
    7740:	e04c      	b.n	77dc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7742:	0028      	movs	r0, r5
    7744:	68eb      	ldr	r3, [r5, #12]
    7746:	4798      	blx	r3
    7748:	e7e0      	b.n	770c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    774a:	2237      	movs	r2, #55	; 0x37
    774c:	4013      	ands	r3, r2
    774e:	e7e9      	b.n	7724 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7750:	075a      	lsls	r2, r3, #29
    7752:	d505      	bpl.n	7760 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7754:	221e      	movs	r2, #30
    7756:	2332      	movs	r3, #50	; 0x32
    7758:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    775a:	3b2e      	subs	r3, #46	; 0x2e
    775c:	8363      	strh	r3, [r4, #26]
    775e:	e7ea      	b.n	7736 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7760:	07da      	lsls	r2, r3, #31
    7762:	d505      	bpl.n	7770 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7764:	2213      	movs	r2, #19
    7766:	2332      	movs	r3, #50	; 0x32
    7768:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    776a:	3b31      	subs	r3, #49	; 0x31
    776c:	8363      	strh	r3, [r4, #26]
    776e:	e7e2      	b.n	7736 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7770:	06da      	lsls	r2, r3, #27
    7772:	d505      	bpl.n	7780 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7774:	2242      	movs	r2, #66	; 0x42
    7776:	2332      	movs	r3, #50	; 0x32
    7778:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    777a:	3b22      	subs	r3, #34	; 0x22
    777c:	8363      	strh	r3, [r4, #26]
    777e:	e7da      	b.n	7736 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7780:	2220      	movs	r2, #32
    7782:	421a      	tst	r2, r3
    7784:	d0d7      	beq.n	7736 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7786:	3221      	adds	r2, #33	; 0x21
    7788:	2332      	movs	r3, #50	; 0x32
    778a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    778c:	3b12      	subs	r3, #18
    778e:	8363      	strh	r3, [r4, #26]
    7790:	e7d1      	b.n	7736 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7792:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7794:	05db      	lsls	r3, r3, #23
    7796:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7798:	b2da      	uxtb	r2, r3
    779a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    779c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    779e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    77a0:	1c51      	adds	r1, r2, #1
    77a2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    77a4:	7969      	ldrb	r1, [r5, #5]
    77a6:	2901      	cmp	r1, #1
    77a8:	d010      	beq.n	77cc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    77aa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    77ac:	3b01      	subs	r3, #1
    77ae:	b29b      	uxth	r3, r3
    77b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    77b2:	2b00      	cmp	r3, #0
    77b4:	d112      	bne.n	77dc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    77b6:	3304      	adds	r3, #4
    77b8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    77ba:	2200      	movs	r2, #0
    77bc:	332e      	adds	r3, #46	; 0x2e
    77be:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    77c0:	07bb      	lsls	r3, r7, #30
    77c2:	d50b      	bpl.n	77dc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    77c4:	0028      	movs	r0, r5
    77c6:	692b      	ldr	r3, [r5, #16]
    77c8:	4798      	blx	r3
    77ca:	e007      	b.n	77dc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    77cc:	0a1b      	lsrs	r3, r3, #8
    77ce:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    77d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    77d2:	3301      	adds	r3, #1
    77d4:	626b      	str	r3, [r5, #36]	; 0x24
    77d6:	e7e8      	b.n	77aa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    77d8:	2304      	movs	r3, #4
    77da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    77dc:	06f3      	lsls	r3, r6, #27
    77de:	d504      	bpl.n	77ea <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    77e0:	2310      	movs	r3, #16
    77e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    77e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    77e6:	06fb      	lsls	r3, r7, #27
    77e8:	d40e      	bmi.n	7808 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    77ea:	06b3      	lsls	r3, r6, #26
    77ec:	d504      	bpl.n	77f8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    77ee:	2320      	movs	r3, #32
    77f0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    77f2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    77f4:	073b      	lsls	r3, r7, #28
    77f6:	d40b      	bmi.n	7810 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    77f8:	0733      	lsls	r3, r6, #28
    77fa:	d504      	bpl.n	7806 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    77fc:	2308      	movs	r3, #8
    77fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7800:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7802:	06bb      	lsls	r3, r7, #26
    7804:	d408      	bmi.n	7818 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7808:	0028      	movs	r0, r5
    780a:	69eb      	ldr	r3, [r5, #28]
    780c:	4798      	blx	r3
    780e:	e7ec      	b.n	77ea <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7810:	0028      	movs	r0, r5
    7812:	69ab      	ldr	r3, [r5, #24]
    7814:	4798      	blx	r3
    7816:	e7ef      	b.n	77f8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7818:	6a2b      	ldr	r3, [r5, #32]
    781a:	0028      	movs	r0, r5
    781c:	4798      	blx	r3
}
    781e:	e7f2      	b.n	7806 <_usart_interrupt_handler+0x176>
    7820:	20001cf0 	.word	0x20001cf0

00007824 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7824:	b510      	push	{r4, lr}
	switch (clock_source) {
    7826:	2808      	cmp	r0, #8
    7828:	d803      	bhi.n	7832 <system_clock_source_get_hz+0xe>
    782a:	0080      	lsls	r0, r0, #2
    782c:	4b1d      	ldr	r3, [pc, #116]	; (78a4 <system_clock_source_get_hz+0x80>)
    782e:	581b      	ldr	r3, [r3, r0]
    7830:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    7832:	2000      	movs	r0, #0
    7834:	e034      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    7836:	4b1c      	ldr	r3, [pc, #112]	; (78a8 <system_clock_source_get_hz+0x84>)
    7838:	6918      	ldr	r0, [r3, #16]
    783a:	e031      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    783c:	4b1b      	ldr	r3, [pc, #108]	; (78ac <system_clock_source_get_hz+0x88>)
    783e:	7d18      	ldrb	r0, [r3, #20]
    7840:	0700      	lsls	r0, r0, #28
    7842:	0f80      	lsrs	r0, r0, #30
    7844:	1c43      	adds	r3, r0, #1
    7846:	481a      	ldr	r0, [pc, #104]	; (78b0 <system_clock_source_get_hz+0x8c>)
    7848:	4358      	muls	r0, r3
    784a:	e029      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    784c:	4b16      	ldr	r3, [pc, #88]	; (78a8 <system_clock_source_get_hz+0x84>)
    784e:	6958      	ldr	r0, [r3, #20]
    7850:	e026      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    7852:	4b15      	ldr	r3, [pc, #84]	; (78a8 <system_clock_source_get_hz+0x84>)
    7854:	681b      	ldr	r3, [r3, #0]
			return 0;
    7856:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    7858:	079b      	lsls	r3, r3, #30
    785a:	d521      	bpl.n	78a0 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    785c:	4913      	ldr	r1, [pc, #76]	; (78ac <system_clock_source_get_hz+0x88>)
    785e:	2280      	movs	r2, #128	; 0x80
    7860:	0052      	lsls	r2, r2, #1
    7862:	68cb      	ldr	r3, [r1, #12]
    7864:	4213      	tst	r3, r2
    7866:	d0fc      	beq.n	7862 <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    7868:	4b0f      	ldr	r3, [pc, #60]	; (78a8 <system_clock_source_get_hz+0x84>)
    786a:	681a      	ldr	r2, [r3, #0]
    786c:	2324      	movs	r3, #36	; 0x24
    786e:	4013      	ands	r3, r2
    7870:	2b04      	cmp	r3, #4
    7872:	d001      	beq.n	7878 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    7874:	480f      	ldr	r0, [pc, #60]	; (78b4 <system_clock_source_get_hz+0x90>)
    7876:	e013      	b.n	78a0 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    7878:	2000      	movs	r0, #0
    787a:	4b0f      	ldr	r3, [pc, #60]	; (78b8 <system_clock_source_get_hz+0x94>)
    787c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    787e:	4b0a      	ldr	r3, [pc, #40]	; (78a8 <system_clock_source_get_hz+0x84>)
    7880:	689b      	ldr	r3, [r3, #8]
    7882:	041b      	lsls	r3, r3, #16
    7884:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    7886:	4358      	muls	r0, r3
    7888:	e00a      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    788a:	2328      	movs	r3, #40	; 0x28
    788c:	4a07      	ldr	r2, [pc, #28]	; (78ac <system_clock_source_get_hz+0x88>)
    788e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7890:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    7892:	079b      	lsls	r3, r3, #30
    7894:	d504      	bpl.n	78a0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    7896:	4b04      	ldr	r3, [pc, #16]	; (78a8 <system_clock_source_get_hz+0x84>)
    7898:	68d8      	ldr	r0, [r3, #12]
    789a:	e001      	b.n	78a0 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    789c:	2080      	movs	r0, #128	; 0x80
    789e:	0200      	lsls	r0, r0, #8
	}
}
    78a0:	bd10      	pop	{r4, pc}
    78a2:	46c0      	nop			; (mov r8, r8)
    78a4:	00010cfc 	.word	0x00010cfc
    78a8:	200000e0 	.word	0x200000e0
    78ac:	40000c00 	.word	0x40000c00
    78b0:	003d0900 	.word	0x003d0900
    78b4:	02dc6c00 	.word	0x02dc6c00
    78b8:	00007d75 	.word	0x00007d75

000078bc <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    78bc:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    78be:	4c0b      	ldr	r4, [pc, #44]	; (78ec <system_clock_source_osc16m_set_config+0x30>)
    78c0:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    78c2:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    78c4:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    78c6:	7802      	ldrb	r2, [r0, #0]
    78c8:	2103      	movs	r1, #3
    78ca:	4011      	ands	r1, r2
    78cc:	0089      	lsls	r1, r1, #2
    78ce:	220c      	movs	r2, #12
    78d0:	4393      	bics	r3, r2
    78d2:	430b      	orrs	r3, r1
    78d4:	3a0b      	subs	r2, #11
    78d6:	4032      	ands	r2, r6
    78d8:	0192      	lsls	r2, r2, #6
    78da:	2140      	movs	r1, #64	; 0x40
    78dc:	438b      	bics	r3, r1
    78de:	4313      	orrs	r3, r2
    78e0:	01ed      	lsls	r5, r5, #7
    78e2:	227f      	movs	r2, #127	; 0x7f
    78e4:	4013      	ands	r3, r2
    78e6:	432b      	orrs	r3, r5
    78e8:	7523      	strb	r3, [r4, #20]
}
    78ea:	bd70      	pop	{r4, r5, r6, pc}
    78ec:	40000c00 	.word	0x40000c00

000078f0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    78f0:	2808      	cmp	r0, #8
    78f2:	d803      	bhi.n	78fc <system_clock_source_enable+0xc>
    78f4:	0080      	lsls	r0, r0, #2
    78f6:	4b29      	ldr	r3, [pc, #164]	; (799c <system_clock_source_enable+0xac>)
    78f8:	581b      	ldr	r3, [r3, r0]
    78fa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    78fc:	2017      	movs	r0, #23
    78fe:	e04b      	b.n	7998 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    7900:	4a27      	ldr	r2, [pc, #156]	; (79a0 <system_clock_source_enable+0xb0>)
    7902:	7d13      	ldrb	r3, [r2, #20]
    7904:	2102      	movs	r1, #2
    7906:	430b      	orrs	r3, r1
    7908:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    790a:	2000      	movs	r0, #0
    790c:	e044      	b.n	7998 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    790e:	4a25      	ldr	r2, [pc, #148]	; (79a4 <system_clock_source_enable+0xb4>)
    7910:	6993      	ldr	r3, [r2, #24]
    7912:	2102      	movs	r1, #2
    7914:	430b      	orrs	r3, r1
    7916:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    7918:	2000      	movs	r0, #0
		break;
    791a:	e03d      	b.n	7998 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    791c:	4a20      	ldr	r2, [pc, #128]	; (79a0 <system_clock_source_enable+0xb0>)
    791e:	8a13      	ldrh	r3, [r2, #16]
    7920:	2102      	movs	r1, #2
    7922:	430b      	orrs	r3, r1
    7924:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    7926:	2000      	movs	r0, #0
		break;
    7928:	e036      	b.n	7998 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    792a:	4a1e      	ldr	r2, [pc, #120]	; (79a4 <system_clock_source_enable+0xb4>)
    792c:	6953      	ldr	r3, [r2, #20]
    792e:	2102      	movs	r1, #2
    7930:	430b      	orrs	r3, r1
    7932:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    7934:	2000      	movs	r0, #0
		break;
    7936:	e02f      	b.n	7998 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    7938:	491b      	ldr	r1, [pc, #108]	; (79a8 <system_clock_source_enable+0xb8>)
    793a:	680b      	ldr	r3, [r1, #0]
    793c:	2202      	movs	r2, #2
    793e:	4313      	orrs	r3, r2
    7940:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    7942:	4b17      	ldr	r3, [pc, #92]	; (79a0 <system_clock_source_enable+0xb0>)
    7944:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    7946:	0019      	movs	r1, r3
    7948:	32fe      	adds	r2, #254	; 0xfe
    794a:	68cb      	ldr	r3, [r1, #12]
    794c:	4213      	tst	r3, r2
    794e:	d0fc      	beq.n	794a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7950:	4a15      	ldr	r2, [pc, #84]	; (79a8 <system_clock_source_enable+0xb8>)
    7952:	6891      	ldr	r1, [r2, #8]
    7954:	4b12      	ldr	r3, [pc, #72]	; (79a0 <system_clock_source_enable+0xb0>)
    7956:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7958:	6852      	ldr	r2, [r2, #4]
    795a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    795c:	2200      	movs	r2, #0
    795e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    7960:	0019      	movs	r1, r3
    7962:	3201      	adds	r2, #1
    7964:	32ff      	adds	r2, #255	; 0xff
    7966:	68cb      	ldr	r3, [r1, #12]
    7968:	4213      	tst	r3, r2
    796a:	d0fc      	beq.n	7966 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    796c:	4b0e      	ldr	r3, [pc, #56]	; (79a8 <system_clock_source_enable+0xb8>)
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	b29b      	uxth	r3, r3
    7972:	4a0b      	ldr	r2, [pc, #44]	; (79a0 <system_clock_source_enable+0xb0>)
    7974:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    7976:	2000      	movs	r0, #0
    7978:	e00e      	b.n	7998 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    797a:	4909      	ldr	r1, [pc, #36]	; (79a0 <system_clock_source_enable+0xb0>)
    797c:	2228      	movs	r2, #40	; 0x28
    797e:	5c8b      	ldrb	r3, [r1, r2]
    7980:	2002      	movs	r0, #2
    7982:	4303      	orrs	r3, r0
    7984:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    7986:	0008      	movs	r0, r1
    7988:	2138      	movs	r1, #56	; 0x38
    798a:	3a26      	subs	r2, #38	; 0x26
    798c:	5c43      	ldrb	r3, [r0, r1]
    798e:	4213      	tst	r3, r2
    7990:	d1fc      	bne.n	798c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    7992:	2000      	movs	r0, #0
    7994:	e000      	b.n	7998 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    7996:	2000      	movs	r0, #0
}
    7998:	4770      	bx	lr
    799a:	46c0      	nop			; (mov r8, r8)
    799c:	00010d20 	.word	0x00010d20
    79a0:	40000c00 	.word	0x40000c00
    79a4:	40001000 	.word	0x40001000
    79a8:	200000e0 	.word	0x200000e0

000079ac <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    79ac:	2808      	cmp	r0, #8
    79ae:	d832      	bhi.n	7a16 <system_clock_source_disable+0x6a>
    79b0:	0080      	lsls	r0, r0, #2
    79b2:	4b1a      	ldr	r3, [pc, #104]	; (7a1c <system_clock_source_disable+0x70>)
    79b4:	581b      	ldr	r3, [r3, r0]
    79b6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    79b8:	4a19      	ldr	r2, [pc, #100]	; (7a20 <system_clock_source_disable+0x74>)
    79ba:	7d13      	ldrb	r3, [r2, #20]
    79bc:	2102      	movs	r1, #2
    79be:	438b      	bics	r3, r1
    79c0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    79c2:	2000      	movs	r0, #0
}
    79c4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    79c6:	4a17      	ldr	r2, [pc, #92]	; (7a24 <system_clock_source_disable+0x78>)
    79c8:	6993      	ldr	r3, [r2, #24]
    79ca:	2102      	movs	r1, #2
    79cc:	438b      	bics	r3, r1
    79ce:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    79d0:	2000      	movs	r0, #0
		break;
    79d2:	e7f7      	b.n	79c4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    79d4:	4a12      	ldr	r2, [pc, #72]	; (7a20 <system_clock_source_disable+0x74>)
    79d6:	8a13      	ldrh	r3, [r2, #16]
    79d8:	2102      	movs	r1, #2
    79da:	438b      	bics	r3, r1
    79dc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    79de:	2000      	movs	r0, #0
		break;
    79e0:	e7f0      	b.n	79c4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    79e2:	4a10      	ldr	r2, [pc, #64]	; (7a24 <system_clock_source_disable+0x78>)
    79e4:	6953      	ldr	r3, [r2, #20]
    79e6:	2102      	movs	r1, #2
    79e8:	438b      	bics	r3, r1
    79ea:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    79ec:	2000      	movs	r0, #0
		break;
    79ee:	e7e9      	b.n	79c4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    79f0:	4b0d      	ldr	r3, [pc, #52]	; (7a28 <system_clock_source_disable+0x7c>)
    79f2:	681a      	ldr	r2, [r3, #0]
    79f4:	2102      	movs	r1, #2
    79f6:	438a      	bics	r2, r1
    79f8:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	b29b      	uxth	r3, r3
    79fe:	4a08      	ldr	r2, [pc, #32]	; (7a20 <system_clock_source_disable+0x74>)
    7a00:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    7a02:	2000      	movs	r0, #0
		break;
    7a04:	e7de      	b.n	79c4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    7a06:	4906      	ldr	r1, [pc, #24]	; (7a20 <system_clock_source_disable+0x74>)
    7a08:	2228      	movs	r2, #40	; 0x28
    7a0a:	5c8b      	ldrb	r3, [r1, r2]
    7a0c:	2002      	movs	r0, #2
    7a0e:	4383      	bics	r3, r0
    7a10:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    7a12:	2000      	movs	r0, #0
		break;
    7a14:	e7d6      	b.n	79c4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    7a16:	2017      	movs	r0, #23
    7a18:	e7d4      	b.n	79c4 <system_clock_source_disable+0x18>
    7a1a:	46c0      	nop			; (mov r8, r8)
    7a1c:	00010d44 	.word	0x00010d44
    7a20:	40000c00 	.word	0x40000c00
    7a24:	40001000 	.word	0x40001000
    7a28:	200000e0 	.word	0x200000e0

00007a2c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a2e:	46ce      	mov	lr, r9
    7a30:	4647      	mov	r7, r8
    7a32:	b580      	push	{r7, lr}
    7a34:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    7a36:	2280      	movs	r2, #128	; 0x80
    7a38:	0052      	lsls	r2, r2, #1
    7a3a:	4b3d      	ldr	r3, [pc, #244]	; (7b30 <system_clock_init+0x104>)
    7a3c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    7a3e:	3afd      	subs	r2, #253	; 0xfd
    7a40:	4b3c      	ldr	r3, [pc, #240]	; (7b34 <system_clock_init+0x108>)
    7a42:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7a44:	4a3c      	ldr	r2, [pc, #240]	; (7b38 <system_clock_init+0x10c>)
    7a46:	6853      	ldr	r3, [r2, #4]
    7a48:	211e      	movs	r1, #30
    7a4a:	438b      	bics	r3, r1
    7a4c:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7a4e:	2380      	movs	r3, #128	; 0x80
    7a50:	05db      	lsls	r3, r3, #23
    7a52:	789b      	ldrb	r3, [r3, #2]
    7a54:	2b02      	cmp	r3, #2
    7a56:	d009      	beq.n	7a6c <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7a58:	2380      	movs	r3, #128	; 0x80
    7a5a:	05db      	lsls	r3, r3, #23
    7a5c:	2201      	movs	r2, #1
    7a5e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    7a60:	3201      	adds	r2, #1
    7a62:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    7a64:	001a      	movs	r2, r3
    7a66:	7993      	ldrb	r3, [r2, #6]
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d0fc      	beq.n	7a66 <system_clock_init+0x3a>
	config->division_factor    = 1;
    7a6c:	a901      	add	r1, sp, #4
    7a6e:	2501      	movs	r5, #1
    7a70:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    7a72:	2400      	movs	r4, #0
    7a74:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    7a76:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    7a78:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    7a7a:	2303      	movs	r3, #3
    7a7c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7a7e:	2000      	movs	r0, #0
    7a80:	4b2e      	ldr	r3, [pc, #184]	; (7b3c <system_clock_init+0x110>)
    7a82:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7a84:	2006      	movs	r0, #6
    7a86:	4b2e      	ldr	r3, [pc, #184]	; (7b40 <system_clock_init+0x114>)
    7a88:	4798      	blx	r3
	config->run_in_standby  = false;
    7a8a:	466b      	mov	r3, sp
    7a8c:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    7a8e:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    7a90:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    7a92:	4668      	mov	r0, sp
    7a94:	4b2b      	ldr	r3, [pc, #172]	; (7b44 <system_clock_init+0x118>)
    7a96:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7a98:	2006      	movs	r0, #6
    7a9a:	4b2b      	ldr	r3, [pc, #172]	; (7b48 <system_clock_init+0x11c>)
    7a9c:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    7a9e:	4924      	ldr	r1, [pc, #144]	; (7b30 <system_clock_init+0x104>)
    7aa0:	2210      	movs	r2, #16
    7aa2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    7aa4:	421a      	tst	r2, r3
    7aa6:	d0fc      	beq.n	7aa2 <system_clock_init+0x76>
	config->division_factor    = 1;
    7aa8:	ac01      	add	r4, sp, #4
    7aaa:	2601      	movs	r6, #1
    7aac:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    7aae:	2500      	movs	r5, #0
    7ab0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    7ab2:	2306      	movs	r3, #6
    7ab4:	4699      	mov	r9, r3
    7ab6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7ab8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7aba:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7abc:	0021      	movs	r1, r4
    7abe:	2000      	movs	r0, #0
    7ac0:	4b1e      	ldr	r3, [pc, #120]	; (7b3c <system_clock_init+0x110>)
    7ac2:	4698      	mov	r8, r3
    7ac4:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    7ac6:	4a1a      	ldr	r2, [pc, #104]	; (7b30 <system_clock_init+0x104>)
    7ac8:	7d13      	ldrb	r3, [r2, #20]
    7aca:	2180      	movs	r1, #128	; 0x80
    7acc:	430b      	orrs	r3, r1
    7ace:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7ad0:	4b1e      	ldr	r3, [pc, #120]	; (7b4c <system_clock_init+0x120>)
    7ad2:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    7ad4:	4f1e      	ldr	r7, [pc, #120]	; (7b50 <system_clock_init+0x124>)
    7ad6:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    7ad8:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    7ada:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    7adc:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7ade:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    7ae0:	464b      	mov	r3, r9
    7ae2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7ae4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7ae6:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7ae8:	0021      	movs	r1, r4
    7aea:	2000      	movs	r0, #0
    7aec:	47c0      	blx	r8
    7aee:	2000      	movs	r0, #0
    7af0:	4b18      	ldr	r3, [pc, #96]	; (7b54 <system_clock_init+0x128>)
    7af2:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    7af4:	2000      	movs	r0, #0
    7af6:	4b18      	ldr	r3, [pc, #96]	; (7b58 <system_clock_init+0x12c>)
    7af8:	4798      	blx	r3
    7afa:	7939      	ldrb	r1, [r7, #4]
    7afc:	b2c9      	uxtb	r1, r1
    7afe:	4b17      	ldr	r3, [pc, #92]	; (7b5c <system_clock_init+0x130>)
    7b00:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    7b02:	4b17      	ldr	r3, [pc, #92]	; (7b60 <system_clock_init+0x134>)
    7b04:	4298      	cmp	r0, r3
    7b06:	d80e      	bhi.n	7b26 <system_clock_init+0xfa>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7b08:	2380      	movs	r3, #128	; 0x80
    7b0a:	05db      	lsls	r3, r3, #23
    7b0c:	789b      	ldrb	r3, [r3, #2]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d009      	beq.n	7b26 <system_clock_init+0xfa>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7b12:	2380      	movs	r3, #128	; 0x80
    7b14:	05db      	lsls	r3, r3, #23
    7b16:	2201      	movs	r2, #1
    7b18:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    7b1a:	2200      	movs	r2, #0
    7b1c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    7b1e:	001a      	movs	r2, r3
    7b20:	7993      	ldrb	r3, [r2, #6]
    7b22:	2b00      	cmp	r3, #0
    7b24:	d0fc      	beq.n	7b20 <system_clock_init+0xf4>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    7b26:	b005      	add	sp, #20
    7b28:	bc0c      	pop	{r2, r3}
    7b2a:	4690      	mov	r8, r2
    7b2c:	4699      	mov	r9, r3
    7b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b30:	40000c00 	.word	0x40000c00
    7b34:	40001400 	.word	0x40001400
    7b38:	41004000 	.word	0x41004000
    7b3c:	00007b89 	.word	0x00007b89
    7b40:	000079ad 	.word	0x000079ad
    7b44:	000078bd 	.word	0x000078bd
    7b48:	000078f1 	.word	0x000078f1
    7b4c:	00007b65 	.word	0x00007b65
    7b50:	40000400 	.word	0x40000400
    7b54:	00007c35 	.word	0x00007c35
    7b58:	00007c75 	.word	0x00007c75
    7b5c:	0000e991 	.word	0x0000e991
    7b60:	00b71b00 	.word	0x00b71b00

00007b64 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    7b64:	4a06      	ldr	r2, [pc, #24]	; (7b80 <system_gclk_init+0x1c>)
    7b66:	6953      	ldr	r3, [r2, #20]
    7b68:	2140      	movs	r1, #64	; 0x40
    7b6a:	430b      	orrs	r3, r1
    7b6c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    7b6e:	2201      	movs	r2, #1
    7b70:	4b04      	ldr	r3, [pc, #16]	; (7b84 <system_gclk_init+0x20>)
    7b72:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    7b74:	0019      	movs	r1, r3
    7b76:	780b      	ldrb	r3, [r1, #0]
    7b78:	4213      	tst	r3, r2
    7b7a:	d1fc      	bne.n	7b76 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    7b7c:	4770      	bx	lr
    7b7e:	46c0      	nop			; (mov r8, r8)
    7b80:	40000400 	.word	0x40000400
    7b84:	40001800 	.word	0x40001800

00007b88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7b88:	b570      	push	{r4, r5, r6, lr}
    7b8a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7b8c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7b8e:	784b      	ldrb	r3, [r1, #1]
    7b90:	2b00      	cmp	r3, #0
    7b92:	d002      	beq.n	7b9a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7b94:	2380      	movs	r3, #128	; 0x80
    7b96:	00db      	lsls	r3, r3, #3
    7b98:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7b9a:	7a4b      	ldrb	r3, [r1, #9]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d002      	beq.n	7ba6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7ba0:	2380      	movs	r3, #128	; 0x80
    7ba2:	011b      	lsls	r3, r3, #4
    7ba4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7ba6:	6848      	ldr	r0, [r1, #4]
    7ba8:	2801      	cmp	r0, #1
    7baa:	d90f      	bls.n	7bcc <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7bac:	1e43      	subs	r3, r0, #1
    7bae:	4218      	tst	r0, r3
    7bb0:	d131      	bne.n	7c16 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7bb2:	2802      	cmp	r0, #2
    7bb4:	d92d      	bls.n	7c12 <system_gclk_gen_set_config+0x8a>
    7bb6:	2302      	movs	r3, #2
    7bb8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    7bba:	3201      	adds	r2, #1
						mask <<= 1) {
    7bbc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7bbe:	4298      	cmp	r0, r3
    7bc0:	d8fb      	bhi.n	7bba <system_gclk_gen_set_config+0x32>
    7bc2:	2380      	movs	r3, #128	; 0x80
    7bc4:	015b      	lsls	r3, r3, #5
    7bc6:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    7bc8:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7bca:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7bcc:	7a0b      	ldrb	r3, [r1, #8]
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d002      	beq.n	7bd8 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7bd2:	2380      	movs	r3, #128	; 0x80
    7bd4:	019b      	lsls	r3, r3, #6
    7bd6:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7bd8:	2604      	movs	r6, #4
    7bda:	40a6      	lsls	r6, r4
    7bdc:	4911      	ldr	r1, [pc, #68]	; (7c24 <system_gclk_gen_set_config+0x9c>)
    7bde:	4a12      	ldr	r2, [pc, #72]	; (7c28 <system_gclk_gen_set_config+0xa0>)
    7be0:	684b      	ldr	r3, [r1, #4]
    7be2:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    7be4:	421e      	tst	r6, r3
    7be6:	d1fb      	bne.n	7be0 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    7be8:	4b10      	ldr	r3, [pc, #64]	; (7c2c <system_gclk_gen_set_config+0xa4>)
    7bea:	4798      	blx	r3
    7bec:	00a4      	lsls	r4, r4, #2
    7bee:	4b0d      	ldr	r3, [pc, #52]	; (7c24 <system_gclk_gen_set_config+0x9c>)
    7bf0:	469c      	mov	ip, r3
    7bf2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    7bf4:	6a22      	ldr	r2, [r4, #32]
    7bf6:	2380      	movs	r3, #128	; 0x80
    7bf8:	005b      	lsls	r3, r3, #1
    7bfa:	401a      	ands	r2, r3
    7bfc:	432a      	orrs	r2, r5
    7bfe:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7c00:	4661      	mov	r1, ip
    7c02:	4a09      	ldr	r2, [pc, #36]	; (7c28 <system_gclk_gen_set_config+0xa0>)
    7c04:	684b      	ldr	r3, [r1, #4]
    7c06:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    7c08:	421e      	tst	r6, r3
    7c0a:	d1fb      	bne.n	7c04 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    7c0c:	4b08      	ldr	r3, [pc, #32]	; (7c30 <system_gclk_gen_set_config+0xa8>)
    7c0e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    7c10:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    7c12:	2200      	movs	r2, #0
    7c14:	e7d5      	b.n	7bc2 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    7c16:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7c18:	2380      	movs	r3, #128	; 0x80
    7c1a:	009b      	lsls	r3, r3, #2
    7c1c:	4318      	orrs	r0, r3
    7c1e:	4305      	orrs	r5, r0
    7c20:	e7d4      	b.n	7bcc <system_gclk_gen_set_config+0x44>
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	40001800 	.word	0x40001800
    7c28:	000007fc 	.word	0x000007fc
    7c2c:	00006291 	.word	0x00006291
    7c30:	000062d1 	.word	0x000062d1

00007c34 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7c34:	b510      	push	{r4, lr}
    7c36:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7c38:	2204      	movs	r2, #4
    7c3a:	4082      	lsls	r2, r0
    7c3c:	4809      	ldr	r0, [pc, #36]	; (7c64 <system_gclk_gen_enable+0x30>)
    7c3e:	490a      	ldr	r1, [pc, #40]	; (7c68 <system_gclk_gen_enable+0x34>)
    7c40:	6843      	ldr	r3, [r0, #4]
    7c42:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7c44:	421a      	tst	r2, r3
    7c46:	d1fb      	bne.n	7c40 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    7c48:	4b08      	ldr	r3, [pc, #32]	; (7c6c <system_gclk_gen_enable+0x38>)
    7c4a:	4798      	blx	r3
    7c4c:	00a4      	lsls	r4, r4, #2
    7c4e:	4b05      	ldr	r3, [pc, #20]	; (7c64 <system_gclk_gen_enable+0x30>)
    7c50:	469c      	mov	ip, r3
    7c52:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    7c54:	6a22      	ldr	r2, [r4, #32]
    7c56:	2380      	movs	r3, #128	; 0x80
    7c58:	005b      	lsls	r3, r3, #1
    7c5a:	4313      	orrs	r3, r2
    7c5c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    7c5e:	4b04      	ldr	r3, [pc, #16]	; (7c70 <system_gclk_gen_enable+0x3c>)
    7c60:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7c62:	bd10      	pop	{r4, pc}
    7c64:	40001800 	.word	0x40001800
    7c68:	000007fc 	.word	0x000007fc
    7c6c:	00006291 	.word	0x00006291
    7c70:	000062d1 	.word	0x000062d1

00007c74 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c76:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7c78:	2204      	movs	r2, #4
    7c7a:	4082      	lsls	r2, r0
    7c7c:	4812      	ldr	r0, [pc, #72]	; (7cc8 <system_gclk_gen_get_hz+0x54>)
    7c7e:	4913      	ldr	r1, [pc, #76]	; (7ccc <system_gclk_gen_get_hz+0x58>)
    7c80:	6843      	ldr	r3, [r0, #4]
    7c82:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7c84:	421a      	tst	r2, r3
    7c86:	d1fb      	bne.n	7c80 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    7c88:	4b11      	ldr	r3, [pc, #68]	; (7cd0 <system_gclk_gen_get_hz+0x5c>)
    7c8a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    7c8c:	4f0e      	ldr	r7, [pc, #56]	; (7cc8 <system_gclk_gen_get_hz+0x54>)
    7c8e:	3408      	adds	r4, #8
    7c90:	00a4      	lsls	r4, r4, #2
    7c92:	59e0      	ldr	r0, [r4, r7]
    7c94:	0700      	lsls	r0, r0, #28
    7c96:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7c98:	4b0e      	ldr	r3, [pc, #56]	; (7cd4 <system_gclk_gen_get_hz+0x60>)
    7c9a:	4798      	blx	r3
    7c9c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    7c9e:	59e5      	ldr	r5, [r4, r7]
    7ca0:	04ed      	lsls	r5, r5, #19
    7ca2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7ca4:	59e4      	ldr	r4, [r4, r7]
    7ca6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7ca8:	4b0b      	ldr	r3, [pc, #44]	; (7cd8 <system_gclk_gen_get_hz+0x64>)
    7caa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7cac:	2d00      	cmp	r5, #0
    7cae:	d107      	bne.n	7cc0 <system_gclk_gen_get_hz+0x4c>
    7cb0:	2c01      	cmp	r4, #1
    7cb2:	d907      	bls.n	7cc4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    7cb4:	0021      	movs	r1, r4
    7cb6:	0030      	movs	r0, r6
    7cb8:	4b08      	ldr	r3, [pc, #32]	; (7cdc <system_gclk_gen_get_hz+0x68>)
    7cba:	4798      	blx	r3
    7cbc:	0006      	movs	r6, r0
    7cbe:	e001      	b.n	7cc4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7cc0:	3401      	adds	r4, #1
    7cc2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7cc4:	0030      	movs	r0, r6
    7cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cc8:	40001800 	.word	0x40001800
    7ccc:	000007fc 	.word	0x000007fc
    7cd0:	00006291 	.word	0x00006291
    7cd4:	00007825 	.word	0x00007825
    7cd8:	000062d1 	.word	0x000062d1
    7cdc:	0000e991 	.word	0x0000e991

00007ce0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7ce0:	b510      	push	{r4, lr}
    7ce2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7ce4:	4b09      	ldr	r3, [pc, #36]	; (7d0c <system_gclk_chan_enable+0x2c>)
    7ce6:	4798      	blx	r3
    7ce8:	00a0      	lsls	r0, r4, #2
    7cea:	4b09      	ldr	r3, [pc, #36]	; (7d10 <system_gclk_chan_enable+0x30>)
    7cec:	469c      	mov	ip, r3
    7cee:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7cf0:	2280      	movs	r2, #128	; 0x80
    7cf2:	5883      	ldr	r3, [r0, r2]
    7cf4:	2140      	movs	r1, #64	; 0x40
    7cf6:	430b      	orrs	r3, r1
    7cf8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    7cfa:	3140      	adds	r1, #64	; 0x40
    7cfc:	3a40      	subs	r2, #64	; 0x40
    7cfe:	5843      	ldr	r3, [r0, r1]
    7d00:	421a      	tst	r2, r3
    7d02:	d0fc      	beq.n	7cfe <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7d04:	4b03      	ldr	r3, [pc, #12]	; (7d14 <system_gclk_chan_enable+0x34>)
    7d06:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7d08:	bd10      	pop	{r4, pc}
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	00006291 	.word	0x00006291
    7d10:	40001800 	.word	0x40001800
    7d14:	000062d1 	.word	0x000062d1

00007d18 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7d18:	b510      	push	{r4, lr}
    7d1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7d1c:	4b09      	ldr	r3, [pc, #36]	; (7d44 <system_gclk_chan_disable+0x2c>)
    7d1e:	4798      	blx	r3
    7d20:	00a0      	lsls	r0, r4, #2
    7d22:	4b09      	ldr	r3, [pc, #36]	; (7d48 <system_gclk_chan_disable+0x30>)
    7d24:	469c      	mov	ip, r3
    7d26:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7d28:	2280      	movs	r2, #128	; 0x80
    7d2a:	5883      	ldr	r3, [r0, r2]
    7d2c:	2140      	movs	r1, #64	; 0x40
    7d2e:	438b      	bics	r3, r1
    7d30:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7d32:	3140      	adds	r1, #64	; 0x40
    7d34:	3a40      	subs	r2, #64	; 0x40
    7d36:	5843      	ldr	r3, [r0, r1]
    7d38:	421a      	tst	r2, r3
    7d3a:	d1fc      	bne.n	7d36 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7d3c:	4b03      	ldr	r3, [pc, #12]	; (7d4c <system_gclk_chan_disable+0x34>)
    7d3e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7d40:	bd10      	pop	{r4, pc}
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	00006291 	.word	0x00006291
    7d48:	40001800 	.word	0x40001800
    7d4c:	000062d1 	.word	0x000062d1

00007d50 <system_gclk_chan_set_config>:
{
    7d50:	b570      	push	{r4, r5, r6, lr}
    7d52:	0004      	movs	r4, r0
    7d54:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    7d56:	4b05      	ldr	r3, [pc, #20]	; (7d6c <system_gclk_chan_set_config+0x1c>)
    7d58:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    7d5a:	782a      	ldrb	r2, [r5, #0]
    7d5c:	230f      	movs	r3, #15
    7d5e:	4013      	ands	r3, r2
    7d60:	3420      	adds	r4, #32
    7d62:	00a4      	lsls	r4, r4, #2
    7d64:	4a02      	ldr	r2, [pc, #8]	; (7d70 <system_gclk_chan_set_config+0x20>)
    7d66:	50a3      	str	r3, [r4, r2]
}
    7d68:	bd70      	pop	{r4, r5, r6, pc}
    7d6a:	46c0      	nop			; (mov r8, r8)
    7d6c:	00007d19 	.word	0x00007d19
    7d70:	40001800 	.word	0x40001800

00007d74 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7d74:	b510      	push	{r4, lr}
    7d76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7d78:	4b06      	ldr	r3, [pc, #24]	; (7d94 <system_gclk_chan_get_hz+0x20>)
    7d7a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    7d7c:	3420      	adds	r4, #32
    7d7e:	00a4      	lsls	r4, r4, #2
    7d80:	4b05      	ldr	r3, [pc, #20]	; (7d98 <system_gclk_chan_get_hz+0x24>)
    7d82:	58e4      	ldr	r4, [r4, r3]
    7d84:	0724      	lsls	r4, r4, #28
    7d86:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    7d88:	4b04      	ldr	r3, [pc, #16]	; (7d9c <system_gclk_chan_get_hz+0x28>)
    7d8a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7d8c:	0020      	movs	r0, r4
    7d8e:	4b04      	ldr	r3, [pc, #16]	; (7da0 <system_gclk_chan_get_hz+0x2c>)
    7d90:	4798      	blx	r3
}
    7d92:	bd10      	pop	{r4, pc}
    7d94:	00006291 	.word	0x00006291
    7d98:	40001800 	.word	0x40001800
    7d9c:	000062d1 	.word	0x000062d1
    7da0:	00007c75 	.word	0x00007c75

00007da4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7da4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7da6:	78d3      	ldrb	r3, [r2, #3]
    7da8:	2b00      	cmp	r3, #0
    7daa:	d135      	bne.n	7e18 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7dac:	7813      	ldrb	r3, [r2, #0]
    7dae:	2b80      	cmp	r3, #128	; 0x80
    7db0:	d029      	beq.n	7e06 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7db2:	061b      	lsls	r3, r3, #24
    7db4:	2480      	movs	r4, #128	; 0x80
    7db6:	0264      	lsls	r4, r4, #9
    7db8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7dba:	7854      	ldrb	r4, [r2, #1]
    7dbc:	2502      	movs	r5, #2
    7dbe:	43ac      	bics	r4, r5
    7dc0:	d106      	bne.n	7dd0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7dc2:	7894      	ldrb	r4, [r2, #2]
    7dc4:	2c00      	cmp	r4, #0
    7dc6:	d120      	bne.n	7e0a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7dc8:	2480      	movs	r4, #128	; 0x80
    7dca:	02a4      	lsls	r4, r4, #10
    7dcc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7dce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7dd0:	7854      	ldrb	r4, [r2, #1]
    7dd2:	3c01      	subs	r4, #1
    7dd4:	2c01      	cmp	r4, #1
    7dd6:	d91c      	bls.n	7e12 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7dd8:	040d      	lsls	r5, r1, #16
    7dda:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7ddc:	24a0      	movs	r4, #160	; 0xa0
    7dde:	05e4      	lsls	r4, r4, #23
    7de0:	432c      	orrs	r4, r5
    7de2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7de4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7de6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7de8:	24d0      	movs	r4, #208	; 0xd0
    7dea:	0624      	lsls	r4, r4, #24
    7dec:	432c      	orrs	r4, r5
    7dee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7df0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7df2:	78d4      	ldrb	r4, [r2, #3]
    7df4:	2c00      	cmp	r4, #0
    7df6:	d122      	bne.n	7e3e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7df8:	035b      	lsls	r3, r3, #13
    7dfa:	d51c      	bpl.n	7e36 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7dfc:	7893      	ldrb	r3, [r2, #2]
    7dfe:	2b01      	cmp	r3, #1
    7e00:	d01e      	beq.n	7e40 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    7e02:	6141      	str	r1, [r0, #20]
    7e04:	e017      	b.n	7e36 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7e06:	2300      	movs	r3, #0
    7e08:	e7d7      	b.n	7dba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7e0a:	24c0      	movs	r4, #192	; 0xc0
    7e0c:	02e4      	lsls	r4, r4, #11
    7e0e:	4323      	orrs	r3, r4
    7e10:	e7dd      	b.n	7dce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7e12:	4c0d      	ldr	r4, [pc, #52]	; (7e48 <_system_pinmux_config+0xa4>)
    7e14:	4023      	ands	r3, r4
    7e16:	e7df      	b.n	7dd8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    7e18:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7e1a:	040c      	lsls	r4, r1, #16
    7e1c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7e1e:	23a0      	movs	r3, #160	; 0xa0
    7e20:	05db      	lsls	r3, r3, #23
    7e22:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7e24:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7e26:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7e28:	23d0      	movs	r3, #208	; 0xd0
    7e2a:	061b      	lsls	r3, r3, #24
    7e2c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7e2e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    7e30:	78d3      	ldrb	r3, [r2, #3]
    7e32:	2b00      	cmp	r3, #0
    7e34:	d103      	bne.n	7e3e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e36:	7853      	ldrb	r3, [r2, #1]
    7e38:	3b01      	subs	r3, #1
    7e3a:	2b01      	cmp	r3, #1
    7e3c:	d902      	bls.n	7e44 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    7e3e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    7e40:	6181      	str	r1, [r0, #24]
    7e42:	e7f8      	b.n	7e36 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    7e44:	6081      	str	r1, [r0, #8]
}
    7e46:	e7fa      	b.n	7e3e <_system_pinmux_config+0x9a>
    7e48:	fffbffff 	.word	0xfffbffff

00007e4c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7e4c:	b510      	push	{r4, lr}
    7e4e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    7e50:	09c1      	lsrs	r1, r0, #7
		return NULL;
    7e52:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e54:	2900      	cmp	r1, #0
    7e56:	d104      	bne.n	7e62 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    7e58:	0943      	lsrs	r3, r0, #5
    7e5a:	01db      	lsls	r3, r3, #7
    7e5c:	4905      	ldr	r1, [pc, #20]	; (7e74 <system_pinmux_pin_set_config+0x28>)
    7e5e:	468c      	mov	ip, r1
    7e60:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7e62:	241f      	movs	r4, #31
    7e64:	4020      	ands	r0, r4
    7e66:	2101      	movs	r1, #1
    7e68:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    7e6a:	0018      	movs	r0, r3
    7e6c:	4b02      	ldr	r3, [pc, #8]	; (7e78 <system_pinmux_pin_set_config+0x2c>)
    7e6e:	4798      	blx	r3
}
    7e70:	bd10      	pop	{r4, pc}
    7e72:	46c0      	nop			; (mov r8, r8)
    7e74:	40002800 	.word	0x40002800
    7e78:	00007da5 	.word	0x00007da5

00007e7c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7e7c:	4770      	bx	lr
    7e7e:	Address 0x00007e7e is out of bounds.


00007e80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7e80:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7e82:	4b05      	ldr	r3, [pc, #20]	; (7e98 <system_init+0x18>)
    7e84:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7e86:	4b05      	ldr	r3, [pc, #20]	; (7e9c <system_init+0x1c>)
    7e88:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7e8a:	4b05      	ldr	r3, [pc, #20]	; (7ea0 <system_init+0x20>)
    7e8c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7e8e:	4b05      	ldr	r3, [pc, #20]	; (7ea4 <system_init+0x24>)
    7e90:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7e92:	4b05      	ldr	r3, [pc, #20]	; (7ea8 <system_init+0x28>)
    7e94:	4798      	blx	r3
}
    7e96:	bd10      	pop	{r4, pc}
    7e98:	00007a2d 	.word	0x00007a2d
    7e9c:	00006301 	.word	0x00006301
    7ea0:	00007e7d 	.word	0x00007e7d
    7ea4:	000064bd 	.word	0x000064bd
    7ea8:	00007e7d 	.word	0x00007e7d

00007eac <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7eac:	1c93      	adds	r3, r2, #2
    7eae:	009b      	lsls	r3, r3, #2
    7eb0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    7eb2:	2a02      	cmp	r2, #2
    7eb4:	d009      	beq.n	7eca <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    7eb6:	2a03      	cmp	r2, #3
    7eb8:	d00c      	beq.n	7ed4 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    7eba:	2301      	movs	r3, #1
    7ebc:	4093      	lsls	r3, r2
    7ebe:	001a      	movs	r2, r3
    7ec0:	7e03      	ldrb	r3, [r0, #24]
    7ec2:	4313      	orrs	r3, r2
    7ec4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    7ec6:	2000      	movs	r0, #0
    7ec8:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    7eca:	7e03      	ldrb	r3, [r0, #24]
    7ecc:	2210      	movs	r2, #16
    7ece:	4313      	orrs	r3, r2
    7ed0:	7603      	strb	r3, [r0, #24]
    7ed2:	e7f8      	b.n	7ec6 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7ed4:	7e03      	ldrb	r3, [r0, #24]
    7ed6:	2220      	movs	r2, #32
    7ed8:	4313      	orrs	r3, r2
    7eda:	7603      	strb	r3, [r0, #24]
    7edc:	e7f3      	b.n	7ec6 <tc_register_callback+0x1a>
    7ede:	Address 0x00007ede is out of bounds.


00007ee0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7ee0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7ee2:	0080      	lsls	r0, r0, #2
    7ee4:	4b16      	ldr	r3, [pc, #88]	; (7f40 <_tc_interrupt_handler+0x60>)
    7ee6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7ee8:	6823      	ldr	r3, [r4, #0]
    7eea:	7a9d      	ldrb	r5, [r3, #10]
    7eec:	7e22      	ldrb	r2, [r4, #24]
    7eee:	7e63      	ldrb	r3, [r4, #25]
    7ef0:	4013      	ands	r3, r2
    7ef2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7ef4:	07eb      	lsls	r3, r5, #31
    7ef6:	d406      	bmi.n	7f06 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7ef8:	07ab      	lsls	r3, r5, #30
    7efa:	d40b      	bmi.n	7f14 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7efc:	06eb      	lsls	r3, r5, #27
    7efe:	d410      	bmi.n	7f22 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7f00:	06ab      	lsls	r3, r5, #26
    7f02:	d415      	bmi.n	7f30 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7f04:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7f06:	0020      	movs	r0, r4
    7f08:	68a3      	ldr	r3, [r4, #8]
    7f0a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7f0c:	2301      	movs	r3, #1
    7f0e:	6822      	ldr	r2, [r4, #0]
    7f10:	7293      	strb	r3, [r2, #10]
    7f12:	e7f1      	b.n	7ef8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7f14:	0020      	movs	r0, r4
    7f16:	68e3      	ldr	r3, [r4, #12]
    7f18:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    7f1a:	2302      	movs	r3, #2
    7f1c:	6822      	ldr	r2, [r4, #0]
    7f1e:	7293      	strb	r3, [r2, #10]
    7f20:	e7ec      	b.n	7efc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7f22:	0020      	movs	r0, r4
    7f24:	6923      	ldr	r3, [r4, #16]
    7f26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7f28:	2310      	movs	r3, #16
    7f2a:	6822      	ldr	r2, [r4, #0]
    7f2c:	7293      	strb	r3, [r2, #10]
    7f2e:	e7e7      	b.n	7f00 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7f30:	0020      	movs	r0, r4
    7f32:	6963      	ldr	r3, [r4, #20]
    7f34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7f36:	6823      	ldr	r3, [r4, #0]
    7f38:	2220      	movs	r2, #32
    7f3a:	729a      	strb	r2, [r3, #10]
}
    7f3c:	e7e2      	b.n	7f04 <_tc_interrupt_handler+0x24>
    7f3e:	46c0      	nop			; (mov r8, r8)
    7f40:	20001d08 	.word	0x20001d08

00007f44 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    7f44:	b510      	push	{r4, lr}
    7f46:	2000      	movs	r0, #0
    7f48:	4b01      	ldr	r3, [pc, #4]	; (7f50 <TC0_Handler+0xc>)
    7f4a:	4798      	blx	r3
    7f4c:	bd10      	pop	{r4, pc}
    7f4e:	46c0      	nop			; (mov r8, r8)
    7f50:	00007ee1 	.word	0x00007ee1

00007f54 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    7f54:	b510      	push	{r4, lr}
    7f56:	2001      	movs	r0, #1
    7f58:	4b01      	ldr	r3, [pc, #4]	; (7f60 <TC1_Handler+0xc>)
    7f5a:	4798      	blx	r3
    7f5c:	bd10      	pop	{r4, pc}
    7f5e:	46c0      	nop			; (mov r8, r8)
    7f60:	00007ee1 	.word	0x00007ee1

00007f64 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    7f64:	b510      	push	{r4, lr}
    7f66:	2002      	movs	r0, #2
    7f68:	4b01      	ldr	r3, [pc, #4]	; (7f70 <TC4_Handler+0xc>)
    7f6a:	4798      	blx	r3
    7f6c:	bd10      	pop	{r4, pc}
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	00007ee1 	.word	0x00007ee1

00007f74 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    7f74:	b530      	push	{r4, r5, lr}
    7f76:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7f78:	aa01      	add	r2, sp, #4
    7f7a:	4b0b      	ldr	r3, [pc, #44]	; (7fa8 <_tc_get_inst_index+0x34>)
    7f7c:	cb32      	ldmia	r3!, {r1, r4, r5}
    7f7e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    7f80:	9b01      	ldr	r3, [sp, #4]
    7f82:	4298      	cmp	r0, r3
    7f84:	d00d      	beq.n	7fa2 <_tc_get_inst_index+0x2e>
    7f86:	9b02      	ldr	r3, [sp, #8]
    7f88:	4298      	cmp	r0, r3
    7f8a:	d008      	beq.n	7f9e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7f8c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    7f8e:	9a03      	ldr	r2, [sp, #12]
    7f90:	4282      	cmp	r2, r0
    7f92:	d002      	beq.n	7f9a <_tc_get_inst_index+0x26>
}
    7f94:	0018      	movs	r0, r3
    7f96:	b005      	add	sp, #20
    7f98:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7f9a:	3302      	adds	r3, #2
    7f9c:	e002      	b.n	7fa4 <_tc_get_inst_index+0x30>
    7f9e:	2301      	movs	r3, #1
    7fa0:	e000      	b.n	7fa4 <_tc_get_inst_index+0x30>
    7fa2:	2300      	movs	r3, #0
			return i;
    7fa4:	b2db      	uxtb	r3, r3
    7fa6:	e7f5      	b.n	7f94 <_tc_get_inst_index+0x20>
    7fa8:	00010d90 	.word	0x00010d90

00007fac <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    7fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fae:	46c6      	mov	lr, r8
    7fb0:	b500      	push	{lr}
    7fb2:	b08a      	sub	sp, #40	; 0x28
    7fb4:	0004      	movs	r4, r0
    7fb6:	000d      	movs	r5, r1
    7fb8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    7fba:	0008      	movs	r0, r1
    7fbc:	4baa      	ldr	r3, [pc, #680]	; (8268 <tc_init+0x2bc>)
    7fbe:	4798      	blx	r3
    7fc0:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    7fc2:	ab09      	add	r3, sp, #36	; 0x24
    7fc4:	221b      	movs	r2, #27
    7fc6:	701a      	strb	r2, [r3, #0]
    7fc8:	705a      	strb	r2, [r3, #1]
    7fca:	3202      	adds	r2, #2
    7fcc:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7fce:	a903      	add	r1, sp, #12
    7fd0:	4ba6      	ldr	r3, [pc, #664]	; (826c <tc_init+0x2c0>)
    7fd2:	330c      	adds	r3, #12
    7fd4:	000a      	movs	r2, r1
    7fd6:	cb83      	ldmia	r3!, {r0, r1, r7}
    7fd8:	c283      	stmia	r2!, {r0, r1, r7}
    7fda:	cb83      	ldmia	r3!, {r0, r1, r7}
    7fdc:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7fde:	2300      	movs	r3, #0
    7fe0:	60a3      	str	r3, [r4, #8]
    7fe2:	60e3      	str	r3, [r4, #12]
    7fe4:	6123      	str	r3, [r4, #16]
    7fe6:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    7fe8:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    7fea:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    7fec:	4643      	mov	r3, r8
    7fee:	009a      	lsls	r2, r3, #2
    7ff0:	4b9f      	ldr	r3, [pc, #636]	; (8270 <tc_init+0x2c4>)
    7ff2:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    7ff4:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7ff6:	2334      	movs	r3, #52	; 0x34
    7ff8:	5cf3      	ldrb	r3, [r6, r3]
    7ffa:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7ffc:	78f3      	ldrb	r3, [r6, #3]
    7ffe:	2b08      	cmp	r3, #8
    8000:	d008      	beq.n	8014 <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    8002:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8004:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    8006:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8008:	07db      	lsls	r3, r3, #31
    800a:	d508      	bpl.n	801e <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    800c:	b00a      	add	sp, #40	; 0x28
    800e:	bc04      	pop	{r2}
    8010:	4690      	mov	r8, r2
    8012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    8014:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8016:	4642      	mov	r2, r8
    8018:	07d2      	lsls	r2, r2, #31
    801a:	d4f7      	bmi.n	800c <tc_init+0x60>
    801c:	e7f1      	b.n	8002 <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    801e:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    8020:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    8022:	079b      	lsls	r3, r3, #30
    8024:	d4f2      	bmi.n	800c <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    8026:	682b      	ldr	r3, [r5, #0]
    8028:	079b      	lsls	r3, r3, #30
    802a:	d4ef      	bmi.n	800c <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    802c:	7c33      	ldrb	r3, [r6, #16]
    802e:	2b00      	cmp	r3, #0
    8030:	d112      	bne.n	8058 <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    8032:	7f33      	ldrb	r3, [r6, #28]
    8034:	2b00      	cmp	r3, #0
    8036:	d11b      	bne.n	8070 <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    8038:	4643      	mov	r3, r8
    803a:	005a      	lsls	r2, r3, #1
    803c:	a903      	add	r1, sp, #12
    803e:	1c53      	adds	r3, r2, #1
    8040:	009b      	lsls	r3, r3, #2
    8042:	5858      	ldr	r0, [r3, r1]
    8044:	4643      	mov	r3, r8
    8046:	00db      	lsls	r3, r3, #3
    8048:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    804a:	b2d9      	uxtb	r1, r3
    804c:	2904      	cmp	r1, #4
    804e:	d823      	bhi.n	8098 <tc_init+0xec>
    8050:	008b      	lsls	r3, r1, #2
    8052:	4988      	ldr	r1, [pc, #544]	; (8274 <tc_init+0x2c8>)
    8054:	58cb      	ldr	r3, [r1, r3]
    8056:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8058:	a902      	add	r1, sp, #8
    805a:	2301      	movs	r3, #1
    805c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    805e:	2200      	movs	r2, #0
    8060:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    8062:	7e32      	ldrb	r2, [r6, #24]
    8064:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8066:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8068:	7d30      	ldrb	r0, [r6, #20]
    806a:	4b83      	ldr	r3, [pc, #524]	; (8278 <tc_init+0x2cc>)
    806c:	4798      	blx	r3
    806e:	e7e0      	b.n	8032 <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8070:	a902      	add	r1, sp, #8
    8072:	2301      	movs	r3, #1
    8074:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    8076:	2200      	movs	r2, #0
    8078:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    807a:	3224      	adds	r2, #36	; 0x24
    807c:	18b2      	adds	r2, r6, r2
    807e:	7812      	ldrb	r2, [r2, #0]
    8080:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8082:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8084:	331f      	adds	r3, #31
    8086:	18f3      	adds	r3, r6, r3
    8088:	7818      	ldrb	r0, [r3, #0]
    808a:	4b7b      	ldr	r3, [pc, #492]	; (8278 <tc_init+0x2cc>)
    808c:	4798      	blx	r3
    808e:	e7d3      	b.n	8038 <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    8090:	497a      	ldr	r1, [pc, #488]	; (827c <tc_init+0x2d0>)
    8092:	694b      	ldr	r3, [r1, #20]
    8094:	4318      	orrs	r0, r3
    8096:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    8098:	78f3      	ldrb	r3, [r6, #3]
    809a:	2b08      	cmp	r3, #8
    809c:	d100      	bne.n	80a0 <tc_init+0xf4>
    809e:	e085      	b.n	81ac <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    80a0:	a901      	add	r1, sp, #4
    80a2:	7833      	ldrb	r3, [r6, #0]
    80a4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    80a6:	ab09      	add	r3, sp, #36	; 0x24
    80a8:	4642      	mov	r2, r8
    80aa:	5c9f      	ldrb	r7, [r3, r2]
    80ac:	0038      	movs	r0, r7
    80ae:	4b74      	ldr	r3, [pc, #464]	; (8280 <tc_init+0x2d4>)
    80b0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    80b2:	0038      	movs	r0, r7
    80b4:	4b73      	ldr	r3, [pc, #460]	; (8284 <tc_init+0x2d8>)
    80b6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    80b8:	78f3      	ldrb	r3, [r6, #3]
    80ba:	79f2      	ldrb	r2, [r6, #7]
    80bc:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    80be:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    80c0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    80c2:	7a72      	ldrb	r2, [r6, #9]
    80c4:	2a00      	cmp	r2, #0
    80c6:	d002      	beq.n	80ce <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    80c8:	2280      	movs	r2, #128	; 0x80
    80ca:	0252      	lsls	r2, r2, #9
    80cc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    80ce:	7ab2      	ldrb	r2, [r6, #10]
    80d0:	2a00      	cmp	r2, #0
    80d2:	d002      	beq.n	80da <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    80d4:	2280      	movs	r2, #128	; 0x80
    80d6:	0292      	lsls	r2, r2, #10
    80d8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    80da:	7af2      	ldrb	r2, [r6, #11]
    80dc:	2a00      	cmp	r2, #0
    80de:	d002      	beq.n	80e6 <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    80e0:	2280      	movs	r2, #128	; 0x80
    80e2:	0352      	lsls	r2, r2, #13
    80e4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    80e6:	7b32      	ldrb	r2, [r6, #12]
    80e8:	2a00      	cmp	r2, #0
    80ea:	d002      	beq.n	80f2 <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    80ec:	2280      	movs	r2, #128	; 0x80
    80ee:	0392      	lsls	r2, r2, #14
    80f0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    80f2:	7871      	ldrb	r1, [r6, #1]
    80f4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    80f6:	78b2      	ldrb	r2, [r6, #2]
    80f8:	01d2      	lsls	r2, r2, #7
    80fa:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    80fc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    80fe:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    8100:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    8102:	2b00      	cmp	r3, #0
    8104:	d1fc      	bne.n	8100 <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    8106:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8108:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    810a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    810c:	2b00      	cmp	r3, #0
    810e:	d1fc      	bne.n	810a <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    8110:	79b3      	ldrb	r3, [r6, #6]
    8112:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    8114:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    8116:	1e4b      	subs	r3, r1, #1
    8118:	4199      	sbcs	r1, r3
    811a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    811c:	7bb3      	ldrb	r3, [r6, #14]
    811e:	2b00      	cmp	r3, #0
    8120:	d001      	beq.n	8126 <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    8122:	2301      	movs	r3, #1
    8124:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8126:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8128:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    812a:	2b00      	cmp	r3, #0
    812c:	d1fc      	bne.n	8128 <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    812e:	33ff      	adds	r3, #255	; 0xff
    8130:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    8132:	2900      	cmp	r1, #0
    8134:	d004      	beq.n	8140 <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8136:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8138:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    813a:	2b00      	cmp	r3, #0
    813c:	d1fc      	bne.n	8138 <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    813e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    8140:	7a33      	ldrb	r3, [r6, #8]
    8142:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8144:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8146:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    8148:	2b00      	cmp	r3, #0
    814a:	d1fc      	bne.n	8146 <tc_init+0x19a>
	switch (module_inst->counter_size) {
    814c:	7923      	ldrb	r3, [r4, #4]
    814e:	2b04      	cmp	r3, #4
    8150:	d059      	beq.n	8206 <tc_init+0x25a>
    8152:	2b08      	cmp	r3, #8
    8154:	d074      	beq.n	8240 <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    8156:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8158:	2b00      	cmp	r3, #0
    815a:	d000      	beq.n	815e <tc_init+0x1b2>
    815c:	e756      	b.n	800c <tc_init+0x60>
    815e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8160:	2b00      	cmp	r3, #0
    8162:	d1fc      	bne.n	815e <tc_init+0x1b2>
				= config->counter_16_bit.value;
    8164:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    8166:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8168:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    816a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    816c:	2b00      	cmp	r3, #0
    816e:	d1fc      	bne.n	816a <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    8170:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    8172:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8174:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8176:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8178:	2b00      	cmp	r3, #0
    817a:	d1fc      	bne.n	8176 <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    817c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    817e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    8180:	2000      	movs	r0, #0
    8182:	e743      	b.n	800c <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    8184:	493d      	ldr	r1, [pc, #244]	; (827c <tc_init+0x2d0>)
    8186:	698b      	ldr	r3, [r1, #24]
    8188:	4318      	orrs	r0, r3
    818a:	6188      	str	r0, [r1, #24]
    818c:	e784      	b.n	8098 <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    818e:	493b      	ldr	r1, [pc, #236]	; (827c <tc_init+0x2d0>)
    8190:	69cb      	ldr	r3, [r1, #28]
    8192:	4318      	orrs	r0, r3
    8194:	61c8      	str	r0, [r1, #28]
    8196:	e77f      	b.n	8098 <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    8198:	4938      	ldr	r1, [pc, #224]	; (827c <tc_init+0x2d0>)
    819a:	6a0b      	ldr	r3, [r1, #32]
    819c:	4318      	orrs	r0, r3
    819e:	6208      	str	r0, [r1, #32]
    81a0:	e77a      	b.n	8098 <tc_init+0xec>
			MCLK->APBEMASK.reg |= mask;
    81a2:	4b36      	ldr	r3, [pc, #216]	; (827c <tc_init+0x2d0>)
    81a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    81a6:	4308      	orrs	r0, r1
    81a8:	6258      	str	r0, [r3, #36]	; 0x24
    81aa:	e775      	b.n	8098 <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    81ac:	4643      	mov	r3, r8
    81ae:	3301      	adds	r3, #1
    81b0:	2b02      	cmp	r3, #2
    81b2:	dd00      	ble.n	81b6 <tc_init+0x20a>
    81b4:	e774      	b.n	80a0 <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    81b6:	ab03      	add	r3, sp, #12
    81b8:	1cd1      	adds	r1, r2, #3
    81ba:	0089      	lsls	r1, r1, #2
    81bc:	58c9      	ldr	r1, [r1, r3]
    81be:	3202      	adds	r2, #2
    81c0:	0092      	lsls	r2, r2, #2
    81c2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    81c4:	b2da      	uxtb	r2, r3
    81c6:	2a04      	cmp	r2, #4
    81c8:	d900      	bls.n	81cc <tc_init+0x220>
    81ca:	e769      	b.n	80a0 <tc_init+0xf4>
    81cc:	0093      	lsls	r3, r2, #2
    81ce:	4a2e      	ldr	r2, [pc, #184]	; (8288 <tc_init+0x2dc>)
    81d0:	58d3      	ldr	r3, [r2, r3]
    81d2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    81d4:	4a29      	ldr	r2, [pc, #164]	; (827c <tc_init+0x2d0>)
    81d6:	6953      	ldr	r3, [r2, #20]
    81d8:	4319      	orrs	r1, r3
    81da:	6151      	str	r1, [r2, #20]
    81dc:	e760      	b.n	80a0 <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    81de:	4a27      	ldr	r2, [pc, #156]	; (827c <tc_init+0x2d0>)
    81e0:	6993      	ldr	r3, [r2, #24]
    81e2:	4319      	orrs	r1, r3
    81e4:	6191      	str	r1, [r2, #24]
    81e6:	e75b      	b.n	80a0 <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    81e8:	4a24      	ldr	r2, [pc, #144]	; (827c <tc_init+0x2d0>)
    81ea:	69d3      	ldr	r3, [r2, #28]
    81ec:	4319      	orrs	r1, r3
    81ee:	61d1      	str	r1, [r2, #28]
    81f0:	e756      	b.n	80a0 <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    81f2:	4a22      	ldr	r2, [pc, #136]	; (827c <tc_init+0x2d0>)
    81f4:	6a13      	ldr	r3, [r2, #32]
    81f6:	4319      	orrs	r1, r3
    81f8:	6211      	str	r1, [r2, #32]
    81fa:	e751      	b.n	80a0 <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    81fc:	4b1f      	ldr	r3, [pc, #124]	; (827c <tc_init+0x2d0>)
    81fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8200:	4311      	orrs	r1, r2
    8202:	6259      	str	r1, [r3, #36]	; 0x24
    8204:	e74c      	b.n	80a0 <tc_init+0xf4>
    8206:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8208:	2b00      	cmp	r3, #0
    820a:	d1fc      	bne.n	8206 <tc_init+0x25a>
					config->counter_8_bit.value;
    820c:	3328      	adds	r3, #40	; 0x28
    820e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    8210:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8212:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8214:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8216:	2b00      	cmp	r3, #0
    8218:	d1fc      	bne.n	8214 <tc_init+0x268>
					config->counter_8_bit.period;
    821a:	3329      	adds	r3, #41	; 0x29
    821c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    821e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8220:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8222:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8224:	2b00      	cmp	r3, #0
    8226:	d1fc      	bne.n	8222 <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    8228:	332a      	adds	r3, #42	; 0x2a
    822a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    822c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    822e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8230:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8232:	2b00      	cmp	r3, #0
    8234:	d1fc      	bne.n	8230 <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    8236:	332b      	adds	r3, #43	; 0x2b
    8238:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    823a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    823c:	2000      	movs	r0, #0
    823e:	e6e5      	b.n	800c <tc_init+0x60>
    8240:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8242:	2b00      	cmp	r3, #0
    8244:	d1fc      	bne.n	8240 <tc_init+0x294>
				= config->counter_32_bit.value;
    8246:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8248:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    824a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    824c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    824e:	2b00      	cmp	r3, #0
    8250:	d1fc      	bne.n	824c <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    8252:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8254:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8256:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8258:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    825a:	2b00      	cmp	r3, #0
    825c:	d1fc      	bne.n	8258 <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    825e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    8260:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    8262:	2000      	movs	r0, #0
    8264:	e6d2      	b.n	800c <tc_init+0x60>
    8266:	46c0      	nop			; (mov r8, r8)
    8268:	00007f75 	.word	0x00007f75
    826c:	00010d90 	.word	0x00010d90
    8270:	20001d08 	.word	0x20001d08
    8274:	00010d68 	.word	0x00010d68
    8278:	00007e4d 	.word	0x00007e4d
    827c:	40000400 	.word	0x40000400
    8280:	00007d51 	.word	0x00007d51
    8284:	00007ce1 	.word	0x00007ce1
    8288:	00010d7c 	.word	0x00010d7c

0000828c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    828c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    828e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    8290:	2b00      	cmp	r3, #0
    8292:	d1fc      	bne.n	828e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    8294:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8296:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8298:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    829a:	2b00      	cmp	r3, #0
    829c:	d1fc      	bne.n	8298 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    829e:	3380      	adds	r3, #128	; 0x80
    82a0:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    82a2:	7953      	ldrb	r3, [r2, #5]
    82a4:	b25b      	sxtb	r3, r3
    82a6:	2b00      	cmp	r3, #0
    82a8:	dbfb      	blt.n	82a2 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    82aa:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    82ac:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    82ae:	2b00      	cmp	r3, #0
    82b0:	d1fc      	bne.n	82ac <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    82b2:	7903      	ldrb	r3, [r0, #4]
    82b4:	2b04      	cmp	r3, #4
    82b6:	d005      	beq.n	82c4 <tc_get_count_value+0x38>
    82b8:	2b08      	cmp	r3, #8
    82ba:	d009      	beq.n	82d0 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    82bc:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    82be:	2b00      	cmp	r3, #0
    82c0:	d003      	beq.n	82ca <tc_get_count_value+0x3e>
}
    82c2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    82c4:	7d10      	ldrb	r0, [r2, #20]
    82c6:	b2c0      	uxtb	r0, r0
    82c8:	e7fb      	b.n	82c2 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    82ca:	8a90      	ldrh	r0, [r2, #20]
    82cc:	b280      	uxth	r0, r0
    82ce:	e7f8      	b.n	82c2 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    82d0:	6950      	ldr	r0, [r2, #20]
    82d2:	e7f6      	b.n	82c2 <tc_get_count_value+0x36>

000082d4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    82d4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    82d6:	6804      	ldr	r4, [r0, #0]
    82d8:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    82da:	2b00      	cmp	r3, #0
    82dc:	d1fc      	bne.n	82d8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    82de:	7903      	ldrb	r3, [r0, #4]
    82e0:	2b04      	cmp	r3, #4
    82e2:	d006      	beq.n	82f2 <tc_set_compare_value+0x1e>
    82e4:	2b08      	cmp	r3, #8
    82e6:	d028      	beq.n	833a <tc_set_compare_value+0x66>
    82e8:	2b00      	cmp	r3, #0
    82ea:	d013      	beq.n	8314 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    82ec:	2317      	movs	r3, #23
}
    82ee:	0018      	movs	r0, r3
    82f0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    82f2:	2317      	movs	r3, #23
			if (channel_index <
    82f4:	2901      	cmp	r1, #1
    82f6:	d8fa      	bhi.n	82ee <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    82f8:	7e83      	ldrb	r3, [r0, #26]
    82fa:	2b00      	cmp	r3, #0
    82fc:	d005      	beq.n	830a <tc_set_compare_value+0x36>
							(uint8_t)compare;
    82fe:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    8300:	1861      	adds	r1, r4, r1
    8302:	3130      	adds	r1, #48	; 0x30
    8304:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    8306:	2300      	movs	r3, #0
    8308:	e7f1      	b.n	82ee <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    830a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    830c:	1864      	adds	r4, r4, r1
    830e:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    8310:	2300      	movs	r3, #0
    8312:	e7ec      	b.n	82ee <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    8314:	2317      	movs	r3, #23
			if (channel_index <
    8316:	2901      	cmp	r1, #1
    8318:	d8e9      	bhi.n	82ee <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    831a:	7e83      	ldrb	r3, [r0, #26]
    831c:	2b00      	cmp	r3, #0
    831e:	d005      	beq.n	832c <tc_set_compare_value+0x58>
							(uint16_t)compare;
    8320:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    8322:	3118      	adds	r1, #24
    8324:	0049      	lsls	r1, r1, #1
    8326:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    8328:	2300      	movs	r3, #0
    832a:	e7e0      	b.n	82ee <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    832c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    832e:	310c      	adds	r1, #12
    8330:	0049      	lsls	r1, r1, #1
    8332:	1864      	adds	r4, r4, r1
    8334:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    8336:	2300      	movs	r3, #0
    8338:	e7d9      	b.n	82ee <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    833a:	2317      	movs	r3, #23
			if (channel_index <
    833c:	2901      	cmp	r1, #1
    833e:	d8d6      	bhi.n	82ee <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    8340:	7e83      	ldrb	r3, [r0, #26]
    8342:	2b00      	cmp	r3, #0
    8344:	d105      	bne.n	8352 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    8346:	3106      	adds	r1, #6
    8348:	0089      	lsls	r1, r1, #2
    834a:	1864      	adds	r4, r4, r1
    834c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    834e:	2300      	movs	r3, #0
    8350:	e7cd      	b.n	82ee <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    8352:	310c      	adds	r1, #12
    8354:	0089      	lsls	r1, r1, #2
    8356:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    8358:	2300      	movs	r3, #0
    835a:	e7c8      	b.n	82ee <tc_set_compare_value+0x1a>

0000835c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    835c:	e7fe      	b.n	835c <Dummy_Handler>
    835e:	Address 0x0000835e is out of bounds.


00008360 <Reset_Handler>:
{
    8360:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8362:	4a1a      	ldr	r2, [pc, #104]	; (83cc <Reset_Handler+0x6c>)
    8364:	4b1a      	ldr	r3, [pc, #104]	; (83d0 <Reset_Handler+0x70>)
    8366:	429a      	cmp	r2, r3
    8368:	d011      	beq.n	838e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    836a:	001a      	movs	r2, r3
    836c:	4b19      	ldr	r3, [pc, #100]	; (83d4 <Reset_Handler+0x74>)
    836e:	429a      	cmp	r2, r3
    8370:	d20d      	bcs.n	838e <Reset_Handler+0x2e>
    8372:	4a19      	ldr	r2, [pc, #100]	; (83d8 <Reset_Handler+0x78>)
    8374:	3303      	adds	r3, #3
    8376:	1a9b      	subs	r3, r3, r2
    8378:	089b      	lsrs	r3, r3, #2
    837a:	3301      	adds	r3, #1
    837c:	009b      	lsls	r3, r3, #2
    837e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8380:	4813      	ldr	r0, [pc, #76]	; (83d0 <Reset_Handler+0x70>)
    8382:	4912      	ldr	r1, [pc, #72]	; (83cc <Reset_Handler+0x6c>)
    8384:	588c      	ldr	r4, [r1, r2]
    8386:	5084      	str	r4, [r0, r2]
    8388:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    838a:	429a      	cmp	r2, r3
    838c:	d1fa      	bne.n	8384 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    838e:	4a13      	ldr	r2, [pc, #76]	; (83dc <Reset_Handler+0x7c>)
    8390:	4b13      	ldr	r3, [pc, #76]	; (83e0 <Reset_Handler+0x80>)
    8392:	429a      	cmp	r2, r3
    8394:	d20a      	bcs.n	83ac <Reset_Handler+0x4c>
    8396:	43d3      	mvns	r3, r2
    8398:	4911      	ldr	r1, [pc, #68]	; (83e0 <Reset_Handler+0x80>)
    839a:	185b      	adds	r3, r3, r1
    839c:	2103      	movs	r1, #3
    839e:	438b      	bics	r3, r1
    83a0:	3304      	adds	r3, #4
    83a2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    83a4:	2100      	movs	r1, #0
    83a6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    83a8:	4293      	cmp	r3, r2
    83aa:	d1fc      	bne.n	83a6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    83ac:	4a0d      	ldr	r2, [pc, #52]	; (83e4 <Reset_Handler+0x84>)
    83ae:	21ff      	movs	r1, #255	; 0xff
    83b0:	4b0d      	ldr	r3, [pc, #52]	; (83e8 <Reset_Handler+0x88>)
    83b2:	438b      	bics	r3, r1
    83b4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    83b6:	4a0d      	ldr	r2, [pc, #52]	; (83ec <Reset_Handler+0x8c>)
    83b8:	6853      	ldr	r3, [r2, #4]
    83ba:	397f      	subs	r1, #127	; 0x7f
    83bc:	430b      	orrs	r3, r1
    83be:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    83c0:	4b0b      	ldr	r3, [pc, #44]	; (83f0 <Reset_Handler+0x90>)
    83c2:	4798      	blx	r3
        main();
    83c4:	4b0b      	ldr	r3, [pc, #44]	; (83f4 <Reset_Handler+0x94>)
    83c6:	4798      	blx	r3
    83c8:	e7fe      	b.n	83c8 <Reset_Handler+0x68>
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	00011aa0 	.word	0x00011aa0
    83d0:	20000000 	.word	0x20000000
    83d4:	20000098 	.word	0x20000098
    83d8:	20000004 	.word	0x20000004
    83dc:	20000098 	.word	0x20000098
    83e0:	200022b0 	.word	0x200022b0
    83e4:	e000ed00 	.word	0xe000ed00
    83e8:	00000000 	.word	0x00000000
    83ec:	41004000 	.word	0x41004000
    83f0:	0000f915 	.word	0x0000f915
    83f4:	0000e0ed 	.word	0x0000e0ed

000083f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    83f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    83fa:	46c6      	mov	lr, r8
    83fc:	b500      	push	{lr}
    83fe:	000c      	movs	r4, r1
    8400:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8402:	2800      	cmp	r0, #0
    8404:	d10f      	bne.n	8426 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8406:	2a00      	cmp	r2, #0
    8408:	dd11      	ble.n	842e <_read+0x36>
    840a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    840c:	4e09      	ldr	r6, [pc, #36]	; (8434 <_read+0x3c>)
    840e:	4d0a      	ldr	r5, [pc, #40]	; (8438 <_read+0x40>)
    8410:	6830      	ldr	r0, [r6, #0]
    8412:	0021      	movs	r1, r4
    8414:	682b      	ldr	r3, [r5, #0]
    8416:	4798      	blx	r3
		ptr++;
    8418:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    841a:	42bc      	cmp	r4, r7
    841c:	d1f8      	bne.n	8410 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    841e:	4640      	mov	r0, r8
    8420:	bc04      	pop	{r2}
    8422:	4690      	mov	r8, r2
    8424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    8426:	2301      	movs	r3, #1
    8428:	425b      	negs	r3, r3
    842a:	4698      	mov	r8, r3
    842c:	e7f7      	b.n	841e <_read+0x26>
	for (; len > 0; --len) {
    842e:	4680      	mov	r8, r0
    8430:	e7f5      	b.n	841e <_read+0x26>
    8432:	46c0      	nop			; (mov r8, r8)
    8434:	20001d1c 	.word	0x20001d1c
    8438:	20001d14 	.word	0x20001d14

0000843c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    843c:	b5f0      	push	{r4, r5, r6, r7, lr}
    843e:	46c6      	mov	lr, r8
    8440:	b500      	push	{lr}
    8442:	000e      	movs	r6, r1
    8444:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    8446:	3801      	subs	r0, #1
    8448:	2802      	cmp	r0, #2
    844a:	d810      	bhi.n	846e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    844c:	2a00      	cmp	r2, #0
    844e:	d011      	beq.n	8474 <_write+0x38>
    8450:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8452:	4b0c      	ldr	r3, [pc, #48]	; (8484 <_write+0x48>)
    8454:	4698      	mov	r8, r3
    8456:	4f0c      	ldr	r7, [pc, #48]	; (8488 <_write+0x4c>)
    8458:	4643      	mov	r3, r8
    845a:	6818      	ldr	r0, [r3, #0]
    845c:	5d31      	ldrb	r1, [r6, r4]
    845e:	683b      	ldr	r3, [r7, #0]
    8460:	4798      	blx	r3
    8462:	2800      	cmp	r0, #0
    8464:	db08      	blt.n	8478 <_write+0x3c>
			return -1;
		}
		++nChars;
    8466:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    8468:	42a5      	cmp	r5, r4
    846a:	d1f5      	bne.n	8458 <_write+0x1c>
    846c:	e006      	b.n	847c <_write+0x40>
		return -1;
    846e:	2401      	movs	r4, #1
    8470:	4264      	negs	r4, r4
    8472:	e003      	b.n	847c <_write+0x40>
	for (; len != 0; --len) {
    8474:	0014      	movs	r4, r2
    8476:	e001      	b.n	847c <_write+0x40>
			return -1;
    8478:	2401      	movs	r4, #1
    847a:	4264      	negs	r4, r4
	}
	return nChars;
}
    847c:	0020      	movs	r0, r4
    847e:	bc04      	pop	{r2}
    8480:	4690      	mov	r8, r2
    8482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8484:	20001d1c 	.word	0x20001d1c
    8488:	20001d18 	.word	0x20001d18

0000848c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    848c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    848e:	4a06      	ldr	r2, [pc, #24]	; (84a8 <_sbrk+0x1c>)
    8490:	6812      	ldr	r2, [r2, #0]
    8492:	2a00      	cmp	r2, #0
    8494:	d004      	beq.n	84a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8496:	4a04      	ldr	r2, [pc, #16]	; (84a8 <_sbrk+0x1c>)
    8498:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    849a:	18c3      	adds	r3, r0, r3
    849c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    849e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    84a0:	4902      	ldr	r1, [pc, #8]	; (84ac <_sbrk+0x20>)
    84a2:	4a01      	ldr	r2, [pc, #4]	; (84a8 <_sbrk+0x1c>)
    84a4:	6011      	str	r1, [r2, #0]
    84a6:	e7f6      	b.n	8496 <_sbrk+0xa>
    84a8:	200000f8 	.word	0x200000f8
    84ac:	200042b0 	.word	0x200042b0

000084b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    84b0:	2001      	movs	r0, #1
    84b2:	4240      	negs	r0, r0
    84b4:	4770      	bx	lr

000084b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    84b6:	2380      	movs	r3, #128	; 0x80
    84b8:	019b      	lsls	r3, r3, #6
    84ba:	604b      	str	r3, [r1, #4]

	return 0;
}
    84bc:	2000      	movs	r0, #0
    84be:	4770      	bx	lr

000084c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    84c0:	2001      	movs	r0, #1
    84c2:	4770      	bx	lr

000084c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    84c4:	2000      	movs	r0, #0
    84c6:	4770      	bx	lr

000084c8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    84c8:	be00      	bkpt	0x0000
    84ca:	e7fe      	b.n	84ca <_exit+0x2>

000084cc <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    84cc:	4770      	bx	lr

000084ce <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    84ce:	2001      	movs	r0, #1
    84d0:	4240      	negs	r0, r0
    84d2:	4770      	bx	lr

000084d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    84d4:	b570      	push	{r4, r5, r6, lr}
    84d6:	b082      	sub	sp, #8
    84d8:	0005      	movs	r5, r0
    84da:	000e      	movs	r6, r1
	uint16_t temp = 0;
    84dc:	2200      	movs	r2, #0
    84de:	466b      	mov	r3, sp
    84e0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    84e2:	4c06      	ldr	r4, [pc, #24]	; (84fc <usart_serial_getchar+0x28>)
    84e4:	466b      	mov	r3, sp
    84e6:	1d99      	adds	r1, r3, #6
    84e8:	0028      	movs	r0, r5
    84ea:	47a0      	blx	r4
    84ec:	2800      	cmp	r0, #0
    84ee:	d1f9      	bne.n	84e4 <usart_serial_getchar+0x10>

	*c = temp;
    84f0:	466b      	mov	r3, sp
    84f2:	3306      	adds	r3, #6
    84f4:	881b      	ldrh	r3, [r3, #0]
    84f6:	7033      	strb	r3, [r6, #0]
}
    84f8:	b002      	add	sp, #8
    84fa:	bd70      	pop	{r4, r5, r6, pc}
    84fc:	000074d3 	.word	0x000074d3

00008500 <usart_serial_putchar>:
{
    8500:	b570      	push	{r4, r5, r6, lr}
    8502:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    8504:	b28c      	uxth	r4, r1
    8506:	4e03      	ldr	r6, [pc, #12]	; (8514 <usart_serial_putchar+0x14>)
    8508:	0021      	movs	r1, r4
    850a:	0028      	movs	r0, r5
    850c:	47b0      	blx	r6
    850e:	2800      	cmp	r0, #0
    8510:	d1fa      	bne.n	8508 <usart_serial_putchar+0x8>
}
    8512:	bd70      	pop	{r4, r5, r6, pc}
    8514:	000074ad 	.word	0x000074ad

00008518 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    8518:	b510      	push	{r4, lr}
    851a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    851c:	466b      	mov	r3, sp
    851e:	1ddc      	adds	r4, r3, #7
    8520:	2201      	movs	r2, #1
    8522:	0021      	movs	r1, r4
    8524:	480f      	ldr	r0, [pc, #60]	; (8564 <USART_HOST_ISR_VECT+0x4c>)
    8526:	4b10      	ldr	r3, [pc, #64]	; (8568 <USART_HOST_ISR_VECT+0x50>)
    8528:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    852a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    852c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8530:	2200      	movs	r2, #0
    8532:	4b0e      	ldr	r3, [pc, #56]	; (856c <USART_HOST_ISR_VECT+0x54>)
    8534:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    8536:	4b0e      	ldr	r3, [pc, #56]	; (8570 <USART_HOST_ISR_VECT+0x58>)
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	7821      	ldrb	r1, [r4, #0]
    853c:	4a0d      	ldr	r2, [pc, #52]	; (8574 <USART_HOST_ISR_VECT+0x5c>)
    853e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8540:	2b9b      	cmp	r3, #155	; 0x9b
    8542:	d00a      	beq.n	855a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8544:	3301      	adds	r3, #1
    8546:	4a0a      	ldr	r2, [pc, #40]	; (8570 <USART_HOST_ISR_VECT+0x58>)
    8548:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    854a:	2201      	movs	r2, #1
    854c:	4b07      	ldr	r3, [pc, #28]	; (856c <USART_HOST_ISR_VECT+0x54>)
    854e:	701a      	strb	r2, [r3, #0]
    8550:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8554:	b662      	cpsie	i
}
    8556:	b002      	add	sp, #8
    8558:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    855a:	2200      	movs	r2, #0
    855c:	4b04      	ldr	r3, [pc, #16]	; (8570 <USART_HOST_ISR_VECT+0x58>)
    855e:	701a      	strb	r2, [r3, #0]
    8560:	e7f3      	b.n	854a <USART_HOST_ISR_VECT+0x32>
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	200000fc 	.word	0x200000fc
    8568:	000075f9 	.word	0x000075f9
    856c:	20000008 	.word	0x20000008
    8570:	200001cc 	.word	0x200001cc
    8574:	20000130 	.word	0x20000130

00008578 <sio2host_init>:
{
    8578:	b5f0      	push	{r4, r5, r6, r7, lr}
    857a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    857c:	2380      	movs	r3, #128	; 0x80
    857e:	05db      	lsls	r3, r3, #23
    8580:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8582:	2300      	movs	r3, #0
    8584:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    8586:	22ff      	movs	r2, #255	; 0xff
    8588:	4669      	mov	r1, sp
    858a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    858c:	2200      	movs	r2, #0
    858e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8590:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8592:	2401      	movs	r4, #1
    8594:	2124      	movs	r1, #36	; 0x24
    8596:	4668      	mov	r0, sp
    8598:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    859a:	3101      	adds	r1, #1
    859c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    859e:	3101      	adds	r1, #1
    85a0:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    85a2:	3101      	adds	r1, #1
    85a4:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    85a6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    85a8:	3105      	adds	r1, #5
    85aa:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    85ac:	3101      	adds	r1, #1
    85ae:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    85b0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    85b2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    85b4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    85b6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    85b8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    85ba:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    85bc:	2313      	movs	r3, #19
    85be:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    85c0:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    85c2:	23c4      	movs	r3, #196	; 0xc4
    85c4:	039b      	lsls	r3, r3, #14
    85c6:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    85c8:	2301      	movs	r3, #1
    85ca:	425b      	negs	r3, r3
    85cc:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    85ce:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    85d0:	4b2d      	ldr	r3, [pc, #180]	; (8688 <sio2host_init+0x110>)
    85d2:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    85d4:	4b2d      	ldr	r3, [pc, #180]	; (868c <sio2host_init+0x114>)
    85d6:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    85d8:	2396      	movs	r3, #150	; 0x96
    85da:	021b      	lsls	r3, r3, #8
    85dc:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    85de:	4d2c      	ldr	r5, [pc, #176]	; (8690 <sio2host_init+0x118>)
    85e0:	4b2c      	ldr	r3, [pc, #176]	; (8694 <sio2host_init+0x11c>)
    85e2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    85e4:	4a2c      	ldr	r2, [pc, #176]	; (8698 <sio2host_init+0x120>)
    85e6:	4b2d      	ldr	r3, [pc, #180]	; (869c <sio2host_init+0x124>)
    85e8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    85ea:	4a2d      	ldr	r2, [pc, #180]	; (86a0 <sio2host_init+0x128>)
    85ec:	4b2d      	ldr	r3, [pc, #180]	; (86a4 <sio2host_init+0x12c>)
    85ee:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    85f0:	466a      	mov	r2, sp
    85f2:	492d      	ldr	r1, [pc, #180]	; (86a8 <sio2host_init+0x130>)
    85f4:	0028      	movs	r0, r5
    85f6:	4b2d      	ldr	r3, [pc, #180]	; (86ac <sio2host_init+0x134>)
    85f8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    85fa:	4f2d      	ldr	r7, [pc, #180]	; (86b0 <sio2host_init+0x138>)
    85fc:	683b      	ldr	r3, [r7, #0]
    85fe:	6898      	ldr	r0, [r3, #8]
    8600:	2100      	movs	r1, #0
    8602:	4e2c      	ldr	r6, [pc, #176]	; (86b4 <sio2host_init+0x13c>)
    8604:	47b0      	blx	r6
	setbuf(stdin, NULL);
    8606:	683b      	ldr	r3, [r7, #0]
    8608:	6858      	ldr	r0, [r3, #4]
    860a:	2100      	movs	r1, #0
    860c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    860e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8610:	0030      	movs	r0, r6
    8612:	4b29      	ldr	r3, [pc, #164]	; (86b8 <sio2host_init+0x140>)
    8614:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8616:	231f      	movs	r3, #31
    8618:	4018      	ands	r0, r3
    861a:	4084      	lsls	r4, r0
    861c:	4b27      	ldr	r3, [pc, #156]	; (86bc <sio2host_init+0x144>)
    861e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8620:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8622:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8624:	2b00      	cmp	r3, #0
    8626:	d1fc      	bne.n	8622 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8628:	6833      	ldr	r3, [r6, #0]
    862a:	2202      	movs	r2, #2
    862c:	4313      	orrs	r3, r2
    862e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8630:	4b17      	ldr	r3, [pc, #92]	; (8690 <sio2host_init+0x118>)
    8632:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8634:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8636:	2a00      	cmp	r2, #0
    8638:	d1fc      	bne.n	8634 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    863a:	6859      	ldr	r1, [r3, #4]
    863c:	2280      	movs	r2, #128	; 0x80
    863e:	0252      	lsls	r2, r2, #9
    8640:	430a      	orrs	r2, r1
    8642:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8644:	2101      	movs	r1, #1
    8646:	4a12      	ldr	r2, [pc, #72]	; (8690 <sio2host_init+0x118>)
    8648:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    864a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    864c:	2a00      	cmp	r2, #0
    864e:	d1fc      	bne.n	864a <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8650:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8652:	2a00      	cmp	r2, #0
    8654:	d1fc      	bne.n	8650 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    8656:	6859      	ldr	r1, [r3, #4]
    8658:	2280      	movs	r2, #128	; 0x80
    865a:	0292      	lsls	r2, r2, #10
    865c:	430a      	orrs	r2, r1
    865e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8660:	2101      	movs	r1, #1
    8662:	4a0b      	ldr	r2, [pc, #44]	; (8690 <sio2host_init+0x118>)
    8664:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    8666:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8668:	2a00      	cmp	r2, #0
    866a:	d1fc      	bne.n	8666 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    866c:	4914      	ldr	r1, [pc, #80]	; (86c0 <sio2host_init+0x148>)
    866e:	2003      	movs	r0, #3
    8670:	4b14      	ldr	r3, [pc, #80]	; (86c4 <sio2host_init+0x14c>)
    8672:	4798      	blx	r3
    8674:	2204      	movs	r2, #4
    8676:	4b0c      	ldr	r3, [pc, #48]	; (86a8 <sio2host_init+0x130>)
    8678:	759a      	strb	r2, [r3, #22]
    867a:	2280      	movs	r2, #128	; 0x80
    867c:	0112      	lsls	r2, r2, #4
    867e:	4b0f      	ldr	r3, [pc, #60]	; (86bc <sio2host_init+0x144>)
    8680:	601a      	str	r2, [r3, #0]
}
    8682:	b011      	add	sp, #68	; 0x44
    8684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8686:	46c0      	nop			; (mov r8, r8)
    8688:	00180002 	.word	0x00180002
    868c:	00190002 	.word	0x00190002
    8690:	200000fc 	.word	0x200000fc
    8694:	20001d1c 	.word	0x20001d1c
    8698:	00008501 	.word	0x00008501
    869c:	20001d18 	.word	0x20001d18
    86a0:	000084d5 	.word	0x000084d5
    86a4:	20001d14 	.word	0x20001d14
    86a8:	42000c00 	.word	0x42000c00
    86ac:	00007149 	.word	0x00007149
    86b0:	20000034 	.word	0x20000034
    86b4:	00010111 	.word	0x00010111
    86b8:	00006ce9 	.word	0x00006ce9
    86bc:	e000e100 	.word	0xe000e100
    86c0:	00008519 	.word	0x00008519
    86c4:	00006cad 	.word	0x00006cad

000086c8 <sio2host_tx>:
{
    86c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ca:	b083      	sub	sp, #12
    86cc:	0006      	movs	r6, r0
    86ce:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    86d0:	466b      	mov	r3, sp
    86d2:	889d      	ldrh	r5, [r3, #4]
    86d4:	4c05      	ldr	r4, [pc, #20]	; (86ec <sio2host_tx+0x24>)
    86d6:	4f06      	ldr	r7, [pc, #24]	; (86f0 <sio2host_tx+0x28>)
    86d8:	002a      	movs	r2, r5
    86da:	0031      	movs	r1, r6
    86dc:	0020      	movs	r0, r4
    86de:	47b8      	blx	r7
	} while (status != STATUS_OK);
    86e0:	2800      	cmp	r0, #0
    86e2:	d1f9      	bne.n	86d8 <sio2host_tx+0x10>
}
    86e4:	9801      	ldr	r0, [sp, #4]
    86e6:	b003      	add	sp, #12
    86e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	200000fc 	.word	0x200000fc
    86f0:	0000753d 	.word	0x0000753d

000086f4 <sio2host_putchar>:
{
    86f4:	b500      	push	{lr}
    86f6:	b083      	sub	sp, #12
    86f8:	466b      	mov	r3, sp
    86fa:	71d8      	strb	r0, [r3, #7]
    86fc:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    86fe:	2101      	movs	r1, #1
    8700:	0018      	movs	r0, r3
    8702:	4b02      	ldr	r3, [pc, #8]	; (870c <sio2host_putchar+0x18>)
    8704:	4798      	blx	r3
}
    8706:	b003      	add	sp, #12
    8708:	bd00      	pop	{pc}
    870a:	46c0      	nop			; (mov r8, r8)
    870c:	000086c9 	.word	0x000086c9

00008710 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8710:	b5f0      	push	{r4, r5, r6, r7, lr}
    8712:	46c6      	mov	lr, r8
    8714:	b500      	push	{lr}
    8716:	b084      	sub	sp, #16
    8718:	0014      	movs	r4, r2
    871a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    871c:	4b29      	ldr	r3, [pc, #164]	; (87c4 <CompareData+0xb4>)
    871e:	18cb      	adds	r3, r1, r3
    8720:	0340      	lsls	r0, r0, #13
    8722:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8724:	2f00      	cmp	r7, #0
    8726:	d01a      	beq.n	875e <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8728:	4b27      	ldr	r3, [pc, #156]	; (87c8 <CompareData+0xb8>)
    872a:	1e5a      	subs	r2, r3, #1
    872c:	4295      	cmp	r5, r2
    872e:	d81c      	bhi.n	876a <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8730:	197a      	adds	r2, r7, r5
    8732:	4293      	cmp	r3, r2
    8734:	d31f      	bcc.n	8776 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8736:	19c9      	adds	r1, r1, r7
    8738:	2380      	movs	r3, #128	; 0x80
    873a:	019b      	lsls	r3, r3, #6
    873c:	4299      	cmp	r1, r3
    873e:	d820      	bhi.n	8782 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8740:	4b22      	ldr	r3, [pc, #136]	; (87cc <CompareData+0xbc>)
    8742:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8744:	1c3e      	adds	r6, r7, #0
    8746:	2f10      	cmp	r7, #16
    8748:	d900      	bls.n	874c <CompareData+0x3c>
    874a:	2610      	movs	r6, #16
    874c:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    874e:	0032      	movs	r2, r6
    8750:	0029      	movs	r1, r5
    8752:	4668      	mov	r0, sp
    8754:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8756:	2e00      	cmp	r6, #0
    8758:	d028      	beq.n	87ac <CompareData+0x9c>
    875a:	2300      	movs	r3, #0
    875c:	e01f      	b.n	879e <CompareData+0x8e>
  assert(numberOfBytes);
    875e:	4b1c      	ldr	r3, [pc, #112]	; (87d0 <CompareData+0xc0>)
    8760:	4a1c      	ldr	r2, [pc, #112]	; (87d4 <CompareData+0xc4>)
    8762:	21d9      	movs	r1, #217	; 0xd9
    8764:	481c      	ldr	r0, [pc, #112]	; (87d8 <CompareData+0xc8>)
    8766:	4c1d      	ldr	r4, [pc, #116]	; (87dc <CompareData+0xcc>)
    8768:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    876a:	4b1d      	ldr	r3, [pc, #116]	; (87e0 <CompareData+0xd0>)
    876c:	4a19      	ldr	r2, [pc, #100]	; (87d4 <CompareData+0xc4>)
    876e:	21da      	movs	r1, #218	; 0xda
    8770:	4819      	ldr	r0, [pc, #100]	; (87d8 <CompareData+0xc8>)
    8772:	4c1a      	ldr	r4, [pc, #104]	; (87dc <CompareData+0xcc>)
    8774:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8776:	4b1b      	ldr	r3, [pc, #108]	; (87e4 <CompareData+0xd4>)
    8778:	4a16      	ldr	r2, [pc, #88]	; (87d4 <CompareData+0xc4>)
    877a:	21db      	movs	r1, #219	; 0xdb
    877c:	4816      	ldr	r0, [pc, #88]	; (87d8 <CompareData+0xc8>)
    877e:	4c17      	ldr	r4, [pc, #92]	; (87dc <CompareData+0xcc>)
    8780:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8782:	4b19      	ldr	r3, [pc, #100]	; (87e8 <CompareData+0xd8>)
    8784:	4a13      	ldr	r2, [pc, #76]	; (87d4 <CompareData+0xc4>)
    8786:	21dc      	movs	r1, #220	; 0xdc
    8788:	4813      	ldr	r0, [pc, #76]	; (87d8 <CompareData+0xc8>)
    878a:	4c14      	ldr	r4, [pc, #80]	; (87dc <CompareData+0xcc>)
    878c:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    878e:	21ff      	movs	r1, #255	; 0xff
    8790:	4291      	cmp	r1, r2
    8792:	d112      	bne.n	87ba <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8794:	3301      	adds	r3, #1
    8796:	b2db      	uxtb	r3, r3
    8798:	b29a      	uxth	r2, r3
    879a:	4296      	cmp	r6, r2
    879c:	d906      	bls.n	87ac <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    879e:	466a      	mov	r2, sp
    87a0:	5cd2      	ldrb	r2, [r2, r3]
    87a2:	2c00      	cmp	r4, #0
    87a4:	d0f3      	beq.n	878e <CompareData+0x7e>
    87a6:	7821      	ldrb	r1, [r4, #0]
    87a8:	3401      	adds	r4, #1
    87aa:	e7f1      	b.n	8790 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    87ac:	1bbf      	subs	r7, r7, r6
    87ae:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    87b0:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    87b2:	2f00      	cmp	r7, #0
    87b4:	d1c6      	bne.n	8744 <CompareData+0x34>
  }

  return true;
    87b6:	2001      	movs	r0, #1
    87b8:	e000      	b.n	87bc <CompareData+0xac>
        return false;
    87ba:	2000      	movs	r0, #0
}
    87bc:	b004      	add	sp, #16
    87be:	bc04      	pop	{r2}
    87c0:	4690      	mov	r8, r2
    87c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87c4:	00002100 	.word	0x00002100
    87c8:	00006100 	.word	0x00006100
    87cc:	0000f97b 	.word	0x0000f97b
    87d0:	00010db4 	.word	0x00010db4
    87d4:	00010f38 	.word	0x00010f38
    87d8:	00010dc4 	.word	0x00010dc4
    87dc:	0000f8b9 	.word	0x0000f8b9
    87e0:	00010e04 	.word	0x00010e04
    87e4:	00010e20 	.word	0x00010e20
    87e8:	00010e54 	.word	0x00010e54

000087ec <D_Nv_Init>:
{
    87ec:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    87ee:	4a0b      	ldr	r2, [pc, #44]	; (881c <D_Nv_Init+0x30>)
    87f0:	23ff      	movs	r3, #255	; 0xff
    87f2:	421a      	tst	r2, r3
    87f4:	d106      	bne.n	8804 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    87f6:	4b0a      	ldr	r3, [pc, #40]	; (8820 <D_Nv_Init+0x34>)
    87f8:	490a      	ldr	r1, [pc, #40]	; (8824 <D_Nv_Init+0x38>)
    87fa:	468c      	mov	ip, r1
    87fc:	4463      	add	r3, ip
    87fe:	4293      	cmp	r3, r2
    8800:	d106      	bne.n	8810 <D_Nv_Init+0x24>
}
    8802:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8804:	4b08      	ldr	r3, [pc, #32]	; (8828 <D_Nv_Init+0x3c>)
    8806:	4a09      	ldr	r2, [pc, #36]	; (882c <D_Nv_Init+0x40>)
    8808:	2159      	movs	r1, #89	; 0x59
    880a:	4809      	ldr	r0, [pc, #36]	; (8830 <D_Nv_Init+0x44>)
    880c:	4c09      	ldr	r4, [pc, #36]	; (8834 <D_Nv_Init+0x48>)
    880e:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8810:	4b09      	ldr	r3, [pc, #36]	; (8838 <D_Nv_Init+0x4c>)
    8812:	4a06      	ldr	r2, [pc, #24]	; (882c <D_Nv_Init+0x40>)
    8814:	215d      	movs	r1, #93	; 0x5d
    8816:	4806      	ldr	r0, [pc, #24]	; (8830 <D_Nv_Init+0x44>)
    8818:	4c06      	ldr	r4, [pc, #24]	; (8834 <D_Nv_Init+0x48>)
    881a:	47a0      	blx	r4
    881c:	00002100 	.word	0x00002100
    8820:	00006100 	.word	0x00006100
    8824:	ffffc000 	.word	0xffffc000
    8828:	00010e84 	.word	0x00010e84
    882c:	00010ef4 	.word	0x00010ef4
    8830:	00010dc4 	.word	0x00010dc4
    8834:	0000f8b9 	.word	0x0000f8b9
    8838:	00010eb4 	.word	0x00010eb4

0000883c <D_Nv_Read_Impl>:
{
    883c:	b570      	push	{r4, r5, r6, lr}
    883e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8840:	0344      	lsls	r4, r0, #13
    8842:	4813      	ldr	r0, [pc, #76]	; (8890 <D_Nv_Read_Impl+0x54>)
    8844:	1808      	adds	r0, r1, r0
    8846:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8848:	4a12      	ldr	r2, [pc, #72]	; (8894 <D_Nv_Read_Impl+0x58>)
    884a:	1e50      	subs	r0, r2, #1
    884c:	4284      	cmp	r4, r0
    884e:	d80d      	bhi.n	886c <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8850:	18e0      	adds	r0, r4, r3
    8852:	4282      	cmp	r2, r0
    8854:	d310      	bcc.n	8878 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8856:	18c9      	adds	r1, r1, r3
    8858:	2280      	movs	r2, #128	; 0x80
    885a:	0192      	lsls	r2, r2, #6
    885c:	4291      	cmp	r1, r2
    885e:	d811      	bhi.n	8884 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    8860:	001a      	movs	r2, r3
    8862:	0021      	movs	r1, r4
    8864:	0028      	movs	r0, r5
    8866:	4b0c      	ldr	r3, [pc, #48]	; (8898 <D_Nv_Read_Impl+0x5c>)
    8868:	4798      	blx	r3
}
    886a:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    886c:	4b0b      	ldr	r3, [pc, #44]	; (889c <D_Nv_Read_Impl+0x60>)
    886e:	4a0c      	ldr	r2, [pc, #48]	; (88a0 <D_Nv_Read_Impl+0x64>)
    8870:	2172      	movs	r1, #114	; 0x72
    8872:	480c      	ldr	r0, [pc, #48]	; (88a4 <D_Nv_Read_Impl+0x68>)
    8874:	4c0c      	ldr	r4, [pc, #48]	; (88a8 <D_Nv_Read_Impl+0x6c>)
    8876:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8878:	4b0c      	ldr	r3, [pc, #48]	; (88ac <D_Nv_Read_Impl+0x70>)
    887a:	4a09      	ldr	r2, [pc, #36]	; (88a0 <D_Nv_Read_Impl+0x64>)
    887c:	2173      	movs	r1, #115	; 0x73
    887e:	4809      	ldr	r0, [pc, #36]	; (88a4 <D_Nv_Read_Impl+0x68>)
    8880:	4c09      	ldr	r4, [pc, #36]	; (88a8 <D_Nv_Read_Impl+0x6c>)
    8882:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8884:	4b0a      	ldr	r3, [pc, #40]	; (88b0 <D_Nv_Read_Impl+0x74>)
    8886:	4a06      	ldr	r2, [pc, #24]	; (88a0 <D_Nv_Read_Impl+0x64>)
    8888:	2174      	movs	r1, #116	; 0x74
    888a:	4806      	ldr	r0, [pc, #24]	; (88a4 <D_Nv_Read_Impl+0x68>)
    888c:	4c06      	ldr	r4, [pc, #24]	; (88a8 <D_Nv_Read_Impl+0x6c>)
    888e:	47a0      	blx	r4
    8890:	00002100 	.word	0x00002100
    8894:	00006100 	.word	0x00006100
    8898:	0000f97b 	.word	0x0000f97b
    889c:	00010e04 	.word	0x00010e04
    88a0:	00010f00 	.word	0x00010f00
    88a4:	00010dc4 	.word	0x00010dc4
    88a8:	0000f8b9 	.word	0x0000f8b9
    88ac:	00010e20 	.word	0x00010e20
    88b0:	00010e54 	.word	0x00010e54

000088b4 <D_Nv_Write_Impl>:
{
    88b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    88b6:	46de      	mov	lr, fp
    88b8:	4657      	mov	r7, sl
    88ba:	464e      	mov	r6, r9
    88bc:	4645      	mov	r5, r8
    88be:	b5e0      	push	{r5, r6, r7, lr}
    88c0:	b093      	sub	sp, #76	; 0x4c
    88c2:	9201      	str	r2, [sp, #4]
    88c4:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    88c6:	4c46      	ldr	r4, [pc, #280]	; (89e0 <D_Nv_Write_Impl+0x12c>)
    88c8:	190c      	adds	r4, r1, r4
    88ca:	0340      	lsls	r0, r0, #13
    88cc:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    88ce:	2b00      	cmp	r3, #0
    88d0:	d047      	beq.n	8962 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    88d2:	4b44      	ldr	r3, [pc, #272]	; (89e4 <D_Nv_Write_Impl+0x130>)
    88d4:	1e5a      	subs	r2, r3, #1
    88d6:	4295      	cmp	r5, r2
    88d8:	d849      	bhi.n	896e <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    88da:	4652      	mov	r2, sl
    88dc:	1952      	adds	r2, r2, r5
    88de:	4293      	cmp	r3, r2
    88e0:	d34b      	bcc.n	897a <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    88e2:	46d3      	mov	fp, sl
    88e4:	4451      	add	r1, sl
    88e6:	2380      	movs	r3, #128	; 0x80
    88e8:	019b      	lsls	r3, r3, #6
    88ea:	4299      	cmp	r1, r3
    88ec:	d84b      	bhi.n	8986 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    88ee:	4b3e      	ldr	r3, [pc, #248]	; (89e8 <D_Nv_Write_Impl+0x134>)
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	2b00      	cmp	r3, #0
    88f4:	d000      	beq.n	88f8 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    88f6:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    88f8:	273f      	movs	r7, #63	; 0x3f
    88fa:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    88fc:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    88fe:	2640      	movs	r6, #64	; 0x40
    8900:	1bf6      	subs	r6, r6, r7
    8902:	455e      	cmp	r6, fp
    8904:	dd00      	ble.n	8908 <D_Nv_Write_Impl+0x54>
    8906:	4656      	mov	r6, sl
    8908:	b2b3      	uxth	r3, r6
    890a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    890c:	2240      	movs	r2, #64	; 0x40
    890e:	21ff      	movs	r1, #255	; 0xff
    8910:	a802      	add	r0, sp, #8
    8912:	4b36      	ldr	r3, [pc, #216]	; (89ec <D_Nv_Write_Impl+0x138>)
    8914:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8916:	003b      	movs	r3, r7
    8918:	aa02      	add	r2, sp, #8
    891a:	4694      	mov	ip, r2
    891c:	4463      	add	r3, ip
    891e:	9300      	str	r3, [sp, #0]
    8920:	0436      	lsls	r6, r6, #16
    8922:	0c37      	lsrs	r7, r6, #16
    8924:	003a      	movs	r2, r7
    8926:	9901      	ldr	r1, [sp, #4]
    8928:	0018      	movs	r0, r3
    892a:	4b31      	ldr	r3, [pc, #196]	; (89f0 <D_Nv_Write_Impl+0x13c>)
    892c:	4798      	blx	r3
	cpu_irq_enter_critical();
    892e:	4b31      	ldr	r3, [pc, #196]	; (89f4 <D_Nv_Write_Impl+0x140>)
    8930:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    8932:	4e31      	ldr	r6, [pc, #196]	; (89f8 <D_Nv_Write_Impl+0x144>)
    8934:	2240      	movs	r2, #64	; 0x40
    8936:	a902      	add	r1, sp, #8
    8938:	0020      	movs	r0, r4
    893a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    893c:	2805      	cmp	r0, #5
    893e:	d0f9      	beq.n	8934 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    8940:	4b2e      	ldr	r3, [pc, #184]	; (89fc <D_Nv_Write_Impl+0x148>)
    8942:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    8944:	4653      	mov	r3, sl
    8946:	465a      	mov	r2, fp
    8948:	1a9e      	subs	r6, r3, r2
    894a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    894c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    894e:	9b01      	ldr	r3, [sp, #4]
    8950:	4699      	mov	r9, r3
    8952:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    8954:	2e00      	cmp	r6, #0
    8956:	d03b      	beq.n	89d0 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8958:	4b24      	ldr	r3, [pc, #144]	; (89ec <D_Nv_Write_Impl+0x138>)
    895a:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    895c:	4b24      	ldr	r3, [pc, #144]	; (89f0 <D_Nv_Write_Impl+0x13c>)
    895e:	4698      	mov	r8, r3
    8960:	e031      	b.n	89c6 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    8962:	4b27      	ldr	r3, [pc, #156]	; (8a00 <D_Nv_Write_Impl+0x14c>)
    8964:	4a27      	ldr	r2, [pc, #156]	; (8a04 <D_Nv_Write_Impl+0x150>)
    8966:	218a      	movs	r1, #138	; 0x8a
    8968:	4827      	ldr	r0, [pc, #156]	; (8a08 <D_Nv_Write_Impl+0x154>)
    896a:	4c28      	ldr	r4, [pc, #160]	; (8a0c <D_Nv_Write_Impl+0x158>)
    896c:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    896e:	4b28      	ldr	r3, [pc, #160]	; (8a10 <D_Nv_Write_Impl+0x15c>)
    8970:	4a24      	ldr	r2, [pc, #144]	; (8a04 <D_Nv_Write_Impl+0x150>)
    8972:	218b      	movs	r1, #139	; 0x8b
    8974:	4824      	ldr	r0, [pc, #144]	; (8a08 <D_Nv_Write_Impl+0x154>)
    8976:	4c25      	ldr	r4, [pc, #148]	; (8a0c <D_Nv_Write_Impl+0x158>)
    8978:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    897a:	4b26      	ldr	r3, [pc, #152]	; (8a14 <D_Nv_Write_Impl+0x160>)
    897c:	4a21      	ldr	r2, [pc, #132]	; (8a04 <D_Nv_Write_Impl+0x150>)
    897e:	218c      	movs	r1, #140	; 0x8c
    8980:	4821      	ldr	r0, [pc, #132]	; (8a08 <D_Nv_Write_Impl+0x154>)
    8982:	4c22      	ldr	r4, [pc, #136]	; (8a0c <D_Nv_Write_Impl+0x158>)
    8984:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8986:	4b24      	ldr	r3, [pc, #144]	; (8a18 <D_Nv_Write_Impl+0x164>)
    8988:	4a1e      	ldr	r2, [pc, #120]	; (8a04 <D_Nv_Write_Impl+0x150>)
    898a:	218d      	movs	r1, #141	; 0x8d
    898c:	481e      	ldr	r0, [pc, #120]	; (8a08 <D_Nv_Write_Impl+0x154>)
    898e:	4c1f      	ldr	r4, [pc, #124]	; (8a0c <D_Nv_Write_Impl+0x158>)
    8990:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    8992:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8994:	2240      	movs	r2, #64	; 0x40
    8996:	21ff      	movs	r1, #255	; 0xff
    8998:	a802      	add	r0, sp, #8
    899a:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    899c:	003a      	movs	r2, r7
    899e:	4649      	mov	r1, r9
    89a0:	9800      	ldr	r0, [sp, #0]
    89a2:	47c0      	blx	r8
	cpu_irq_enter_critical();
    89a4:	4b13      	ldr	r3, [pc, #76]	; (89f4 <D_Nv_Write_Impl+0x140>)
    89a6:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    89a8:	4d13      	ldr	r5, [pc, #76]	; (89f8 <D_Nv_Write_Impl+0x144>)
    89aa:	2240      	movs	r2, #64	; 0x40
    89ac:	a902      	add	r1, sp, #8
    89ae:	0020      	movs	r0, r4
    89b0:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    89b2:	2805      	cmp	r0, #5
    89b4:	d0f9      	beq.n	89aa <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    89b6:	4b11      	ldr	r3, [pc, #68]	; (89fc <D_Nv_Write_Impl+0x148>)
    89b8:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    89ba:	1bf6      	subs	r6, r6, r7
    89bc:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    89be:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    89c0:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    89c2:	2e00      	cmp	r6, #0
    89c4:	d004      	beq.n	89d0 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    89c6:	1c33      	adds	r3, r6, #0
    89c8:	2e40      	cmp	r6, #64	; 0x40
    89ca:	d9e2      	bls.n	8992 <D_Nv_Write_Impl+0xde>
    89cc:	2340      	movs	r3, #64	; 0x40
    89ce:	e7e0      	b.n	8992 <D_Nv_Write_Impl+0xde>
}
    89d0:	b013      	add	sp, #76	; 0x4c
    89d2:	bc3c      	pop	{r2, r3, r4, r5}
    89d4:	4690      	mov	r8, r2
    89d6:	4699      	mov	r9, r3
    89d8:	46a2      	mov	sl, r4
    89da:	46ab      	mov	fp, r5
    89dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	00002100 	.word	0x00002100
    89e4:	00006100 	.word	0x00006100
    89e8:	200001d0 	.word	0x200001d0
    89ec:	0000f98d 	.word	0x0000f98d
    89f0:	0000f97b 	.word	0x0000f97b
    89f4:	00006291 	.word	0x00006291
    89f8:	00006745 	.word	0x00006745
    89fc:	000062d1 	.word	0x000062d1
    8a00:	00010db4 	.word	0x00010db4
    8a04:	00010f10 	.word	0x00010f10
    8a08:	00010dc4 	.word	0x00010dc4
    8a0c:	0000f8b9 	.word	0x0000f8b9
    8a10:	00010e04 	.word	0x00010e04
    8a14:	00010e20 	.word	0x00010e20
    8a18:	00010e54 	.word	0x00010e54

00008a1c <D_Nv_EraseSector_Impl>:
{
    8a1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    8a1e:	0344      	lsls	r4, r0, #13
    8a20:	480c      	ldr	r0, [pc, #48]	; (8a54 <D_Nv_EraseSector_Impl+0x38>)
    8a22:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    8a24:	23ff      	movs	r3, #255	; 0xff
    8a26:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    8a28:	4b0b      	ldr	r3, [pc, #44]	; (8a58 <D_Nv_EraseSector_Impl+0x3c>)
    8a2a:	3b01      	subs	r3, #1
    8a2c:	2280      	movs	r2, #128	; 0x80
    8a2e:	0192      	lsls	r2, r2, #6
    8a30:	18a6      	adds	r6, r4, r2
    8a32:	429c      	cmp	r4, r3
    8a34:	d807      	bhi.n	8a46 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    8a36:	4d09      	ldr	r5, [pc, #36]	; (8a5c <D_Nv_EraseSector_Impl+0x40>)
    8a38:	0020      	movs	r0, r4
    8a3a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    8a3c:	3401      	adds	r4, #1
    8a3e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    8a40:	42b4      	cmp	r4, r6
    8a42:	d1f9      	bne.n	8a38 <D_Nv_EraseSector_Impl+0x1c>
}
    8a44:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8a46:	4b06      	ldr	r3, [pc, #24]	; (8a60 <D_Nv_EraseSector_Impl+0x44>)
    8a48:	4a06      	ldr	r2, [pc, #24]	; (8a64 <D_Nv_EraseSector_Impl+0x48>)
    8a4a:	21c2      	movs	r1, #194	; 0xc2
    8a4c:	4806      	ldr	r0, [pc, #24]	; (8a68 <D_Nv_EraseSector_Impl+0x4c>)
    8a4e:	4c07      	ldr	r4, [pc, #28]	; (8a6c <D_Nv_EraseSector_Impl+0x50>)
    8a50:	47a0      	blx	r4
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	00002100 	.word	0x00002100
    8a58:	00006100 	.word	0x00006100
    8a5c:	0000681d 	.word	0x0000681d
    8a60:	00010e04 	.word	0x00010e04
    8a64:	00010f20 	.word	0x00010f20
    8a68:	00010dc4 	.word	0x00010dc4
    8a6c:	0000f8b9 	.word	0x0000f8b9

00008a70 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    8a70:	b510      	push	{r4, lr}
    8a72:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    8a74:	2200      	movs	r2, #0
    8a76:	4c01      	ldr	r4, [pc, #4]	; (8a7c <D_Nv_IsEmpty_Impl+0xc>)
    8a78:	47a0      	blx	r4
}
    8a7a:	bd10      	pop	{r4, pc}
    8a7c:	00008711 	.word	0x00008711

00008a80 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8a80:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    8a82:	4c01      	ldr	r4, [pc, #4]	; (8a88 <D_Nv_IsEqual_Impl+0x8>)
    8a84:	47a0      	blx	r4
}
    8a86:	bd10      	pop	{r4, pc}
    8a88:	00008711 	.word	0x00008711

00008a8c <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    8a8c:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    8a8e:	4b05      	ldr	r3, [pc, #20]	; (8aa4 <PowerSupplyTooLow+0x18>)
    8a90:	681b      	ldr	r3, [r3, #0]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d004      	beq.n	8aa0 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    8a96:	4798      	blx	r3
    8a98:	2301      	movs	r3, #1
    8a9a:	4058      	eors	r0, r3
    8a9c:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    8a9e:	bd10      	pop	{r4, pc}
    bool result = false;
    8aa0:	2000      	movs	r0, #0
    8aa2:	e7fc      	b.n	8a9e <PowerSupplyTooLow+0x12>
    8aa4:	2000034c 	.word	0x2000034c

00008aa8 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    8aa8:	2901      	cmp	r1, #1
    8aaa:	d009      	beq.n	8ac0 <UpdateSectorHead+0x18>
    8aac:	2900      	cmp	r1, #0
    8aae:	d002      	beq.n	8ab6 <UpdateSectorHead+0xe>
    8ab0:	2902      	cmp	r1, #2
    8ab2:	d00d      	beq.n	8ad0 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    8ab4:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    8ab6:	4b0a      	ldr	r3, [pc, #40]	; (8ae0 <UpdateSectorHead+0x38>)
    8ab8:	881a      	ldrh	r2, [r3, #0]
    8aba:	1880      	adds	r0, r0, r2
    8abc:	8018      	strh	r0, [r3, #0]
           break;
    8abe:	e7f9      	b.n	8ab4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    8ac0:	4a07      	ldr	r2, [pc, #28]	; (8ae0 <UpdateSectorHead+0x38>)
    8ac2:	8813      	ldrh	r3, [r2, #0]
    8ac4:	330f      	adds	r3, #15
    8ac6:	18c0      	adds	r0, r0, r3
    8ac8:	230f      	movs	r3, #15
    8aca:	4398      	bics	r0, r3
    8acc:	8010      	strh	r0, [r2, #0]
           break;
    8ace:	e7f1      	b.n	8ab4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    8ad0:	4a03      	ldr	r2, [pc, #12]	; (8ae0 <UpdateSectorHead+0x38>)
    8ad2:	8813      	ldrh	r3, [r2, #0]
    8ad4:	333f      	adds	r3, #63	; 0x3f
    8ad6:	18c0      	adds	r0, r0, r3
    8ad8:	233f      	movs	r3, #63	; 0x3f
    8ada:	4398      	bics	r0, r3
    8adc:	8010      	strh	r0, [r2, #0]
}
    8ade:	e7e9      	b.n	8ab4 <UpdateSectorHead+0xc>
    8ae0:	20000352 	.word	0x20000352

00008ae4 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    8ae4:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    8ae6:	2900      	cmp	r1, #0
    8ae8:	d019      	beq.n	8b1e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8aea:	24ff      	movs	r4, #255	; 0xff
    8aec:	e013      	b.n	8b16 <ComputeCrc+0x32>
    8aee:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    8af0:	0a15      	lsrs	r5, r2, #8
    8af2:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    8af4:	091d      	lsrs	r5, r3, #4
    8af6:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8af8:	0212      	lsls	r2, r2, #8
    8afa:	405a      	eors	r2, r3
    8afc:	031d      	lsls	r5, r3, #12
    8afe:	406a      	eors	r2, r5
    8b00:	015b      	lsls	r3, r3, #5
    8b02:	405a      	eors	r2, r3
    8b04:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    8b06:	0003      	movs	r3, r0
    8b08:	1e5d      	subs	r5, r3, #1
    8b0a:	41ab      	sbcs	r3, r5
    8b0c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    8b0e:	3901      	subs	r1, #1
    8b10:	b289      	uxth	r1, r1
    8b12:	2900      	cmp	r1, #0
    8b14:	d003      	beq.n	8b1e <ComputeCrc+0x3a>
        if (pData == NULL)
    8b16:	2800      	cmp	r0, #0
    8b18:	d0e9      	beq.n	8aee <ComputeCrc+0xa>
            data = *pData;
    8b1a:	7803      	ldrb	r3, [r0, #0]
    8b1c:	e7e8      	b.n	8af0 <ComputeCrc+0xc>
    }

    return crc;
}
    8b1e:	0010      	movs	r0, r2
    8b20:	bd30      	pop	{r4, r5, pc}
    8b22:	Address 0x00008b22 is out of bounds.


00008b24 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    8b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b26:	46de      	mov	lr, fp
    8b28:	4657      	mov	r7, sl
    8b2a:	b580      	push	{r7, lr}
    8b2c:	b089      	sub	sp, #36	; 0x24
    8b2e:	9001      	str	r0, [sp, #4]
    8b30:	9102      	str	r1, [sp, #8]
    8b32:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    8b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b36:	2a00      	cmp	r2, #0
    8b38:	d00d      	beq.n	8b56 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8b3a:	4692      	mov	sl, r2
    8b3c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    8b3e:	445b      	add	r3, fp
    8b40:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    8b42:	465e      	mov	r6, fp
    8b44:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    8b46:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8b48:	45ab      	cmp	fp, r5
    8b4a:	d03e      	beq.n	8bca <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b4c:	4f22      	ldr	r7, [pc, #136]	; (8bd8 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    8b4e:	2c00      	cmp	r4, #0
    8b50:	d108      	bne.n	8b64 <GatherData+0x40>
                return false;
    8b52:	2000      	movs	r0, #0
    8b54:	e039      	b.n	8bca <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    8b56:	2200      	movs	r2, #0
    8b58:	4692      	mov	sl, r2
    8b5a:	e7f0      	b.n	8b3e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8b5c:	ab04      	add	r3, sp, #16
    8b5e:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    8b60:	2c00      	cmp	r4, #0
    8b62:	d031      	beq.n	8bc8 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b64:	2310      	movs	r3, #16
    8b66:	aa04      	add	r2, sp, #16
    8b68:	0021      	movs	r1, r4
    8b6a:	9801      	ldr	r0, [sp, #4]
    8b6c:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    8b6e:	ab04      	add	r3, sp, #16
    8b70:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8b72:	42aa      	cmp	r2, r5
    8b74:	d2f2      	bcs.n	8b5c <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    8b76:	88db      	ldrh	r3, [r3, #6]
    8b78:	18d3      	adds	r3, r2, r3
    8b7a:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8b7c:	42b3      	cmp	r3, r6
    8b7e:	d9ed      	bls.n	8b5c <GatherData+0x38>
            else if ( readEnd > blockEnd )
    8b80:	42ab      	cmp	r3, r5
    8b82:	d201      	bcs.n	8b88 <GatherData+0x64>
                readStart = blockEnd;
    8b84:	001e      	movs	r6, r3
    8b86:	e7e9      	b.n	8b5c <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8b88:	1aa9      	subs	r1, r5, r2
    8b8a:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    8b8c:	42b2      	cmp	r2, r6
    8b8e:	d915      	bls.n	8bbc <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    8b90:	ab04      	add	r3, sp, #16
    8b92:	895b      	ldrh	r3, [r3, #10]
    8b94:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    8b96:	000b      	movs	r3, r1
        readEnd -= count;
    8b98:	1aed      	subs	r5, r5, r3
    8b9a:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    8b9c:	4652      	mov	r2, sl
    8b9e:	2a00      	cmp	r2, #0
    8ba0:	d008      	beq.n	8bb4 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8ba2:	3410      	adds	r4, #16
    8ba4:	1909      	adds	r1, r1, r4
            pDestination -= count;
    8ba6:	1ad2      	subs	r2, r2, r3
    8ba8:	4692      	mov	sl, r2
            sourcePointer -= count;
    8baa:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    8bac:	b289      	uxth	r1, r1
    8bae:	9801      	ldr	r0, [sp, #4]
    8bb0:	4c09      	ldr	r4, [pc, #36]	; (8bd8 <GatherData+0xb4>)
    8bb2:	47a0      	blx	r4
    while ( readStart != readEnd )
    8bb4:	42ae      	cmp	r6, r5
    8bb6:	d00d      	beq.n	8bd4 <GatherData+0xb0>
    8bb8:	9c03      	ldr	r4, [sp, #12]
    8bba:	e7c8      	b.n	8b4e <GatherData+0x2a>
            count = readEnd - readStart;
    8bbc:	1bab      	subs	r3, r5, r6
    8bbe:	b29b      	uxth	r3, r3
            readStart = offset;
    8bc0:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    8bc2:	9a02      	ldr	r2, [sp, #8]
    8bc4:	9203      	str	r2, [sp, #12]
    8bc6:	e7e7      	b.n	8b98 <GatherData+0x74>
                return false;
    8bc8:	2000      	movs	r0, #0
}
    8bca:	b009      	add	sp, #36	; 0x24
    8bcc:	bc0c      	pop	{r2, r3}
    8bce:	4692      	mov	sl, r2
    8bd0:	469b      	mov	fp, r3
    8bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    8bd4:	2001      	movs	r0, #1
    8bd6:	e7f8      	b.n	8bca <GatherData+0xa6>
    8bd8:	0000883d 	.word	0x0000883d

00008bdc <ComputeDataCrc>:
{
    8bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bde:	46de      	mov	lr, fp
    8be0:	4647      	mov	r7, r8
    8be2:	b580      	push	{r7, lr}
    8be4:	b087      	sub	sp, #28
    8be6:	9004      	str	r0, [sp, #16]
    8be8:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8bea:	7995      	ldrb	r5, [r2, #6]
    8bec:	79d3      	ldrb	r3, [r2, #7]
    8bee:	021b      	lsls	r3, r3, #8
    8bf0:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    8bf2:	7917      	ldrb	r7, [r2, #4]
    8bf4:	7953      	ldrb	r3, [r2, #5]
    8bf6:	021b      	lsls	r3, r3, #8
    8bf8:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8bfa:	0a2c      	lsrs	r4, r5, #8
    8bfc:	b264      	sxtb	r4, r4
    8bfe:	2c00      	cmp	r4, #0
    8c00:	db2f      	blt.n	8c62 <ComputeDataCrc+0x86>
    8c02:	4b1c      	ldr	r3, [pc, #112]	; (8c74 <ComputeDataCrc+0x98>)
    8c04:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8c06:	4b1c      	ldr	r3, [pc, #112]	; (8c78 <ComputeDataCrc+0x9c>)
    8c08:	4698      	mov	r8, r3
    8c0a:	e011      	b.n	8c30 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8c0c:	2d00      	cmp	r5, #0
    8c0e:	d02a      	beq.n	8c66 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8c10:	4b1a      	ldr	r3, [pc, #104]	; (8c7c <ComputeDataCrc+0xa0>)
    8c12:	9300      	str	r3, [sp, #0]
    8c14:	002b      	movs	r3, r5
    8c16:	003a      	movs	r2, r7
    8c18:	9905      	ldr	r1, [sp, #20]
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	4e18      	ldr	r6, [pc, #96]	; (8c80 <ComputeDataCrc+0xa4>)
    8c1e:	47b0      	blx	r6
    8c20:	2800      	cmp	r0, #0
    8c22:	d020      	beq.n	8c66 <ComputeDataCrc+0x8a>
    8c24:	0029      	movs	r1, r5
    8c26:	e015      	b.n	8c54 <ComputeDataCrc+0x78>
    8c28:	3c01      	subs	r4, #1
    8c2a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8c2c:	1c63      	adds	r3, r4, #1
    8c2e:	d01a      	beq.n	8c66 <ComputeDataCrc+0x8a>
        if (i)
    8c30:	2c00      	cmp	r4, #0
    8c32:	d0eb      	beq.n	8c0c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8c34:	3d01      	subs	r5, #1
    8c36:	3dff      	subs	r5, #255	; 0xff
    8c38:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8c3a:	4b10      	ldr	r3, [pc, #64]	; (8c7c <ComputeDataCrc+0xa0>)
    8c3c:	9300      	str	r3, [sp, #0]
    8c3e:	2380      	movs	r3, #128	; 0x80
    8c40:	005b      	lsls	r3, r3, #1
    8c42:	003a      	movs	r2, r7
    8c44:	9905      	ldr	r1, [sp, #20]
    8c46:	9804      	ldr	r0, [sp, #16]
    8c48:	4e0d      	ldr	r6, [pc, #52]	; (8c80 <ComputeDataCrc+0xa4>)
    8c4a:	47b0      	blx	r6
    8c4c:	2800      	cmp	r0, #0
    8c4e:	d0eb      	beq.n	8c28 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8c50:	2180      	movs	r1, #128	; 0x80
    8c52:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8c54:	187f      	adds	r7, r7, r1
    8c56:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8c58:	9a03      	ldr	r2, [sp, #12]
    8c5a:	4808      	ldr	r0, [pc, #32]	; (8c7c <ComputeDataCrc+0xa0>)
    8c5c:	47c0      	blx	r8
    8c5e:	9003      	str	r0, [sp, #12]
    8c60:	e7e2      	b.n	8c28 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    8c62:	4b04      	ldr	r3, [pc, #16]	; (8c74 <ComputeDataCrc+0x98>)
    8c64:	9303      	str	r3, [sp, #12]
}
    8c66:	9803      	ldr	r0, [sp, #12]
    8c68:	b007      	add	sp, #28
    8c6a:	bc0c      	pop	{r2, r3}
    8c6c:	4690      	mov	r8, r2
    8c6e:	469b      	mov	fp, r3
    8c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c72:	46c0      	nop			; (mov r8, r8)
    8c74:	0000ffff 	.word	0x0000ffff
    8c78:	00008ae5 	.word	0x00008ae5
    8c7c:	20000204 	.word	0x20000204
    8c80:	00008b25 	.word	0x00008b25

00008c84 <FindItemCache>:
{
    8c84:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8c86:	4b16      	ldr	r3, [pc, #88]	; (8ce0 <FindItemCache+0x5c>)
    8c88:	781c      	ldrb	r4, [r3, #0]
    8c8a:	2c00      	cmp	r4, #0
    8c8c:	d026      	beq.n	8cdc <FindItemCache+0x58>
        if ( cache->id == id )
    8c8e:	4b15      	ldr	r3, [pc, #84]	; (8ce4 <FindItemCache+0x60>)
    8c90:	881b      	ldrh	r3, [r3, #0]
    8c92:	4283      	cmp	r3, r0
    8c94:	d016      	beq.n	8cc4 <FindItemCache+0x40>
    8c96:	2301      	movs	r3, #1
    8c98:	4e12      	ldr	r6, [pc, #72]	; (8ce4 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8c9a:	b2da      	uxtb	r2, r3
    8c9c:	4294      	cmp	r4, r2
    8c9e:	d91b      	bls.n	8cd8 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8ca0:	001d      	movs	r5, r3
        if ( cache->id == id )
    8ca2:	1c59      	adds	r1, r3, #1
    8ca4:	009a      	lsls	r2, r3, #2
    8ca6:	5ab2      	ldrh	r2, [r6, r2]
    8ca8:	4282      	cmp	r2, r0
    8caa:	d001      	beq.n	8cb0 <FindItemCache+0x2c>
    8cac:	000b      	movs	r3, r1
    8cae:	e7f4      	b.n	8c9a <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8cb0:	009b      	lsls	r3, r3, #2
    8cb2:	480c      	ldr	r0, [pc, #48]	; (8ce4 <FindItemCache+0x60>)
    8cb4:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    8cb6:	00ad      	lsls	r5, r5, #2
    8cb8:	4b0a      	ldr	r3, [pc, #40]	; (8ce4 <FindItemCache+0x60>)
    8cba:	195d      	adds	r5, r3, r5
    8cbc:	886b      	ldrh	r3, [r5, #2]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d003      	beq.n	8cca <FindItemCache+0x46>
}
    8cc2:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    8cc4:	4807      	ldr	r0, [pc, #28]	; (8ce4 <FindItemCache+0x60>)
    8cc6:	2500      	movs	r5, #0
    8cc8:	e7f5      	b.n	8cb6 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8cca:	4b07      	ldr	r3, [pc, #28]	; (8ce8 <FindItemCache+0x64>)
    8ccc:	4a07      	ldr	r2, [pc, #28]	; (8cec <FindItemCache+0x68>)
    8cce:	218c      	movs	r1, #140	; 0x8c
    8cd0:	31ff      	adds	r1, #255	; 0xff
    8cd2:	4807      	ldr	r0, [pc, #28]	; (8cf0 <FindItemCache+0x6c>)
    8cd4:	4c07      	ldr	r4, [pc, #28]	; (8cf4 <FindItemCache+0x70>)
    8cd6:	47a0      	blx	r4
    return NULL;
    8cd8:	2000      	movs	r0, #0
    8cda:	e7f2      	b.n	8cc2 <FindItemCache+0x3e>
    8cdc:	2000      	movs	r0, #0
    8cde:	e7f0      	b.n	8cc2 <FindItemCache+0x3e>
    8ce0:	20000348 	.word	0x20000348
    8ce4:	20000320 	.word	0x20000320
    8ce8:	00010fb4 	.word	0x00010fb4
    8cec:	0001109c 	.word	0x0001109c
    8cf0:	00010fd0 	.word	0x00010fd0
    8cf4:	0000f8b9 	.word	0x0000f8b9

00008cf8 <FindItem>:
{
    8cf8:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8cfa:	4b05      	ldr	r3, [pc, #20]	; (8d10 <FindItem+0x18>)
    8cfc:	4798      	blx	r3
    if (cache)
    8cfe:	2800      	cmp	r0, #0
    8d00:	d004      	beq.n	8d0c <FindItem+0x14>
        return cache->lastBlock;
    8d02:	7883      	ldrb	r3, [r0, #2]
    8d04:	78c0      	ldrb	r0, [r0, #3]
    8d06:	0200      	lsls	r0, r0, #8
    8d08:	4318      	orrs	r0, r3
}
    8d0a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8d0c:	2000      	movs	r0, #0
    8d0e:	e7fc      	b.n	8d0a <FindItem+0x12>
    8d10:	00008c85 	.word	0x00008c85

00008d14 <CreateItemCache>:
{
    8d14:	b510      	push	{r4, lr}
    8d16:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8d18:	4b0e      	ldr	r3, [pc, #56]	; (8d54 <CreateItemCache+0x40>)
    8d1a:	4798      	blx	r3
    8d1c:	2800      	cmp	r0, #0
    8d1e:	d10b      	bne.n	8d38 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d20:	4b0d      	ldr	r3, [pc, #52]	; (8d58 <CreateItemCache+0x44>)
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2b09      	cmp	r3, #9
    8d26:	d80e      	bhi.n	8d46 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8d28:	1c59      	adds	r1, r3, #1
    8d2a:	4a0b      	ldr	r2, [pc, #44]	; (8d58 <CreateItemCache+0x44>)
    8d2c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    8d2e:	480b      	ldr	r0, [pc, #44]	; (8d5c <CreateItemCache+0x48>)
    8d30:	009b      	lsls	r3, r3, #2
    8d32:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8d34:	18c0      	adds	r0, r0, r3
}
    8d36:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8d38:	4b09      	ldr	r3, [pc, #36]	; (8d60 <CreateItemCache+0x4c>)
    8d3a:	4a0a      	ldr	r2, [pc, #40]	; (8d64 <CreateItemCache+0x50>)
    8d3c:	21cc      	movs	r1, #204	; 0xcc
    8d3e:	0049      	lsls	r1, r1, #1
    8d40:	4809      	ldr	r0, [pc, #36]	; (8d68 <CreateItemCache+0x54>)
    8d42:	4c0a      	ldr	r4, [pc, #40]	; (8d6c <CreateItemCache+0x58>)
    8d44:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d46:	4b0a      	ldr	r3, [pc, #40]	; (8d70 <CreateItemCache+0x5c>)
    8d48:	4a06      	ldr	r2, [pc, #24]	; (8d64 <CreateItemCache+0x50>)
    8d4a:	219a      	movs	r1, #154	; 0x9a
    8d4c:	31ff      	adds	r1, #255	; 0xff
    8d4e:	4806      	ldr	r0, [pc, #24]	; (8d68 <CreateItemCache+0x54>)
    8d50:	4c06      	ldr	r4, [pc, #24]	; (8d6c <CreateItemCache+0x58>)
    8d52:	47a0      	blx	r4
    8d54:	00008c85 	.word	0x00008c85
    8d58:	20000348 	.word	0x20000348
    8d5c:	20000320 	.word	0x20000320
    8d60:	00010f5c 	.word	0x00010f5c
    8d64:	000110ac 	.word	0x000110ac
    8d68:	00010fd0 	.word	0x00010fd0
    8d6c:	0000f8b9 	.word	0x0000f8b9
    8d70:	00010f78 	.word	0x00010f78

00008d74 <DeleteItemCache>:
{
    8d74:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    8d76:	4b0b      	ldr	r3, [pc, #44]	; (8da4 <DeleteItemCache+0x30>)
    8d78:	4798      	blx	r3
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d00b      	beq.n	8d96 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    8d7e:	4b0a      	ldr	r3, [pc, #40]	; (8da8 <DeleteItemCache+0x34>)
    8d80:	7819      	ldrb	r1, [r3, #0]
    8d82:	3901      	subs	r1, #1
    8d84:	b2c9      	uxtb	r1, r1
    8d86:	7019      	strb	r1, [r3, #0]
    8d88:	0089      	lsls	r1, r1, #2
    8d8a:	4b08      	ldr	r3, [pc, #32]	; (8dac <DeleteItemCache+0x38>)
    8d8c:	1859      	adds	r1, r3, r1
    8d8e:	2204      	movs	r2, #4
    8d90:	4b07      	ldr	r3, [pc, #28]	; (8db0 <DeleteItemCache+0x3c>)
    8d92:	4798      	blx	r3
}
    8d94:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    8d96:	4b07      	ldr	r3, [pc, #28]	; (8db4 <DeleteItemCache+0x40>)
    8d98:	4a07      	ldr	r2, [pc, #28]	; (8db8 <DeleteItemCache+0x44>)
    8d9a:	21d3      	movs	r1, #211	; 0xd3
    8d9c:	0049      	lsls	r1, r1, #1
    8d9e:	4807      	ldr	r0, [pc, #28]	; (8dbc <DeleteItemCache+0x48>)
    8da0:	4c07      	ldr	r4, [pc, #28]	; (8dc0 <DeleteItemCache+0x4c>)
    8da2:	47a0      	blx	r4
    8da4:	00008c85 	.word	0x00008c85
    8da8:	20000348 	.word	0x20000348
    8dac:	20000320 	.word	0x20000320
    8db0:	0000f97b 	.word	0x0000f97b
    8db4:	00010f98 	.word	0x00010f98
    8db8:	000110bc 	.word	0x000110bc
    8dbc:	00010fd0 	.word	0x00010fd0
    8dc0:	0000f8b9 	.word	0x0000f8b9

00008dc4 <eraseSectorTimerFired>:
{
    8dc4:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    8dc6:	4b05      	ldr	r3, [pc, #20]	; (8ddc <eraseSectorTimerFired+0x18>)
    8dc8:	4798      	blx	r3
    8dca:	2800      	cmp	r0, #0
    8dcc:	d000      	beq.n	8dd0 <eraseSectorTimerFired+0xc>
}
    8dce:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    8dd0:	4b03      	ldr	r3, [pc, #12]	; (8de0 <eraseSectorTimerFired+0x1c>)
    8dd2:	7818      	ldrb	r0, [r3, #0]
    8dd4:	4b03      	ldr	r3, [pc, #12]	; (8de4 <eraseSectorTimerFired+0x20>)
    8dd6:	4798      	blx	r3
}
    8dd8:	e7f9      	b.n	8dce <eraseSectorTimerFired+0xa>
    8dda:	46c0      	nop			; (mov r8, r8)
    8ddc:	00008a8d 	.word	0x00008a8d
    8de0:	20000009 	.word	0x20000009
    8de4:	00008a1d 	.word	0x00008a1d

00008de8 <EraseSector>:

static bool EraseSector(void)
{
    8de8:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8dea:	4c08      	ldr	r4, [pc, #32]	; (8e0c <EraseSector+0x24>)
    8dec:	7820      	ldrb	r0, [r4, #0]
    8dee:	4b08      	ldr	r3, [pc, #32]	; (8e10 <EraseSector+0x28>)
    8df0:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    8df2:	7820      	ldrb	r0, [r4, #0]
    8df4:	2280      	movs	r2, #128	; 0x80
    8df6:	0192      	lsls	r2, r2, #6
    8df8:	2100      	movs	r1, #0
    8dfa:	4b06      	ldr	r3, [pc, #24]	; (8e14 <EraseSector+0x2c>)
    8dfc:	4798      	blx	r3
    8dfe:	2800      	cmp	r0, #0
    8e00:	d003      	beq.n	8e0a <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    8e02:	2280      	movs	r2, #128	; 0x80
    8e04:	0052      	lsls	r2, r2, #1
    8e06:	4b04      	ldr	r3, [pc, #16]	; (8e18 <EraseSector+0x30>)
    8e08:	801a      	strh	r2, [r3, #0]

    return true;
}
    8e0a:	bd10      	pop	{r4, pc}
    8e0c:	20000350 	.word	0x20000350
    8e10:	00008a1d 	.word	0x00008a1d
    8e14:	00008a71 	.word	0x00008a71
    8e18:	20000352 	.word	0x20000352

00008e1c <WriteAndCheck>:
{
    8e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e1e:	b083      	sub	sp, #12
    8e20:	9001      	str	r0, [sp, #4]
    8e22:	000d      	movs	r5, r1
    8e24:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    8e26:	4f07      	ldr	r7, [pc, #28]	; (8e44 <WriteAndCheck+0x28>)
    8e28:	7838      	ldrb	r0, [r7, #0]
    8e2a:	0013      	movs	r3, r2
    8e2c:	000a      	movs	r2, r1
    8e2e:	9901      	ldr	r1, [sp, #4]
    8e30:	4c05      	ldr	r4, [pc, #20]	; (8e48 <WriteAndCheck+0x2c>)
    8e32:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    8e34:	7838      	ldrb	r0, [r7, #0]
    8e36:	0033      	movs	r3, r6
    8e38:	002a      	movs	r2, r5
    8e3a:	9901      	ldr	r1, [sp, #4]
    8e3c:	4c03      	ldr	r4, [pc, #12]	; (8e4c <WriteAndCheck+0x30>)
    8e3e:	47a0      	blx	r4
}
    8e40:	b003      	add	sp, #12
    8e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e44:	20000350 	.word	0x20000350
    8e48:	000088b5 	.word	0x000088b5
    8e4c:	00008a81 	.word	0x00008a81

00008e50 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8e50:	b510      	push	{r4, lr}
    8e52:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8e54:	ac01      	add	r4, sp, #4
    8e56:	2341      	movs	r3, #65	; 0x41
    8e58:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8e5a:	3313      	adds	r3, #19
    8e5c:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    8e5e:	3b01      	subs	r3, #1
    8e60:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    8e62:	3b05      	subs	r3, #5
    8e64:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8e66:	3328      	adds	r3, #40	; 0x28
    8e68:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8e6a:	3b44      	subs	r3, #68	; 0x44
    8e6c:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    8e6e:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    8e70:	43c0      	mvns	r0, r0
    8e72:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    8e74:	4b08      	ldr	r3, [pc, #32]	; (8e98 <WriteSectorHeader+0x48>)
    8e76:	881b      	ldrh	r3, [r3, #0]
    8e78:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8e7a:	4a08      	ldr	r2, [pc, #32]	; (8e9c <WriteSectorHeader+0x4c>)
    8e7c:	2110      	movs	r1, #16
    8e7e:	466b      	mov	r3, sp
    8e80:	1d98      	adds	r0, r3, #6
    8e82:	4b07      	ldr	r3, [pc, #28]	; (8ea0 <WriteSectorHeader+0x50>)
    8e84:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    8e86:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8e88:	2212      	movs	r2, #18
    8e8a:	0021      	movs	r1, r4
    8e8c:	2000      	movs	r0, #0
    8e8e:	4b05      	ldr	r3, [pc, #20]	; (8ea4 <WriteSectorHeader+0x54>)
    8e90:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    8e92:	b006      	add	sp, #24
    8e94:	bd10      	pop	{r4, pc}
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	2000034a 	.word	0x2000034a
    8e9c:	0000ffff 	.word	0x0000ffff
    8ea0:	00008ae5 	.word	0x00008ae5
    8ea4:	00008e1d 	.word	0x00008e1d

00008ea8 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eaa:	0004      	movs	r4, r0
    8eac:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8eae:	4a21      	ldr	r2, [pc, #132]	; (8f34 <SmartCompacting+0x8c>)
    8eb0:	8813      	ldrh	r3, [r2, #0]
    8eb2:	18cb      	adds	r3, r1, r3
    8eb4:	b29b      	uxth	r3, r3
    8eb6:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8eb8:	2bff      	cmp	r3, #255	; 0xff
    8eba:	d92e      	bls.n	8f1a <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8ebc:	4b1e      	ldr	r3, [pc, #120]	; (8f38 <SmartCompacting+0x90>)
    8ebe:	881a      	ldrh	r2, [r3, #0]
    8ec0:	1880      	adds	r0, r0, r2
    8ec2:	2580      	movs	r5, #128	; 0x80
    8ec4:	006d      	lsls	r5, r5, #1
    8ec6:	1aaa      	subs	r2, r5, r2
    8ec8:	491c      	ldr	r1, [pc, #112]	; (8f3c <SmartCompacting+0x94>)
    8eca:	4b1d      	ldr	r3, [pc, #116]	; (8f40 <SmartCompacting+0x98>)
    8ecc:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8ece:	4b1d      	ldr	r3, [pc, #116]	; (8f44 <SmartCompacting+0x9c>)
    8ed0:	8818      	ldrh	r0, [r3, #0]
    8ed2:	002a      	movs	r2, r5
    8ed4:	0021      	movs	r1, r4
    8ed6:	4b1c      	ldr	r3, [pc, #112]	; (8f48 <SmartCompacting+0xa0>)
    8ed8:	4798      	blx	r3
    8eda:	1e05      	subs	r5, r0, #0
    8edc:	d027      	beq.n	8f2e <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8ede:	2100      	movs	r1, #0
    8ee0:	2080      	movs	r0, #128	; 0x80
    8ee2:	0040      	lsls	r0, r0, #1
    8ee4:	4b19      	ldr	r3, [pc, #100]	; (8f4c <SmartCompacting+0xa4>)
    8ee6:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8ee8:	4b13      	ldr	r3, [pc, #76]	; (8f38 <SmartCompacting+0x90>)
    8eea:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8eec:	2200      	movs	r2, #0
    8eee:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8ef0:	4b10      	ldr	r3, [pc, #64]	; (8f34 <SmartCompacting+0x8c>)
    8ef2:	881e      	ldrh	r6, [r3, #0]
    8ef4:	3e01      	subs	r6, #1
    8ef6:	3eff      	subs	r6, #255	; 0xff
    8ef8:	b2b6      	uxth	r6, r6
    8efa:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8efc:	2e00      	cmp	r6, #0
    8efe:	d016      	beq.n	8f2e <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8f00:	2180      	movs	r1, #128	; 0x80
    8f02:	0049      	lsls	r1, r1, #1
    8f04:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    8f06:	b289      	uxth	r1, r1
    8f08:	4b0c      	ldr	r3, [pc, #48]	; (8f3c <SmartCompacting+0x94>)
    8f0a:	1859      	adds	r1, r3, r1
    8f0c:	0032      	movs	r2, r6
    8f0e:	0020      	movs	r0, r4
    8f10:	4b0b      	ldr	r3, [pc, #44]	; (8f40 <SmartCompacting+0x98>)
    8f12:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    8f14:	4b08      	ldr	r3, [pc, #32]	; (8f38 <SmartCompacting+0x90>)
    8f16:	801e      	strh	r6, [r3, #0]
    8f18:	e009      	b.n	8f2e <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8f1a:	4e07      	ldr	r6, [pc, #28]	; (8f38 <SmartCompacting+0x90>)
    8f1c:	8837      	ldrh	r7, [r6, #0]
    8f1e:	19c0      	adds	r0, r0, r7
    8f20:	000a      	movs	r2, r1
    8f22:	4906      	ldr	r1, [pc, #24]	; (8f3c <SmartCompacting+0x94>)
    8f24:	4b06      	ldr	r3, [pc, #24]	; (8f40 <SmartCompacting+0x98>)
    8f26:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8f28:	19ed      	adds	r5, r5, r7
    8f2a:	8035      	strh	r5, [r6, #0]
        return true;
    8f2c:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8f2e:	0028      	movs	r0, r5
    8f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f32:	46c0      	nop			; (mov r8, r8)
    8f34:	20000200 	.word	0x20000200
    8f38:	200001d4 	.word	0x200001d4
    8f3c:	20000204 	.word	0x20000204
    8f40:	0000f97b 	.word	0x0000f97b
    8f44:	20000352 	.word	0x20000352
    8f48:	00008e1d 	.word	0x00008e1d
    8f4c:	00008aa9 	.word	0x00008aa9

00008f50 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f52:	46de      	mov	lr, fp
    8f54:	4657      	mov	r7, sl
    8f56:	464e      	mov	r6, r9
    8f58:	4645      	mov	r5, r8
    8f5a:	b5e0      	push	{r5, r6, r7, lr}
    8f5c:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    8f5e:	487b      	ldr	r0, [pc, #492]	; (914c <CompactSector+0x1fc>)
    8f60:	4b7b      	ldr	r3, [pc, #492]	; (9150 <CompactSector+0x200>)
    8f62:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8f64:	2300      	movs	r3, #0
    8f66:	4a7b      	ldr	r2, [pc, #492]	; (9154 <CompactSector+0x204>)
    8f68:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8f6a:	4a7b      	ldr	r2, [pc, #492]	; (9158 <CompactSector+0x208>)
    8f6c:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    8f6e:	4a7b      	ldr	r2, [pc, #492]	; (915c <CompactSector+0x20c>)
    8f70:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    8f72:	4a7b      	ldr	r2, [pc, #492]	; (9160 <CompactSector+0x210>)
    8f74:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8f76:	4b7b      	ldr	r3, [pc, #492]	; (9164 <CompactSector+0x214>)
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	001f      	movs	r7, r3
    8f7c:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8f7e:	2312      	movs	r3, #18
    8f80:	aa0f      	add	r2, sp, #60	; 0x3c
    8f82:	2100      	movs	r1, #0
    8f84:	0038      	movs	r0, r7
    8f86:	4c78      	ldr	r4, [pc, #480]	; (9168 <CompactSector+0x218>)
    8f88:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f8c:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8f8e:	4c75      	ldr	r4, [pc, #468]	; (9164 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8f90:	0025      	movs	r5, r4
        s_sector++;
    8f92:	0026      	movs	r6, r4
    8f94:	e008      	b.n	8fa8 <CompactSector+0x58>
    8f96:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8f98:	4b72      	ldr	r3, [pc, #456]	; (9164 <CompactSector+0x214>)
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	42bb      	cmp	r3, r7
    8f9e:	d00b      	beq.n	8fb8 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8fa0:	4b72      	ldr	r3, [pc, #456]	; (916c <CompactSector+0x21c>)
    8fa2:	4798      	blx	r3
    8fa4:	2800      	cmp	r0, #0
    8fa6:	d10d      	bne.n	8fc4 <CompactSector+0x74>
        s_sector++;
    8fa8:	7823      	ldrb	r3, [r4, #0]
    8faa:	3301      	adds	r3, #1
    8fac:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8fae:	2b01      	cmp	r3, #1
    8fb0:	d9f1      	bls.n	8f96 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    8fb2:	2300      	movs	r3, #0
    8fb4:	702b      	strb	r3, [r5, #0]
    8fb6:	e7ef      	b.n	8f98 <CompactSector+0x48>
            assert(false);
    8fb8:	4b6d      	ldr	r3, [pc, #436]	; (9170 <CompactSector+0x220>)
    8fba:	4a6e      	ldr	r2, [pc, #440]	; (9174 <CompactSector+0x224>)
    8fbc:	496e      	ldr	r1, [pc, #440]	; (9178 <CompactSector+0x228>)
    8fbe:	486f      	ldr	r0, [pc, #444]	; (917c <CompactSector+0x22c>)
    8fc0:	4c6f      	ldr	r4, [pc, #444]	; (9180 <CompactSector+0x230>)
    8fc2:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8fc4:	4b6f      	ldr	r3, [pc, #444]	; (9184 <CompactSector+0x234>)
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d06a      	beq.n	90a2 <CompactSector+0x152>
    8fcc:	2300      	movs	r3, #0
    8fce:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8fd0:	3301      	adds	r3, #1
    8fd2:	33ff      	adds	r3, #255	; 0xff
    8fd4:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8fd6:	466a      	mov	r2, sp
    8fd8:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8fda:	4b6b      	ldr	r3, [pc, #428]	; (9188 <CompactSector+0x238>)
    8fdc:	3310      	adds	r3, #16
    8fde:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8fe0:	9b06      	ldr	r3, [sp, #24]
    8fe2:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8fe4:	009f      	lsls	r7, r3, #2
    8fe6:	4b69      	ldr	r3, [pc, #420]	; (918c <CompactSector+0x23c>)
    8fe8:	469c      	mov	ip, r3
    8fea:	4467      	add	r7, ip
    8fec:	887b      	ldrh	r3, [r7, #2]
    8fee:	001d      	movs	r5, r3
    8ff0:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8ff2:	2310      	movs	r3, #16
    8ff4:	aa0b      	add	r2, sp, #44	; 0x2c
    8ff6:	0029      	movs	r1, r5
    8ff8:	9803      	ldr	r0, [sp, #12]
    8ffa:	4680      	mov	r8, r0
    8ffc:	4c5a      	ldr	r4, [pc, #360]	; (9168 <CompactSector+0x218>)
    8ffe:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    9000:	ae0b      	add	r6, sp, #44	; 0x2c
    9002:	2300      	movs	r3, #0
    9004:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    9006:	8934      	ldrh	r4, [r6, #8]
    9008:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    900a:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    900c:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    900e:	3410      	adds	r4, #16
    9010:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    9012:	0032      	movs	r2, r6
    9014:	0029      	movs	r1, r5
    9016:	4640      	mov	r0, r8
    9018:	4b5d      	ldr	r3, [pc, #372]	; (9190 <CompactSector+0x240>)
    901a:	4798      	blx	r3
    901c:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    901e:	4a5d      	ldr	r2, [pc, #372]	; (9194 <CompactSector+0x244>)
    9020:	210e      	movs	r1, #14
    9022:	a80b      	add	r0, sp, #44	; 0x2c
    9024:	4b5c      	ldr	r3, [pc, #368]	; (9198 <CompactSector+0x248>)
    9026:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    9028:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    902a:	4d57      	ldr	r5, [pc, #348]	; (9188 <CompactSector+0x238>)
    902c:	464a      	mov	r2, r9
    902e:	21ff      	movs	r1, #255	; 0xff
    9030:	0028      	movs	r0, r5
    9032:	4b5a      	ldr	r3, [pc, #360]	; (919c <CompactSector+0x24c>)
    9034:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9036:	002b      	movs	r3, r5
    9038:	ce07      	ldmia	r6!, {r0, r1, r2}
    903a:	c307      	stmia	r3!, {r0, r1, r2}
    903c:	6832      	ldr	r2, [r6, #0]
    903e:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9040:	4b57      	ldr	r3, [pc, #348]	; (91a0 <CompactSector+0x250>)
    9042:	881b      	ldrh	r3, [r3, #0]
    9044:	4a45      	ldr	r2, [pc, #276]	; (915c <CompactSector+0x20c>)
    9046:	8812      	ldrh	r2, [r2, #0]
    9048:	189b      	adds	r3, r3, r2
    904a:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    904c:	454c      	cmp	r4, r9
    904e:	d904      	bls.n	905a <CompactSector+0x10a>
    9050:	2600      	movs	r6, #0
    9052:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9054:	4a4c      	ldr	r2, [pc, #304]	; (9188 <CompactSector+0x238>)
    9056:	4690      	mov	r8, r2
    9058:	e068      	b.n	912c <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    905a:	ab0b      	add	r3, sp, #44	; 0x2c
    905c:	891b      	ldrh	r3, [r3, #8]
    905e:	9a08      	ldr	r2, [sp, #32]
    9060:	9200      	str	r2, [sp, #0]
    9062:	2200      	movs	r2, #0
    9064:	9904      	ldr	r1, [sp, #16]
    9066:	9803      	ldr	r0, [sp, #12]
    9068:	4e4e      	ldr	r6, [pc, #312]	; (91a4 <CompactSector+0x254>)
    906a:	47b0      	blx	r6
    906c:	2800      	cmp	r0, #0
    906e:	d063      	beq.n	9138 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9070:	9b07      	ldr	r3, [sp, #28]
    9072:	009d      	lsls	r5, r3, #2
    9074:	4b45      	ldr	r3, [pc, #276]	; (918c <CompactSector+0x23c>)
    9076:	195d      	adds	r5, r3, r5
    9078:	4b49      	ldr	r3, [pc, #292]	; (91a0 <CompactSector+0x250>)
    907a:	881b      	ldrh	r3, [r3, #0]
    907c:	4a37      	ldr	r2, [pc, #220]	; (915c <CompactSector+0x20c>)
    907e:	8812      	ldrh	r2, [r2, #0]
    9080:	189b      	adds	r3, r3, r2
    9082:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    9084:	0021      	movs	r1, r4
    9086:	a814      	add	r0, sp, #80	; 0x50
    9088:	4b47      	ldr	r3, [pc, #284]	; (91a8 <CompactSector+0x258>)
    908a:	4798      	blx	r3
    908c:	2800      	cmp	r0, #0
    908e:	d053      	beq.n	9138 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9090:	9b06      	ldr	r3, [sp, #24]
    9092:	3301      	adds	r3, #1
    9094:	b2db      	uxtb	r3, r3
    9096:	001a      	movs	r2, r3
    9098:	9306      	str	r3, [sp, #24]
    909a:	4b3a      	ldr	r3, [pc, #232]	; (9184 <CompactSector+0x234>)
    909c:	781b      	ldrb	r3, [r3, #0]
    909e:	4293      	cmp	r3, r2
    90a0:	d89e      	bhi.n	8fe0 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    90a2:	4b2f      	ldr	r3, [pc, #188]	; (9160 <CompactSector+0x210>)
    90a4:	881a      	ldrh	r2, [r3, #0]
    90a6:	2a00      	cmp	r2, #0
    90a8:	d006      	beq.n	90b8 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    90aa:	4b3d      	ldr	r3, [pc, #244]	; (91a0 <CompactSector+0x250>)
    90ac:	8818      	ldrh	r0, [r3, #0]
    90ae:	a914      	add	r1, sp, #80	; 0x50
    90b0:	4b3e      	ldr	r3, [pc, #248]	; (91ac <CompactSector+0x25c>)
    90b2:	4798      	blx	r3
    90b4:	1e04      	subs	r4, r0, #0
    90b6:	d040      	beq.n	913a <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    90b8:	4b29      	ldr	r3, [pc, #164]	; (9160 <CompactSector+0x210>)
    90ba:	8818      	ldrh	r0, [r3, #0]
    90bc:	2100      	movs	r1, #0
    90be:	4b3c      	ldr	r3, [pc, #240]	; (91b0 <CompactSector+0x260>)
    90c0:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    90c2:	4b37      	ldr	r3, [pc, #220]	; (91a0 <CompactSector+0x250>)
    90c4:	881a      	ldrh	r2, [r3, #0]
    90c6:	4b3b      	ldr	r3, [pc, #236]	; (91b4 <CompactSector+0x264>)
    90c8:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    90ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    90cc:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    90ce:	4b3a      	ldr	r3, [pc, #232]	; (91b8 <CompactSector+0x268>)
    90d0:	4798      	blx	r3
    90d2:	1e04      	subs	r4, r0, #0
    90d4:	d031      	beq.n	913a <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    90d6:	2102      	movs	r1, #2
    90d8:	2000      	movs	r0, #0
    90da:	4b35      	ldr	r3, [pc, #212]	; (91b0 <CompactSector+0x260>)
    90dc:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    90de:	4b37      	ldr	r3, [pc, #220]	; (91bc <CompactSector+0x26c>)
    90e0:	466a      	mov	r2, sp
    90e2:	7b12      	ldrb	r2, [r2, #12]
    90e4:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    90e6:	4d36      	ldr	r5, [pc, #216]	; (91c0 <CompactSector+0x270>)
    90e8:	0028      	movs	r0, r5
    90ea:	4b19      	ldr	r3, [pc, #100]	; (9150 <CompactSector+0x200>)
    90ec:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    90ee:	0028      	movs	r0, r5
    90f0:	4b34      	ldr	r3, [pc, #208]	; (91c4 <CompactSector+0x274>)
    90f2:	4798      	blx	r3

    return true;
    90f4:	e021      	b.n	913a <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    90f6:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    90f8:	1aef      	subs	r7, r5, r3
    90fa:	b2ba      	uxth	r2, r7
    90fc:	4693      	mov	fp, r2
    90fe:	4443      	add	r3, r8
    9100:	9300      	str	r3, [sp, #0]
    9102:	0013      	movs	r3, r2
    9104:	0032      	movs	r2, r6
    9106:	9904      	ldr	r1, [sp, #16]
    9108:	9803      	ldr	r0, [sp, #12]
    910a:	4f26      	ldr	r7, [pc, #152]	; (91a4 <CompactSector+0x254>)
    910c:	47b8      	blx	r7
    910e:	2800      	cmp	r0, #0
    9110:	d012      	beq.n	9138 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    9112:	0029      	movs	r1, r5
    9114:	a814      	add	r0, sp, #80	; 0x50
    9116:	4b24      	ldr	r3, [pc, #144]	; (91a8 <CompactSector+0x258>)
    9118:	4798      	blx	r3
    911a:	2800      	cmp	r0, #0
    911c:	d00c      	beq.n	9138 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    911e:	1b64      	subs	r4, r4, r5
    9120:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    9122:	445e      	add	r6, fp
    9124:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    9126:	2300      	movs	r3, #0
            } while(currLength > 0);
    9128:	2c00      	cmp	r4, #0
    912a:	d0b1      	beq.n	9090 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    912c:	1c25      	adds	r5, r4, #0
    912e:	454c      	cmp	r4, r9
    9130:	d9e1      	bls.n	90f6 <CompactSector+0x1a6>
    9132:	466a      	mov	r2, sp
    9134:	8ad5      	ldrh	r5, [r2, #22]
    9136:	e7de      	b.n	90f6 <CompactSector+0x1a6>
                return false;
    9138:	2400      	movs	r4, #0
}
    913a:	0020      	movs	r0, r4
    913c:	b055      	add	sp, #340	; 0x154
    913e:	bc3c      	pop	{r2, r3, r4, r5}
    9140:	4690      	mov	r8, r2
    9142:	4699      	mov	r9, r3
    9144:	46a2      	mov	sl, r4
    9146:	46ab      	mov	fp, r5
    9148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    914a:	46c0      	nop			; (mov r8, r8)
    914c:	200001ec 	.word	0x200001ec
    9150:	0000cecd 	.word	0x0000cecd
    9154:	20000318 	.word	0x20000318
    9158:	2000031a 	.word	0x2000031a
    915c:	200001d4 	.word	0x200001d4
    9160:	20000200 	.word	0x20000200
    9164:	20000350 	.word	0x20000350
    9168:	0000883d 	.word	0x0000883d
    916c:	00008de9 	.word	0x00008de9
    9170:	00010f54 	.word	0x00010f54
    9174:	000110d8 	.word	0x000110d8
    9178:	000003d5 	.word	0x000003d5
    917c:	00010fd0 	.word	0x00010fd0
    9180:	0000f8b9 	.word	0x0000f8b9
    9184:	20000348 	.word	0x20000348
    9188:	20000204 	.word	0x20000204
    918c:	20000320 	.word	0x20000320
    9190:	00008bdd 	.word	0x00008bdd
    9194:	0000ffff 	.word	0x0000ffff
    9198:	00008ae5 	.word	0x00008ae5
    919c:	0000f98d 	.word	0x0000f98d
    91a0:	20000352 	.word	0x20000352
    91a4:	00008b25 	.word	0x00008b25
    91a8:	00008ea9 	.word	0x00008ea9
    91ac:	00008e1d 	.word	0x00008e1d
    91b0:	00008aa9 	.word	0x00008aa9
    91b4:	2000034a 	.word	0x2000034a
    91b8:	00008e51 	.word	0x00008e51
    91bc:	20000009 	.word	0x20000009
    91c0:	20000304 	.word	0x20000304
    91c4:	0000cf39 	.word	0x0000cf39

000091c8 <compactSectorTimerFired>:
{
    91c8:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    91ca:	4b07      	ldr	r3, [pc, #28]	; (91e8 <compactSectorTimerFired+0x20>)
    91cc:	4798      	blx	r3
    91ce:	2800      	cmp	r0, #0
    91d0:	d000      	beq.n	91d4 <compactSectorTimerFired+0xc>
}
    91d2:	bd10      	pop	{r4, pc}
      status = CompactSector();
    91d4:	4b05      	ldr	r3, [pc, #20]	; (91ec <compactSectorTimerFired+0x24>)
    91d6:	4798      	blx	r3
      assert(false);
    91d8:	4b05      	ldr	r3, [pc, #20]	; (91f0 <compactSectorTimerFired+0x28>)
    91da:	4a06      	ldr	r2, [pc, #24]	; (91f4 <compactSectorTimerFired+0x2c>)
    91dc:	212c      	movs	r1, #44	; 0x2c
    91de:	31ff      	adds	r1, #255	; 0xff
    91e0:	4805      	ldr	r0, [pc, #20]	; (91f8 <compactSectorTimerFired+0x30>)
    91e2:	4c06      	ldr	r4, [pc, #24]	; (91fc <compactSectorTimerFired+0x34>)
    91e4:	47a0      	blx	r4
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	00008a8d 	.word	0x00008a8d
    91ec:	00008f51 	.word	0x00008f51
    91f0:	00010f54 	.word	0x00010f54
    91f4:	00011084 	.word	0x00011084
    91f8:	00010fd0 	.word	0x00010fd0
    91fc:	0000f8b9 	.word	0x0000f8b9

00009200 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    9200:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    9202:	4b12      	ldr	r3, [pc, #72]	; (924c <CompactSectorIfNeeded+0x4c>)
    9204:	881a      	ldrh	r2, [r3, #0]
    9206:	2380      	movs	r3, #128	; 0x80
    9208:	019b      	lsls	r3, r3, #6
    920a:	1a9b      	subs	r3, r3, r2
    920c:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    920e:	4283      	cmp	r3, r0
    9210:	d303      	bcc.n	921a <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    9212:	4a0f      	ldr	r2, [pc, #60]	; (9250 <CompactSectorIfNeeded+0x50>)
    9214:	4293      	cmp	r3, r2
    9216:	d90a      	bls.n	922e <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    9218:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    921a:	4b0e      	ldr	r3, [pc, #56]	; (9254 <CompactSectorIfNeeded+0x54>)
    921c:	4798      	blx	r3
    921e:	2800      	cmp	r0, #0
    9220:	d1fa      	bne.n	9218 <CompactSectorIfNeeded+0x18>
            assert(false);
    9222:	4b0d      	ldr	r3, [pc, #52]	; (9258 <CompactSectorIfNeeded+0x58>)
    9224:	4a0d      	ldr	r2, [pc, #52]	; (925c <CompactSectorIfNeeded+0x5c>)
    9226:	490e      	ldr	r1, [pc, #56]	; (9260 <CompactSectorIfNeeded+0x60>)
    9228:	480e      	ldr	r0, [pc, #56]	; (9264 <CompactSectorIfNeeded+0x64>)
    922a:	4c0f      	ldr	r4, [pc, #60]	; (9268 <CompactSectorIfNeeded+0x68>)
    922c:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    922e:	480f      	ldr	r0, [pc, #60]	; (926c <CompactSectorIfNeeded+0x6c>)
    9230:	4b0f      	ldr	r3, [pc, #60]	; (9270 <CompactSectorIfNeeded+0x70>)
    9232:	4798      	blx	r3
    9234:	2800      	cmp	r0, #0
    9236:	d1ef      	bne.n	9218 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    9238:	4b0c      	ldr	r3, [pc, #48]	; (926c <CompactSectorIfNeeded+0x6c>)
    923a:	4a0e      	ldr	r2, [pc, #56]	; (9274 <CompactSectorIfNeeded+0x74>)
    923c:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    923e:	4a0e      	ldr	r2, [pc, #56]	; (9278 <CompactSectorIfNeeded+0x78>)
    9240:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    9242:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9244:	2200      	movs	r2, #0
    9246:	731a      	strb	r2, [r3, #12]
    9248:	e7e6      	b.n	9218 <CompactSectorIfNeeded+0x18>
    924a:	46c0      	nop			; (mov r8, r8)
    924c:	20000352 	.word	0x20000352
    9250:	0000080f 	.word	0x0000080f
    9254:	00008f51 	.word	0x00008f51
    9258:	00010f54 	.word	0x00010f54
    925c:	000110e8 	.word	0x000110e8
    9260:	0000044e 	.word	0x0000044e
    9264:	00010fd0 	.word	0x00010fd0
    9268:	0000f8b9 	.word	0x0000f8b9
    926c:	200001ec 	.word	0x200001ec
    9270:	0000cf0d 	.word	0x0000cf0d
    9274:	000091c9 	.word	0x000091c9
    9278:	00002710 	.word	0x00002710

0000927c <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    927c:	b5f0      	push	{r4, r5, r6, r7, lr}
    927e:	46de      	mov	lr, fp
    9280:	4657      	mov	r7, sl
    9282:	464e      	mov	r6, r9
    9284:	4645      	mov	r5, r8
    9286:	b5e0      	push	{r5, r6, r7, lr}
    9288:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    928a:	4b77      	ldr	r3, [pc, #476]	; (9468 <CompactItem+0x1ec>)
    928c:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    928e:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9290:	2800      	cmp	r0, #0
    9292:	d007      	beq.n	92a4 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    9294:	0018      	movs	r0, r3
    9296:	b00b      	add	sp, #44	; 0x2c
    9298:	bc3c      	pop	{r2, r3, r4, r5}
    929a:	4690      	mov	r8, r2
    929c:	4699      	mov	r9, r3
    929e:	46a2      	mov	sl, r4
    92a0:	46ab      	mov	fp, r5
    92a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    92a4:	4b71      	ldr	r3, [pc, #452]	; (946c <CompactItem+0x1f0>)
    92a6:	8818      	ldrh	r0, [r3, #0]
    92a8:	2800      	cmp	r0, #0
    92aa:	d146      	bne.n	933a <CompactItem+0xbe>
    92ac:	4b70      	ldr	r3, [pc, #448]	; (9470 <CompactItem+0x1f4>)
    92ae:	881b      	ldrh	r3, [r3, #0]
    92b0:	2b00      	cmp	r3, #0
    92b2:	d100      	bne.n	92b6 <CompactItem+0x3a>
    92b4:	e0d0      	b.n	9458 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    92b6:	4b6e      	ldr	r3, [pc, #440]	; (9470 <CompactItem+0x1f4>)
    92b8:	8818      	ldrh	r0, [r3, #0]
    92ba:	4b6e      	ldr	r3, [pc, #440]	; (9474 <CompactItem+0x1f8>)
    92bc:	4798      	blx	r3
    92be:	4683      	mov	fp, r0
    if ( cache == NULL )
    92c0:	2800      	cmp	r0, #0
    92c2:	d100      	bne.n	92c6 <CompactItem+0x4a>
    92c4:	e0ca      	b.n	945c <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    92c6:	7882      	ldrb	r2, [r0, #2]
    92c8:	78c3      	ldrb	r3, [r0, #3]
    92ca:	021b      	lsls	r3, r3, #8
    92cc:	4313      	orrs	r3, r2
    92ce:	0019      	movs	r1, r3
    92d0:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    92d2:	4b69      	ldr	r3, [pc, #420]	; (9478 <CompactItem+0x1fc>)
    92d4:	7818      	ldrb	r0, [r3, #0]
    92d6:	2310      	movs	r3, #16
    92d8:	aa06      	add	r2, sp, #24
    92da:	4c68      	ldr	r4, [pc, #416]	; (947c <CompactItem+0x200>)
    92dc:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    92de:	4b63      	ldr	r3, [pc, #396]	; (946c <CompactItem+0x1f0>)
    92e0:	881a      	ldrh	r2, [r3, #0]
    92e2:	2a00      	cmp	r2, #0
    92e4:	d02e      	beq.n	9344 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    92e6:	4b66      	ldr	r3, [pc, #408]	; (9480 <CompactItem+0x204>)
    92e8:	881b      	ldrh	r3, [r3, #0]
    92ea:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    92ec:	ab06      	add	r3, sp, #24
    92ee:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    92f0:	a906      	add	r1, sp, #24
    92f2:	810a      	strh	r2, [r1, #8]
    92f4:	1c19      	adds	r1, r3, #0
    92f6:	4293      	cmp	r3, r2
    92f8:	d900      	bls.n	92fc <CompactItem+0x80>
    92fa:	1c11      	adds	r1, r2, #0
    92fc:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    92fe:	aa06      	add	r2, sp, #24
    9300:	2100      	movs	r1, #0
    9302:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9304:	8910      	ldrh	r0, [r2, #8]
    9306:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9308:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    930a:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    930c:	001c      	movs	r4, r3
    930e:	3410      	adds	r4, #16
    9310:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9312:	495c      	ldr	r1, [pc, #368]	; (9484 <CompactItem+0x208>)
    9314:	ca61      	ldmia	r2!, {r0, r5, r6}
    9316:	c161      	stmia	r1!, {r0, r5, r6}
    9318:	6812      	ldr	r2, [r2, #0]
    931a:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    931c:	2280      	movs	r2, #128	; 0x80
    931e:	0052      	lsls	r2, r2, #1
    9320:	4294      	cmp	r4, r2
    9322:	d939      	bls.n	9398 <CompactItem+0x11c>
    9324:	2600      	movs	r6, #0
    9326:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9328:	2280      	movs	r2, #128	; 0x80
    932a:	0052      	lsls	r2, r2, #1
    932c:	4691      	mov	r9, r2
    932e:	4669      	mov	r1, sp
    9330:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9332:	4a51      	ldr	r2, [pc, #324]	; (9478 <CompactItem+0x1fc>)
    9334:	4692      	mov	sl, r2
    9336:	001a      	movs	r2, r3
    9338:	e088      	b.n	944c <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    933a:	3010      	adds	r0, #16
    933c:	b280      	uxth	r0, r0
    933e:	4b52      	ldr	r3, [pc, #328]	; (9488 <CompactItem+0x20c>)
    9340:	4798      	blx	r3
    9342:	e7b8      	b.n	92b6 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    9344:	ab06      	add	r3, sp, #24
    9346:	8918      	ldrh	r0, [r3, #8]
    9348:	3010      	adds	r0, #16
    934a:	b280      	uxth	r0, r0
    934c:	4b4e      	ldr	r3, [pc, #312]	; (9488 <CompactItem+0x20c>)
    934e:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    9350:	4b47      	ldr	r3, [pc, #284]	; (9470 <CompactItem+0x1f4>)
    9352:	8818      	ldrh	r0, [r3, #0]
    9354:	4b47      	ldr	r3, [pc, #284]	; (9474 <CompactItem+0x1f8>)
    9356:	4798      	blx	r3
    9358:	4683      	mov	fp, r0
        assert(cache != NULL);
    935a:	2800      	cmp	r0, #0
    935c:	d015      	beq.n	938a <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    935e:	7882      	ldrb	r2, [r0, #2]
    9360:	78c3      	ldrb	r3, [r0, #3]
    9362:	021b      	lsls	r3, r3, #8
    9364:	4313      	orrs	r3, r2
    9366:	0019      	movs	r1, r3
    9368:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    936a:	ac06      	add	r4, sp, #24
    936c:	4b42      	ldr	r3, [pc, #264]	; (9478 <CompactItem+0x1fc>)
    936e:	7818      	ldrb	r0, [r3, #0]
    9370:	2310      	movs	r3, #16
    9372:	0022      	movs	r2, r4
    9374:	4d41      	ldr	r5, [pc, #260]	; (947c <CompactItem+0x200>)
    9376:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    9378:	4b41      	ldr	r3, [pc, #260]	; (9480 <CompactItem+0x204>)
    937a:	881b      	ldrh	r3, [r3, #0]
    937c:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    937e:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    9380:	4a3a      	ldr	r2, [pc, #232]	; (946c <CompactItem+0x1f0>)
    9382:	8812      	ldrh	r2, [r2, #0]
    9384:	2a00      	cmp	r2, #0
    9386:	d0ba      	beq.n	92fe <CompactItem+0x82>
    9388:	e7b2      	b.n	92f0 <CompactItem+0x74>
        assert(cache != NULL);
    938a:	4b40      	ldr	r3, [pc, #256]	; (948c <CompactItem+0x210>)
    938c:	4a40      	ldr	r2, [pc, #256]	; (9490 <CompactItem+0x214>)
    938e:	2191      	movs	r1, #145	; 0x91
    9390:	00c9      	lsls	r1, r1, #3
    9392:	4840      	ldr	r0, [pc, #256]	; (9494 <CompactItem+0x218>)
    9394:	4c40      	ldr	r4, [pc, #256]	; (9498 <CompactItem+0x21c>)
    9396:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9398:	4a37      	ldr	r2, [pc, #220]	; (9478 <CompactItem+0x1fc>)
    939a:	7810      	ldrb	r0, [r2, #0]
    939c:	4a39      	ldr	r2, [pc, #228]	; (9484 <CompactItem+0x208>)
    939e:	3210      	adds	r2, #16
    93a0:	9200      	str	r2, [sp, #0]
    93a2:	2200      	movs	r2, #0
    93a4:	9903      	ldr	r1, [sp, #12]
    93a6:	4c3d      	ldr	r4, [pc, #244]	; (949c <CompactItem+0x220>)
    93a8:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    93aa:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    93ac:	2800      	cmp	r0, #0
    93ae:	d100      	bne.n	93b2 <CompactItem+0x136>
    93b0:	e770      	b.n	9294 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    93b2:	4934      	ldr	r1, [pc, #208]	; (9484 <CompactItem+0x208>)
    93b4:	ab06      	add	r3, sp, #24
    93b6:	000a      	movs	r2, r1
    93b8:	0018      	movs	r0, r3
    93ba:	c870      	ldmia	r0!, {r4, r5, r6}
    93bc:	c270      	stmia	r2!, {r4, r5, r6}
    93be:	6800      	ldr	r0, [r0, #0]
    93c0:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    93c2:	88da      	ldrh	r2, [r3, #6]
    93c4:	3210      	adds	r2, #16
    93c6:	b292      	uxth	r2, r2
    93c8:	4b2d      	ldr	r3, [pc, #180]	; (9480 <CompactItem+0x204>)
    93ca:	8818      	ldrh	r0, [r3, #0]
    93cc:	4b34      	ldr	r3, [pc, #208]	; (94a0 <CompactItem+0x224>)
    93ce:	4798      	blx	r3
            return false;
    93d0:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    93d2:	2800      	cmp	r0, #0
    93d4:	d100      	bne.n	93d8 <CompactItem+0x15c>
    93d6:	e75d      	b.n	9294 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    93d8:	ab06      	add	r3, sp, #24
    93da:	88d8      	ldrh	r0, [r3, #6]
    93dc:	3010      	adds	r0, #16
    93de:	b280      	uxth	r0, r0
    93e0:	2102      	movs	r1, #2
    93e2:	4b30      	ldr	r3, [pc, #192]	; (94a4 <CompactItem+0x228>)
    93e4:	4798      	blx	r3
    s_compactItemId = 0u;
    93e6:	2300      	movs	r3, #0
    93e8:	4a21      	ldr	r2, [pc, #132]	; (9470 <CompactItem+0x1f4>)
    93ea:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    93ec:	4a1f      	ldr	r2, [pc, #124]	; (946c <CompactItem+0x1f0>)
    93ee:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    93f0:	465b      	mov	r3, fp
    93f2:	9905      	ldr	r1, [sp, #20]
    93f4:	7099      	strb	r1, [r3, #2]
    93f6:	0a0b      	lsrs	r3, r1, #8
    93f8:	465a      	mov	r2, fp
    93fa:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    93fc:	2300      	movs	r3, #0
    93fe:	e749      	b.n	9294 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9400:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9402:	1aaf      	subs	r7, r5, r2
    9404:	b2bb      	uxth	r3, r7
    9406:	0019      	movs	r1, r3
    9408:	4653      	mov	r3, sl
    940a:	7818      	ldrb	r0, [r3, #0]
    940c:	4b1d      	ldr	r3, [pc, #116]	; (9484 <CompactItem+0x208>)
    940e:	189b      	adds	r3, r3, r2
    9410:	9300      	str	r3, [sp, #0]
    9412:	9102      	str	r1, [sp, #8]
    9414:	000b      	movs	r3, r1
    9416:	0032      	movs	r2, r6
    9418:	9903      	ldr	r1, [sp, #12]
    941a:	4f20      	ldr	r7, [pc, #128]	; (949c <CompactItem+0x220>)
    941c:	47b8      	blx	r7
    941e:	2800      	cmp	r0, #0
    9420:	d01e      	beq.n	9460 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9422:	4b17      	ldr	r3, [pc, #92]	; (9480 <CompactItem+0x204>)
    9424:	8818      	ldrh	r0, [r3, #0]
    9426:	002a      	movs	r2, r5
    9428:	4916      	ldr	r1, [pc, #88]	; (9484 <CompactItem+0x208>)
    942a:	4b1d      	ldr	r3, [pc, #116]	; (94a0 <CompactItem+0x224>)
    942c:	4798      	blx	r3
    942e:	2800      	cmp	r0, #0
    9430:	d018      	beq.n	9464 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9432:	2102      	movs	r1, #2
    9434:	0028      	movs	r0, r5
    9436:	4b1b      	ldr	r3, [pc, #108]	; (94a4 <CompactItem+0x228>)
    9438:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    943a:	1b64      	subs	r4, r4, r5
    943c:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    943e:	9902      	ldr	r1, [sp, #8]
    9440:	468c      	mov	ip, r1
    9442:	4466      	add	r6, ip
    9444:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9446:	2200      	movs	r2, #0
        } while(currLength > 0);
    9448:	2c00      	cmp	r4, #0
    944a:	d0cc      	beq.n	93e6 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    944c:	1c25      	adds	r5, r4, #0
    944e:	454c      	cmp	r4, r9
    9450:	d9d6      	bls.n	9400 <CompactItem+0x184>
    9452:	466b      	mov	r3, sp
    9454:	8a5d      	ldrh	r5, [r3, #18]
    9456:	e7d3      	b.n	9400 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    9458:	2300      	movs	r3, #0
    945a:	e71b      	b.n	9294 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    945c:	2300      	movs	r3, #0
    945e:	e719      	b.n	9294 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    9460:	2301      	movs	r3, #1
    9462:	e717      	b.n	9294 <CompactItem+0x18>
                return false;
    9464:	2300      	movs	r3, #0
    9466:	e715      	b.n	9294 <CompactItem+0x18>
    9468:	00008a8d 	.word	0x00008a8d
    946c:	2000031a 	.word	0x2000031a
    9470:	20000318 	.word	0x20000318
    9474:	00008c85 	.word	0x00008c85
    9478:	20000350 	.word	0x20000350
    947c:	0000883d 	.word	0x0000883d
    9480:	20000352 	.word	0x20000352
    9484:	20000204 	.word	0x20000204
    9488:	00009201 	.word	0x00009201
    948c:	00010f44 	.word	0x00010f44
    9490:	00011100 	.word	0x00011100
    9494:	00010fd0 	.word	0x00010fd0
    9498:	0000f8b9 	.word	0x0000f8b9
    949c:	00008b25 	.word	0x00008b25
    94a0:	00008e1d 	.word	0x00008e1d
    94a4:	00008aa9 	.word	0x00008aa9

000094a8 <compactItemTimerFired>:
{
    94a8:	b510      	push	{r4, lr}
    (void)CompactItem();
    94aa:	4b01      	ldr	r3, [pc, #4]	; (94b0 <compactItemTimerFired+0x8>)
    94ac:	4798      	blx	r3
}
    94ae:	bd10      	pop	{r4, pc}
    94b0:	0000927d 	.word	0x0000927d

000094b4 <WriteDataBlockAndHeader>:
{
    94b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b6:	46de      	mov	lr, fp
    94b8:	4657      	mov	r7, sl
    94ba:	464e      	mov	r6, r9
    94bc:	4645      	mov	r5, r8
    94be:	b5e0      	push	{r5, r6, r7, lr}
    94c0:	b083      	sub	sp, #12
    94c2:	0004      	movs	r4, r0
    94c4:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    94c6:	4d46      	ldr	r5, [pc, #280]	; (95e0 <WriteDataBlockAndHeader+0x12c>)
    94c8:	2280      	movs	r2, #128	; 0x80
    94ca:	0052      	lsls	r2, r2, #1
    94cc:	21ff      	movs	r1, #255	; 0xff
    94ce:	0028      	movs	r0, r5
    94d0:	4b44      	ldr	r3, [pc, #272]	; (95e4 <WriteDataBlockAndHeader+0x130>)
    94d2:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    94d4:	4e44      	ldr	r6, [pc, #272]	; (95e8 <WriteDataBlockAndHeader+0x134>)
    94d6:	79a3      	ldrb	r3, [r4, #6]
    94d8:	79e1      	ldrb	r1, [r4, #7]
    94da:	0209      	lsls	r1, r1, #8
    94dc:	4319      	orrs	r1, r3
    94de:	0032      	movs	r2, r6
    94e0:	4650      	mov	r0, sl
    94e2:	4f42      	ldr	r7, [pc, #264]	; (95ec <WriteDataBlockAndHeader+0x138>)
    94e4:	47b8      	blx	r7
    94e6:	7020      	strb	r0, [r4, #0]
    94e8:	0a00      	lsrs	r0, r0, #8
    94ea:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    94ec:	0032      	movs	r2, r6
    94ee:	210e      	movs	r1, #14
    94f0:	0020      	movs	r0, r4
    94f2:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    94f4:	73a0      	strb	r0, [r4, #14]
    94f6:	0a00      	lsrs	r0, r0, #8
    94f8:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    94fa:	2210      	movs	r2, #16
    94fc:	0021      	movs	r1, r4
    94fe:	0028      	movs	r0, r5
    9500:	4b3b      	ldr	r3, [pc, #236]	; (95f0 <WriteDataBlockAndHeader+0x13c>)
    9502:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9504:	79a3      	ldrb	r3, [r4, #6]
    9506:	79e2      	ldrb	r2, [r4, #7]
    9508:	0212      	lsls	r2, r2, #8
    950a:	431a      	orrs	r2, r3
    950c:	0015      	movs	r5, r2
    950e:	3510      	adds	r5, #16
    9510:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9512:	4653      	mov	r3, sl
    9514:	2b00      	cmp	r3, #0
    9516:	d012      	beq.n	953e <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9518:	2380      	movs	r3, #128	; 0x80
    951a:	005b      	lsls	r3, r3, #1
    951c:	429d      	cmp	r5, r3
    951e:	d909      	bls.n	9534 <WriteDataBlockAndHeader+0x80>
    9520:	2600      	movs	r6, #0
    9522:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9524:	2380      	movs	r3, #128	; 0x80
    9526:	005b      	lsls	r3, r3, #1
    9528:	469b      	mov	fp, r3
    952a:	466a      	mov	r2, sp
    952c:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    952e:	4b2c      	ldr	r3, [pc, #176]	; (95e0 <WriteDataBlockAndHeader+0x12c>)
    9530:	4699      	mov	r9, r3
    9532:	e045      	b.n	95c0 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9534:	4651      	mov	r1, sl
    9536:	482a      	ldr	r0, [pc, #168]	; (95e0 <WriteDataBlockAndHeader+0x12c>)
    9538:	3010      	adds	r0, #16
    953a:	4b2d      	ldr	r3, [pc, #180]	; (95f0 <WriteDataBlockAndHeader+0x13c>)
    953c:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    953e:	79a3      	ldrb	r3, [r4, #6]
    9540:	79e2      	ldrb	r2, [r4, #7]
    9542:	0212      	lsls	r2, r2, #8
    9544:	431a      	orrs	r2, r3
    9546:	3210      	adds	r2, #16
    9548:	2380      	movs	r3, #128	; 0x80
    954a:	005b      	lsls	r3, r3, #1
    954c:	429a      	cmp	r2, r3
    954e:	dd00      	ble.n	9552 <WriteDataBlockAndHeader+0x9e>
    9550:	001a      	movs	r2, r3
    9552:	b292      	uxth	r2, r2
    9554:	4b27      	ldr	r3, [pc, #156]	; (95f4 <WriteDataBlockAndHeader+0x140>)
    9556:	8818      	ldrh	r0, [r3, #0]
    9558:	4921      	ldr	r1, [pc, #132]	; (95e0 <WriteDataBlockAndHeader+0x12c>)
    955a:	4b27      	ldr	r3, [pc, #156]	; (95f8 <WriteDataBlockAndHeader+0x144>)
    955c:	4798      	blx	r3
    955e:	4680      	mov	r8, r0
    9560:	2800      	cmp	r0, #0
    9562:	d033      	beq.n	95cc <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    9564:	79a3      	ldrb	r3, [r4, #6]
    9566:	79e0      	ldrb	r0, [r4, #7]
    9568:	0200      	lsls	r0, r0, #8
    956a:	4318      	orrs	r0, r3
    956c:	3010      	adds	r0, #16
    956e:	b280      	uxth	r0, r0
    9570:	2102      	movs	r1, #2
    9572:	4b22      	ldr	r3, [pc, #136]	; (95fc <WriteDataBlockAndHeader+0x148>)
    9574:	4798      	blx	r3
}
    9576:	4640      	mov	r0, r8
    9578:	b003      	add	sp, #12
    957a:	bc3c      	pop	{r2, r3, r4, r5}
    957c:	4690      	mov	r8, r2
    957e:	4699      	mov	r9, r3
    9580:	46a2      	mov	sl, r4
    9582:	46ab      	mov	fp, r5
    9584:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9586:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9588:	464b      	mov	r3, r9
    958a:	19d8      	adds	r0, r3, r7
    958c:	1be2      	subs	r2, r4, r7
    958e:	4653      	mov	r3, sl
    9590:	1999      	adds	r1, r3, r6
    9592:	4b17      	ldr	r3, [pc, #92]	; (95f0 <WriteDataBlockAndHeader+0x13c>)
    9594:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    9596:	4b17      	ldr	r3, [pc, #92]	; (95f4 <WriteDataBlockAndHeader+0x140>)
    9598:	8818      	ldrh	r0, [r3, #0]
    959a:	0022      	movs	r2, r4
    959c:	4649      	mov	r1, r9
    959e:	4b16      	ldr	r3, [pc, #88]	; (95f8 <WriteDataBlockAndHeader+0x144>)
    95a0:	4798      	blx	r3
    95a2:	4680      	mov	r8, r0
    95a4:	2800      	cmp	r0, #0
    95a6:	d0e6      	beq.n	9576 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    95a8:	2102      	movs	r1, #2
    95aa:	0020      	movs	r0, r4
    95ac:	4b13      	ldr	r3, [pc, #76]	; (95fc <WriteDataBlockAndHeader+0x148>)
    95ae:	4798      	blx	r3
                currentLength -= bytesToCommit;
    95b0:	1b2d      	subs	r5, r5, r4
    95b2:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    95b4:	1be4      	subs	r4, r4, r7
    95b6:	1936      	adds	r6, r6, r4
    95b8:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    95ba:	2700      	movs	r7, #0
            } while(currentLength > 0);
    95bc:	2d00      	cmp	r5, #0
    95be:	d0da      	beq.n	9576 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    95c0:	1c2c      	adds	r4, r5, #0
    95c2:	455d      	cmp	r5, fp
    95c4:	d9df      	bls.n	9586 <WriteDataBlockAndHeader+0xd2>
    95c6:	466b      	mov	r3, sp
    95c8:	88dc      	ldrh	r4, [r3, #6]
    95ca:	e7dc      	b.n	9586 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    95cc:	79a3      	ldrb	r3, [r4, #6]
    95ce:	79e0      	ldrb	r0, [r4, #7]
    95d0:	0200      	lsls	r0, r0, #8
    95d2:	4318      	orrs	r0, r3
    95d4:	3010      	adds	r0, #16
    95d6:	b280      	uxth	r0, r0
    95d8:	2102      	movs	r1, #2
    95da:	4b08      	ldr	r3, [pc, #32]	; (95fc <WriteDataBlockAndHeader+0x148>)
    95dc:	4798      	blx	r3
        return false;
    95de:	e7ca      	b.n	9576 <WriteDataBlockAndHeader+0xc2>
    95e0:	20000204 	.word	0x20000204
    95e4:	0000f98d 	.word	0x0000f98d
    95e8:	0000ffff 	.word	0x0000ffff
    95ec:	00008ae5 	.word	0x00008ae5
    95f0:	0000f97b 	.word	0x0000f97b
    95f4:	20000352 	.word	0x20000352
    95f8:	00008e1d 	.word	0x00008e1d
    95fc:	00008aa9 	.word	0x00008aa9

00009600 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9600:	b5f0      	push	{r4, r5, r6, r7, lr}
    9602:	46ce      	mov	lr, r9
    9604:	4647      	mov	r7, r8
    9606:	b580      	push	{r7, lr}
    9608:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    960a:	2200      	movs	r2, #0
    960c:	4bb3      	ldr	r3, [pc, #716]	; (98dc <S_Nv_EarlyInit+0x2dc>)
    960e:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9610:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9612:	2301      	movs	r3, #1
    9614:	425b      	negs	r3, r3
    9616:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9618:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    961a:	4eb1      	ldr	r6, [pc, #708]	; (98e0 <S_Nv_EarlyInit+0x2e0>)
    961c:	2312      	movs	r3, #18
    961e:	aa0b      	add	r2, sp, #44	; 0x2c
    9620:	2100      	movs	r1, #0
    9622:	0020      	movs	r0, r4
    9624:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9626:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    962a:	9301      	str	r3, [sp, #4]
    962c:	406b      	eors	r3, r5
    962e:	3301      	adds	r3, #1
    9630:	d01d      	beq.n	966e <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9632:	3401      	adds	r4, #1
    9634:	b2e4      	uxtb	r4, r4
    9636:	2c02      	cmp	r4, #2
    9638:	d1f0      	bne.n	961c <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    963a:	2fff      	cmp	r7, #255	; 0xff
    963c:	d057      	beq.n	96ee <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    963e:	4ba9      	ldr	r3, [pc, #676]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    9640:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9642:	4643      	mov	r3, r8
    9644:	2b01      	cmp	r3, #1
    9646:	d100      	bne.n	964a <S_Nv_EarlyInit+0x4a>
    9648:	e07b      	b.n	9742 <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    964a:	4643      	mov	r3, r8
    964c:	2b02      	cmp	r3, #2
    964e:	d16a      	bne.n	9726 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    9650:	2280      	movs	r2, #128	; 0x80
    9652:	0052      	lsls	r2, r2, #1
    9654:	4ba4      	ldr	r3, [pc, #656]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    9656:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    9658:	2312      	movs	r3, #18
    965a:	aa06      	add	r2, sp, #24
    965c:	2100      	movs	r1, #0
    965e:	0038      	movs	r0, r7
    9660:	4c9f      	ldr	r4, [pc, #636]	; (98e0 <S_Nv_EarlyInit+0x2e0>)
    9662:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    9664:	4da0      	ldr	r5, [pc, #640]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    9666:	4ba1      	ldr	r3, [pc, #644]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    9668:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    966a:	002e      	movs	r6, r5
    966c:	e10f      	b.n	988e <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    966e:	ab02      	add	r3, sp, #8
    9670:	2226      	movs	r2, #38	; 0x26
    9672:	189b      	adds	r3, r3, r2
    9674:	781b      	ldrb	r3, [r3, #0]
    9676:	2b41      	cmp	r3, #65	; 0x41
    9678:	d1db      	bne.n	9632 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    967a:	ab02      	add	r3, sp, #8
    967c:	3201      	adds	r2, #1
    967e:	189b      	adds	r3, r3, r2
    9680:	781b      	ldrb	r3, [r3, #0]
    9682:	2b54      	cmp	r3, #84	; 0x54
    9684:	d1d5      	bne.n	9632 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    9686:	ab02      	add	r3, sp, #8
    9688:	3201      	adds	r2, #1
    968a:	189b      	adds	r3, r3, r2
    968c:	781b      	ldrb	r3, [r3, #0]
    968e:	2b53      	cmp	r3, #83	; 0x53
    9690:	d1cf      	bne.n	9632 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    9692:	ab02      	add	r3, sp, #8
    9694:	3201      	adds	r2, #1
    9696:	189b      	adds	r3, r3, r2
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	2b4e      	cmp	r3, #78	; 0x4e
    969c:	d1c9      	bne.n	9632 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    969e:	ab02      	add	r3, sp, #8
    96a0:	3201      	adds	r2, #1
    96a2:	189b      	adds	r3, r3, r2
    96a4:	781b      	ldrb	r3, [r3, #0]
    96a6:	2b76      	cmp	r3, #118	; 0x76
    96a8:	d1c3      	bne.n	9632 <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    96aa:	ab02      	add	r3, sp, #8
    96ac:	3201      	adds	r2, #1
    96ae:	189b      	adds	r3, r3, r2
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	2b31      	cmp	r3, #49	; 0x31
    96b4:	d106      	bne.n	96c4 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    96b6:	ab02      	add	r3, sp, #8
    96b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    96ba:	2b00      	cmp	r3, #0
    96bc:	d1b9      	bne.n	9632 <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    96be:	2301      	movs	r3, #1
    96c0:	4698      	mov	r8, r3
    96c2:	e00f      	b.n	96e4 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    96c4:	2b32      	cmp	r3, #50	; 0x32
    96c6:	d1b4      	bne.n	9632 <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    96c8:	4a89      	ldr	r2, [pc, #548]	; (98f0 <S_Nv_EarlyInit+0x2f0>)
    96ca:	2110      	movs	r1, #16
    96cc:	2026      	movs	r0, #38	; 0x26
    96ce:	ab02      	add	r3, sp, #8
    96d0:	469c      	mov	ip, r3
    96d2:	4460      	add	r0, ip
    96d4:	4b87      	ldr	r3, [pc, #540]	; (98f4 <S_Nv_EarlyInit+0x2f4>)
    96d6:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    96d8:	ab02      	add	r3, sp, #8
    96da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    96dc:	4283      	cmp	r3, r0
    96de:	d1a8      	bne.n	9632 <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    96e0:	2302      	movs	r3, #2
    96e2:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    96e4:	454d      	cmp	r5, r9
    96e6:	d2a4      	bcs.n	9632 <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    96e8:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    96ea:	0027      	movs	r7, r4
    96ec:	e7a1      	b.n	9632 <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    96ee:	2200      	movs	r2, #0
    96f0:	4b7c      	ldr	r3, [pc, #496]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    96f2:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    96f4:	4c80      	ldr	r4, [pc, #512]	; (98f8 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    96f6:	4e81      	ldr	r6, [pc, #516]	; (98fc <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    96f8:	4d81      	ldr	r5, [pc, #516]	; (9900 <S_Nv_EarlyInit+0x300>)
    96fa:	e006      	b.n	970a <S_Nv_EarlyInit+0x10a>
            s_sector++;
    96fc:	4a79      	ldr	r2, [pc, #484]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    96fe:	7813      	ldrb	r3, [r2, #0]
    9700:	3301      	adds	r3, #1
    9702:	b2db      	uxtb	r3, r3
    9704:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9706:	2b01      	cmp	r3, #1
    9708:	d815      	bhi.n	9736 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    970a:	47a0      	blx	r4
    970c:	2800      	cmp	r0, #0
    970e:	d0f5      	beq.n	96fc <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9710:	2301      	movs	r3, #1
    9712:	425b      	negs	r3, r3
    9714:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9716:	2002      	movs	r0, #2
    9718:	4240      	negs	r0, r0
    971a:	47a8      	blx	r5
    971c:	2800      	cmp	r0, #0
    971e:	d0ed      	beq.n	96fc <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9720:	2200      	movs	r2, #0
    9722:	4b6e      	ldr	r3, [pc, #440]	; (98dc <S_Nv_EarlyInit+0x2dc>)
    9724:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9726:	2201      	movs	r2, #1
    9728:	4b76      	ldr	r3, [pc, #472]	; (9904 <S_Nv_EarlyInit+0x304>)
    972a:	701a      	strb	r2, [r3, #0]
}
    972c:	b011      	add	sp, #68	; 0x44
    972e:	bc0c      	pop	{r2, r3}
    9730:	4690      	mov	r8, r2
    9732:	4699      	mov	r9, r3
    9734:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9736:	4b74      	ldr	r3, [pc, #464]	; (9908 <S_Nv_EarlyInit+0x308>)
    9738:	4a74      	ldr	r2, [pc, #464]	; (990c <S_Nv_EarlyInit+0x30c>)
    973a:	4975      	ldr	r1, [pc, #468]	; (9910 <S_Nv_EarlyInit+0x310>)
    973c:	4875      	ldr	r0, [pc, #468]	; (9914 <S_Nv_EarlyInit+0x314>)
    973e:	4c76      	ldr	r4, [pc, #472]	; (9918 <S_Nv_EarlyInit+0x318>)
    9740:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9742:	2210      	movs	r2, #16
    9744:	4b68      	ldr	r3, [pc, #416]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    9746:	801a      	strh	r2, [r3, #0]
    9748:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    974a:	4e66      	ldr	r6, [pc, #408]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    974c:	4d64      	ldr	r5, [pc, #400]	; (98e0 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    974e:	4f69      	ldr	r7, [pc, #420]	; (98f4 <S_Nv_EarlyInit+0x2f4>)
    9750:	e072      	b.n	9838 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    9752:	ab06      	add	r3, sp, #24
    9754:	881b      	ldrh	r3, [r3, #0]
    9756:	2b00      	cmp	r3, #0
    9758:	d007      	beq.n	976a <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    975a:	ab06      	add	r3, sp, #24
    975c:	88d8      	ldrh	r0, [r3, #6]
    975e:	3010      	adds	r0, #16
    9760:	b280      	uxth	r0, r0
    9762:	2101      	movs	r1, #1
    9764:	4b61      	ldr	r3, [pc, #388]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    9766:	4798      	blx	r3
    9768:	e061      	b.n	982e <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    976a:	ab06      	add	r3, sp, #24
    976c:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    976e:	0020      	movs	r0, r4
    9770:	4b6a      	ldr	r3, [pc, #424]	; (991c <S_Nv_EarlyInit+0x31c>)
    9772:	4798      	blx	r3
                if (cache == NULL)
    9774:	2800      	cmp	r0, #0
    9776:	d010      	beq.n	979a <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    9778:	4b5b      	ldr	r3, [pc, #364]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    977a:	781a      	ldrb	r2, [r3, #0]
    977c:	7082      	strb	r2, [r0, #2]
    977e:	785b      	ldrb	r3, [r3, #1]
    9780:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    9782:	ab06      	add	r3, sp, #24
    9784:	891b      	ldrh	r3, [r3, #8]
    9786:	2b00      	cmp	r3, #0
    9788:	d00b      	beq.n	97a2 <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    978a:	ab06      	add	r3, sp, #24
    978c:	88d8      	ldrh	r0, [r3, #6]
    978e:	3010      	adds	r0, #16
    9790:	b280      	uxth	r0, r0
    9792:	2101      	movs	r1, #1
    9794:	4b55      	ldr	r3, [pc, #340]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    9796:	4798      	blx	r3
    9798:	e049      	b.n	982e <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    979a:	0020      	movs	r0, r4
    979c:	4b60      	ldr	r3, [pc, #384]	; (9920 <S_Nv_EarlyInit+0x320>)
    979e:	4798      	blx	r3
    97a0:	e7ea      	b.n	9778 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    97a2:	0020      	movs	r0, r4
    97a4:	4b5f      	ldr	r3, [pc, #380]	; (9924 <S_Nv_EarlyInit+0x324>)
    97a6:	4798      	blx	r3
    97a8:	e7ef      	b.n	978a <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    97aa:	4b4f      	ldr	r3, [pc, #316]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    97ac:	8819      	ldrh	r1, [r3, #0]
    97ae:	4b4d      	ldr	r3, [pc, #308]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    97b0:	7818      	ldrb	r0, [r3, #0]
    97b2:	aa02      	add	r2, sp, #8
    97b4:	4b5c      	ldr	r3, [pc, #368]	; (9928 <S_Nv_EarlyInit+0x328>)
    97b6:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    97b8:	ab02      	add	r3, sp, #8
    97ba:	881b      	ldrh	r3, [r3, #0]
    97bc:	4283      	cmp	r3, r0
    97be:	d007      	beq.n	97d0 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    97c0:	ab02      	add	r3, sp, #8
    97c2:	88d8      	ldrh	r0, [r3, #6]
    97c4:	3010      	adds	r0, #16
    97c6:	b280      	uxth	r0, r0
    97c8:	0021      	movs	r1, r4
    97ca:	4b48      	ldr	r3, [pc, #288]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    97cc:	4798      	blx	r3
    97ce:	e05e      	b.n	988e <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    97d0:	ab02      	add	r3, sp, #8
    97d2:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    97d4:	0038      	movs	r0, r7
    97d6:	4b51      	ldr	r3, [pc, #324]	; (991c <S_Nv_EarlyInit+0x31c>)
    97d8:	4798      	blx	r3
                    if (cache == NULL)
    97da:	2800      	cmp	r0, #0
    97dc:	d010      	beq.n	9800 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    97de:	4b42      	ldr	r3, [pc, #264]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    97e0:	781a      	ldrb	r2, [r3, #0]
    97e2:	7082      	strb	r2, [r0, #2]
    97e4:	785b      	ldrb	r3, [r3, #1]
    97e6:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    97e8:	ab02      	add	r3, sp, #8
    97ea:	891b      	ldrh	r3, [r3, #8]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d00b      	beq.n	9808 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    97f0:	ab02      	add	r3, sp, #8
    97f2:	88d8      	ldrh	r0, [r3, #6]
    97f4:	3010      	adds	r0, #16
    97f6:	b280      	uxth	r0, r0
    97f8:	0021      	movs	r1, r4
    97fa:	4b3c      	ldr	r3, [pc, #240]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    97fc:	4798      	blx	r3
    97fe:	e046      	b.n	988e <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9800:	0038      	movs	r0, r7
    9802:	4b47      	ldr	r3, [pc, #284]	; (9920 <S_Nv_EarlyInit+0x320>)
    9804:	4798      	blx	r3
    9806:	e7ea      	b.n	97de <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9808:	0038      	movs	r0, r7
    980a:	4b46      	ldr	r3, [pc, #280]	; (9924 <S_Nv_EarlyInit+0x324>)
    980c:	4798      	blx	r3
    980e:	e7ef      	b.n	97f0 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9810:	ab06      	add	r3, sp, #24
    9812:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9814:	4a36      	ldr	r2, [pc, #216]	; (98f0 <S_Nv_EarlyInit+0x2f0>)
    9816:	210c      	movs	r1, #12
    9818:	2012      	movs	r0, #18
    981a:	ab02      	add	r3, sp, #8
    981c:	469c      	mov	ip, r3
    981e:	4460      	add	r0, ip
    9820:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9822:	4284      	cmp	r4, r0
    9824:	d095      	beq.n	9752 <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    9826:	2101      	movs	r1, #1
    9828:	2010      	movs	r0, #16
    982a:	4b30      	ldr	r3, [pc, #192]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    982c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    982e:	4b2e      	ldr	r3, [pc, #184]	; (98e8 <S_Nv_EarlyInit+0x2e8>)
    9830:	8819      	ldrh	r1, [r3, #0]
    9832:	4b3e      	ldr	r3, [pc, #248]	; (992c <S_Nv_EarlyInit+0x32c>)
    9834:	4299      	cmp	r1, r3
    9836:	d812      	bhi.n	985e <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9838:	ac06      	add	r4, sp, #24
    983a:	7830      	ldrb	r0, [r6, #0]
    983c:	2310      	movs	r3, #16
    983e:	0022      	movs	r2, r4
    9840:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    9842:	7823      	ldrb	r3, [r4, #0]
    9844:	2bff      	cmp	r3, #255	; 0xff
    9846:	d1e3      	bne.n	9810 <S_Nv_EarlyInit+0x210>
    9848:	ab06      	add	r3, sp, #24
    984a:	211f      	movs	r1, #31
    984c:	aa02      	add	r2, sp, #8
    984e:	4694      	mov	ip, r2
    9850:	4461      	add	r1, ip
    9852:	785a      	ldrb	r2, [r3, #1]
    9854:	2aff      	cmp	r2, #255	; 0xff
    9856:	d1db      	bne.n	9810 <S_Nv_EarlyInit+0x210>
    9858:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    985a:	428b      	cmp	r3, r1
    985c:	d1f9      	bne.n	9852 <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    985e:	4b34      	ldr	r3, [pc, #208]	; (9930 <S_Nv_EarlyInit+0x330>)
    9860:	4798      	blx	r3
    9862:	2800      	cmp	r0, #0
    9864:	d000      	beq.n	9868 <S_Nv_EarlyInit+0x268>
    9866:	e75e      	b.n	9726 <S_Nv_EarlyInit+0x126>
            assert(false);
    9868:	4b27      	ldr	r3, [pc, #156]	; (9908 <S_Nv_EarlyInit+0x308>)
    986a:	4a32      	ldr	r2, [pc, #200]	; (9934 <S_Nv_EarlyInit+0x334>)
    986c:	4932      	ldr	r1, [pc, #200]	; (9938 <S_Nv_EarlyInit+0x338>)
    986e:	4829      	ldr	r0, [pc, #164]	; (9914 <S_Nv_EarlyInit+0x314>)
    9870:	4c29      	ldr	r4, [pc, #164]	; (9918 <S_Nv_EarlyInit+0x318>)
    9872:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    9874:	ab02      	add	r3, sp, #8
    9876:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9878:	4a1d      	ldr	r2, [pc, #116]	; (98f0 <S_Nv_EarlyInit+0x2f0>)
    987a:	210e      	movs	r1, #14
    987c:	0018      	movs	r0, r3
    987e:	4b1d      	ldr	r3, [pc, #116]	; (98f4 <S_Nv_EarlyInit+0x2f4>)
    9880:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    9882:	4287      	cmp	r7, r0
    9884:	d091      	beq.n	97aa <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    9886:	0021      	movs	r1, r4
    9888:	2010      	movs	r0, #16
    988a:	4b18      	ldr	r3, [pc, #96]	; (98ec <S_Nv_EarlyInit+0x2ec>)
    988c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    988e:	882b      	ldrh	r3, [r5, #0]
    9890:	4a26      	ldr	r2, [pc, #152]	; (992c <S_Nv_EarlyInit+0x32c>)
    9892:	4293      	cmp	r3, r2
    9894:	d900      	bls.n	9898 <S_Nv_EarlyInit+0x298>
    9896:	e746      	b.n	9726 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    9898:	aa06      	add	r2, sp, #24
    989a:	8a12      	ldrh	r2, [r2, #16]
    989c:	4914      	ldr	r1, [pc, #80]	; (98f0 <S_Nv_EarlyInit+0x2f0>)
    989e:	428a      	cmp	r2, r1
    98a0:	d002      	beq.n	98a8 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    98a2:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    98a4:	429a      	cmp	r2, r3
    98a6:	d803      	bhi.n	98b0 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    98a8:	2102      	movs	r1, #2
    98aa:	2000      	movs	r0, #0
    98ac:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    98ae:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    98b0:	8831      	ldrh	r1, [r6, #0]
    98b2:	4b0c      	ldr	r3, [pc, #48]	; (98e4 <S_Nv_EarlyInit+0x2e4>)
    98b4:	7818      	ldrb	r0, [r3, #0]
    98b6:	2310      	movs	r3, #16
    98b8:	aa02      	add	r2, sp, #8
    98ba:	4f09      	ldr	r7, [pc, #36]	; (98e0 <S_Nv_EarlyInit+0x2e0>)
    98bc:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    98be:	ab02      	add	r3, sp, #8
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	2bff      	cmp	r3, #255	; 0xff
    98c4:	d1d6      	bne.n	9874 <S_Nv_EarlyInit+0x274>
    98c6:	ab02      	add	r3, sp, #8
    98c8:	210f      	movs	r1, #15
    98ca:	469c      	mov	ip, r3
    98cc:	4461      	add	r1, ip
    98ce:	785a      	ldrb	r2, [r3, #1]
    98d0:	2aff      	cmp	r2, #255	; 0xff
    98d2:	d1cf      	bne.n	9874 <S_Nv_EarlyInit+0x274>
    98d4:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    98d6:	428b      	cmp	r3, r1
    98d8:	d1f9      	bne.n	98ce <S_Nv_EarlyInit+0x2ce>
    98da:	e724      	b.n	9726 <S_Nv_EarlyInit+0x126>
    98dc:	20000348 	.word	0x20000348
    98e0:	0000883d 	.word	0x0000883d
    98e4:	20000350 	.word	0x20000350
    98e8:	20000352 	.word	0x20000352
    98ec:	00008aa9 	.word	0x00008aa9
    98f0:	0000ffff 	.word	0x0000ffff
    98f4:	00008ae5 	.word	0x00008ae5
    98f8:	00008de9 	.word	0x00008de9
    98fc:	2000034a 	.word	0x2000034a
    9900:	00008e51 	.word	0x00008e51
    9904:	2000031c 	.word	0x2000031c
    9908:	00010f54 	.word	0x00010f54
    990c:	0001110c 	.word	0x0001110c
    9910:	0000052b 	.word	0x0000052b
    9914:	00010fd0 	.word	0x00010fd0
    9918:	0000f8b9 	.word	0x0000f8b9
    991c:	00008c85 	.word	0x00008c85
    9920:	00008d15 	.word	0x00008d15
    9924:	00008d75 	.word	0x00008d75
    9928:	00008bdd 	.word	0x00008bdd
    992c:	00001fff 	.word	0x00001fff
    9930:	00008f51 	.word	0x00008f51
    9934:	000110cc 	.word	0x000110cc
    9938:	00000336 	.word	0x00000336

0000993c <S_Nv_Init>:


void S_Nv_Init(void)
{
    993c:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    993e:	4b08      	ldr	r3, [pc, #32]	; (9960 <S_Nv_Init+0x24>)
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	2b00      	cmp	r3, #0
    9944:	d008      	beq.n	9958 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    9946:	4b07      	ldr	r3, [pc, #28]	; (9964 <S_Nv_Init+0x28>)
    9948:	4a07      	ldr	r2, [pc, #28]	; (9968 <S_Nv_Init+0x2c>)
    994a:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    994c:	4a07      	ldr	r2, [pc, #28]	; (996c <S_Nv_Init+0x30>)
    994e:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    9950:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9952:	2200      	movs	r2, #0
    9954:	731a      	strb	r2, [r3, #12]
}
    9956:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    9958:	4b05      	ldr	r3, [pc, #20]	; (9970 <S_Nv_Init+0x34>)
    995a:	4798      	blx	r3
    995c:	e7f3      	b.n	9946 <S_Nv_Init+0xa>
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	2000031c 	.word	0x2000031c
    9964:	20000304 	.word	0x20000304
    9968:	00008dc5 	.word	0x00008dc5
    996c:	00001b58 	.word	0x00001b58
    9970:	00009601 	.word	0x00009601

00009974 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9974:	b5f0      	push	{r4, r5, r6, r7, lr}
    9976:	46ce      	mov	lr, r9
    9978:	4647      	mov	r7, r8
    997a:	b580      	push	{r7, lr}
    997c:	b087      	sub	sp, #28
    997e:	0004      	movs	r4, r0
    9980:	9101      	str	r1, [sp, #4]
    9982:	0015      	movs	r5, r2
    9984:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    9986:	2800      	cmp	r0, #0
    9988:	d00c      	beq.n	99a4 <S_Nv_Write_Impl+0x30>
    998a:	2b00      	cmp	r3, #0
    998c:	d00a      	beq.n	99a4 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    998e:	4b35      	ldr	r3, [pc, #212]	; (9a64 <S_Nv_Write_Impl+0xf0>)
    9990:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9992:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9994:	2800      	cmp	r0, #0
    9996:	d00b      	beq.n	99b0 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    9998:	0018      	movs	r0, r3
    999a:	b007      	add	sp, #28
    999c:	bc0c      	pop	{r2, r3}
    999e:	4690      	mov	r8, r2
    99a0:	4699      	mov	r9, r3
    99a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    99a4:	4b30      	ldr	r3, [pc, #192]	; (9a68 <S_Nv_Write_Impl+0xf4>)
    99a6:	4a31      	ldr	r2, [pc, #196]	; (9a6c <S_Nv_Write_Impl+0xf8>)
    99a8:	4931      	ldr	r1, [pc, #196]	; (9a70 <S_Nv_Write_Impl+0xfc>)
    99aa:	4832      	ldr	r0, [pc, #200]	; (9a74 <S_Nv_Write_Impl+0x100>)
    99ac:	4c32      	ldr	r4, [pc, #200]	; (9a78 <S_Nv_Write_Impl+0x104>)
    99ae:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    99b0:	0028      	movs	r0, r5
    99b2:	3010      	adds	r0, #16
    99b4:	b280      	uxth	r0, r0
    99b6:	4b31      	ldr	r3, [pc, #196]	; (9a7c <S_Nv_Write_Impl+0x108>)
    99b8:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    99ba:	0020      	movs	r0, r4
    99bc:	4b30      	ldr	r3, [pc, #192]	; (9a80 <S_Nv_Write_Impl+0x10c>)
    99be:	4798      	blx	r3
    99c0:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    99c2:	2303      	movs	r3, #3
    if ( cache == NULL )
    99c4:	2800      	cmp	r0, #0
    99c6:	d0e7      	beq.n	9998 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    99c8:	7883      	ldrb	r3, [r0, #2]
    99ca:	78c4      	ldrb	r4, [r0, #3]
    99cc:	0224      	lsls	r4, r4, #8
    99ce:	431c      	orrs	r4, r3
    99d0:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    99d2:	4b2c      	ldr	r3, [pc, #176]	; (9a84 <S_Nv_Write_Impl+0x110>)
    99d4:	7818      	ldrb	r0, [r3, #0]
    99d6:	2310      	movs	r3, #16
    99d8:	aa02      	add	r2, sp, #8
    99da:	0021      	movs	r1, r4
    99dc:	4c2a      	ldr	r4, [pc, #168]	; (9a88 <S_Nv_Write_Impl+0x114>)
    99de:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    99e0:	ab02      	add	r3, sp, #8
    99e2:	8919      	ldrh	r1, [r3, #8]
    99e4:	9b01      	ldr	r3, [sp, #4]
    99e6:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    99e8:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    99ea:	428a      	cmp	r2, r1
    99ec:	d8d4      	bhi.n	9998 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    99ee:	ab02      	add	r3, sp, #8
    99f0:	466a      	mov	r2, sp
    99f2:	8892      	ldrh	r2, [r2, #4]
    99f4:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    99f6:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    99f8:	4642      	mov	r2, r8
    99fa:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    99fc:	428d      	cmp	r5, r1
    99fe:	d02c      	beq.n	9a5a <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9a00:	ab02      	add	r3, sp, #8
    9a02:	899b      	ldrh	r3, [r3, #12]
    9a04:	3301      	adds	r3, #1
    9a06:	aa02      	add	r2, sp, #8
    9a08:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    9a0a:	4b20      	ldr	r3, [pc, #128]	; (9a8c <S_Nv_Write_Impl+0x118>)
    9a0c:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9a0e:	0039      	movs	r1, r7
    9a10:	a802      	add	r0, sp, #8
    9a12:	4b1f      	ldr	r3, [pc, #124]	; (9a90 <S_Nv_Write_Impl+0x11c>)
    9a14:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9a16:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9a18:	2800      	cmp	r0, #0
    9a1a:	d0bd      	beq.n	9998 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    9a1c:	70b4      	strb	r4, [r6, #2]
    9a1e:	0a24      	lsrs	r4, r4, #8
    9a20:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9a22:	ab02      	add	r3, sp, #8
    9a24:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9a26:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9a28:	2a64      	cmp	r2, #100	; 0x64
    9a2a:	d9b5      	bls.n	9998 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    9a2c:	ab02      	add	r3, sp, #8
    9a2e:	885a      	ldrh	r2, [r3, #2]
    9a30:	4b18      	ldr	r3, [pc, #96]	; (9a94 <S_Nv_Write_Impl+0x120>)
    9a32:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    9a34:	2200      	movs	r2, #0
    9a36:	4b18      	ldr	r3, [pc, #96]	; (9a98 <S_Nv_Write_Impl+0x124>)
    9a38:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    9a3a:	4818      	ldr	r0, [pc, #96]	; (9a9c <S_Nv_Write_Impl+0x128>)
    9a3c:	4b18      	ldr	r3, [pc, #96]	; (9aa0 <S_Nv_Write_Impl+0x12c>)
    9a3e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9a40:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    9a42:	2800      	cmp	r0, #0
    9a44:	d1a8      	bne.n	9998 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    9a46:	4b15      	ldr	r3, [pc, #84]	; (9a9c <S_Nv_Write_Impl+0x128>)
    9a48:	4a16      	ldr	r2, [pc, #88]	; (9aa4 <S_Nv_Write_Impl+0x130>)
    9a4a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    9a4c:	4a16      	ldr	r2, [pc, #88]	; (9aa8 <S_Nv_Write_Impl+0x134>)
    9a4e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    9a50:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9a52:	2200      	movs	r2, #0
    9a54:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9a56:	2300      	movs	r3, #0
    9a58:	e79e      	b.n	9998 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    9a5a:	2300      	movs	r3, #0
    9a5c:	aa02      	add	r2, sp, #8
    9a5e:	8193      	strh	r3, [r2, #12]
    9a60:	e7d3      	b.n	9a0a <S_Nv_Write_Impl+0x96>
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	00008a8d 	.word	0x00008a8d
    9a68:	00011064 	.word	0x00011064
    9a6c:	00011130 	.word	0x00011130
    9a70:	00000596 	.word	0x00000596
    9a74:	00010fd0 	.word	0x00010fd0
    9a78:	0000f8b9 	.word	0x0000f8b9
    9a7c:	00009201 	.word	0x00009201
    9a80:	00008c85 	.word	0x00008c85
    9a84:	20000350 	.word	0x20000350
    9a88:	0000883d 	.word	0x0000883d
    9a8c:	20000352 	.word	0x20000352
    9a90:	000094b5 	.word	0x000094b5
    9a94:	20000318 	.word	0x20000318
    9a98:	2000031a 	.word	0x2000031a
    9a9c:	200001d8 	.word	0x200001d8
    9aa0:	0000cf0d 	.word	0x0000cf0d
    9aa4:	000094a9 	.word	0x000094a9
    9aa8:	00000bb8 	.word	0x00000bb8

00009aac <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aae:	b083      	sub	sp, #12
    9ab0:	000c      	movs	r4, r1
    9ab2:	0015      	movs	r5, r2
    9ab4:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    9ab6:	2800      	cmp	r0, #0
    9ab8:	d009      	beq.n	9ace <S_Nv_Read_Impl+0x22>
    9aba:	2b00      	cmp	r3, #0
    9abc:	d007      	beq.n	9ace <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    9abe:	4b10      	ldr	r3, [pc, #64]	; (9b00 <S_Nv_Read_Impl+0x54>)
    9ac0:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    9ac2:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    9ac4:	2800      	cmp	r0, #0
    9ac6:	d108      	bne.n	9ada <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    9ac8:	0018      	movs	r0, r3
    9aca:	b003      	add	sp, #12
    9acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    9ace:	4b0d      	ldr	r3, [pc, #52]	; (9b04 <S_Nv_Read_Impl+0x58>)
    9ad0:	4a0d      	ldr	r2, [pc, #52]	; (9b08 <S_Nv_Read_Impl+0x5c>)
    9ad2:	490e      	ldr	r1, [pc, #56]	; (9b0c <S_Nv_Read_Impl+0x60>)
    9ad4:	480e      	ldr	r0, [pc, #56]	; (9b10 <S_Nv_Read_Impl+0x64>)
    9ad6:	4c0f      	ldr	r4, [pc, #60]	; (9b14 <S_Nv_Read_Impl+0x68>)
    9ad8:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9ada:	1962      	adds	r2, r4, r5
    9adc:	490e      	ldr	r1, [pc, #56]	; (9b18 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    9ade:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9ae0:	428a      	cmp	r2, r1
    9ae2:	d8f1      	bhi.n	9ac8 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    9ae4:	4b0d      	ldr	r3, [pc, #52]	; (9b1c <S_Nv_Read_Impl+0x70>)
    9ae6:	781f      	ldrb	r7, [r3, #0]
    9ae8:	9600      	str	r6, [sp, #0]
    9aea:	002b      	movs	r3, r5
    9aec:	0022      	movs	r2, r4
    9aee:	0001      	movs	r1, r0
    9af0:	0038      	movs	r0, r7
    9af2:	4c0b      	ldr	r4, [pc, #44]	; (9b20 <S_Nv_Read_Impl+0x74>)
    9af4:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9af6:	4243      	negs	r3, r0
    9af8:	4143      	adcs	r3, r0
    9afa:	009b      	lsls	r3, r3, #2
    9afc:	e7e4      	b.n	9ac8 <S_Nv_Read_Impl+0x1c>
    9afe:	46c0      	nop			; (mov r8, r8)
    9b00:	00008cf9 	.word	0x00008cf9
    9b04:	00011064 	.word	0x00011064
    9b08:	00011140 	.word	0x00011140
    9b0c:	000005ee 	.word	0x000005ee
    9b10:	00010fd0 	.word	0x00010fd0
    9b14:	0000f8b9 	.word	0x0000f8b9
    9b18:	0000ffff 	.word	0x0000ffff
    9b1c:	20000350 	.word	0x20000350
    9b20:	00008b25 	.word	0x00008b25

00009b24 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    9b24:	b510      	push	{r4, lr}
    9b26:	b084      	sub	sp, #16
    assert(id != 0u);
    9b28:	2800      	cmp	r0, #0
    9b2a:	d005      	beq.n	9b38 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9b2c:	4b0a      	ldr	r3, [pc, #40]	; (9b58 <S_Nv_ItemLength_Impl+0x34>)
    9b2e:	4798      	blx	r3
    9b30:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    9b32:	d107      	bne.n	9b44 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    9b34:	b004      	add	sp, #16
    9b36:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9b38:	4b08      	ldr	r3, [pc, #32]	; (9b5c <S_Nv_ItemLength_Impl+0x38>)
    9b3a:	4a09      	ldr	r2, [pc, #36]	; (9b60 <S_Nv_ItemLength_Impl+0x3c>)
    9b3c:	4909      	ldr	r1, [pc, #36]	; (9b64 <S_Nv_ItemLength_Impl+0x40>)
    9b3e:	480a      	ldr	r0, [pc, #40]	; (9b68 <S_Nv_ItemLength_Impl+0x44>)
    9b40:	4c0a      	ldr	r4, [pc, #40]	; (9b6c <S_Nv_ItemLength_Impl+0x48>)
    9b42:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9b44:	4b0a      	ldr	r3, [pc, #40]	; (9b70 <S_Nv_ItemLength_Impl+0x4c>)
    9b46:	7818      	ldrb	r0, [r3, #0]
    9b48:	2310      	movs	r3, #16
    9b4a:	466a      	mov	r2, sp
    9b4c:	4c09      	ldr	r4, [pc, #36]	; (9b74 <S_Nv_ItemLength_Impl+0x50>)
    9b4e:	47a0      	blx	r4
    return blockHeader.itemLength;
    9b50:	466b      	mov	r3, sp
    9b52:	8918      	ldrh	r0, [r3, #8]
    9b54:	e7ee      	b.n	9b34 <S_Nv_ItemLength_Impl+0x10>
    9b56:	46c0      	nop			; (mov r8, r8)
    9b58:	00008cf9 	.word	0x00008cf9
    9b5c:	00011058 	.word	0x00011058
    9b60:	00011150 	.word	0x00011150
    9b64:	0000060b 	.word	0x0000060b
    9b68:	00010fd0 	.word	0x00010fd0
    9b6c:	0000f8b9 	.word	0x0000f8b9
    9b70:	20000350 	.word	0x20000350
    9b74:	0000883d 	.word	0x0000883d

00009b78 <S_Nv_ItemInit_Impl>:
{
    9b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b7a:	b085      	sub	sp, #20
    9b7c:	0004      	movs	r4, r0
    9b7e:	000e      	movs	r6, r1
    9b80:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9b82:	1e43      	subs	r3, r0, #1
    9b84:	b29b      	uxth	r3, r3
    9b86:	4a2e      	ldr	r2, [pc, #184]	; (9c40 <S_Nv_ItemInit_Impl+0xc8>)
    9b88:	4293      	cmp	r3, r2
    9b8a:	d81e      	bhi.n	9bca <S_Nv_ItemInit_Impl+0x52>
    9b8c:	2380      	movs	r3, #128	; 0x80
    9b8e:	011b      	lsls	r3, r3, #4
    9b90:	4299      	cmp	r1, r3
    9b92:	d81a      	bhi.n	9bca <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    9b94:	4b2b      	ldr	r3, [pc, #172]	; (9c44 <S_Nv_ItemInit_Impl+0xcc>)
    9b96:	4798      	blx	r3
    9b98:	2800      	cmp	r0, #0
    9b9a:	d01d      	beq.n	9bd8 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    9b9c:	0020      	movs	r0, r4
    9b9e:	4b2a      	ldr	r3, [pc, #168]	; (9c48 <S_Nv_ItemInit_Impl+0xd0>)
    9ba0:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    9ba2:	4286      	cmp	r6, r0
    9ba4:	d007      	beq.n	9bb6 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    9ba6:	4b29      	ldr	r3, [pc, #164]	; (9c4c <S_Nv_ItemInit_Impl+0xd4>)
    9ba8:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    9baa:	4b29      	ldr	r3, [pc, #164]	; (9c50 <S_Nv_ItemInit_Impl+0xd8>)
    9bac:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9bae:	4b29      	ldr	r3, [pc, #164]	; (9c54 <S_Nv_ItemInit_Impl+0xdc>)
    9bb0:	4798      	blx	r3
    9bb2:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    9bb4:	d115      	bne.n	9be2 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    9bb6:	2d00      	cmp	r5, #0
    9bb8:	d040      	beq.n	9c3c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    9bba:	002b      	movs	r3, r5
    9bbc:	0032      	movs	r2, r6
    9bbe:	2100      	movs	r1, #0
    9bc0:	0020      	movs	r0, r4
    9bc2:	4c25      	ldr	r4, [pc, #148]	; (9c58 <S_Nv_ItemInit_Impl+0xe0>)
    9bc4:	47a0      	blx	r4
    9bc6:	0003      	movs	r3, r0
    9bc8:	e00b      	b.n	9be2 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9bca:	4b24      	ldr	r3, [pc, #144]	; (9c5c <S_Nv_ItemInit_Impl+0xe4>)
    9bcc:	4a24      	ldr	r2, [pc, #144]	; (9c60 <S_Nv_ItemInit_Impl+0xe8>)
    9bce:	21aa      	movs	r1, #170	; 0xaa
    9bd0:	00c9      	lsls	r1, r1, #3
    9bd2:	4824      	ldr	r0, [pc, #144]	; (9c64 <S_Nv_ItemInit_Impl+0xec>)
    9bd4:	4c24      	ldr	r4, [pc, #144]	; (9c68 <S_Nv_ItemInit_Impl+0xf0>)
    9bd6:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    9bd8:	4b24      	ldr	r3, [pc, #144]	; (9c6c <S_Nv_ItemInit_Impl+0xf4>)
    9bda:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9bdc:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9bde:	2800      	cmp	r0, #0
    9be0:	d002      	beq.n	9be8 <S_Nv_ItemInit_Impl+0x70>
}
    9be2:	0018      	movs	r0, r3
    9be4:	b005      	add	sp, #20
    9be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9be8:	0030      	movs	r0, r6
    9bea:	3010      	adds	r0, #16
    9bec:	b280      	uxth	r0, r0
    9bee:	4b20      	ldr	r3, [pc, #128]	; (9c70 <S_Nv_ItemInit_Impl+0xf8>)
    9bf0:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    9bf2:	4b20      	ldr	r3, [pc, #128]	; (9c74 <S_Nv_ItemInit_Impl+0xfc>)
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	2b09      	cmp	r3, #9
    9bf8:	d819      	bhi.n	9c2e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    9bfa:	4b1f      	ldr	r3, [pc, #124]	; (9c78 <S_Nv_ItemInit_Impl+0x100>)
    9bfc:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    9bfe:	466b      	mov	r3, sp
    9c00:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    9c02:	2300      	movs	r3, #0
    9c04:	466a      	mov	r2, sp
    9c06:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9c08:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    9c0a:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9c0c:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    9c0e:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9c10:	0029      	movs	r1, r5
    9c12:	4668      	mov	r0, sp
    9c14:	4b19      	ldr	r3, [pc, #100]	; (9c7c <S_Nv_ItemInit_Impl+0x104>)
    9c16:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9c18:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9c1a:	2800      	cmp	r0, #0
    9c1c:	d0e1      	beq.n	9be2 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    9c1e:	0020      	movs	r0, r4
    9c20:	4b17      	ldr	r3, [pc, #92]	; (9c80 <S_Nv_ItemInit_Impl+0x108>)
    9c22:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    9c24:	7087      	strb	r7, [r0, #2]
    9c26:	0a3f      	lsrs	r7, r7, #8
    9c28:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    9c2a:	2302      	movs	r3, #2
    9c2c:	e7d9      	b.n	9be2 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9c2e:	4b15      	ldr	r3, [pc, #84]	; (9c84 <S_Nv_ItemInit_Impl+0x10c>)
    9c30:	4a0b      	ldr	r2, [pc, #44]	; (9c60 <S_Nv_ItemInit_Impl+0xe8>)
    9c32:	21af      	movs	r1, #175	; 0xaf
    9c34:	00c9      	lsls	r1, r1, #3
    9c36:	480b      	ldr	r0, [pc, #44]	; (9c64 <S_Nv_ItemInit_Impl+0xec>)
    9c38:	4c0b      	ldr	r4, [pc, #44]	; (9c68 <S_Nv_ItemInit_Impl+0xf0>)
    9c3a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9c3c:	2300      	movs	r3, #0
    9c3e:	e7d0      	b.n	9be2 <S_Nv_ItemInit_Impl+0x6a>
    9c40:	0000effe 	.word	0x0000effe
    9c44:	00008cf9 	.word	0x00008cf9
    9c48:	00009b25 	.word	0x00009b25
    9c4c:	20000318 	.word	0x20000318
    9c50:	2000031a 	.word	0x2000031a
    9c54:	0000927d 	.word	0x0000927d
    9c58:	00009aad 	.word	0x00009aad
    9c5c:	00011018 	.word	0x00011018
    9c60:	0001111c 	.word	0x0001111c
    9c64:	00010fd0 	.word	0x00010fd0
    9c68:	0000f8b9 	.word	0x0000f8b9
    9c6c:	00008a8d 	.word	0x00008a8d
    9c70:	00009201 	.word	0x00009201
    9c74:	20000348 	.word	0x20000348
    9c78:	20000352 	.word	0x20000352
    9c7c:	000094b5 	.word	0x000094b5
    9c80:	00008d15 	.word	0x00008d15
    9c84:	00010f78 	.word	0x00010f78

00009c88 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    9c88:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    9c8a:	4b03      	ldr	r3, [pc, #12]	; (9c98 <S_Nv_IsItemAvailable_Impl+0x10>)
    9c8c:	4798      	blx	r3
    9c8e:	1e43      	subs	r3, r0, #1
    9c90:	4198      	sbcs	r0, r3
    9c92:	b2c0      	uxtb	r0, r0
}
    9c94:	bd10      	pop	{r4, pc}
    9c96:	46c0      	nop			; (mov r8, r8)
    9c98:	00008cf9 	.word	0x00008cf9

00009c9c <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    9c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c9e:	46d6      	mov	lr, sl
    9ca0:	4647      	mov	r7, r8
    9ca2:	b580      	push	{r7, lr}
    9ca4:	b087      	sub	sp, #28
    9ca6:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    9ca8:	4b24      	ldr	r3, [pc, #144]	; (9d3c <pdsInitItemMask+0xa0>)
    9caa:	4298      	cmp	r0, r3
    9cac:	d012      	beq.n	9cd4 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9cae:	0443      	lsls	r3, r0, #17
    9cb0:	d41c      	bmi.n	9cec <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    9cb2:	08c3      	lsrs	r3, r0, #3
    9cb4:	18cf      	adds	r7, r1, r3
    9cb6:	2307      	movs	r3, #7
    9cb8:	4018      	ands	r0, r3
    9cba:	3b06      	subs	r3, #6
    9cbc:	4083      	lsls	r3, r0
    9cbe:	783a      	ldrb	r2, [r7, #0]
    9cc0:	4313      	orrs	r3, r2
    9cc2:	703b      	strb	r3, [r7, #0]
  }

  return true;
    9cc4:	2301      	movs	r3, #1
    9cc6:	9301      	str	r3, [sp, #4]
}
    9cc8:	9801      	ldr	r0, [sp, #4]
    9cca:	b007      	add	sp, #28
    9ccc:	bc0c      	pop	{r2, r3}
    9cce:	4690      	mov	r8, r2
    9cd0:	469a      	mov	sl, r3
    9cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    9cd4:	2202      	movs	r2, #2
    9cd6:	21ff      	movs	r1, #255	; 0xff
    9cd8:	0038      	movs	r0, r7
    9cda:	4b19      	ldr	r3, [pc, #100]	; (9d40 <pdsInitItemMask+0xa4>)
    9cdc:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    9cde:	783b      	ldrb	r3, [r7, #0]
    9ce0:	2201      	movs	r2, #1
    9ce2:	4393      	bics	r3, r2
    9ce4:	703b      	strb	r3, [r7, #0]
  return true;
    9ce6:	2301      	movs	r3, #1
    9ce8:	9301      	str	r3, [sp, #4]
    9cea:	e7ed      	b.n	9cc8 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    9cec:	a904      	add	r1, sp, #16
    9cee:	4b15      	ldr	r3, [pc, #84]	; (9d44 <pdsInitItemMask+0xa8>)
    9cf0:	4798      	blx	r3
    9cf2:	9001      	str	r0, [sp, #4]
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d0e7      	beq.n	9cc8 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9cf8:	ab04      	add	r3, sp, #16
    9cfa:	889b      	ldrh	r3, [r3, #4]
    9cfc:	4698      	mov	r8, r3
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d0e2      	beq.n	9cc8 <pdsInitItemMask+0x2c>
    9d02:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9d04:	ab02      	add	r3, sp, #8
    9d06:	1d9d      	adds	r5, r3, #6
    9d08:	4b0f      	ldr	r3, [pc, #60]	; (9d48 <pdsInitItemMask+0xac>)
    9d0a:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9d0c:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9d0e:	0061      	lsls	r1, r4, #1
    9d10:	9b04      	ldr	r3, [sp, #16]
    9d12:	469c      	mov	ip, r3
    9d14:	4461      	add	r1, ip
    9d16:	2202      	movs	r2, #2
    9d18:	0028      	movs	r0, r5
    9d1a:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9d1c:	8829      	ldrh	r1, [r5, #0]
    9d1e:	08ca      	lsrs	r2, r1, #3
    9d20:	18ba      	adds	r2, r7, r2
    9d22:	4031      	ands	r1, r6
    9d24:	2301      	movs	r3, #1
    9d26:	408b      	lsls	r3, r1
    9d28:	7811      	ldrb	r1, [r2, #0]
    9d2a:	430b      	orrs	r3, r1
    9d2c:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9d2e:	3401      	adds	r4, #1
    9d30:	b2e4      	uxtb	r4, r4
    9d32:	b2a3      	uxth	r3, r4
    9d34:	4543      	cmp	r3, r8
    9d36:	d3ea      	bcc.n	9d0e <pdsInitItemMask+0x72>
    9d38:	e7c6      	b.n	9cc8 <pdsInitItemMask+0x2c>
    9d3a:	46c0      	nop			; (mov r8, r8)
    9d3c:	00004002 	.word	0x00004002
    9d40:	0000f98d 	.word	0x0000f98d
    9d44:	0000a1b1 	.word	0x0000a1b1
    9d48:	0000f97b 	.word	0x0000f97b

00009d4c <PDS_Restore>:
{
    9d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d4e:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    9d50:	a907      	add	r1, sp, #28
    9d52:	2300      	movs	r3, #0
    9d54:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    9d56:	4b2b      	ldr	r3, [pc, #172]	; (9e04 <PDS_Restore+0xb8>)
    9d58:	4798      	blx	r3
    9d5a:	9001      	str	r0, [sp, #4]
    9d5c:	2600      	movs	r6, #0
    9d5e:	2800      	cmp	r0, #0
    9d60:	d148      	bne.n	9df4 <PDS_Restore+0xa8>
    9d62:	e041      	b.n	9de8 <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9d64:	4b28      	ldr	r3, [pc, #160]	; (9e08 <PDS_Restore+0xbc>)
    9d66:	4a29      	ldr	r2, [pc, #164]	; (9e0c <PDS_Restore+0xc0>)
    9d68:	21ab      	movs	r1, #171	; 0xab
    9d6a:	0049      	lsls	r1, r1, #1
    9d6c:	4828      	ldr	r0, [pc, #160]	; (9e10 <PDS_Restore+0xc4>)
    9d6e:	4c29      	ldr	r4, [pc, #164]	; (9e14 <PDS_Restore+0xc8>)
    9d70:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9d72:	4b29      	ldr	r3, [pc, #164]	; (9e18 <PDS_Restore+0xcc>)
    9d74:	4a25      	ldr	r2, [pc, #148]	; (9e0c <PDS_Restore+0xc0>)
    9d76:	2168      	movs	r1, #104	; 0x68
    9d78:	31ff      	adds	r1, #255	; 0xff
    9d7a:	4825      	ldr	r0, [pc, #148]	; (9e10 <PDS_Restore+0xc4>)
    9d7c:	4c25      	ldr	r4, [pc, #148]	; (9e14 <PDS_Restore+0xc8>)
    9d7e:	47a0      	blx	r4
    9d80:	3701      	adds	r7, #1
    9d82:	3501      	adds	r5, #1
    9d84:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    9d86:	2f08      	cmp	r7, #8
    9d88:	d031      	beq.n	9dee <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    9d8a:	ab07      	add	r3, sp, #28
    9d8c:	5cf3      	ldrb	r3, [r6, r3]
    9d8e:	40fb      	lsrs	r3, r7
    9d90:	07db      	lsls	r3, r3, #31
    9d92:	d5f5      	bpl.n	9d80 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    9d94:	a903      	add	r1, sp, #12
    9d96:	0028      	movs	r0, r5
    9d98:	4b20      	ldr	r3, [pc, #128]	; (9e1c <PDS_Restore+0xd0>)
    9d9a:	4798      	blx	r3
    9d9c:	2800      	cmp	r0, #0
    9d9e:	d021      	beq.n	9de4 <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9da0:	ab03      	add	r3, sp, #12
    9da2:	885b      	ldrh	r3, [r3, #2]
    9da4:	2b00      	cmp	r3, #0
    9da6:	d0dd      	beq.n	9d64 <PDS_Restore+0x18>
    9da8:	9b04      	ldr	r3, [sp, #16]
    9daa:	2b00      	cmp	r3, #0
    9dac:	d0da      	beq.n	9d64 <PDS_Restore+0x18>
    if (itemDescr.filler)
    9dae:	9b05      	ldr	r3, [sp, #20]
    9db0:	2b00      	cmp	r3, #0
    9db2:	d000      	beq.n	9db6 <PDS_Restore+0x6a>
      itemDescr.filler();
    9db4:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    9db6:	0028      	movs	r0, r5
    9db8:	4b19      	ldr	r3, [pc, #100]	; (9e20 <PDS_Restore+0xd4>)
    9dba:	4798      	blx	r3
    9dbc:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    9dbe:	ab03      	add	r3, sp, #12
    9dc0:	9a04      	ldr	r2, [sp, #16]
    9dc2:	8859      	ldrh	r1, [r3, #2]
    9dc4:	0028      	movs	r0, r5
    9dc6:	4b17      	ldr	r3, [pc, #92]	; (9e24 <PDS_Restore+0xd8>)
    9dc8:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9dca:	2802      	cmp	r0, #2
    9dcc:	d016      	beq.n	9dfc <PDS_Restore+0xb0>
    9dce:	2800      	cmp	r0, #0
    9dd0:	d1cf      	bne.n	9d72 <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    9dd2:	ab03      	add	r3, sp, #12
    9dd4:	885a      	ldrh	r2, [r3, #2]
    9dd6:	9904      	ldr	r1, [sp, #16]
    9dd8:	0023      	movs	r3, r4
    9dda:	0028      	movs	r0, r5
    9ddc:	4c12      	ldr	r4, [pc, #72]	; (9e28 <PDS_Restore+0xdc>)
    9dde:	47a0      	blx	r4
    9de0:	2800      	cmp	r0, #0
    9de2:	d1cd      	bne.n	9d80 <PDS_Restore+0x34>
          return false;
    9de4:	2300      	movs	r3, #0
    9de6:	9301      	str	r3, [sp, #4]
}
    9de8:	9801      	ldr	r0, [sp, #4]
    9dea:	b009      	add	sp, #36	; 0x24
    9dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dee:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    9df0:	2e02      	cmp	r6, #2
    9df2:	d0f9      	beq.n	9de8 <PDS_Restore+0x9c>
    9df4:	00f5      	lsls	r5, r6, #3
    9df6:	b2ad      	uxth	r5, r5
{
    9df8:	2700      	movs	r7, #0
    9dfa:	e7c6      	b.n	9d8a <PDS_Restore+0x3e>
          return false;
    9dfc:	2300      	movs	r3, #0
    9dfe:	9301      	str	r3, [sp, #4]
    9e00:	e7f2      	b.n	9de8 <PDS_Restore+0x9c>
    9e02:	46c0      	nop			; (mov r8, r8)
    9e04:	00009c9d 	.word	0x00009c9d
    9e08:	00011168 	.word	0x00011168
    9e0c:	00011260 	.word	0x00011260
    9e10:	000111a4 	.word	0x000111a4
    9e14:	0000f8b9 	.word	0x0000f8b9
    9e18:	000111f0 	.word	0x000111f0
    9e1c:	0000a10d 	.word	0x0000a10d
    9e20:	00009b25 	.word	0x00009b25
    9e24:	00009b79 	.word	0x00009b79
    9e28:	0000a16d 	.word	0x0000a16d

00009e2c <PDS_Store>:
{
    9e2c:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    9e2e:	4905      	ldr	r1, [pc, #20]	; (9e44 <PDS_Store+0x18>)
    9e30:	4b05      	ldr	r3, [pc, #20]	; (9e48 <PDS_Store+0x1c>)
    9e32:	4798      	blx	r3
    9e34:	1e04      	subs	r4, r0, #0
    9e36:	d101      	bne.n	9e3c <PDS_Store+0x10>
}
    9e38:	0020      	movs	r0, r4
    9e3a:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9e3c:	2000      	movs	r0, #0
    9e3e:	4b03      	ldr	r3, [pc, #12]	; (9e4c <PDS_Store+0x20>)
    9e40:	4798      	blx	r3
  return true;
    9e42:	e7f9      	b.n	9e38 <PDS_Store+0xc>
    9e44:	20000358 	.word	0x20000358
    9e48:	00009c9d 	.word	0x00009c9d
    9e4c:	0000a0b9 	.word	0x0000a0b9

00009e50 <pdsStoreItemTaskHandler>:
{
    9e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e52:	46de      	mov	lr, fp
    9e54:	4657      	mov	r7, sl
    9e56:	464e      	mov	r6, r9
    9e58:	4645      	mov	r5, r8
    9e5a:	b5e0      	push	{r5, r6, r7, lr}
    9e5c:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    9e5e:	4b51      	ldr	r3, [pc, #324]	; (9fa4 <pdsStoreItemTaskHandler+0x154>)
    9e60:	7818      	ldrb	r0, [r3, #0]
    9e62:	3001      	adds	r0, #1
    9e64:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9e66:	4b50      	ldr	r3, [pc, #320]	; (9fa8 <pdsStoreItemTaskHandler+0x158>)
    9e68:	781b      	ldrb	r3, [r3, #0]
    9e6a:	3301      	adds	r3, #1
      bit_index %= 8;
    9e6c:	2207      	movs	r2, #7
    9e6e:	4013      	ands	r3, r2
    9e70:	4698      	mov	r8, r3
    9e72:	2301      	movs	r3, #1
    9e74:	4642      	mov	r2, r8
    9e76:	4093      	lsls	r3, r2
    9e78:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9e7a:	2302      	movs	r3, #2
    9e7c:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    9e7e:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    9e80:	4b4a      	ldr	r3, [pc, #296]	; (9fac <pdsStoreItemTaskHandler+0x15c>)
    9e82:	469b      	mov	fp, r3
    9e84:	4643      	mov	r3, r8
    9e86:	3301      	adds	r3, #1
    9e88:	9302      	str	r3, [sp, #8]
    9e8a:	2507      	movs	r5, #7
    9e8c:	4667      	mov	r7, ip
    9e8e:	e035      	b.n	9efc <pdsStoreItemTaskHandler+0xac>
    9e90:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    9e92:	2201      	movs	r2, #1
    9e94:	9901      	ldr	r1, [sp, #4]
    9e96:	408a      	lsls	r2, r1
    9e98:	4397      	bics	r7, r2
    9e9a:	4944      	ldr	r1, [pc, #272]	; (9fac <pdsStoreItemTaskHandler+0x15c>)
    9e9c:	9c03      	ldr	r4, [sp, #12]
    9e9e:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    9ea0:	4a40      	ldr	r2, [pc, #256]	; (9fa4 <pdsStoreItemTaskHandler+0x154>)
    9ea2:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    9ea4:	4a40      	ldr	r2, [pc, #256]	; (9fa8 <pdsStoreItemTaskHandler+0x158>)
    9ea6:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    9ea8:	00c0      	lsls	r0, r0, #3
    9eaa:	18c4      	adds	r4, r0, r3
    9eac:	0020      	movs	r0, r4
    9eae:	4b40      	ldr	r3, [pc, #256]	; (9fb0 <pdsStoreItemTaskHandler+0x160>)
    9eb0:	4798      	blx	r3
    9eb2:	2800      	cmp	r0, #0
    9eb4:	d13a      	bne.n	9f2c <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    9eb6:	a904      	add	r1, sp, #16
    9eb8:	0020      	movs	r0, r4
    9eba:	4b3e      	ldr	r3, [pc, #248]	; (9fb4 <pdsStoreItemTaskHandler+0x164>)
    9ebc:	4798      	blx	r3
    9ebe:	2800      	cmp	r0, #0
    9ec0:	d04e      	beq.n	9f60 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    9ec2:	9b06      	ldr	r3, [sp, #24]
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d000      	beq.n	9eca <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    9ec8:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    9eca:	9a05      	ldr	r2, [sp, #20]
    9ecc:	ab04      	add	r3, sp, #16
    9ece:	8859      	ldrh	r1, [r3, #2]
    9ed0:	0020      	movs	r0, r4
    9ed2:	4b39      	ldr	r3, [pc, #228]	; (9fb8 <pdsStoreItemTaskHandler+0x168>)
    9ed4:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9ed6:	23fd      	movs	r3, #253	; 0xfd
    9ed8:	4218      	tst	r0, r3
    9eda:	d041      	beq.n	9f60 <pdsStoreItemTaskHandler+0x110>
    9edc:	4b37      	ldr	r3, [pc, #220]	; (9fbc <pdsStoreItemTaskHandler+0x16c>)
    9ede:	4a38      	ldr	r2, [pc, #224]	; (9fc0 <pdsStoreItemTaskHandler+0x170>)
    9ee0:	21eb      	movs	r1, #235	; 0xeb
    9ee2:	4838      	ldr	r0, [pc, #224]	; (9fc4 <pdsStoreItemTaskHandler+0x174>)
    9ee4:	4c38      	ldr	r4, [pc, #224]	; (9fc8 <pdsStoreItemTaskHandler+0x178>)
    9ee6:	47a0      	blx	r4
    9ee8:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    9eea:	4643      	mov	r3, r8
    9eec:	9301      	str	r3, [sp, #4]
    9eee:	e7d0      	b.n	9e92 <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    9ef0:	3001      	adds	r0, #1
    9ef2:	b2c0      	uxtb	r0, r0
    9ef4:	3f01      	subs	r7, #1
    9ef6:	b2ff      	uxtb	r7, r7
    9ef8:	2f00      	cmp	r7, #0
    9efa:	d0d5      	beq.n	9ea8 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    9efc:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    9efe:	9003      	str	r0, [sp, #12]
    9f00:	465b      	mov	r3, fp
    9f02:	5c1b      	ldrb	r3, [r3, r0]
    9f04:	4699      	mov	r9, r3
    9f06:	001e      	movs	r6, r3
    9f08:	4653      	mov	r3, sl
    9f0a:	4233      	tst	r3, r6
    9f0c:	d1ec      	bne.n	9ee8 <pdsStoreItemTaskHandler+0x98>
    9f0e:	9b02      	ldr	r3, [sp, #8]
    9f10:	002a      	movs	r2, r5
      bit_index %= 8;
    9f12:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    9f14:	9301      	str	r3, [sp, #4]
    9f16:	0031      	movs	r1, r6
    9f18:	40d9      	lsrs	r1, r3
    9f1a:	420c      	tst	r4, r1
    9f1c:	d1b8      	bne.n	9e90 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9f1e:	3301      	adds	r3, #1
    9f20:	b2db      	uxtb	r3, r3
    9f22:	3a01      	subs	r2, #1
    9f24:	b2d2      	uxtb	r2, r2
    9f26:	2a00      	cmp	r2, #0
    9f28:	d1f3      	bne.n	9f12 <pdsStoreItemTaskHandler+0xc2>
    9f2a:	e7e1      	b.n	9ef0 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    9f2c:	a904      	add	r1, sp, #16
    9f2e:	0020      	movs	r0, r4
    9f30:	4b20      	ldr	r3, [pc, #128]	; (9fb4 <pdsStoreItemTaskHandler+0x164>)
    9f32:	4798      	blx	r3
    9f34:	2800      	cmp	r0, #0
    9f36:	d013      	beq.n	9f60 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9f38:	ab04      	add	r3, sp, #16
    9f3a:	885b      	ldrh	r3, [r3, #2]
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d01e      	beq.n	9f7e <pdsStoreItemTaskHandler+0x12e>
    9f40:	9b05      	ldr	r3, [sp, #20]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d01b      	beq.n	9f7e <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    9f46:	9b06      	ldr	r3, [sp, #24]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d000      	beq.n	9f4e <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    9f4c:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    9f4e:	9b05      	ldr	r3, [sp, #20]
    9f50:	aa04      	add	r2, sp, #16
    9f52:	8852      	ldrh	r2, [r2, #2]
    9f54:	2100      	movs	r1, #0
    9f56:	0020      	movs	r0, r4
    9f58:	4c1c      	ldr	r4, [pc, #112]	; (9fcc <pdsStoreItemTaskHandler+0x17c>)
    9f5a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d115      	bne.n	9f8c <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    9f60:	4b12      	ldr	r3, [pc, #72]	; (9fac <pdsStoreItemTaskHandler+0x15c>)
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	2b00      	cmp	r3, #0
    9f66:	d118      	bne.n	9f9a <pdsStoreItemTaskHandler+0x14a>
    9f68:	4b10      	ldr	r3, [pc, #64]	; (9fac <pdsStoreItemTaskHandler+0x15c>)
    9f6a:	785b      	ldrb	r3, [r3, #1]
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d114      	bne.n	9f9a <pdsStoreItemTaskHandler+0x14a>
}
    9f70:	b009      	add	sp, #36	; 0x24
    9f72:	bc3c      	pop	{r2, r3, r4, r5}
    9f74:	4690      	mov	r8, r2
    9f76:	4699      	mov	r9, r3
    9f78:	46a2      	mov	sl, r4
    9f7a:	46ab      	mov	fp, r5
    9f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9f7e:	4b14      	ldr	r3, [pc, #80]	; (9fd0 <pdsStoreItemTaskHandler+0x180>)
    9f80:	4a14      	ldr	r2, [pc, #80]	; (9fd4 <pdsStoreItemTaskHandler+0x184>)
    9f82:	219a      	movs	r1, #154	; 0x9a
    9f84:	0049      	lsls	r1, r1, #1
    9f86:	480f      	ldr	r0, [pc, #60]	; (9fc4 <pdsStoreItemTaskHandler+0x174>)
    9f88:	4c0f      	ldr	r4, [pc, #60]	; (9fc8 <pdsStoreItemTaskHandler+0x178>)
    9f8a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9f8c:	4b12      	ldr	r3, [pc, #72]	; (9fd8 <pdsStoreItemTaskHandler+0x188>)
    9f8e:	4a11      	ldr	r2, [pc, #68]	; (9fd4 <pdsStoreItemTaskHandler+0x184>)
    9f90:	21a1      	movs	r1, #161	; 0xa1
    9f92:	0049      	lsls	r1, r1, #1
    9f94:	480b      	ldr	r0, [pc, #44]	; (9fc4 <pdsStoreItemTaskHandler+0x174>)
    9f96:	4c0c      	ldr	r4, [pc, #48]	; (9fc8 <pdsStoreItemTaskHandler+0x178>)
    9f98:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9f9a:	2000      	movs	r0, #0
    9f9c:	4b0f      	ldr	r3, [pc, #60]	; (9fdc <pdsStoreItemTaskHandler+0x18c>)
    9f9e:	4798      	blx	r3
}
    9fa0:	e7e6      	b.n	9f70 <pdsStoreItemTaskHandler+0x120>
    9fa2:	46c0      	nop			; (mov r8, r8)
    9fa4:	20000354 	.word	0x20000354
    9fa8:	2000035a 	.word	0x2000035a
    9fac:	20000358 	.word	0x20000358
    9fb0:	00009c89 	.word	0x00009c89
    9fb4:	0000a10d 	.word	0x0000a10d
    9fb8:	00009b79 	.word	0x00009b79
    9fbc:	000111f0 	.word	0x000111f0
    9fc0:	00011238 	.word	0x00011238
    9fc4:	000111a4 	.word	0x000111a4
    9fc8:	0000f8b9 	.word	0x0000f8b9
    9fcc:	00009975 	.word	0x00009975
    9fd0:	00011168 	.word	0x00011168
    9fd4:	00011250 	.word	0x00011250
    9fd8:	00011270 	.word	0x00011270
    9fdc:	0000a0b9 	.word	0x0000a0b9

00009fe0 <PDS_IsAbleToRestore>:
{
    9fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fe2:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    9fe4:	a903      	add	r1, sp, #12
    9fe6:	2300      	movs	r3, #0
    9fe8:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    9fea:	4b11      	ldr	r3, [pc, #68]	; (a030 <PDS_IsAbleToRestore+0x50>)
    9fec:	4798      	blx	r3
    9fee:	9001      	str	r0, [sp, #4]
    9ff0:	2700      	movs	r7, #0
    9ff2:	2800      	cmp	r0, #0
    9ff4:	d116      	bne.n	a024 <PDS_IsAbleToRestore+0x44>
}
    9ff6:	9801      	ldr	r0, [sp, #4]
    9ff8:	b005      	add	sp, #20
    9ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ffc:	3501      	adds	r5, #1
    9ffe:	3401      	adds	r4, #1
    a000:	b2a4      	uxth	r4, r4
    for (j = 0U; j < 8U; j++)
    a002:	2d08      	cmp	r5, #8
    a004:	d00b      	beq.n	a01e <PDS_IsAbleToRestore+0x3e>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a006:	ab03      	add	r3, sp, #12
    a008:	5ddb      	ldrb	r3, [r3, r7]
    a00a:	40eb      	lsrs	r3, r5
    a00c:	421e      	tst	r6, r3
    a00e:	d0f5      	beq.n	9ffc <PDS_IsAbleToRestore+0x1c>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a010:	0020      	movs	r0, r4
    a012:	4b08      	ldr	r3, [pc, #32]	; (a034 <PDS_IsAbleToRestore+0x54>)
    a014:	4798      	blx	r3
    a016:	2800      	cmp	r0, #0
    a018:	d1f0      	bne.n	9ffc <PDS_IsAbleToRestore+0x1c>
          return false;
    a01a:	9001      	str	r0, [sp, #4]
    a01c:	e7eb      	b.n	9ff6 <PDS_IsAbleToRestore+0x16>
    a01e:	3701      	adds	r7, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a020:	2f02      	cmp	r7, #2
    a022:	d0e8      	beq.n	9ff6 <PDS_IsAbleToRestore+0x16>
    a024:	00fc      	lsls	r4, r7, #3
    a026:	b2a4      	uxth	r4, r4
{
    a028:	2500      	movs	r5, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a02a:	2601      	movs	r6, #1
    a02c:	e7eb      	b.n	a006 <PDS_IsAbleToRestore+0x26>
    a02e:	46c0      	nop			; (mov r8, r8)
    a030:	00009c9d 	.word	0x00009c9d
    a034:	00009c89 	.word	0x00009c89

0000a038 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a038:	b510      	push	{r4, lr}
  D_Nv_Init();
    a03a:	4b02      	ldr	r3, [pc, #8]	; (a044 <PDS_Init+0xc>)
    a03c:	4798      	blx	r3
  S_Nv_Init();
    a03e:	4b02      	ldr	r3, [pc, #8]	; (a048 <PDS_Init+0x10>)
    a040:	4798      	blx	r3
}
    a042:	bd10      	pop	{r4, pc}
    a044:	000087ed 	.word	0x000087ed
    a048:	0000993d 	.word	0x0000993d

0000a04c <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a04c:	b570      	push	{r4, r5, r6, lr}
    a04e:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a050:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a052:	4e12      	ldr	r6, [pc, #72]	; (a09c <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a054:	4d12      	ldr	r5, [pc, #72]	; (a0a0 <PDS_InitItems+0x54>)
    a056:	e009      	b.n	a06c <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a058:	4b12      	ldr	r3, [pc, #72]	; (a0a4 <PDS_InitItems+0x58>)
    a05a:	4a13      	ldr	r2, [pc, #76]	; (a0a8 <PDS_InitItems+0x5c>)
    a05c:	3150      	adds	r1, #80	; 0x50
    a05e:	4813      	ldr	r0, [pc, #76]	; (a0ac <PDS_InitItems+0x60>)
    a060:	4c13      	ldr	r4, [pc, #76]	; (a0b0 <PDS_InitItems+0x64>)
    a062:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a064:	3401      	adds	r4, #1
    a066:	b2a4      	uxth	r4, r4
    a068:	2c0a      	cmp	r4, #10
    a06a:	d014      	beq.n	a096 <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a06c:	4669      	mov	r1, sp
    a06e:	0020      	movs	r0, r4
    a070:	47b0      	blx	r6
    a072:	2800      	cmp	r0, #0
    a074:	d0f6      	beq.n	a064 <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a076:	466b      	mov	r3, sp
    a078:	8859      	ldrh	r1, [r3, #2]
    a07a:	2900      	cmp	r1, #0
    a07c:	d0ec      	beq.n	a058 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a07e:	2200      	movs	r2, #0
    a080:	0020      	movs	r0, r4
    a082:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a084:	23fd      	movs	r3, #253	; 0xfd
    a086:	4218      	tst	r0, r3
    a088:	d0ec      	beq.n	a064 <PDS_InitItems+0x18>
    a08a:	4b0a      	ldr	r3, [pc, #40]	; (a0b4 <PDS_InitItems+0x68>)
    a08c:	4a06      	ldr	r2, [pc, #24]	; (a0a8 <PDS_InitItems+0x5c>)
    a08e:	215b      	movs	r1, #91	; 0x5b
    a090:	4806      	ldr	r0, [pc, #24]	; (a0ac <PDS_InitItems+0x60>)
    a092:	4c07      	ldr	r4, [pc, #28]	; (a0b0 <PDS_InitItems+0x64>)
    a094:	47a0      	blx	r4
      }
    }
  }
}
    a096:	b004      	add	sp, #16
    a098:	bd70      	pop	{r4, r5, r6, pc}
    a09a:	46c0      	nop			; (mov r8, r8)
    a09c:	0000a10d 	.word	0x0000a10d
    a0a0:	00009b79 	.word	0x00009b79
    a0a4:	0001128c 	.word	0x0001128c
    a0a8:	000112e4 	.word	0x000112e4
    a0ac:	000112a0 	.word	0x000112a0
    a0b0:	0000f8b9 	.word	0x0000f8b9
    a0b4:	000111f0 	.word	0x000111f0

0000a0b8 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a0b8:	4a03      	ldr	r2, [pc, #12]	; (a0c8 <pdsPostTask+0x10>)
    a0ba:	2301      	movs	r3, #1
    a0bc:	4083      	lsls	r3, r0
    a0be:	7811      	ldrb	r1, [r2, #0]
    a0c0:	430b      	orrs	r3, r1
    a0c2:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a0c4:	4770      	bx	lr
    a0c6:	46c0      	nop			; (mov r8, r8)
    a0c8:	2000035b 	.word	0x2000035b

0000a0cc <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a0cc:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a0ce:	4b0d      	ldr	r3, [pc, #52]	; (a104 <PDS_TaskHandler+0x38>)
    a0d0:	781d      	ldrb	r5, [r3, #0]
    a0d2:	2d00      	cmp	r5, #0
    a0d4:	d012      	beq.n	a0fc <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a0d6:	0028      	movs	r0, r5
    a0d8:	07eb      	lsls	r3, r5, #31
    a0da:	d410      	bmi.n	a0fe <PDS_TaskHandler+0x32>
    a0dc:	2300      	movs	r3, #0
    a0de:	2401      	movs	r4, #1
      taskId++;
    a0e0:	3301      	adds	r3, #1
    a0e2:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a0e4:	0019      	movs	r1, r3
    a0e6:	0002      	movs	r2, r0
    a0e8:	40da      	lsrs	r2, r3
    a0ea:	4214      	tst	r4, r2
    a0ec:	d0f8      	beq.n	a0e0 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a0ee:	2301      	movs	r3, #1
    a0f0:	408b      	lsls	r3, r1
    a0f2:	405d      	eors	r5, r3
    a0f4:	4b03      	ldr	r3, [pc, #12]	; (a104 <PDS_TaskHandler+0x38>)
    a0f6:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a0f8:	4b03      	ldr	r3, [pc, #12]	; (a108 <PDS_TaskHandler+0x3c>)
    a0fa:	4798      	blx	r3
   
  }
}
    a0fc:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a0fe:	2100      	movs	r1, #0
    a100:	e7f5      	b.n	a0ee <PDS_TaskHandler+0x22>
    a102:	46c0      	nop			; (mov r8, r8)
    a104:	2000035b 	.word	0x2000035b
    a108:	00009e51 	.word	0x00009e51

0000a10c <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a10e:	b087      	sub	sp, #28
    a110:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a112:	aa02      	add	r2, sp, #8
    a114:	4b11      	ldr	r3, [pc, #68]	; (a15c <pdsGetItemDescr+0x50>)
    a116:	0011      	movs	r1, r2
    a118:	cb70      	ldmia	r3!, {r4, r5, r6}
    a11a:	c170      	stmia	r1!, {r4, r5, r6}
    a11c:	681b      	ldr	r3, [r3, #0]
    a11e:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a120:	8813      	ldrh	r3, [r2, #0]
    a122:	4283      	cmp	r3, r0
    a124:	d012      	beq.n	a14c <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a126:	4b0e      	ldr	r3, [pc, #56]	; (a160 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a128:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a12a:	490e      	ldr	r1, [pc, #56]	; (a164 <pdsGetItemDescr+0x58>)
    a12c:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a12e:	0011      	movs	r1, r2
    a130:	001c      	movs	r4, r3
    a132:	cce0      	ldmia	r4!, {r5, r6, r7}
    a134:	c1e0      	stmia	r1!, {r5, r6, r7}
    a136:	6824      	ldr	r4, [r4, #0]
    a138:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a13a:	8811      	ldrh	r1, [r2, #0]
    a13c:	4281      	cmp	r1, r0
    a13e:	d005      	beq.n	a14c <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    a140:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a142:	4563      	cmp	r3, ip
    a144:	d1f3      	bne.n	a12e <pdsGetItemDescr+0x22>

  }
  return false;
    a146:	2000      	movs	r0, #0
}
    a148:	b007      	add	sp, #28
    a14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a14c:	2210      	movs	r2, #16
    a14e:	a902      	add	r1, sp, #8
    a150:	9801      	ldr	r0, [sp, #4]
    a152:	4b05      	ldr	r3, [pc, #20]	; (a168 <pdsGetItemDescr+0x5c>)
    a154:	4798      	blx	r3
      return true;
    a156:	2001      	movs	r0, #1
    a158:	e7f6      	b.n	a148 <pdsGetItemDescr+0x3c>
    a15a:	46c0      	nop			; (mov r8, r8)
    a15c:	00006100 	.word	0x00006100
    a160:	00006110 	.word	0x00006110
    a164:	000061a0 	.word	0x000061a0
    a168:	0000f97b 	.word	0x0000f97b

0000a16c <pdsUpdateMemory>:
{
    a16c:	b510      	push	{r4, lr}
    a16e:	b084      	sub	sp, #16
  if (size == oldSize)
    a170:	429a      	cmp	r2, r3
    a172:	d008      	beq.n	a186 <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    a174:	4669      	mov	r1, sp
    a176:	4b09      	ldr	r3, [pc, #36]	; (a19c <pdsUpdateMemory+0x30>)
    a178:	4798      	blx	r3
    a17a:	2800      	cmp	r0, #0
    a17c:	d003      	beq.n	a186 <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a17e:	466b      	mov	r3, sp
    a180:	7b1b      	ldrb	r3, [r3, #12]
    a182:	07db      	lsls	r3, r3, #31
    a184:	d502      	bpl.n	a18c <pdsUpdateMemory+0x20>
}
    a186:	2001      	movs	r0, #1
    a188:	b004      	add	sp, #16
    a18a:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a18c:	4b04      	ldr	r3, [pc, #16]	; (a1a0 <pdsUpdateMemory+0x34>)
    a18e:	4a05      	ldr	r2, [pc, #20]	; (a1a4 <pdsUpdateMemory+0x38>)
    a190:	21bc      	movs	r1, #188	; 0xbc
    a192:	31ff      	adds	r1, #255	; 0xff
    a194:	4804      	ldr	r0, [pc, #16]	; (a1a8 <pdsUpdateMemory+0x3c>)
    a196:	4c05      	ldr	r4, [pc, #20]	; (a1ac <pdsUpdateMemory+0x40>)
    a198:	47a0      	blx	r4
    a19a:	46c0      	nop			; (mov r8, r8)
    a19c:	0000a10d 	.word	0x0000a10d
    a1a0:	00011304 	.word	0x00011304
    a1a4:	000112f4 	.word	0x000112f4
    a1a8:	00011330 	.word	0x00011330
    a1ac:	0000f8b9 	.word	0x0000f8b9

0000a1b0 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    a1b0:	b570      	push	{r4, r5, r6, lr}
    a1b2:	b082      	sub	sp, #8
    a1b4:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    a1b6:	466b      	mov	r3, sp
    a1b8:	4a08      	ldr	r2, [pc, #32]	; (a1dc <pdsGetDirDescr+0x2c>)
    a1ba:	4669      	mov	r1, sp
    a1bc:	ca60      	ldmia	r2!, {r5, r6}
    a1be:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    a1c0:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    a1c2:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    a1c4:	4282      	cmp	r2, r0
    a1c6:	d002      	beq.n	a1ce <pdsGetDirDescr+0x1e>
}
    a1c8:	0018      	movs	r0, r3
    a1ca:	b002      	add	sp, #8
    a1cc:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    a1ce:	2208      	movs	r2, #8
    a1d0:	4669      	mov	r1, sp
    a1d2:	0020      	movs	r0, r4
    a1d4:	4b02      	ldr	r3, [pc, #8]	; (a1e0 <pdsGetDirDescr+0x30>)
    a1d6:	4798      	blx	r3
      return true;
    a1d8:	2301      	movs	r3, #1
    a1da:	e7f5      	b.n	a1c8 <pdsGetDirDescr+0x18>
    a1dc:	00006190 	.word	0x00006190
    a1e0:	0000f97b 	.word	0x0000f97b

0000a1e4 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    a1e4:	4b02      	ldr	r3, [pc, #8]	; (a1f0 <PHY_DataConf+0xc>)
    a1e6:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a1e8:	2201      	movs	r2, #1
    a1ea:	4b02      	ldr	r3, [pc, #8]	; (a1f4 <PHY_DataConf+0x10>)
    a1ec:	701a      	strb	r2, [r3, #0]
}
    a1ee:	4770      	bx	lr
    a1f0:	20001de4 	.word	0x20001de4
    a1f4:	2000035c 	.word	0x2000035c

0000a1f8 <MiMAC_SetAltAddress>:
{
    a1f8:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    a1fa:	7802      	ldrb	r2, [r0, #0]
    a1fc:	4b08      	ldr	r3, [pc, #32]	; (a220 <MiMAC_SetAltAddress+0x28>)
    a1fe:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    a200:	7842      	ldrb	r2, [r0, #1]
    a202:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    a204:	780a      	ldrb	r2, [r1, #0]
    a206:	4c07      	ldr	r4, [pc, #28]	; (a224 <MiMAC_SetAltAddress+0x2c>)
    a208:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    a20a:	784a      	ldrb	r2, [r1, #1]
    a20c:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    a20e:	8818      	ldrh	r0, [r3, #0]
    a210:	4b05      	ldr	r3, [pc, #20]	; (a228 <MiMAC_SetAltAddress+0x30>)
    a212:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    a214:	8820      	ldrh	r0, [r4, #0]
    a216:	4b05      	ldr	r3, [pc, #20]	; (a22c <MiMAC_SetAltAddress+0x34>)
    a218:	4798      	blx	r3
}
    a21a:	2001      	movs	r0, #1
    a21c:	bd10      	pop	{r4, pc}
    a21e:	46c0      	nop			; (mov r8, r8)
    a220:	20001da4 	.word	0x20001da4
    a224:	20001e00 	.word	0x20001e00
    a228:	0000b1dd 	.word	0x0000b1dd
    a22c:	0000b1bd 	.word	0x0000b1bd

0000a230 <mic_generator>:
{
    a230:	b5f0      	push	{r4, r5, r6, r7, lr}
    a232:	46c6      	mov	lr, r8
    a234:	b500      	push	{lr}
    a236:	b0a6      	sub	sp, #152	; 0x98
    a238:	0006      	movs	r6, r0
    a23a:	000c      	movs	r4, r1
    a23c:	469c      	mov	ip, r3
    a23e:	992c      	ldr	r1, [sp, #176]	; 0xb0
	iterations = len/16;
    a240:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    a242:	0723      	lsls	r3, r4, #28
    a244:	d000      	beq.n	a248 <mic_generator+0x18>
    a246:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    a248:	2049      	movs	r0, #73	; 0x49
    a24a:	4b41      	ldr	r3, [pc, #260]	; (a350 <mic_generator+0x120>)
    a24c:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    a24e:	2300      	movs	r3, #0
    a250:	a802      	add	r0, sp, #8
    a252:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    a254:	330d      	adds	r3, #13
    a256:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    a258:	7082      	strb	r2, [r0, #2]
    a25a:	2200      	movs	r2, #0
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    a25c:	4b3c      	ldr	r3, [pc, #240]	; (a350 <mic_generator+0x120>)
    a25e:	5c8f      	ldrb	r7, [r1, r2]
    a260:	18d0      	adds	r0, r2, r3
    a262:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    a264:	0010      	movs	r0, r2
    a266:	af02      	add	r7, sp, #8
    a268:	46b8      	mov	r8, r7
    a26a:	4440      	add	r0, r8
    a26c:	5c8f      	ldrb	r7, [r1, r2]
    a26e:	71c7      	strb	r7, [r0, #7]
    a270:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    a272:	2a08      	cmp	r2, #8
    a274:	d1f3      	bne.n	a25e <mic_generator+0x2e>
		InitVect_in[i+9] = FrameCounter.v[i];
    a276:	4663      	mov	r3, ip
    a278:	466a      	mov	r2, sp
    a27a:	71d3      	strb	r3, [r2, #7]
    a27c:	79d3      	ldrb	r3, [r2, #7]
    a27e:	4834      	ldr	r0, [pc, #208]	; (a350 <mic_generator+0x120>)
    a280:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a282:	4642      	mov	r2, r8
    a284:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    a286:	4663      	mov	r3, ip
    a288:	041b      	lsls	r3, r3, #16
    a28a:	0e1b      	lsrs	r3, r3, #24
    a28c:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a28e:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    a290:	4663      	mov	r3, ip
    a292:	021b      	lsls	r3, r3, #8
    a294:	0e1b      	lsrs	r3, r3, #24
    a296:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a298:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    a29a:	4663      	mov	r3, ip
    a29c:	0e1b      	lsrs	r3, r3, #24
    a29e:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a2a0:	7193      	strb	r3, [r2, #6]
	cbc_header_with_padding[15] = 0x00;   // Padding
    a2a2:	2300      	movs	r3, #0
    a2a4:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a2a6:	2204      	movs	r2, #4
    a2a8:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    a2aa:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    a2ac:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a2ae:	4929      	ldr	r1, [pc, #164]	; (a354 <mic_generator+0x124>)
    a2b0:	4b29      	ldr	r3, [pc, #164]	; (a358 <mic_generator+0x128>)
    a2b2:	4798      	blx	r3
    a2b4:	2300      	movs	r3, #0
		copy_packet1[i] = cbc_header_with_padding[i];
    a2b6:	a906      	add	r1, sp, #24
    a2b8:	aa02      	add	r2, sp, #8
    a2ba:	5c9a      	ldrb	r2, [r3, r2]
    a2bc:	545a      	strb	r2, [r3, r1]
    a2be:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a2c0:	2b10      	cmp	r3, #16
    a2c2:	d1f9      	bne.n	a2b8 <mic_generator+0x88>
	for (i=16;i<len+16;i++)
    a2c4:	0027      	movs	r7, r4
    a2c6:	3710      	adds	r7, #16
    a2c8:	2f10      	cmp	r7, #16
    a2ca:	dd0a      	ble.n	a2e2 <mic_generator+0xb2>
    a2cc:	2010      	movs	r0, #16
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    a2ce:	a906      	add	r1, sp, #24
    a2d0:	18f2      	adds	r2, r6, r3
    a2d2:	3a10      	subs	r2, #16
    a2d4:	7812      	ldrb	r2, [r2, #0]
    a2d6:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    a2d8:	3301      	adds	r3, #1
    a2da:	b2db      	uxtb	r3, r3
    a2dc:	0018      	movs	r0, r3
    a2de:	42bb      	cmp	r3, r7
    a2e0:	dbf6      	blt.n	a2d0 <mic_generator+0xa0>
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a2e2:	0023      	movs	r3, r4
    a2e4:	3310      	adds	r3, #16
    a2e6:	b2db      	uxtb	r3, r3
    a2e8:	001a      	movs	r2, r3
    a2ea:	3501      	adds	r5, #1
    a2ec:	0129      	lsls	r1, r5, #4
    a2ee:	428b      	cmp	r3, r1
    a2f0:	da07      	bge.n	a302 <mic_generator+0xd2>
		copy_packet1[i] = 0; // Padding
    a2f2:	ac06      	add	r4, sp, #24
    a2f4:	2000      	movs	r0, #0
    a2f6:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a2f8:	3301      	adds	r3, #1
    a2fa:	b2db      	uxtb	r3, r3
    a2fc:	001a      	movs	r2, r3
    a2fe:	428b      	cmp	r3, r1
    a300:	dbf9      	blt.n	a2f6 <mic_generator+0xc6>
	for (i=0;i<iterations+1;i++)
    a302:	2200      	movs	r2, #0
    a304:	2700      	movs	r7, #0
    a306:	2d00      	cmp	r5, #0
    a308:	dd15      	ble.n	a336 <mic_generator+0x106>
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    a30a:	4e11      	ldr	r6, [pc, #68]	; (a350 <mic_generator+0x120>)
    a30c:	0112      	lsls	r2, r2, #4
    a30e:	2300      	movs	r3, #0
    a310:	a906      	add	r1, sp, #24
    a312:	188c      	adds	r4, r1, r2
    a314:	1999      	adds	r1, r3, r6
    a316:	5ce2      	ldrb	r2, [r4, r3]
    a318:	7808      	ldrb	r0, [r1, #0]
    a31a:	4042      	eors	r2, r0
    a31c:	700a      	strb	r2, [r1, #0]
    a31e:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a320:	2b10      	cmp	r3, #16
    a322:	d1f7      	bne.n	a314 <mic_generator+0xe4>
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a324:	490b      	ldr	r1, [pc, #44]	; (a354 <mic_generator+0x124>)
    a326:	480a      	ldr	r0, [pc, #40]	; (a350 <mic_generator+0x120>)
    a328:	4b0b      	ldr	r3, [pc, #44]	; (a358 <mic_generator+0x128>)
    a32a:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    a32c:	3701      	adds	r7, #1
    a32e:	b2ff      	uxtb	r7, r7
    a330:	003a      	movs	r2, r7
    a332:	42af      	cmp	r7, r5
    a334:	dbea      	blt.n	a30c <mic_generator+0xdc>
    a336:	2300      	movs	r3, #0
		CBC_mic[i] = InitVect_in[i];
    a338:	4808      	ldr	r0, [pc, #32]	; (a35c <mic_generator+0x12c>)
    a33a:	4905      	ldr	r1, [pc, #20]	; (a350 <mic_generator+0x120>)
    a33c:	5cca      	ldrb	r2, [r1, r3]
    a33e:	54c2      	strb	r2, [r0, r3]
    a340:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a342:	2b10      	cmp	r3, #16
    a344:	d1fa      	bne.n	a33c <mic_generator+0x10c>
}
    a346:	b026      	add	sp, #152	; 0x98
    a348:	bc04      	pop	{r2}
    a34a:	4690      	mov	r8, r2
    a34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a34e:	46c0      	nop			; (mov r8, r8)
    a350:	20001db4 	.word	0x20001db4
    a354:	00011380 	.word	0x00011380
    a358:	0000b2d5 	.word	0x0000b2d5
    a35c:	20001dec 	.word	0x20001dec

0000a360 <DataEncrypt>:
{
    a360:	b5f0      	push	{r4, r5, r6, r7, lr}
    a362:	46de      	mov	lr, fp
    a364:	4657      	mov	r7, sl
    a366:	464e      	mov	r6, r9
    a368:	4645      	mov	r5, r8
    a36a:	b5e0      	push	{r5, r6, r7, lr}
    a36c:	b099      	sub	sp, #100	; 0x64
    a36e:	9003      	str	r0, [sp, #12]
    a370:	468a      	mov	sl, r1
    a372:	0014      	movs	r4, r2
    a374:	001d      	movs	r5, r3
	iterations = *Payload_len/16;
    a376:	780f      	ldrb	r7, [r1, #0]
    a378:	093e      	lsrs	r6, r7, #4
	if (*Payload_len % 16 != 0) iterations++;
    a37a:	073b      	lsls	r3, r7, #28
    a37c:	d000      	beq.n	a380 <DataEncrypt+0x20>
    a37e:	3601      	adds	r6, #1
	memcpy(CipheringData, Payloadinfo, *Payload_len);
    a380:	003a      	movs	r2, r7
    a382:	9903      	ldr	r1, [sp, #12]
    a384:	a804      	add	r0, sp, #16
    a386:	4b3e      	ldr	r3, [pc, #248]	; (a480 <DataEncrypt+0x120>)
    a388:	4798      	blx	r3
	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    a38a:	4b3e      	ldr	r3, [pc, #248]	; (a484 <DataEncrypt+0x124>)
    a38c:	685b      	ldr	r3, [r3, #4]
    a38e:	9300      	str	r3, [sp, #0]
    a390:	0023      	movs	r3, r4
    a392:	002a      	movs	r2, r5
    a394:	0039      	movs	r1, r7
    a396:	9803      	ldr	r0, [sp, #12]
    a398:	4d3b      	ldr	r5, [pc, #236]	; (a488 <DataEncrypt+0x128>)
    a39a:	47a8      	blx	r5
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a39c:	4653      	mov	r3, sl
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	001a      	movs	r2, r3
    a3a2:	0035      	movs	r5, r6
    a3a4:	0131      	lsls	r1, r6, #4
    a3a6:	428b      	cmp	r3, r1
    a3a8:	da07      	bge.n	a3ba <DataEncrypt+0x5a>
		CipheringData[i] = 0; // Padding
    a3aa:	a804      	add	r0, sp, #16
    a3ac:	2600      	movs	r6, #0
    a3ae:	5486      	strb	r6, [r0, r2]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a3b0:	3301      	adds	r3, #1
    a3b2:	b2db      	uxtb	r3, r3
    a3b4:	001a      	movs	r2, r3
    a3b6:	428b      	cmp	r3, r1
    a3b8:	dbf9      	blt.n	a3ae <DataEncrypt+0x4e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a3ba:	2201      	movs	r2, #1
    a3bc:	ab10      	add	r3, sp, #64	; 0x40
    a3be:	701a      	strb	r2, [r3, #0]
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    a3c0:	4b30      	ldr	r3, [pc, #192]	; (a484 <DataEncrypt+0x124>)
    a3c2:	6858      	ldr	r0, [r3, #4]
    a3c4:	2300      	movs	r3, #0
    a3c6:	aa10      	add	r2, sp, #64	; 0x40
    a3c8:	18d2      	adds	r2, r2, r3
    a3ca:	5cc1      	ldrb	r1, [r0, r3]
    a3cc:	7051      	strb	r1, [r2, #1]
    a3ce:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    a3d0:	2b08      	cmp	r3, #8
    a3d2:	d1f8      	bne.n	a3c6 <DataEncrypt+0x66>
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    a3d4:	ab10      	add	r3, sp, #64	; 0x40
    a3d6:	725c      	strb	r4, [r3, #9]
    a3d8:	0a22      	lsrs	r2, r4, #8
    a3da:	729a      	strb	r2, [r3, #10]
    a3dc:	0c22      	lsrs	r2, r4, #16
    a3de:	72da      	strb	r2, [r3, #11]
    a3e0:	0e24      	lsrs	r4, r4, #24
    a3e2:	731c      	strb	r4, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a3e4:	2204      	movs	r2, #4
    a3e6:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    a3e8:	2200      	movs	r2, #0
    a3ea:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    a3ec:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    a3ee:	1c6b      	adds	r3, r5, #1
    a3f0:	4698      	mov	r8, r3
    a3f2:	2300      	movs	r3, #0
    a3f4:	469b      	mov	fp, r3
    a3f6:	9302      	str	r3, [sp, #8]
    a3f8:	4643      	mov	r3, r8
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	dd31      	ble.n	a462 <DataEncrypt+0x102>
			block[j] = CTR_Nonce_and_Counter[j];
    a3fe:	ac14      	add	r4, sp, #80	; 0x50
    a400:	ad10      	add	r5, sp, #64	; 0x40
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a402:	4b22      	ldr	r3, [pc, #136]	; (a48c <DataEncrypt+0x12c>)
    a404:	4699      	mov	r9, r3
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a406:	4e22      	ldr	r6, [pc, #136]	; (a490 <DataEncrypt+0x130>)
    a408:	e017      	b.n	a43a <DataEncrypt+0xda>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a40a:	5d1a      	ldrb	r2, [r3, r4]
    a40c:	5cc7      	ldrb	r7, [r0, r3]
    a40e:	407a      	eors	r2, r7
    a410:	54c2      	strb	r2, [r0, r3]
    a412:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a414:	2b10      	cmp	r3, #16
    a416:	d007      	beq.n	a428 <DataEncrypt+0xc8>
			if (CTR_Nonce_and_Counter[15] == 0)
    a418:	2900      	cmp	r1, #0
    a41a:	d1f6      	bne.n	a40a <DataEncrypt+0xaa>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a41c:	5d1a      	ldrb	r2, [r3, r4]
    a41e:	4667      	mov	r7, ip
    a420:	5cff      	ldrb	r7, [r7, r3]
    a422:	407a      	eors	r2, r7
    a424:	54f2      	strb	r2, [r6, r3]
    a426:	e7f4      	b.n	a412 <DataEncrypt+0xb2>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    a428:	3101      	adds	r1, #1
    a42a:	73e9      	strb	r1, [r5, #15]
	for (i=0;i<iterations+1;i++)
    a42c:	9f02      	ldr	r7, [sp, #8]
    a42e:	3701      	adds	r7, #1
    a430:	b2fb      	uxtb	r3, r7
    a432:	9302      	str	r3, [sp, #8]
    a434:	469b      	mov	fp, r3
    a436:	4543      	cmp	r3, r8
    a438:	da13      	bge.n	a462 <DataEncrypt+0x102>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    a43a:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    a43c:	5d5a      	ldrb	r2, [r3, r5]
    a43e:	551a      	strb	r2, [r3, r4]
    a440:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a442:	2b10      	cmp	r3, #16
    a444:	d1fa      	bne.n	a43c <DataEncrypt+0xdc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a446:	4913      	ldr	r1, [pc, #76]	; (a494 <DataEncrypt+0x134>)
    a448:	0020      	movs	r0, r4
    a44a:	47c8      	blx	r9
			if (CTR_Nonce_and_Counter[15] == 0)
    a44c:	7be9      	ldrb	r1, [r5, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a44e:	4658      	mov	r0, fp
    a450:	3801      	subs	r0, #1
    a452:	0100      	lsls	r0, r0, #4
    a454:	2300      	movs	r3, #0
    a456:	aa04      	add	r2, sp, #16
    a458:	4694      	mov	ip, r2
    a45a:	4460      	add	r0, ip
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a45c:	4a0e      	ldr	r2, [pc, #56]	; (a498 <DataEncrypt+0x138>)
    a45e:	4694      	mov	ip, r2
    a460:	e7da      	b.n	a418 <DataEncrypt+0xb8>
	memcpy(Payloadinfo, CipheringData, *Payload_len);
    a462:	4653      	mov	r3, sl
    a464:	781a      	ldrb	r2, [r3, #0]
    a466:	a904      	add	r1, sp, #16
    a468:	9803      	ldr	r0, [sp, #12]
    a46a:	4b05      	ldr	r3, [pc, #20]	; (a480 <DataEncrypt+0x120>)
    a46c:	4798      	blx	r3
}
    a46e:	2001      	movs	r0, #1
    a470:	b019      	add	sp, #100	; 0x64
    a472:	bc3c      	pop	{r2, r3, r4, r5}
    a474:	4690      	mov	r8, r2
    a476:	4699      	mov	r9, r3
    a478:	46a2      	mov	sl, r4
    a47a:	46ab      	mov	fp, r5
    a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a47e:	46c0      	nop			; (mov r8, r8)
    a480:	0000f97b 	.word	0x0000f97b
    a484:	20001dac 	.word	0x20001dac
    a488:	0000a231 	.word	0x0000a231
    a48c:	0000b2d5 	.word	0x0000b2d5
    a490:	20001dd4 	.word	0x20001dd4
    a494:	00011380 	.word	0x00011380
    a498:	20001dec 	.word	0x20001dec

0000a49c <validate_mic>:
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a49c:	4b08      	ldr	r3, [pc, #32]	; (a4c0 <validate_mic+0x24>)
    a49e:	781a      	ldrb	r2, [r3, #0]
    a4a0:	4b08      	ldr	r3, [pc, #32]	; (a4c4 <validate_mic+0x28>)
    a4a2:	781b      	ldrb	r3, [r3, #0]
		return false;
    a4a4:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a4a6:	429a      	cmp	r2, r3
    a4a8:	d000      	beq.n	a4ac <validate_mic+0x10>
}
    a4aa:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a4ac:	4b04      	ldr	r3, [pc, #16]	; (a4c0 <validate_mic+0x24>)
    a4ae:	7858      	ldrb	r0, [r3, #1]
    a4b0:	4b04      	ldr	r3, [pc, #16]	; (a4c4 <validate_mic+0x28>)
    a4b2:	785b      	ldrb	r3, [r3, #1]
    a4b4:	1ac0      	subs	r0, r0, r3
    a4b6:	4243      	negs	r3, r0
    a4b8:	4158      	adcs	r0, r3
    a4ba:	b2c0      	uxtb	r0, r0
    a4bc:	e7f5      	b.n	a4aa <validate_mic+0xe>
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	20001dd4 	.word	0x20001dd4
    a4c4:	20001dfc 	.word	0x20001dfc

0000a4c8 <DataDecrypt>:
{
    a4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ca:	46de      	mov	lr, fp
    a4cc:	4657      	mov	r7, sl
    a4ce:	464e      	mov	r6, r9
    a4d0:	4645      	mov	r5, r8
    a4d2:	b5e0      	push	{r5, r6, r7, lr}
    a4d4:	b09d      	sub	sp, #116	; 0x74
    a4d6:	9004      	str	r0, [sp, #16]
    a4d8:	9105      	str	r1, [sp, #20]
    a4da:	4693      	mov	fp, r2
    a4dc:	9306      	str	r3, [sp, #24]
    a4de:	ab26      	add	r3, sp, #152	; 0x98
    a4e0:	781b      	ldrb	r3, [r3, #0]
    a4e2:	9307      	str	r3, [sp, #28]
	iterations = *PayloadLen/16;
    a4e4:	780c      	ldrb	r4, [r1, #0]
    a4e6:	0925      	lsrs	r5, r4, #4
	if (*PayloadLen % 16 != 0) iterations++;
    a4e8:	0723      	lsls	r3, r4, #28
    a4ea:	d000      	beq.n	a4ee <DataDecrypt+0x26>
    a4ec:	3501      	adds	r5, #1
	memcpy(CipheringData, Payload, *PayloadLen);
    a4ee:	0022      	movs	r2, r4
    a4f0:	9904      	ldr	r1, [sp, #16]
    a4f2:	a808      	add	r0, sp, #32
    a4f4:	4b43      	ldr	r3, [pc, #268]	; (a604 <DataDecrypt+0x13c>)
    a4f6:	4798      	blx	r3
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    a4f8:	0023      	movs	r3, r4
    a4fa:	0028      	movs	r0, r5
    a4fc:	012d      	lsls	r5, r5, #4
    a4fe:	42ac      	cmp	r4, r5
    a500:	da07      	bge.n	a512 <DataDecrypt+0x4a>
		CipheringData[i] = 0; // Padding
    a502:	aa08      	add	r2, sp, #32
    a504:	2100      	movs	r1, #0
    a506:	54d1      	strb	r1, [r2, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    a508:	3401      	adds	r4, #1
    a50a:	b2e4      	uxtb	r4, r4
    a50c:	0023      	movs	r3, r4
    a50e:	42ac      	cmp	r4, r5
    a510:	dbf9      	blt.n	a506 <DataDecrypt+0x3e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a512:	2201      	movs	r2, #1
    a514:	ab14      	add	r3, sp, #80	; 0x50
    a516:	701a      	strb	r2, [r3, #0]
    a518:	2300      	movs	r3, #0
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    a51a:	465c      	mov	r4, fp
    a51c:	aa14      	add	r2, sp, #80	; 0x50
    a51e:	18d2      	adds	r2, r2, r3
    a520:	5ce1      	ldrb	r1, [r4, r3]
    a522:	7051      	strb	r1, [r2, #1]
    a524:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    a526:	2b08      	cmp	r3, #8
    a528:	d1f8      	bne.n	a51c <DataDecrypt+0x54>
    a52a:	46a3      	mov	fp, r4
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    a52c:	ab14      	add	r3, sp, #80	; 0x50
    a52e:	9906      	ldr	r1, [sp, #24]
    a530:	7259      	strb	r1, [r3, #9]
    a532:	0a0a      	lsrs	r2, r1, #8
    a534:	729a      	strb	r2, [r3, #10]
    a536:	0c0a      	lsrs	r2, r1, #16
    a538:	72da      	strb	r2, [r3, #11]
    a53a:	0e0a      	lsrs	r2, r1, #24
    a53c:	731a      	strb	r2, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    a53e:	2204      	movs	r2, #4
    a540:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    a542:	2200      	movs	r2, #0
    a544:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    a546:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    a548:	1c43      	adds	r3, r0, #1
    a54a:	4699      	mov	r9, r3
    a54c:	2500      	movs	r5, #0
    a54e:	2300      	movs	r3, #0
    a550:	4698      	mov	r8, r3
    a552:	464b      	mov	r3, r9
    a554:	2b00      	cmp	r3, #0
    a556:	dd2e      	ble.n	a5b6 <DataDecrypt+0xee>
			block[j] = CTR_Nonce_and_Counter[j];
    a558:	ac18      	add	r4, sp, #96	; 0x60
    a55a:	ae14      	add	r6, sp, #80	; 0x50
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a55c:	4b2a      	ldr	r3, [pc, #168]	; (a608 <DataDecrypt+0x140>)
    a55e:	469a      	mov	sl, r3
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a560:	4f2a      	ldr	r7, [pc, #168]	; (a60c <DataDecrypt+0x144>)
    a562:	4643      	mov	r3, r8
    a564:	9303      	str	r3, [sp, #12]
    a566:	46a8      	mov	r8, r5
    a568:	e014      	b.n	a594 <DataDecrypt+0xcc>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a56a:	5d1a      	ldrb	r2, [r3, r4]
    a56c:	5ce9      	ldrb	r1, [r5, r3]
    a56e:	404a      	eors	r2, r1
    a570:	54ea      	strb	r2, [r5, r3]
    a572:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a574:	2b10      	cmp	r3, #16
    a576:	d004      	beq.n	a582 <DataDecrypt+0xba>
			if (CTR_Nonce_and_Counter[15] == 0)
    a578:	2800      	cmp	r0, #0
    a57a:	d1f6      	bne.n	a56a <DataDecrypt+0xa2>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a57c:	5d1a      	ldrb	r2, [r3, r4]
    a57e:	54fa      	strb	r2, [r7, r3]
    a580:	e7f7      	b.n	a572 <DataDecrypt+0xaa>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    a582:	3001      	adds	r0, #1
    a584:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    a586:	9d03      	ldr	r5, [sp, #12]
    a588:	3501      	adds	r5, #1
    a58a:	b2eb      	uxtb	r3, r5
    a58c:	9303      	str	r3, [sp, #12]
    a58e:	4698      	mov	r8, r3
    a590:	454b      	cmp	r3, r9
    a592:	da10      	bge.n	a5b6 <DataDecrypt+0xee>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a594:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    a596:	5d9a      	ldrb	r2, [r3, r6]
    a598:	551a      	strb	r2, [r3, r4]
    a59a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a59c:	2b10      	cmp	r3, #16
    a59e:	d1fa      	bne.n	a596 <DataDecrypt+0xce>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a5a0:	491b      	ldr	r1, [pc, #108]	; (a610 <DataDecrypt+0x148>)
    a5a2:	0020      	movs	r0, r4
    a5a4:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    a5a6:	7bf0      	ldrb	r0, [r6, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a5a8:	4642      	mov	r2, r8
    a5aa:	3a01      	subs	r2, #1
    a5ac:	0112      	lsls	r2, r2, #4
    a5ae:	2300      	movs	r3, #0
    a5b0:	a908      	add	r1, sp, #32
    a5b2:	188d      	adds	r5, r1, r2
    a5b4:	e7e0      	b.n	a578 <DataDecrypt+0xb0>
	*PayloadLen = *PayloadLen-4;
    a5b6:	9b05      	ldr	r3, [sp, #20]
    a5b8:	7819      	ldrb	r1, [r3, #0]
    a5ba:	3904      	subs	r1, #4
    a5bc:	b2c9      	uxtb	r1, r1
    a5be:	7019      	strb	r1, [r3, #0]
	mic_generator(&CipheringData[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    a5c0:	465b      	mov	r3, fp
    a5c2:	9300      	str	r3, [sp, #0]
    a5c4:	9b06      	ldr	r3, [sp, #24]
    a5c6:	9a07      	ldr	r2, [sp, #28]
    a5c8:	a808      	add	r0, sp, #32
    a5ca:	4c12      	ldr	r4, [pc, #72]	; (a614 <DataDecrypt+0x14c>)
    a5cc:	47a0      	blx	r4
    a5ce:	2300      	movs	r3, #0
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    a5d0:	4d11      	ldr	r5, [pc, #68]	; (a618 <DataDecrypt+0x150>)
    a5d2:	4c0e      	ldr	r4, [pc, #56]	; (a60c <DataDecrypt+0x144>)
    a5d4:	4811      	ldr	r0, [pc, #68]	; (a61c <DataDecrypt+0x154>)
    a5d6:	5ce2      	ldrb	r2, [r4, r3]
    a5d8:	5cc1      	ldrb	r1, [r0, r3]
    a5da:	404a      	eors	r2, r1
    a5dc:	54ea      	strb	r2, [r5, r3]
    a5de:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a5e0:	2b10      	cmp	r3, #16
    a5e2:	d1f8      	bne.n	a5d6 <DataDecrypt+0x10e>
	memcpy(Payload, CipheringData, *PayloadLen);
    a5e4:	9b05      	ldr	r3, [sp, #20]
    a5e6:	781a      	ldrb	r2, [r3, #0]
    a5e8:	a908      	add	r1, sp, #32
    a5ea:	9804      	ldr	r0, [sp, #16]
    a5ec:	4b05      	ldr	r3, [pc, #20]	; (a604 <DataDecrypt+0x13c>)
    a5ee:	4798      	blx	r3
	return validate_mic();
    a5f0:	4b0b      	ldr	r3, [pc, #44]	; (a620 <DataDecrypt+0x158>)
    a5f2:	4798      	blx	r3
}
    a5f4:	b01d      	add	sp, #116	; 0x74
    a5f6:	bc3c      	pop	{r2, r3, r4, r5}
    a5f8:	4690      	mov	r8, r2
    a5fa:	4699      	mov	r9, r3
    a5fc:	46a2      	mov	sl, r4
    a5fe:	46ab      	mov	fp, r5
    a600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a602:	46c0      	nop			; (mov r8, r8)
    a604:	0000f97b 	.word	0x0000f97b
    a608:	0000b2d5 	.word	0x0000b2d5
    a60c:	20001dc4 	.word	0x20001dc4
    a610:	00011380 	.word	0x00011380
    a614:	0000a231 	.word	0x0000a231
    a618:	20001dd4 	.word	0x20001dd4
    a61c:	20001dec 	.word	0x20001dec
    a620:	0000a49d 	.word	0x0000a49d

0000a624 <MiMAC_Set>:
{
    a624:	b510      	push	{r4, lr}
    switch(id)
    a626:	2800      	cmp	r0, #0
    a628:	d109      	bne.n	a63e <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    a62a:	780b      	ldrb	r3, [r1, #0]
    a62c:	2b1a      	cmp	r3, #26
    a62e:	d807      	bhi.n	a640 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    a630:	4a04      	ldr	r2, [pc, #16]	; (a644 <MiMAC_Set+0x20>)
    a632:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    a634:	0018      	movs	r0, r3
    a636:	4b04      	ldr	r3, [pc, #16]	; (a648 <MiMAC_Set+0x24>)
    a638:	4798      	blx	r3
          return true;
    a63a:	2001      	movs	r0, #1
    a63c:	e000      	b.n	a640 <MiMAC_Set+0x1c>
    return false;
    a63e:	2000      	movs	r0, #0
}
    a640:	bd10      	pop	{r4, pc}
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	20001e02 	.word	0x20001e02
    a648:	0000b235 	.word	0x0000b235

0000a64c <MiMAC_Init>:
{
    a64c:	b570      	push	{r4, r5, r6, lr}
    a64e:	b082      	sub	sp, #8
    a650:	466c      	mov	r4, sp
    a652:	9000      	str	r0, [sp, #0]
    a654:	9101      	str	r1, [sp, #4]
	PHY_Init();
    a656:	4b1b      	ldr	r3, [pc, #108]	; (a6c4 <MiMAC_Init+0x78>)
    a658:	4798      	blx	r3
	MACInitParams = initValue;
    a65a:	4d1b      	ldr	r5, [pc, #108]	; (a6c8 <MiMAC_Init+0x7c>)
    a65c:	002b      	movs	r3, r5
    a65e:	466a      	mov	r2, sp
    a660:	ca03      	ldmia	r2!, {r0, r1}
    a662:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    a664:	4b19      	ldr	r3, [pc, #100]	; (a6cc <MiMAC_Init+0x80>)
    a666:	4798      	blx	r3
    a668:	0006      	movs	r6, r0
	PHY_SetRxState(true);
    a66a:	2001      	movs	r0, #1
    a66c:	4b18      	ldr	r3, [pc, #96]	; (a6d0 <MiMAC_Init+0x84>)
    a66e:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    a670:	4b18      	ldr	r3, [pc, #96]	; (a6d4 <MiMAC_Init+0x88>)
    a672:	701e      	strb	r6, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    a674:	6868      	ldr	r0, [r5, #4]
    a676:	4b18      	ldr	r3, [pc, #96]	; (a6d8 <MiMAC_Init+0x8c>)
    a678:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    a67a:	4b18      	ldr	r3, [pc, #96]	; (a6dc <MiMAC_Init+0x90>)
    a67c:	2200      	movs	r2, #0
    a67e:	701a      	strb	r2, [r3, #0]
    a680:	214e      	movs	r1, #78	; 0x4e
    a682:	545a      	strb	r2, [r3, r1]
    a684:	314e      	adds	r1, #78	; 0x4e
    a686:	545a      	strb	r2, [r3, r1]
    a688:	314e      	adds	r1, #78	; 0x4e
    a68a:	545a      	strb	r2, [r3, r1]
			if (initValue.actionFlags.bits.NetworkFreezer)
    a68c:	7823      	ldrb	r3, [r4, #0]
    a68e:	075b      	lsls	r3, r3, #29
    a690:	d40a      	bmi.n	a6a8 <MiMAC_Init+0x5c>
				OutgoingFrameCounter.Val = 0;
    a692:	4c13      	ldr	r4, [pc, #76]	; (a6e0 <MiMAC_Init+0x94>)
    a694:	2300      	movs	r3, #0
    a696:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a698:	2001      	movs	r0, #1
    a69a:	4b12      	ldr	r3, [pc, #72]	; (a6e4 <MiMAC_Init+0x98>)
    a69c:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    a69e:	2301      	movs	r3, #1
    a6a0:	6023      	str	r3, [r4, #0]
}
    a6a2:	2001      	movs	r0, #1
    a6a4:	b002      	add	sp, #8
    a6a6:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    a6a8:	2001      	movs	r0, #1
    a6aa:	4b0f      	ldr	r3, [pc, #60]	; (a6e8 <MiMAC_Init+0x9c>)
    a6ac:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    a6ae:	4a0c      	ldr	r2, [pc, #48]	; (a6e0 <MiMAC_Init+0x94>)
    a6b0:	6813      	ldr	r3, [r2, #0]
    a6b2:	2180      	movs	r1, #128	; 0x80
    a6b4:	00c9      	lsls	r1, r1, #3
    a6b6:	468c      	mov	ip, r1
    a6b8:	4463      	add	r3, ip
    a6ba:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a6bc:	2001      	movs	r0, #1
    a6be:	4b09      	ldr	r3, [pc, #36]	; (a6e4 <MiMAC_Init+0x98>)
    a6c0:	4798      	blx	r3
    a6c2:	e7ee      	b.n	a6a2 <MiMAC_Init+0x56>
    a6c4:	0000b12d 	.word	0x0000b12d
    a6c8:	20001dac 	.word	0x20001dac
    a6cc:	0000b261 	.word	0x0000b261
    a6d0:	0000b1a9 	.word	0x0000b1a9
    a6d4:	20001d20 	.word	0x20001d20
    a6d8:	0000b301 	.word	0x0000b301
    a6dc:	20001e1c 	.word	0x20001e1c
    a6e0:	20001de8 	.word	0x20001de8
    a6e4:	00009e2d 	.word	0x00009e2d
    a6e8:	00009d4d 	.word	0x00009d4d

0000a6ec <MiMAC_SendPacket>:
{
    a6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ee:	46de      	mov	lr, fp
    a6f0:	4657      	mov	r7, sl
    a6f2:	464e      	mov	r6, r9
    a6f4:	4645      	mov	r5, r8
    a6f6:	b5e0      	push	{r5, r6, r7, lr}
    a6f8:	b08b      	sub	sp, #44	; 0x2c
    a6fa:	1c04      	adds	r4, r0, #0
    a6fc:	9003      	str	r0, [sp, #12]
    a6fe:	9104      	str	r1, [sp, #16]
    a700:	0015      	movs	r5, r2
    a702:	0a2d      	lsrs	r5, r5, #8
    a704:	9205      	str	r2, [sp, #20]
    a706:	9300      	str	r3, [sp, #0]
    a708:	ab15      	add	r3, sp, #84	; 0x54
    a70a:	781b      	ldrb	r3, [r3, #0]
    a70c:	469a      	mov	sl, r3
    a70e:	b2e4      	uxtb	r4, r4
    a710:	06a3      	lsls	r3, r4, #26
    a712:	0fdb      	lsrs	r3, r3, #31
    a714:	4698      	mov	r8, r3
    a716:	9102      	str	r1, [sp, #8]
    a718:	b2d7      	uxtb	r7, r2
    a71a:	b2ed      	uxtb	r5, r5
    if (transParam.flags.bits.broadcast)
    a71c:	0763      	lsls	r3, r4, #29
    a71e:	d500      	bpl.n	a722 <MiMAC_SendPacket+0x36>
        transParam.altDestAddr = true;
    a720:	2701      	movs	r7, #1
    if (transParam.flags.bits.secEn)
    a722:	2308      	movs	r3, #8
    a724:	4023      	ands	r3, r4
    a726:	001a      	movs	r2, r3
        transParam.altSrcAddr = false;
    a728:	4253      	negs	r3, r2
    a72a:	4153      	adcs	r3, r2
    a72c:	425b      	negs	r3, r3
    a72e:	401d      	ands	r5, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    a730:	2303      	movs	r3, #3
    a732:	4023      	ands	r3, r4
    a734:	2b01      	cmp	r3, #1
    a736:	d03a      	beq.n	a7ae <MiMAC_SendPacket+0xc2>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    a738:	425a      	negs	r2, r3
    a73a:	415a      	adcs	r2, r3
        frameControl = 0x03;
    a73c:	b2d2      	uxtb	r2, r2
    a73e:	4691      	mov	r9, r2
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a740:	aa03      	add	r2, sp, #12
    a742:	8952      	ldrh	r2, [r2, #10]
    a744:	49a7      	ldr	r1, [pc, #668]	; (a9e4 <MiMAC_SendPacket+0x2f8>)
    a746:	8809      	ldrh	r1, [r1, #0]
    a748:	4291      	cmp	r1, r2
    a74a:	d033      	beq.n	a7b4 <MiMAC_SendPacket+0xc8>
        IntraPAN = false;
    a74c:	2200      	movs	r2, #0
    a74e:	4693      	mov	fp, r2
        headerLength = 7;
    a750:	3207      	adds	r2, #7
        headerLength += 8;
    a752:	0016      	movs	r6, r2
    a754:	3608      	adds	r6, #8
    if (transParam.altDestAddr)
    a756:	2f00      	cmp	r7, #0
    a758:	d000      	beq.n	a75c <MiMAC_SendPacket+0x70>
        headerLength += 2;
    a75a:	1c96      	adds	r6, r2, #2
    if (transParam.altSrcAddr)
    a75c:	2d00      	cmp	r5, #0
    a75e:	d038      	beq.n	a7d2 <MiMAC_SendPacket+0xe6>
        headerLength += 2;
    a760:	3602      	adds	r6, #2
    a762:	b2f2      	uxtb	r2, r6
    a764:	9201      	str	r2, [sp, #4]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    a766:	2224      	movs	r2, #36	; 0x24
    a768:	4014      	ands	r4, r2
    a76a:	2c20      	cmp	r4, #32
    a76c:	d035      	beq.n	a7da <MiMAC_SendPacket+0xee>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a76e:	2b03      	cmp	r3, #3
    a770:	d038      	beq.n	a7e4 <MiMAC_SendPacket+0xf8>
    if (transParam.flags.bits.secEn)
    a772:	ab03      	add	r3, sp, #12
    a774:	4642      	mov	r2, r8
    a776:	0152      	lsls	r2, r2, #5
    a778:	781c      	ldrb	r4, [r3, #0]
    a77a:	2120      	movs	r1, #32
    a77c:	438c      	bics	r4, r1
    a77e:	4314      	orrs	r4, r2
    a780:	701c      	strb	r4, [r3, #0]
    a782:	0723      	lsls	r3, r4, #28
    a784:	d436      	bmi.n	a7f4 <MiMAC_SendPacket+0x108>
		packet[loc++] = MACPayloadLen+headerLength;
    a786:	ab14      	add	r3, sp, #80	; 0x50
    a788:	781b      	ldrb	r3, [r3, #0]
    a78a:	9a01      	ldr	r2, [sp, #4]
    a78c:	18d6      	adds	r6, r2, r3
    a78e:	4b96      	ldr	r3, [pc, #600]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a790:	701e      	strb	r6, [r3, #0]
	packet[loc++] = frameControl;
    a792:	4b95      	ldr	r3, [pc, #596]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a794:	464a      	mov	r2, r9
    a796:	705a      	strb	r2, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a798:	43e3      	mvns	r3, r4
    a79a:	079b      	lsls	r3, r3, #30
    a79c:	d03d      	beq.n	a81a <MiMAC_SendPacket+0x12e>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    a79e:	2f00      	cmp	r7, #0
    a7a0:	d05d      	beq.n	a85e <MiMAC_SendPacket+0x172>
    a7a2:	2d00      	cmp	r5, #0
    a7a4:	d043      	beq.n	a82e <MiMAC_SendPacket+0x142>
			packet[loc++] = 0x88;
    a7a6:	2288      	movs	r2, #136	; 0x88
    a7a8:	4b8f      	ldr	r3, [pc, #572]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a7aa:	709a      	strb	r2, [r3, #2]
    a7ac:	e042      	b.n	a834 <MiMAC_SendPacket+0x148>
        frameControl = 0x03;
    a7ae:	2203      	movs	r2, #3
    a7b0:	4691      	mov	r9, r2
    a7b2:	e7c5      	b.n	a740 <MiMAC_SendPacket+0x54>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a7b4:	498d      	ldr	r1, [pc, #564]	; (a9ec <MiMAC_SendPacket+0x300>)
    a7b6:	428a      	cmp	r2, r1
    a7b8:	d007      	beq.n	a7ca <MiMAC_SendPacket+0xde>
        frameControl |= 0x40;
    a7ba:	2240      	movs	r2, #64	; 0x40
    a7bc:	4649      	mov	r1, r9
    a7be:	4311      	orrs	r1, r2
    a7c0:	4689      	mov	r9, r1
        IntraPAN = true;
    a7c2:	3a3f      	subs	r2, #63	; 0x3f
    a7c4:	4693      	mov	fp, r2
        headerLength = 5;
    a7c6:	3204      	adds	r2, #4
        IntraPAN = true;
    a7c8:	e7c3      	b.n	a752 <MiMAC_SendPacket+0x66>
        IntraPAN = false;
    a7ca:	2200      	movs	r2, #0
    a7cc:	4693      	mov	fp, r2
        headerLength = 7;
    a7ce:	3207      	adds	r2, #7
    a7d0:	e7bf      	b.n	a752 <MiMAC_SendPacket+0x66>
        headerLength += 8;
    a7d2:	3608      	adds	r6, #8
    a7d4:	b2f2      	uxtb	r2, r6
    a7d6:	9201      	str	r2, [sp, #4]
    a7d8:	e7c5      	b.n	a766 <MiMAC_SendPacket+0x7a>
        frameControl |= 0x20;
    a7da:	3a04      	subs	r2, #4
    a7dc:	4649      	mov	r1, r9
    a7de:	4311      	orrs	r1, r2
    a7e0:	4689      	mov	r9, r1
    a7e2:	e7c4      	b.n	a76e <MiMAC_SendPacket+0x82>
        transParam.altSrcAddr = true;
    a7e4:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    a7e6:	2300      	movs	r3, #0
    a7e8:	4698      	mov	r8, r3
        IntraPAN = false;
    a7ea:	469b      	mov	fp, r3
        frameControl = 0x00;
    a7ec:	4699      	mov	r9, r3
        headerLength = 7;
    a7ee:	3307      	adds	r3, #7
    a7f0:	9301      	str	r3, [sp, #4]
    a7f2:	e7be      	b.n	a772 <MiMAC_SendPacket+0x86>
        frameControl |= 0x08;
    a7f4:	2308      	movs	r3, #8
    a7f6:	464a      	mov	r2, r9
    a7f8:	431a      	orrs	r2, r3
    a7fa:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    a7fc:	4b7c      	ldr	r3, [pc, #496]	; (a9f0 <MiMAC_SendPacket+0x304>)
    a7fe:	681a      	ldr	r2, [r3, #0]
    a800:	464b      	mov	r3, r9
    a802:	a914      	add	r1, sp, #80	; 0x50
    a804:	9800      	ldr	r0, [sp, #0]
    a806:	4e7b      	ldr	r6, [pc, #492]	; (a9f4 <MiMAC_SendPacket+0x308>)
    a808:	47b0      	blx	r6
		packet[loc++] = MACPayloadLen+headerLength+9;
    a80a:	ab14      	add	r3, sp, #80	; 0x50
    a80c:	781b      	ldrb	r3, [r3, #0]
    a80e:	3309      	adds	r3, #9
    a810:	9a01      	ldr	r2, [sp, #4]
    a812:	18d6      	adds	r6, r2, r3
    a814:	4b74      	ldr	r3, [pc, #464]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a816:	701e      	strb	r6, [r3, #0]
    a818:	e7bb      	b.n	a792 <MiMAC_SendPacket+0xa6>
		packet[loc++] = 0x80;
    a81a:	4b73      	ldr	r3, [pc, #460]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a81c:	2280      	movs	r2, #128	; 0x80
    a81e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a820:	4975      	ldr	r1, [pc, #468]	; (a9f8 <MiMAC_SendPacket+0x30c>)
    a822:	780a      	ldrb	r2, [r1, #0]
    a824:	1c50      	adds	r0, r2, #1
    a826:	7008      	strb	r0, [r1, #0]
    a828:	70da      	strb	r2, [r3, #3]
    a82a:	2304      	movs	r3, #4
    a82c:	e03e      	b.n	a8ac <MiMAC_SendPacket+0x1c0>
			packet[loc++] = 0xC8;
    a82e:	22c8      	movs	r2, #200	; 0xc8
    a830:	4b6d      	ldr	r3, [pc, #436]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a832:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a834:	4b70      	ldr	r3, [pc, #448]	; (a9f8 <MiMAC_SendPacket+0x30c>)
    a836:	781a      	ldrb	r2, [r3, #0]
    a838:	1c51      	adds	r1, r2, #1
    a83a:	7019      	strb	r1, [r3, #0]
    a83c:	4b6a      	ldr	r3, [pc, #424]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a83e:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a840:	aa03      	add	r2, sp, #12
    a842:	7a91      	ldrb	r1, [r2, #10]
    a844:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a846:	7ad2      	ldrb	r2, [r2, #11]
    a848:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a84a:	0763      	lsls	r3, r4, #29
    a84c:	d429      	bmi.n	a8a2 <MiMAC_SendPacket+0x1b6>
				packet[loc++] = transParam.DestAddress[0];
    a84e:	9902      	ldr	r1, [sp, #8]
    a850:	780a      	ldrb	r2, [r1, #0]
    a852:	4b65      	ldr	r3, [pc, #404]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a854:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    a856:	784a      	ldrb	r2, [r1, #1]
    a858:	71da      	strb	r2, [r3, #7]
    a85a:	2308      	movs	r3, #8
    a85c:	e026      	b.n	a8ac <MiMAC_SendPacket+0x1c0>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    a85e:	2d00      	cmp	r5, #0
    a860:	d00f      	beq.n	a882 <MiMAC_SendPacket+0x196>
			packet[loc++] = 0x8C;
    a862:	4b61      	ldr	r3, [pc, #388]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a864:	228c      	movs	r2, #140	; 0x8c
    a866:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a868:	4963      	ldr	r1, [pc, #396]	; (a9f8 <MiMAC_SendPacket+0x30c>)
    a86a:	780a      	ldrb	r2, [r1, #0]
    a86c:	1c50      	adds	r0, r2, #1
    a86e:	7008      	strb	r0, [r1, #0]
    a870:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a872:	aa03      	add	r2, sp, #12
    a874:	7a91      	ldrb	r1, [r2, #10]
    a876:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a878:	7ad2      	ldrb	r2, [r2, #11]
    a87a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a87c:	0763      	lsls	r3, r4, #29
    a87e:	d410      	bmi.n	a8a2 <MiMAC_SendPacket+0x1b6>
    a880:	e08f      	b.n	a9a2 <MiMAC_SendPacket+0x2b6>
			packet[loc++] = 0xCC;
    a882:	4b59      	ldr	r3, [pc, #356]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a884:	22cc      	movs	r2, #204	; 0xcc
    a886:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a888:	495b      	ldr	r1, [pc, #364]	; (a9f8 <MiMAC_SendPacket+0x30c>)
    a88a:	780a      	ldrb	r2, [r1, #0]
    a88c:	1c50      	adds	r0, r2, #1
    a88e:	7008      	strb	r0, [r1, #0]
    a890:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a892:	aa03      	add	r2, sp, #12
    a894:	7a91      	ldrb	r1, [r2, #10]
    a896:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a898:	7ad2      	ldrb	r2, [r2, #11]
    a89a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a89c:	0763      	lsls	r3, r4, #29
    a89e:	d400      	bmi.n	a8a2 <MiMAC_SendPacket+0x1b6>
    a8a0:	e07c      	b.n	a99c <MiMAC_SendPacket+0x2b0>
			packet[loc++] = 0xFF;
    a8a2:	4b51      	ldr	r3, [pc, #324]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a8a4:	22ff      	movs	r2, #255	; 0xff
    a8a6:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    a8a8:	71da      	strb	r2, [r3, #7]
    a8aa:	2308      	movs	r3, #8
    if (IntraPAN == false)
    a8ac:	465a      	mov	r2, fp
    a8ae:	2a00      	cmp	r2, #0
    a8b0:	d109      	bne.n	a8c6 <MiMAC_SendPacket+0x1da>
		packet[loc++] = MAC_PANID.v[0];
    a8b2:	1c5a      	adds	r2, r3, #1
    a8b4:	b2d2      	uxtb	r2, r2
    a8b6:	494c      	ldr	r1, [pc, #304]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a8b8:	484a      	ldr	r0, [pc, #296]	; (a9e4 <MiMAC_SendPacket+0x2f8>)
    a8ba:	7804      	ldrb	r4, [r0, #0]
    a8bc:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    a8be:	3302      	adds	r3, #2
    a8c0:	b2db      	uxtb	r3, r3
    a8c2:	7840      	ldrb	r0, [r0, #1]
    a8c4:	5488      	strb	r0, [r1, r2]
    if (transParam.altSrcAddr)
    a8c6:	2d00      	cmp	r5, #0
    a8c8:	d100      	bne.n	a8cc <MiMAC_SendPacket+0x1e0>
    a8ca:	e075      	b.n	a9b8 <MiMAC_SendPacket+0x2cc>
		packet[loc++] = myNetworkAddress.v[0];
    a8cc:	4a46      	ldr	r2, [pc, #280]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a8ce:	494b      	ldr	r1, [pc, #300]	; (a9fc <MiMAC_SendPacket+0x310>)
    a8d0:	7808      	ldrb	r0, [r1, #0]
    a8d2:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    a8d4:	1c9c      	adds	r4, r3, #2
    a8d6:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    a8d8:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    a8da:	b2db      	uxtb	r3, r3
    a8dc:	7849      	ldrb	r1, [r1, #1]
    a8de:	54d1      	strb	r1, [r2, r3]
if (transParam.flags.bits.secEn)
    a8e0:	aa03      	add	r2, sp, #12
    a8e2:	4643      	mov	r3, r8
    a8e4:	0159      	lsls	r1, r3, #5
    a8e6:	7813      	ldrb	r3, [r2, #0]
    a8e8:	2020      	movs	r0, #32
    a8ea:	4383      	bics	r3, r0
    a8ec:	430b      	orrs	r3, r1
    a8ee:	7013      	strb	r3, [r2, #0]
    a8f0:	071b      	lsls	r3, r3, #28
    a8f2:	d51b      	bpl.n	a92c <MiMAC_SendPacket+0x240>
    a8f4:	0022      	movs	r2, r4
    a8f6:	2300      	movs	r3, #0
		packet[loc++] = OutgoingFrameCounter.v[i];
    a8f8:	4e3b      	ldr	r6, [pc, #236]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a8fa:	4d3d      	ldr	r5, [pc, #244]	; (a9f0 <MiMAC_SendPacket+0x304>)
    a8fc:	1c51      	adds	r1, r2, #1
    a8fe:	5ce8      	ldrb	r0, [r5, r3]
    a900:	54b0      	strb	r0, [r6, r2]
    a902:	3301      	adds	r3, #1
    a904:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    a906:	2b04      	cmp	r3, #4
    a908:	d1f8      	bne.n	a8fc <MiMAC_SendPacket+0x210>
    a90a:	1d25      	adds	r5, r4, #4
    a90c:	b2ed      	uxtb	r5, r5
	OutgoingFrameCounter.Val++;
    a90e:	4a38      	ldr	r2, [pc, #224]	; (a9f0 <MiMAC_SendPacket+0x304>)
    a910:	6813      	ldr	r3, [r2, #0]
    a912:	3301      	adds	r3, #1
    a914:	6013      	str	r3, [r2, #0]
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    a916:	b2db      	uxtb	r3, r3
    a918:	2b00      	cmp	r3, #0
    a91a:	d102      	bne.n	a922 <MiMAC_SendPacket+0x236>
    a91c:	7853      	ldrb	r3, [r2, #1]
    a91e:	079b      	lsls	r3, r3, #30
    a920:	d059      	beq.n	a9d6 <MiMAC_SendPacket+0x2ea>
	packet[loc++] = myKeySequenceNumber;
    a922:	3405      	adds	r4, #5
    a924:	b2e4      	uxtb	r4, r4
    a926:	2200      	movs	r2, #0
    a928:	4b2f      	ldr	r3, [pc, #188]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a92a:	555a      	strb	r2, [r3, r5]
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a92c:	ab14      	add	r3, sp, #80	; 0x50
    a92e:	781a      	ldrb	r2, [r3, #0]
    a930:	2a00      	cmp	r2, #0
    a932:	d054      	beq.n	a9de <MiMAC_SendPacket+0x2f2>
    a934:	9b00      	ldr	r3, [sp, #0]
    a936:	18a2      	adds	r2, r4, r2
    a938:	b2d2      	uxtb	r2, r2
	    packet[loc++] = MACPayload[i];
    a93a:	4d2b      	ldr	r5, [pc, #172]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a93c:	1c61      	adds	r1, r4, #1
    a93e:	7818      	ldrb	r0, [r3, #0]
    a940:	5528      	strb	r0, [r5, r4]
    a942:	3301      	adds	r3, #1
    a944:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a946:	4294      	cmp	r4, r2
    a948:	d1f8      	bne.n	a93c <MiMAC_SendPacket+0x250>
	packet[loc++] = final_mic_value[0];
    a94a:	4b27      	ldr	r3, [pc, #156]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a94c:	492c      	ldr	r1, [pc, #176]	; (aa00 <MiMAC_SendPacket+0x314>)
    a94e:	7808      	ldrb	r0, [r1, #0]
    a950:	5498      	strb	r0, [r3, r2]
    a952:	1c50      	adds	r0, r2, #1
	packet[loc++] = final_mic_value[1];
    a954:	b2c0      	uxtb	r0, r0
    a956:	784c      	ldrb	r4, [r1, #1]
    a958:	541c      	strb	r4, [r3, r0]
    a95a:	1c90      	adds	r0, r2, #2
	packet[loc++] = final_mic_value[2];
    a95c:	b2c0      	uxtb	r0, r0
    a95e:	788c      	ldrb	r4, [r1, #2]
    a960:	541c      	strb	r4, [r3, r0]
    a962:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    a964:	b2d2      	uxtb	r2, r2
    a966:	78c9      	ldrb	r1, [r1, #3]
    a968:	5499      	strb	r1, [r3, r2]
    dataPointer = MACPayload;
    a96a:	4a26      	ldr	r2, [pc, #152]	; (aa04 <MiMAC_SendPacket+0x318>)
    a96c:	9900      	ldr	r1, [sp, #0]
    a96e:	6011      	str	r1, [r2, #0]
	dataConfCallback = ConfCallback;
    a970:	4a25      	ldr	r2, [pc, #148]	; (aa08 <MiMAC_SendPacket+0x31c>)
    a972:	9916      	ldr	r1, [sp, #88]	; 0x58
    a974:	6011      	str	r1, [r2, #0]
    dataHandle = msghandle;
    a976:	4a25      	ldr	r2, [pc, #148]	; (aa0c <MiMAC_SendPacket+0x320>)
    a978:	4651      	mov	r1, sl
    a97a:	7011      	strb	r1, [r2, #0]
    phyDataRequest.polledConfirmation = false;
    a97c:	a807      	add	r0, sp, #28
    a97e:	2200      	movs	r2, #0
    a980:	7002      	strb	r2, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    a982:	4a23      	ldr	r2, [pc, #140]	; (aa10 <MiMAC_SendPacket+0x324>)
    a984:	6082      	str	r2, [r0, #8]
    phyDataRequest.data = packet;
    a986:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    a988:	4b22      	ldr	r3, [pc, #136]	; (aa14 <MiMAC_SendPacket+0x328>)
    a98a:	4798      	blx	r3
}
    a98c:	2001      	movs	r0, #1
    a98e:	b00b      	add	sp, #44	; 0x2c
    a990:	bc3c      	pop	{r2, r3, r4, r5}
    a992:	4690      	mov	r8, r2
    a994:	4699      	mov	r9, r3
    a996:	46a2      	mov	sl, r4
    a998:	46ab      	mov	fp, r5
    a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    a99c:	2f00      	cmp	r7, #0
    a99e:	d000      	beq.n	a9a2 <MiMAC_SendPacket+0x2b6>
    a9a0:	e755      	b.n	a84e <MiMAC_SendPacket+0x162>
        headerLength = 7;
    a9a2:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    a9a4:	4810      	ldr	r0, [pc, #64]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a9a6:	9c02      	ldr	r4, [sp, #8]
    a9a8:	5ce1      	ldrb	r1, [r4, r3]
    a9aa:	181a      	adds	r2, r3, r0
    a9ac:	7191      	strb	r1, [r2, #6]
    a9ae:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    a9b0:	2b08      	cmp	r3, #8
    a9b2:	d1f9      	bne.n	a9a8 <MiMAC_SendPacket+0x2bc>
					packet[loc++] = transParam.DestAddress[i];
    a9b4:	3306      	adds	r3, #6
    a9b6:	e779      	b.n	a8ac <MiMAC_SendPacket+0x1c0>
			packet[loc++] = MACInitParams.PAddress[i];
    a9b8:	4a17      	ldr	r2, [pc, #92]	; (aa18 <MiMAC_SendPacket+0x32c>)
    a9ba:	6852      	ldr	r2, [r2, #4]
    a9bc:	0018      	movs	r0, r3
    a9be:	3008      	adds	r0, #8
    a9c0:	b2c0      	uxtb	r0, r0
    a9c2:	4d09      	ldr	r5, [pc, #36]	; (a9e8 <MiMAC_SendPacket+0x2fc>)
    a9c4:	1c5c      	adds	r4, r3, #1
    a9c6:	b2e4      	uxtb	r4, r4
    a9c8:	7811      	ldrb	r1, [r2, #0]
    a9ca:	54e9      	strb	r1, [r5, r3]
    a9cc:	3201      	adds	r2, #1
    a9ce:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    a9d0:	42a0      	cmp	r0, r4
    a9d2:	d1f7      	bne.n	a9c4 <MiMAC_SendPacket+0x2d8>
    a9d4:	e784      	b.n	a8e0 <MiMAC_SendPacket+0x1f4>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a9d6:	2001      	movs	r0, #1
    a9d8:	4b10      	ldr	r3, [pc, #64]	; (aa1c <MiMAC_SendPacket+0x330>)
    a9da:	4798      	blx	r3
    a9dc:	e7a1      	b.n	a922 <MiMAC_SendPacket+0x236>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a9de:	0022      	movs	r2, r4
    a9e0:	e7b3      	b.n	a94a <MiMAC_SendPacket+0x25e>
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	20001e00 	.word	0x20001e00
    a9e8:	20001d24 	.word	0x20001d24
    a9ec:	0000ffff 	.word	0x0000ffff
    a9f0:	20001de8 	.word	0x20001de8
    a9f4:	0000a361 	.word	0x0000a361
    a9f8:	20001d20 	.word	0x20001d20
    a9fc:	20001da4 	.word	0x20001da4
    aa00:	20001dd4 	.word	0x20001dd4
    aa04:	20000368 	.word	0x20000368
    aa08:	20000360 	.word	0x20000360
    aa0c:	20000364 	.word	0x20000364
    aa10:	0000a1e5 	.word	0x0000a1e5
    aa14:	0000b051 	.word	0x0000b051
    aa18:	20001dac 	.word	0x20001dac
    aa1c:	00009e2d 	.word	0x00009e2d

0000aa20 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    aa20:	4b04      	ldr	r3, [pc, #16]	; (aa34 <MiMAC_DiscardPacket+0x14>)
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	2b03      	cmp	r3, #3
    aa26:	d804      	bhi.n	aa32 <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    aa28:	224e      	movs	r2, #78	; 0x4e
    aa2a:	4353      	muls	r3, r2
    aa2c:	2100      	movs	r1, #0
    aa2e:	4a02      	ldr	r2, [pc, #8]	; (aa38 <MiMAC_DiscardPacket+0x18>)
    aa30:	5499      	strb	r1, [r3, r2]
}
    aa32:	4770      	bx	lr
    aa34:	2000000a 	.word	0x2000000a
    aa38:	20001e1c 	.word	0x20001e1c

0000aa3c <MiMAC_ReceivedPacket>:
{
    aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa3e:	46ce      	mov	lr, r9
    aa40:	b500      	push	{lr}
    aa42:	b082      	sub	sp, #8
	BankIndex = 0xFF;
    aa44:	22ff      	movs	r2, #255	; 0xff
    aa46:	4bd4      	ldr	r3, [pc, #848]	; (ad98 <MiMAC_ReceivedPacket+0x35c>)
    aa48:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    aa4a:	4bd4      	ldr	r3, [pc, #848]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aa4c:	781b      	ldrb	r3, [r3, #0]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d000      	beq.n	aa54 <MiMAC_ReceivedPacket+0x18>
    aa52:	e22c      	b.n	aeae <MiMAC_ReceivedPacket+0x472>
    aa54:	334e      	adds	r3, #78	; 0x4e
    aa56:	4ad1      	ldr	r2, [pc, #836]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aa58:	5cd3      	ldrb	r3, [r2, r3]
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	d10d      	bne.n	aa7a <MiMAC_ReceivedPacket+0x3e>
    aa5e:	339c      	adds	r3, #156	; 0x9c
    aa60:	5cd3      	ldrb	r3, [r2, r3]
    aa62:	2b00      	cmp	r3, #0
    aa64:	d132      	bne.n	aacc <MiMAC_ReceivedPacket+0x90>
    aa66:	33ea      	adds	r3, #234	; 0xea
    aa68:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    aa6a:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    aa6c:	2103      	movs	r1, #3
		if (RxBuffer[i].PayloadLen > 0)
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d104      	bne.n	aa7c <MiMAC_ReceivedPacket+0x40>
}
    aa72:	b002      	add	sp, #8
    aa74:	bc04      	pop	{r2}
    aa76:	4691      	mov	r9, r2
    aa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    aa7a:	2101      	movs	r1, #1
			BankIndex = i;
    aa7c:	4bc6      	ldr	r3, [pc, #792]	; (ad98 <MiMAC_ReceivedPacket+0x35c>)
    aa7e:	7019      	strb	r1, [r3, #0]
	return false;
    aa80:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    aa82:	2903      	cmp	r1, #3
    aa84:	d8f5      	bhi.n	aa72 <MiMAC_ReceivedPacket+0x36>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    aa86:	000a      	movs	r2, r1
    aa88:	204e      	movs	r0, #78	; 0x4e
    aa8a:	4348      	muls	r0, r1
    aa8c:	4bc3      	ldr	r3, [pc, #780]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aa8e:	181b      	adds	r3, r3, r0
    aa90:	785d      	ldrb	r5, [r3, #1]
    aa92:	2440      	movs	r4, #64	; 0x40
    aa94:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    aa96:	48c2      	ldr	r0, [pc, #776]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    aa98:	2400      	movs	r4, #0
    aa9a:	7004      	strb	r4, [r0, #0]
		MACRxPacket.altSourceAddress = false;
    aa9c:	73c4      	strb	r4, [r0, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    aa9e:	3c01      	subs	r4, #1
    aaa0:	8204      	strh	r4, [r0, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    aaa2:	789b      	ldrb	r3, [r3, #2]
    aaa4:	2033      	movs	r0, #51	; 0x33
    aaa6:	4383      	bics	r3, r0
		switch (addrMode)
    aaa8:	b2d8      	uxtb	r0, r3
    aaaa:	2888      	cmp	r0, #136	; 0x88
    aaac:	d100      	bne.n	aab0 <MiMAC_ReceivedPacket+0x74>
    aaae:	e0e4      	b.n	ac7a <MiMAC_ReceivedPacket+0x23e>
    aab0:	d90e      	bls.n	aad0 <MiMAC_ReceivedPacket+0x94>
    aab2:	b2d8      	uxtb	r0, r3
    aab4:	28c8      	cmp	r0, #200	; 0xc8
    aab6:	d04c      	beq.n	ab52 <MiMAC_ReceivedPacket+0x116>
    aab8:	28cc      	cmp	r0, #204	; 0xcc
    aaba:	d100      	bne.n	aabe <MiMAC_ReceivedPacket+0x82>
    aabc:	e0ac      	b.n	ac18 <MiMAC_ReceivedPacket+0x1dc>
    aabe:	288c      	cmp	r0, #140	; 0x8c
    aac0:	d100      	bne.n	aac4 <MiMAC_ReceivedPacket+0x88>
    aac2:	e122      	b.n	ad0a <MiMAC_ReceivedPacket+0x2ce>
			MiMAC_DiscardPacket();
    aac4:	4bb7      	ldr	r3, [pc, #732]	; (ada4 <MiMAC_ReceivedPacket+0x368>)
    aac6:	4798      	blx	r3
			return false;
    aac8:	2000      	movs	r0, #0
    aaca:	e7d2      	b.n	aa72 <MiMAC_ReceivedPacket+0x36>
	for (i = 0; i < BANK_SIZE; i++)
    aacc:	2102      	movs	r1, #2
    aace:	e7d5      	b.n	aa7c <MiMAC_ReceivedPacket+0x40>
		switch (addrMode)
    aad0:	2b08      	cmp	r3, #8
    aad2:	d100      	bne.n	aad6 <MiMAC_ReceivedPacket+0x9a>
    aad4:	e14d      	b.n	ad72 <MiMAC_ReceivedPacket+0x336>
    aad6:	2880      	cmp	r0, #128	; 0x80
    aad8:	d1f4      	bne.n	aac4 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    aada:	48b1      	ldr	r0, [pc, #708]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    aadc:	7803      	ldrb	r3, [r0, #0]
    aade:	2404      	movs	r4, #4
    aae0:	4323      	orrs	r3, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    aae2:	2480      	movs	r4, #128	; 0x80
    aae4:	4264      	negs	r4, r4
    aae6:	4323      	orrs	r3, r4
    aae8:	7003      	strb	r3, [r0, #0]
				MACRxPacket.altSourceAddress = true;
    aaea:	2301      	movs	r3, #1
    aaec:	73c3      	strb	r3, [r0, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    aaee:	4cab      	ldr	r4, [pc, #684]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aaf0:	334d      	adds	r3, #77	; 0x4d
    aaf2:	435a      	muls	r2, r3
    aaf4:	18a5      	adds	r5, r4, r2
    aaf6:	792e      	ldrb	r6, [r5, #4]
    aaf8:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    aafa:	796d      	ldrb	r5, [r5, #5]
    aafc:	7445      	strb	r5, [r0, #17]
    aafe:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    ab00:	1d8b      	adds	r3, r1, #6
    ab02:	191b      	adds	r3, r3, r4
    ab04:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    ab06:	5d13      	ldrb	r3, [r2, r4]
    ab08:	3b0b      	subs	r3, #11
    ab0a:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    ab0c:	3108      	adds	r1, #8
    ab0e:	1909      	adds	r1, r1, r4
    ab10:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    ab12:	4ba1      	ldr	r3, [pc, #644]	; (ad98 <MiMAC_ReceivedPacket+0x35c>)
    ab14:	781a      	ldrb	r2, [r3, #0]
    ab16:	234e      	movs	r3, #78	; 0x4e
    ab18:	435a      	muls	r2, r3
    ab1a:	4ba0      	ldr	r3, [pc, #640]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ab1c:	189b      	adds	r3, r3, r2
    ab1e:	785b      	ldrb	r3, [r3, #1]
    ab20:	071b      	lsls	r3, r3, #28
    ab22:	d500      	bpl.n	ab26 <MiMAC_ReceivedPacket+0xea>
    ab24:	e151      	b.n	adca <MiMAC_ReceivedPacket+0x38e>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    ab26:	4b9c      	ldr	r3, [pc, #624]	; (ad98 <MiMAC_ReceivedPacket+0x35c>)
    ab28:	7818      	ldrb	r0, [r3, #0]
    ab2a:	214e      	movs	r1, #78	; 0x4e
    ab2c:	4341      	muls	r1, r0
    ab2e:	4a9b      	ldr	r2, [pc, #620]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ab30:	1852      	adds	r2, r2, r1
    ab32:	7852      	ldrb	r2, [r2, #1]
    ab34:	2307      	movs	r3, #7
    ab36:	4013      	ands	r3, r2
    ab38:	2b01      	cmp	r3, #1
    ab3a:	d100      	bne.n	ab3e <MiMAC_ReceivedPacket+0x102>
    ab3c:	e196      	b.n	ae6c <MiMAC_ReceivedPacket+0x430>
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d100      	bne.n	ab44 <MiMAC_ReceivedPacket+0x108>
    ab42:	e1ae      	b.n	aea2 <MiMAC_ReceivedPacket+0x466>
    ab44:	2b03      	cmp	r3, #3
    ab46:	d100      	bne.n	ab4a <MiMAC_ReceivedPacket+0x10e>
    ab48:	e1a3      	b.n	ae92 <MiMAC_ReceivedPacket+0x456>
			MiMAC_DiscardPacket();
    ab4a:	4b96      	ldr	r3, [pc, #600]	; (ada4 <MiMAC_ReceivedPacket+0x368>)
    ab4c:	4798      	blx	r3
			return false;
    ab4e:	2000      	movs	r0, #0
    ab50:	e78f      	b.n	aa72 <MiMAC_ReceivedPacket+0x36>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ab52:	204e      	movs	r0, #78	; 0x4e
    ab54:	4348      	muls	r0, r1
    ab56:	4b91      	ldr	r3, [pc, #580]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ab58:	181b      	adds	r3, r3, r0
    ab5a:	799b      	ldrb	r3, [r3, #6]
    ab5c:	2bff      	cmp	r3, #255	; 0xff
    ab5e:	d039      	beq.n	abd4 <MiMAC_ReceivedPacket+0x198>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    ab60:	488f      	ldr	r0, [pc, #572]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ab62:	7804      	ldrb	r4, [r0, #0]
    ab64:	2380      	movs	r3, #128	; 0x80
    ab66:	425b      	negs	r3, r3
    ab68:	4323      	orrs	r3, r4
    ab6a:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    ab6c:	2d00      	cmp	r5, #0
    ab6e:	d03e      	beq.n	abee <MiMAC_ReceivedPacket+0x1b2>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ab70:	4c8a      	ldr	r4, [pc, #552]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ab72:	234e      	movs	r3, #78	; 0x4e
    ab74:	435a      	muls	r2, r3
    ab76:	18a5      	adds	r5, r4, r2
    ab78:	792e      	ldrb	r6, [r5, #4]
    ab7a:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ab7c:	796d      	ldrb	r5, [r5, #5]
    ab7e:	7445      	strb	r5, [r0, #17]
    ab80:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    ab82:	000b      	movs	r3, r1
    ab84:	3308      	adds	r3, #8
    ab86:	191b      	adds	r3, r3, r4
    ab88:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    ab8a:	5d13      	ldrb	r3, [r2, r4]
    ab8c:	3b13      	subs	r3, #19
    ab8e:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    ab90:	3110      	adds	r1, #16
    ab92:	1909      	adds	r1, r1, r4
    ab94:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    ab96:	4b80      	ldr	r3, [pc, #512]	; (ad98 <MiMAC_ReceivedPacket+0x35c>)
    ab98:	781a      	ldrb	r2, [r3, #0]
    ab9a:	234e      	movs	r3, #78	; 0x4e
    ab9c:	435a      	muls	r2, r3
    ab9e:	4b7f      	ldr	r3, [pc, #508]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aba0:	189b      	adds	r3, r3, r2
    aba2:	785b      	ldrb	r3, [r3, #1]
    aba4:	071b      	lsls	r3, r3, #28
    aba6:	d5be      	bpl.n	ab26 <MiMAC_ReceivedPacket+0xea>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    aba8:	4b7d      	ldr	r3, [pc, #500]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    abaa:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    abac:	785a      	ldrb	r2, [r3, #1]
    abae:	0212      	lsls	r2, r2, #8
    abb0:	781d      	ldrb	r5, [r3, #0]
    abb2:	4315      	orrs	r5, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    abb4:	789a      	ldrb	r2, [r3, #2]
    abb6:	0412      	lsls	r2, r2, #16
    abb8:	497b      	ldr	r1, [pc, #492]	; (ada8 <MiMAC_ReceivedPacket+0x36c>)
    abba:	400d      	ands	r5, r1
    abbc:	4315      	orrs	r5, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    abbe:	78db      	ldrb	r3, [r3, #3]
    abc0:	061b      	lsls	r3, r3, #24
    abc2:	022a      	lsls	r2, r5, #8
    abc4:	0a12      	lsrs	r2, r2, #8
    abc6:	431a      	orrs	r2, r3
    abc8:	0015      	movs	r5, r2
    abca:	2400      	movs	r4, #0
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    abcc:	4e77      	ldr	r6, [pc, #476]	; (adac <MiMAC_ReceivedPacket+0x370>)
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    abce:	4b74      	ldr	r3, [pc, #464]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    abd0:	4699      	mov	r9, r3
    abd2:	e101      	b.n	add8 <MiMAC_ReceivedPacket+0x39c>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    abd4:	204e      	movs	r0, #78	; 0x4e
    abd6:	4348      	muls	r0, r1
    abd8:	4b70      	ldr	r3, [pc, #448]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    abda:	181b      	adds	r3, r3, r0
    abdc:	79db      	ldrb	r3, [r3, #7]
    abde:	2bff      	cmp	r3, #255	; 0xff
    abe0:	d1be      	bne.n	ab60 <MiMAC_ReceivedPacket+0x124>
				MACRxPacket.flags.bits.broadcast = 1;
    abe2:	486f      	ldr	r0, [pc, #444]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    abe4:	7803      	ldrb	r3, [r0, #0]
    abe6:	2404      	movs	r4, #4
    abe8:	4323      	orrs	r3, r4
    abea:	7003      	strb	r3, [r0, #0]
    abec:	e7b8      	b.n	ab60 <MiMAC_ReceivedPacket+0x124>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    abee:	486c      	ldr	r0, [pc, #432]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    abf0:	4c6a      	ldr	r4, [pc, #424]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    abf2:	234e      	movs	r3, #78	; 0x4e
    abf4:	435a      	muls	r2, r3
    abf6:	18a5      	adds	r5, r4, r2
    abf8:	7a2e      	ldrb	r6, [r5, #8]
    abfa:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    abfc:	7a6d      	ldrb	r5, [r5, #9]
    abfe:	7445      	strb	r5, [r0, #17]
    ac00:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    ac02:	000b      	movs	r3, r1
    ac04:	330a      	adds	r3, #10
    ac06:	191b      	adds	r3, r3, r4
    ac08:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    ac0a:	5d13      	ldrb	r3, [r2, r4]
    ac0c:	3b15      	subs	r3, #21
    ac0e:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    ac10:	3112      	adds	r1, #18
    ac12:	1909      	adds	r1, r1, r4
    ac14:	6081      	str	r1, [r0, #8]
    ac16:	e7be      	b.n	ab96 <MiMAC_ReceivedPacket+0x15a>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    ac18:	4861      	ldr	r0, [pc, #388]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ac1a:	7804      	ldrb	r4, [r0, #0]
    ac1c:	2380      	movs	r3, #128	; 0x80
    ac1e:	425b      	negs	r3, r3
    ac20:	4323      	orrs	r3, r4
    ac22:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    ac24:	2d00      	cmp	r5, #0
    ac26:	d013      	beq.n	ac50 <MiMAC_ReceivedPacket+0x214>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ac28:	4c5c      	ldr	r4, [pc, #368]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ac2a:	234e      	movs	r3, #78	; 0x4e
    ac2c:	435a      	muls	r2, r3
    ac2e:	18a5      	adds	r5, r4, r2
    ac30:	792e      	ldrb	r6, [r5, #4]
    ac32:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ac34:	796d      	ldrb	r5, [r5, #5]
    ac36:	7445      	strb	r5, [r0, #17]
    ac38:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    ac3a:	000b      	movs	r3, r1
    ac3c:	330e      	adds	r3, #14
    ac3e:	191b      	adds	r3, r3, r4
    ac40:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    ac42:	5d13      	ldrb	r3, [r2, r4]
    ac44:	3b19      	subs	r3, #25
    ac46:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    ac48:	3116      	adds	r1, #22
    ac4a:	1909      	adds	r1, r1, r4
    ac4c:	6081      	str	r1, [r0, #8]
    ac4e:	e7a2      	b.n	ab96 <MiMAC_ReceivedPacket+0x15a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    ac50:	4853      	ldr	r0, [pc, #332]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ac52:	4c52      	ldr	r4, [pc, #328]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ac54:	234e      	movs	r3, #78	; 0x4e
    ac56:	435a      	muls	r2, r3
    ac58:	18a5      	adds	r5, r4, r2
    ac5a:	7bae      	ldrb	r6, [r5, #14]
    ac5c:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    ac5e:	7bed      	ldrb	r5, [r5, #15]
    ac60:	7445      	strb	r5, [r0, #17]
    ac62:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    ac64:	000b      	movs	r3, r1
    ac66:	3310      	adds	r3, #16
    ac68:	191b      	adds	r3, r3, r4
    ac6a:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    ac6c:	5d13      	ldrb	r3, [r2, r4]
    ac6e:	3b1b      	subs	r3, #27
    ac70:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    ac72:	3118      	adds	r1, #24
    ac74:	1909      	adds	r1, r1, r4
    ac76:	6081      	str	r1, [r0, #8]
    ac78:	e78d      	b.n	ab96 <MiMAC_ReceivedPacket+0x15a>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ac7a:	204e      	movs	r0, #78	; 0x4e
    ac7c:	4348      	muls	r0, r1
    ac7e:	4b47      	ldr	r3, [pc, #284]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ac80:	181b      	adds	r3, r3, r0
    ac82:	799b      	ldrb	r3, [r3, #6]
    ac84:	2bff      	cmp	r3, #255	; 0xff
    ac86:	d01e      	beq.n	acc6 <MiMAC_ReceivedPacket+0x28a>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    ac88:	4b45      	ldr	r3, [pc, #276]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ac8a:	781c      	ldrb	r4, [r3, #0]
    ac8c:	2080      	movs	r0, #128	; 0x80
    ac8e:	4240      	negs	r0, r0
    ac90:	4320      	orrs	r0, r4
    ac92:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    ac94:	2001      	movs	r0, #1
    ac96:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN == false)
    ac98:	2d00      	cmp	r5, #0
    ac9a:	d121      	bne.n	ace0 <MiMAC_ReceivedPacket+0x2a4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    ac9c:	0018      	movs	r0, r3
    ac9e:	4c3f      	ldr	r4, [pc, #252]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    aca0:	234e      	movs	r3, #78	; 0x4e
    aca2:	435a      	muls	r2, r3
    aca4:	18a5      	adds	r5, r4, r2
    aca6:	7a2e      	ldrb	r6, [r5, #8]
    aca8:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    acaa:	7a6d      	ldrb	r5, [r5, #9]
    acac:	7445      	strb	r5, [r0, #17]
    acae:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    acb0:	000b      	movs	r3, r1
    acb2:	330a      	adds	r3, #10
    acb4:	191b      	adds	r3, r3, r4
    acb6:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    acb8:	5d13      	ldrb	r3, [r2, r4]
    acba:	3b0f      	subs	r3, #15
    acbc:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    acbe:	310c      	adds	r1, #12
    acc0:	1909      	adds	r1, r1, r4
    acc2:	6081      	str	r1, [r0, #8]
    acc4:	e725      	b.n	ab12 <MiMAC_ReceivedPacket+0xd6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    acc6:	204e      	movs	r0, #78	; 0x4e
    acc8:	4348      	muls	r0, r1
    acca:	4b34      	ldr	r3, [pc, #208]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    accc:	181b      	adds	r3, r3, r0
    acce:	79db      	ldrb	r3, [r3, #7]
    acd0:	2bff      	cmp	r3, #255	; 0xff
    acd2:	d1d9      	bne.n	ac88 <MiMAC_ReceivedPacket+0x24c>
					MACRxPacket.flags.bits.broadcast = 1;
    acd4:	4832      	ldr	r0, [pc, #200]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    acd6:	7803      	ldrb	r3, [r0, #0]
    acd8:	2404      	movs	r4, #4
    acda:	4323      	orrs	r3, r4
    acdc:	7003      	strb	r3, [r0, #0]
    acde:	e7d3      	b.n	ac88 <MiMAC_ReceivedPacket+0x24c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ace0:	482f      	ldr	r0, [pc, #188]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ace2:	4c2e      	ldr	r4, [pc, #184]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ace4:	234e      	movs	r3, #78	; 0x4e
    ace6:	435a      	muls	r2, r3
    ace8:	18a5      	adds	r5, r4, r2
    acea:	792e      	ldrb	r6, [r5, #4]
    acec:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    acee:	796d      	ldrb	r5, [r5, #5]
    acf0:	7445      	strb	r5, [r0, #17]
    acf2:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    acf4:	000b      	movs	r3, r1
    acf6:	3308      	adds	r3, #8
    acf8:	191b      	adds	r3, r3, r4
    acfa:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    acfc:	5d13      	ldrb	r3, [r2, r4]
    acfe:	3b0d      	subs	r3, #13
    ad00:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    ad02:	310a      	adds	r1, #10
    ad04:	1909      	adds	r1, r1, r4
    ad06:	6081      	str	r1, [r0, #8]
    ad08:	e703      	b.n	ab12 <MiMAC_ReceivedPacket+0xd6>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    ad0a:	4b25      	ldr	r3, [pc, #148]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ad0c:	781c      	ldrb	r4, [r3, #0]
    ad0e:	2080      	movs	r0, #128	; 0x80
    ad10:	4240      	negs	r0, r0
    ad12:	4320      	orrs	r0, r4
    ad14:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    ad16:	2001      	movs	r0, #1
    ad18:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    ad1a:	2d00      	cmp	r5, #0
    ad1c:	d014      	beq.n	ad48 <MiMAC_ReceivedPacket+0x30c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ad1e:	0018      	movs	r0, r3
    ad20:	4c1e      	ldr	r4, [pc, #120]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ad22:	234e      	movs	r3, #78	; 0x4e
    ad24:	435a      	muls	r2, r3
    ad26:	18a5      	adds	r5, r4, r2
    ad28:	792e      	ldrb	r6, [r5, #4]
    ad2a:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ad2c:	796d      	ldrb	r5, [r5, #5]
    ad2e:	7445      	strb	r5, [r0, #17]
    ad30:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    ad32:	000b      	movs	r3, r1
    ad34:	330d      	adds	r3, #13
    ad36:	191b      	adds	r3, r3, r4
    ad38:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    ad3a:	5d13      	ldrb	r3, [r2, r4]
    ad3c:	3b13      	subs	r3, #19
    ad3e:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    ad40:	3110      	adds	r1, #16
    ad42:	1909      	adds	r1, r1, r4
    ad44:	6081      	str	r1, [r0, #8]
    ad46:	e6e4      	b.n	ab12 <MiMAC_ReceivedPacket+0xd6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    ad48:	4815      	ldr	r0, [pc, #84]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ad4a:	4c14      	ldr	r4, [pc, #80]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ad4c:	234e      	movs	r3, #78	; 0x4e
    ad4e:	435a      	muls	r2, r3
    ad50:	18a5      	adds	r5, r4, r2
    ad52:	7b6e      	ldrb	r6, [r5, #13]
    ad54:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    ad56:	7bad      	ldrb	r5, [r5, #14]
    ad58:	7445      	strb	r5, [r0, #17]
    ad5a:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    ad5c:	000b      	movs	r3, r1
    ad5e:	330f      	adds	r3, #15
    ad60:	191b      	adds	r3, r3, r4
    ad62:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    ad64:	5d13      	ldrb	r3, [r2, r4]
    ad66:	3b15      	subs	r3, #21
    ad68:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    ad6a:	3112      	adds	r1, #18
    ad6c:	1909      	adds	r1, r1, r4
    ad6e:	6081      	str	r1, [r0, #8]
    ad70:	e6cf      	b.n	ab12 <MiMAC_ReceivedPacket+0xd6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ad72:	204e      	movs	r0, #78	; 0x4e
    ad74:	4348      	muls	r0, r1
    ad76:	4b09      	ldr	r3, [pc, #36]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ad78:	181b      	adds	r3, r3, r0
    ad7a:	799b      	ldrb	r3, [r3, #6]
    ad7c:	2bff      	cmp	r3, #255	; 0xff
    ad7e:	d017      	beq.n	adb0 <MiMAC_ReceivedPacket+0x374>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    ad80:	4807      	ldr	r0, [pc, #28]	; (ada0 <MiMAC_ReceivedPacket+0x364>)
    ad82:	4c06      	ldr	r4, [pc, #24]	; (ad9c <MiMAC_ReceivedPacket+0x360>)
    ad84:	234e      	movs	r3, #78	; 0x4e
    ad86:	435a      	muls	r2, r3
    ad88:	5d12      	ldrb	r2, [r2, r4]
    ad8a:	3a0a      	subs	r2, #10
    ad8c:	7302      	strb	r2, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    ad8e:	434b      	muls	r3, r1
    ad90:	3308      	adds	r3, #8
    ad92:	191b      	adds	r3, r3, r4
    ad94:	6083      	str	r3, [r0, #8]
			break;
    ad96:	e6bc      	b.n	ab12 <MiMAC_ReceivedPacket+0xd6>
    ad98:	2000000a 	.word	0x2000000a
    ad9c:	20001e1c 	.word	0x20001e1c
    ada0:	20001f70 	.word	0x20001f70
    ada4:	0000aa21 	.word	0x0000aa21
    ada8:	ff00ffff 	.word	0xff00ffff
    adac:	20000020 	.word	0x20000020
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    adb0:	204e      	movs	r0, #78	; 0x4e
    adb2:	4348      	muls	r0, r1
    adb4:	4b40      	ldr	r3, [pc, #256]	; (aeb8 <MiMAC_ReceivedPacket+0x47c>)
    adb6:	181b      	adds	r3, r3, r0
    adb8:	79db      	ldrb	r3, [r3, #7]
    adba:	2bff      	cmp	r3, #255	; 0xff
    adbc:	d1e0      	bne.n	ad80 <MiMAC_ReceivedPacket+0x344>
					MACRxPacket.flags.bits.broadcast = 1;
    adbe:	483f      	ldr	r0, [pc, #252]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    adc0:	7803      	ldrb	r3, [r0, #0]
    adc2:	2404      	movs	r4, #4
    adc4:	4323      	orrs	r3, r4
    adc6:	7003      	strb	r3, [r0, #0]
    adc8:	e7da      	b.n	ad80 <MiMAC_ReceivedPacket+0x344>
				MiMAC_DiscardPacket();
    adca:	4b3d      	ldr	r3, [pc, #244]	; (aec0 <MiMAC_ReceivedPacket+0x484>)
    adcc:	4798      	blx	r3
				return false;
    adce:	2000      	movs	r0, #0
    add0:	e64f      	b.n	aa72 <MiMAC_ReceivedPacket+0x36>
    add2:	3401      	adds	r4, #1
			for (i = 0; i < CONNECTION_SIZE; i++)
    add4:	2c14      	cmp	r4, #20
    add6:	d01a      	beq.n	ae0e <MiMAC_ReceivedPacket+0x3d2>
    add8:	b2e7      	uxtb	r7, r4
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    adda:	0120      	lsls	r0, r4, #4
    addc:	6833      	ldr	r3, [r6, #0]
    adde:	469c      	mov	ip, r3
    ade0:	4460      	add	r0, ip
    ade2:	7b03      	ldrb	r3, [r0, #12]
    ade4:	2b7f      	cmp	r3, #127	; 0x7f
    ade6:	d9f4      	bls.n	add2 <MiMAC_ReceivedPacket+0x396>
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    ade8:	3004      	adds	r0, #4
    adea:	464b      	mov	r3, r9
    adec:	6859      	ldr	r1, [r3, #4]
    adee:	4b35      	ldr	r3, [pc, #212]	; (aec4 <MiMAC_ReceivedPacket+0x488>)
    adf0:	4798      	blx	r3
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    adf2:	2800      	cmp	r0, #0
    adf4:	d0ed      	beq.n	add2 <MiMAC_ReceivedPacket+0x396>
			if (i < CONNECTION_SIZE)
    adf6:	2f13      	cmp	r7, #19
    adf8:	d809      	bhi.n	ae0e <MiMAC_ReceivedPacket+0x3d2>
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    adfa:	23ff      	movs	r3, #255	; 0xff
    adfc:	401c      	ands	r4, r3
    adfe:	00a2      	lsls	r2, r4, #2
    ae00:	4b31      	ldr	r3, [pc, #196]	; (aec8 <MiMAC_ReceivedPacket+0x48c>)
    ae02:	58d3      	ldr	r3, [r2, r3]
    ae04:	42ab      	cmp	r3, r5
    ae06:	d82b      	bhi.n	ae60 <MiMAC_ReceivedPacket+0x424>
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    ae08:	00a4      	lsls	r4, r4, #2
    ae0a:	4b2f      	ldr	r3, [pc, #188]	; (aec8 <MiMAC_ReceivedPacket+0x48c>)
    ae0c:	50e5      	str	r5, [r4, r3]
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    ae0e:	492b      	ldr	r1, [pc, #172]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    ae10:	7b0b      	ldrb	r3, [r1, #12]
    ae12:	3b05      	subs	r3, #5
    ae14:	b2db      	uxtb	r3, r3
    ae16:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    ae18:	6888      	ldr	r0, [r1, #8]
    ae1a:	18c3      	adds	r3, r0, r3
    ae1c:	785c      	ldrb	r4, [r3, #1]
    ae1e:	4a2b      	ldr	r2, [pc, #172]	; (aecc <MiMAC_ReceivedPacket+0x490>)
    ae20:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    ae22:	789c      	ldrb	r4, [r3, #2]
    ae24:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    ae26:	78dc      	ldrb	r4, [r3, #3]
    ae28:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    ae2a:	791b      	ldrb	r3, [r3, #4]
    ae2c:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    ae2e:	684a      	ldr	r2, [r1, #4]
    ae30:	310c      	adds	r1, #12
    ae32:	3005      	adds	r0, #5
    ae34:	4b26      	ldr	r3, [pc, #152]	; (aed0 <MiMAC_ReceivedPacket+0x494>)
    ae36:	781c      	ldrb	r4, [r3, #0]
    ae38:	234e      	movs	r3, #78	; 0x4e
    ae3a:	435c      	muls	r4, r3
    ae3c:	4b1e      	ldr	r3, [pc, #120]	; (aeb8 <MiMAC_ReceivedPacket+0x47c>)
    ae3e:	191b      	adds	r3, r3, r4
    ae40:	785b      	ldrb	r3, [r3, #1]
    ae42:	9300      	str	r3, [sp, #0]
    ae44:	002b      	movs	r3, r5
    ae46:	4c23      	ldr	r4, [pc, #140]	; (aed4 <MiMAC_ReceivedPacket+0x498>)
    ae48:	47a0      	blx	r4
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d00b      	beq.n	ae66 <MiMAC_ReceivedPacket+0x42a>
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    ae4e:	4b1b      	ldr	r3, [pc, #108]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    ae50:	689a      	ldr	r2, [r3, #8]
    ae52:	3205      	adds	r2, #5
    ae54:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    ae56:	781a      	ldrb	r2, [r3, #0]
    ae58:	2108      	movs	r1, #8
    ae5a:	430a      	orrs	r2, r1
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	e662      	b.n	ab26 <MiMAC_ReceivedPacket+0xea>
					MiMAC_DiscardPacket();
    ae60:	4b17      	ldr	r3, [pc, #92]	; (aec0 <MiMAC_ReceivedPacket+0x484>)
    ae62:	4798      	blx	r3
					return false;
    ae64:	e7b3      	b.n	adce <MiMAC_ReceivedPacket+0x392>
				MiMAC_DiscardPacket();
    ae66:	4b16      	ldr	r3, [pc, #88]	; (aec0 <MiMAC_ReceivedPacket+0x484>)
    ae68:	4798      	blx	r3
				return false;
    ae6a:	e7b0      	b.n	adce <MiMAC_ReceivedPacket+0x392>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    ae6c:	4a13      	ldr	r2, [pc, #76]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    ae6e:	7813      	ldrb	r3, [r2, #0]
    ae70:	2103      	movs	r1, #3
    ae72:	438b      	bics	r3, r1
    ae74:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    ae76:	4b10      	ldr	r3, [pc, #64]	; (aeb8 <MiMAC_ReceivedPacket+0x47c>)
    ae78:	224e      	movs	r2, #78	; 0x4e
    ae7a:	4342      	muls	r2, r0
    ae7c:	5cd0      	ldrb	r0, [r2, r3]
    ae7e:	490f      	ldr	r1, [pc, #60]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    ae80:	189b      	adds	r3, r3, r2
    ae82:	181a      	adds	r2, r3, r0
    ae84:	3a01      	subs	r2, #1
    ae86:	7812      	ldrb	r2, [r2, #0]
    ae88:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    ae8a:	5c1b      	ldrb	r3, [r3, r0]
    ae8c:	734b      	strb	r3, [r1, #13]
		return true;
    ae8e:	2001      	movs	r0, #1
    ae90:	e5ef      	b.n	aa72 <MiMAC_ReceivedPacket+0x36>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    ae92:	4a0a      	ldr	r2, [pc, #40]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    ae94:	7813      	ldrb	r3, [r2, #0]
    ae96:	2103      	movs	r1, #3
    ae98:	438b      	bics	r3, r1
    ae9a:	2101      	movs	r1, #1
    ae9c:	430b      	orrs	r3, r1
    ae9e:	7013      	strb	r3, [r2, #0]
			break;
    aea0:	e7e9      	b.n	ae76 <MiMAC_ReceivedPacket+0x43a>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    aea2:	4a06      	ldr	r2, [pc, #24]	; (aebc <MiMAC_ReceivedPacket+0x480>)
    aea4:	7813      	ldrb	r3, [r2, #0]
    aea6:	2103      	movs	r1, #3
    aea8:	430b      	orrs	r3, r1
    aeaa:	7013      	strb	r3, [r2, #0]
			break;
    aeac:	e7e3      	b.n	ae76 <MiMAC_ReceivedPacket+0x43a>
			BankIndex = i;
    aeae:	2200      	movs	r2, #0
    aeb0:	4b07      	ldr	r3, [pc, #28]	; (aed0 <MiMAC_ReceivedPacket+0x494>)
    aeb2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
    aeb4:	2100      	movs	r1, #0
    aeb6:	e5e6      	b.n	aa86 <MiMAC_ReceivedPacket+0x4a>
    aeb8:	20001e1c 	.word	0x20001e1c
    aebc:	20001f70 	.word	0x20001f70
    aec0:	0000aa21 	.word	0x0000aa21
    aec4:	0000b92d 	.word	0x0000b92d
    aec8:	20001f98 	.word	0x20001f98
    aecc:	20001dfc 	.word	0x20001dfc
    aed0:	2000000a 	.word	0x2000000a
    aed4:	0000a4c9 	.word	0x0000a4c9

0000aed8 <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    aed8:	4b05      	ldr	r3, [pc, #20]	; (aef0 <MiMAC_SymbolToTicks+0x18>)
    aeda:	781b      	ldrb	r3, [r3, #0]
    aedc:	2b00      	cmp	r3, #0
    aede:	d004      	beq.n	aeea <MiMAC_SymbolToTicks+0x12>
    aee0:	0083      	lsls	r3, r0, #2
    aee2:	1818      	adds	r0, r3, r0
    aee4:	0083      	lsls	r3, r0, #2
    aee6:	18c0      	adds	r0, r0, r3
}
    aee8:	4770      	bx	lr
	return SYMBOLS_TO_TICKS(symbols);
    aeea:	3332      	adds	r3, #50	; 0x32
    aeec:	4358      	muls	r0, r3
    aeee:	e7fb      	b.n	aee8 <MiMAC_SymbolToTicks+0x10>
    aef0:	2000000d 	.word	0x2000000d

0000aef4 <MiMAC_Task>:

void MiMAC_Task(void)
{
    aef4:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    aef6:	4b0b      	ldr	r3, [pc, #44]	; (af24 <MiMAC_Task+0x30>)
    aef8:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    aefa:	4b0b      	ldr	r3, [pc, #44]	; (af28 <MiMAC_Task+0x34>)
    aefc:	681b      	ldr	r3, [r3, #0]
    aefe:	2b00      	cmp	r3, #0
    af00:	d003      	beq.n	af0a <MiMAC_Task+0x16>
    af02:	4a0a      	ldr	r2, [pc, #40]	; (af2c <MiMAC_Task+0x38>)
    af04:	7812      	ldrb	r2, [r2, #0]
    af06:	2a00      	cmp	r2, #0
    af08:	d100      	bne.n	af0c <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    af0a:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    af0c:	4a08      	ldr	r2, [pc, #32]	; (af30 <MiMAC_Task+0x3c>)
    af0e:	6812      	ldr	r2, [r2, #0]
    af10:	4908      	ldr	r1, [pc, #32]	; (af34 <MiMAC_Task+0x40>)
    af12:	7809      	ldrb	r1, [r1, #0]
    af14:	4808      	ldr	r0, [pc, #32]	; (af38 <MiMAC_Task+0x44>)
    af16:	7800      	ldrb	r0, [r0, #0]
    af18:	4798      	blx	r3
	  dataConfAvailable = false;
    af1a:	2200      	movs	r2, #0
    af1c:	4b03      	ldr	r3, [pc, #12]	; (af2c <MiMAC_Task+0x38>)
    af1e:	701a      	strb	r2, [r3, #0]
}
    af20:	e7f3      	b.n	af0a <MiMAC_Task+0x16>
    af22:	46c0      	nop			; (mov r8, r8)
    af24:	0000b321 	.word	0x0000b321
    af28:	20000360 	.word	0x20000360
    af2c:	2000035c 	.word	0x2000035c
    af30:	20000368 	.word	0x20000368
    af34:	20001de4 	.word	0x20001de4
    af38:	20000364 	.word	0x20000364

0000af3c <phyRssiBaseVal>:

/*************************************************************************//**
*****************************************************************************/
static int8_t phyRssiBaseVal(void)
{
	bool oqpsk = (phyModulation & (1 << BPSK_OQPSK));
    af3c:	4b07      	ldr	r3, [pc, #28]	; (af5c <phyRssiBaseVal+0x20>)
    af3e:	7818      	ldrb	r0, [r3, #0]
	bool sub   = (phyModulation & (1 << SUB_MODE));
	bool rc    = (phyModulation & (1 << 4 /*ALT_SPEC*/));

	if (0 == oqpsk) {
    af40:	0703      	lsls	r3, r0, #28
    af42:	d403      	bmi.n	af4c <phyRssiBaseVal+0x10>
		if (0 == sub) {
    af44:	0740      	lsls	r0, r0, #29
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
    af46:	0fc0      	lsrs	r0, r0, #31
    af48:	3864      	subs	r0, #100	; 0x64
			} else {
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
			}
		}
	}
}
    af4a:	4770      	bx	lr
			if (0 == rc) {
    af4c:	2314      	movs	r3, #20
    af4e:	4018      	ands	r0, r3
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
    af50:	3814      	subs	r0, #20
    af52:	4243      	negs	r3, r0
    af54:	4158      	adcs	r0, r3
    af56:	3862      	subs	r0, #98	; 0x62
    af58:	e7f7      	b.n	af4a <phyRssiBaseVal+0xe>
    af5a:	46c0      	nop			; (mov r8, r8)
    af5c:	2000036e 	.word	0x2000036e

0000af60 <phySetChannel>:
{
    af60:	b510      	push	{r4, lr}
	if(phyChannel == 0)
    af62:	4b13      	ldr	r3, [pc, #76]	; (afb0 <phySetChannel+0x50>)
    af64:	781b      	ldrb	r3, [r3, #0]
    af66:	2b00      	cmp	r3, #0
    af68:	d110      	bne.n	af8c <phySetChannel+0x2c>
		phyModulation = PHY_MOD_BPSK20_CHAN_0;
    af6a:	2200      	movs	r2, #0
    af6c:	4b11      	ldr	r3, [pc, #68]	; (afb4 <phySetChannel+0x54>)
    af6e:	701a      	strb	r2, [r3, #0]
	phyWriteRegister(CC_CTRL_1_REG, phyBand);
    af70:	4c11      	ldr	r4, [pc, #68]	; (afb8 <phySetChannel+0x58>)
	trx_reg_write(reg, value);
    af72:	7821      	ldrb	r1, [r4, #0]
    af74:	2014      	movs	r0, #20
    af76:	4b11      	ldr	r3, [pc, #68]	; (afbc <phySetChannel+0x5c>)
    af78:	4798      	blx	r3
	if (0 == phyBand) {
    af7a:	7823      	ldrb	r3, [r4, #0]
    af7c:	2b00      	cmp	r3, #0
    af7e:	d009      	beq.n	af94 <phySetChannel+0x34>
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
    af80:	4b0b      	ldr	r3, [pc, #44]	; (afb0 <phySetChannel+0x50>)
	trx_reg_write(reg, value);
    af82:	7819      	ldrb	r1, [r3, #0]
    af84:	2013      	movs	r0, #19
    af86:	4b0d      	ldr	r3, [pc, #52]	; (afbc <phySetChannel+0x5c>)
    af88:	4798      	blx	r3
}
    af8a:	bd10      	pop	{r4, pc}
		phyModulation = PHY_MOD_BPSK40_CHAN_N;
    af8c:	2204      	movs	r2, #4
    af8e:	4b09      	ldr	r3, [pc, #36]	; (afb4 <phySetChannel+0x54>)
    af90:	701a      	strb	r2, [r3, #0]
    af92:	e7ed      	b.n	af70 <phySetChannel+0x10>
	value = trx_reg_read(reg);
    af94:	2008      	movs	r0, #8
    af96:	4b0a      	ldr	r3, [pc, #40]	; (afc0 <phySetChannel+0x60>)
    af98:	4798      	blx	r3
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    af9a:	231f      	movs	r3, #31
    af9c:	0001      	movs	r1, r0
    af9e:	4399      	bics	r1, r3
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
    afa0:	4b03      	ldr	r3, [pc, #12]	; (afb0 <phySetChannel+0x50>)
    afa2:	7818      	ldrb	r0, [r3, #0]
    afa4:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    afa6:	b2c9      	uxtb	r1, r1
    afa8:	2008      	movs	r0, #8
    afaa:	4b04      	ldr	r3, [pc, #16]	; (afbc <phySetChannel+0x5c>)
    afac:	4798      	blx	r3
    afae:	e7ec      	b.n	af8a <phySetChannel+0x2a>
    afb0:	2000036d 	.word	0x2000036d
    afb4:	2000036e 	.word	0x2000036e
    afb8:	2000036c 	.word	0x2000036c
    afbc:	0000d649 	.word	0x0000d649
    afc0:	0000d54d 	.word	0x0000d54d

0000afc4 <phyTrxSetState>:
{
    afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afc6:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    afc8:	4b0f      	ldr	r3, [pc, #60]	; (b008 <phyTrxSetState+0x44>)
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	2b02      	cmp	r3, #2
    afce:	d016      	beq.n	affe <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    afd0:	4f0e      	ldr	r7, [pc, #56]	; (b00c <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    afd2:	4e0f      	ldr	r6, [pc, #60]	; (b010 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    afd4:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    afd6:	2103      	movs	r1, #3
    afd8:	2002      	movs	r0, #2
    afda:	47b8      	blx	r7
	value = trx_reg_read(reg);
    afdc:	2001      	movs	r0, #1
    afde:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    afe0:	4028      	ands	r0, r5
    afe2:	2808      	cmp	r0, #8
    afe4:	d1f7      	bne.n	afd6 <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    afe6:	4f09      	ldr	r7, [pc, #36]	; (b00c <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    afe8:	4e09      	ldr	r6, [pc, #36]	; (b010 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    afea:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    afec:	0021      	movs	r1, r4
    afee:	2002      	movs	r0, #2
    aff0:	47b8      	blx	r7
	value = trx_reg_read(reg);
    aff2:	2001      	movs	r0, #1
    aff4:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    aff6:	4028      	ands	r0, r5
    aff8:	4284      	cmp	r4, r0
    affa:	d1f7      	bne.n	afec <phyTrxSetState+0x28>
}
    affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    affe:	2280      	movs	r2, #128	; 0x80
    b000:	0352      	lsls	r2, r2, #13
    b002:	4b04      	ldr	r3, [pc, #16]	; (b014 <phyTrxSetState+0x50>)
    b004:	615a      	str	r2, [r3, #20]
    b006:	e7e3      	b.n	afd0 <phyTrxSetState+0xc>
    b008:	200003f1 	.word	0x200003f1
    b00c:	0000d649 	.word	0x0000d649
    b010:	0000d54d 	.word	0x0000d54d
    b014:	40002800 	.word	0x40002800

0000b018 <phySetRxState>:
{
    b018:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b01a:	2008      	movs	r0, #8
    b01c:	4b08      	ldr	r3, [pc, #32]	; (b040 <phySetRxState+0x28>)
    b01e:	4798      	blx	r3
	value = trx_reg_read(reg);
    b020:	200f      	movs	r0, #15
    b022:	4b08      	ldr	r3, [pc, #32]	; (b044 <phySetRxState+0x2c>)
    b024:	4798      	blx	r3
	if (phyRxState) {
    b026:	4b08      	ldr	r3, [pc, #32]	; (b048 <phySetRxState+0x30>)
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	2b00      	cmp	r3, #0
    b02c:	d100      	bne.n	b030 <phySetRxState+0x18>
}
    b02e:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b030:	2016      	movs	r0, #22
    b032:	4b03      	ldr	r3, [pc, #12]	; (b040 <phySetRxState+0x28>)
    b034:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b036:	2201      	movs	r2, #1
    b038:	4b04      	ldr	r3, [pc, #16]	; (b04c <phySetRxState+0x34>)
    b03a:	701a      	strb	r2, [r3, #0]
}
    b03c:	e7f7      	b.n	b02e <phySetRxState+0x16>
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	0000afc5 	.word	0x0000afc5
    b044:	0000d54d 	.word	0x0000d54d
    b048:	200003f0 	.word	0x200003f0
    b04c:	200003f1 	.word	0x200003f1

0000b050 <PHY_DataReq>:
{
    b050:	b570      	push	{r4, r5, r6, lr}
    b052:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b054:	2010      	movs	r0, #16
    b056:	4b09      	ldr	r3, [pc, #36]	; (b07c <PHY_DataReq+0x2c>)
    b058:	4798      	blx	r3
    b05a:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b05c:	d009      	beq.n	b072 <PHY_DataReq+0x22>
    memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b05e:	3004      	adds	r0, #4
    b060:	220c      	movs	r2, #12
    b062:	0029      	movs	r1, r5
    b064:	4b06      	ldr	r3, [pc, #24]	; (b080 <PHY_DataReq+0x30>)
    b066:	4798      	blx	r3
    miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b068:	0021      	movs	r1, r4
    b06a:	4806      	ldr	r0, [pc, #24]	; (b084 <PHY_DataReq+0x34>)
    b06c:	4b06      	ldr	r3, [pc, #24]	; (b088 <PHY_DataReq+0x38>)
    b06e:	4798      	blx	r3
}
    b070:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b072:	68ab      	ldr	r3, [r5, #8]
    b074:	2001      	movs	r0, #1
    b076:	4798      	blx	r3
        return;
    b078:	e7fa      	b.n	b070 <PHY_DataReq+0x20>
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	0000cb95 	.word	0x0000cb95
    b080:	0000f97b 	.word	0x0000f97b
    b084:	20001e10 	.word	0x20001e10
    b088:	0000cd91 	.word	0x0000cd91

0000b08c <PHY_TxHandler>:
{
    b08c:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b08e:	4b1e      	ldr	r3, [pc, #120]	; (b108 <PHY_TxHandler+0x7c>)
    b090:	7a1b      	ldrb	r3, [r3, #8]
    b092:	2b00      	cmp	r3, #0
    b094:	d004      	beq.n	b0a0 <PHY_TxHandler+0x14>
    b096:	4b1d      	ldr	r3, [pc, #116]	; (b10c <PHY_TxHandler+0x80>)
    b098:	781b      	ldrb	r3, [r3, #0]
    b09a:	3b01      	subs	r3, #1
    b09c:	2b01      	cmp	r3, #1
    b09e:	d900      	bls.n	b0a2 <PHY_TxHandler+0x16>
}
    b0a0:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b0a2:	2100      	movs	r1, #0
    b0a4:	4818      	ldr	r0, [pc, #96]	; (b108 <PHY_TxHandler+0x7c>)
    b0a6:	4b1a      	ldr	r3, [pc, #104]	; (b110 <PHY_TxHandler+0x84>)
    b0a8:	4798      	blx	r3
    b0aa:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b0ac:	d0f8      	beq.n	b0a0 <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b0ae:	6883      	ldr	r3, [r0, #8]
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	2b7f      	cmp	r3, #127	; 0x7f
    b0b4:	d823      	bhi.n	b0fe <PHY_TxHandler+0x72>
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b0b6:	2019      	movs	r0, #25
    b0b8:	4b16      	ldr	r3, [pc, #88]	; (b114 <PHY_TxHandler+0x88>)
    b0ba:	4798      	blx	r3
	value = trx_reg_read(reg);
    b0bc:	200f      	movs	r0, #15
    b0be:	4b16      	ldr	r3, [pc, #88]	; (b118 <PHY_TxHandler+0x8c>)
    b0c0:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b0c2:	68a2      	ldr	r2, [r4, #8]
    b0c4:	7813      	ldrb	r3, [r2, #0]
    b0c6:	3302      	adds	r3, #2
    b0c8:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b0ca:	68a3      	ldr	r3, [r4, #8]
    b0cc:	7819      	ldrb	r1, [r3, #0]
    b0ce:	3901      	subs	r1, #1
    b0d0:	b2c9      	uxtb	r1, r1
    b0d2:	0018      	movs	r0, r3
    b0d4:	4b11      	ldr	r3, [pc, #68]	; (b11c <PHY_TxHandler+0x90>)
    b0d6:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b0d8:	2203      	movs	r2, #3
    b0da:	4b0c      	ldr	r3, [pc, #48]	; (b10c <PHY_TxHandler+0x80>)
    b0dc:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b0de:	4b10      	ldr	r3, [pc, #64]	; (b120 <PHY_TxHandler+0x94>)
    b0e0:	2280      	movs	r2, #128	; 0x80
    b0e2:	0352      	lsls	r2, r2, #13
    b0e4:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b0e6:	46c0      	nop			; (mov r8, r8)
    b0e8:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b0ea:	615a      	str	r2, [r3, #20]
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b0ec:	4b0d      	ldr	r3, [pc, #52]	; (b124 <PHY_TxHandler+0x98>)
    b0ee:	7922      	ldrb	r2, [r4, #4]
    b0f0:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b0f2:	68e2      	ldr	r2, [r4, #12]
    b0f4:	609a      	str	r2, [r3, #8]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b0f6:	0020      	movs	r0, r4
    b0f8:	4b0b      	ldr	r3, [pc, #44]	; (b128 <PHY_TxHandler+0x9c>)
    b0fa:	4798      	blx	r3
    b0fc:	e7d0      	b.n	b0a0 <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b0fe:	68c3      	ldr	r3, [r0, #12]
    b100:	2001      	movs	r0, #1
    b102:	4798      	blx	r3
				return;
    b104:	e7cc      	b.n	b0a0 <PHY_TxHandler+0x14>
    b106:	46c0      	nop			; (mov r8, r8)
    b108:	20001e10 	.word	0x20001e10
    b10c:	200003f1 	.word	0x200003f1
    b110:	0000cdc9 	.word	0x0000cdc9
    b114:	0000afc5 	.word	0x0000afc5
    b118:	0000d54d 	.word	0x0000d54d
    b11c:	0000d879 	.word	0x0000d879
    b120:	40002800 	.word	0x40002800
    b124:	20001e04 	.word	0x20001e04
    b128:	0000cc51 	.word	0x0000cc51

0000b12c <PHY_Init>:
{
    b12c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b12e:	4b16      	ldr	r3, [pc, #88]	; (b188 <PHY_Init+0x5c>)
    b130:	4798      	blx	r3
	PhyReset();
    b132:	4b16      	ldr	r3, [pc, #88]	; (b18c <PHY_Init+0x60>)
    b134:	4798      	blx	r3
	phyRxState = false;
    b136:	2300      	movs	r3, #0
    b138:	4a15      	ldr	r2, [pc, #84]	; (b190 <PHY_Init+0x64>)
    b13a:	7013      	strb	r3, [r2, #0]
	phyBand = 0; // For RF212b-MiWi stack we fix the band to 0
    b13c:	4a15      	ldr	r2, [pc, #84]	; (b194 <PHY_Init+0x68>)
    b13e:	7013      	strb	r3, [r2, #0]
	value = trx_reg_read(reg);
    b140:	200c      	movs	r0, #12
    b142:	4b15      	ldr	r3, [pc, #84]	; (b198 <PHY_Init+0x6c>)
    b144:	4798      	blx	r3
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
    b146:	233f      	movs	r3, #63	; 0x3f
    b148:	4018      	ands	r0, r3
    b14a:	4b14      	ldr	r3, [pc, #80]	; (b19c <PHY_Init+0x70>)
    b14c:	7018      	strb	r0, [r3, #0]
	phyState = PHY_STATE_IDLE;
    b14e:	2201      	movs	r2, #1
    b150:	4b13      	ldr	r3, [pc, #76]	; (b1a0 <PHY_Init+0x74>)
    b152:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    b154:	4e13      	ldr	r6, [pc, #76]	; (b1a4 <PHY_Init+0x78>)
	value = trx_reg_read(reg);
    b156:	4d10      	ldr	r5, [pc, #64]	; (b198 <PHY_Init+0x6c>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b158:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    b15a:	2108      	movs	r1, #8
    b15c:	2002      	movs	r0, #2
    b15e:	47b0      	blx	r6
	value = trx_reg_read(reg);
    b160:	2001      	movs	r0, #1
    b162:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b164:	4020      	ands	r0, r4
    b166:	2808      	cmp	r0, #8
    b168:	d1f7      	bne.n	b15a <PHY_Init+0x2e>
	trx_reg_write(reg, value);
    b16a:	212e      	movs	r1, #46	; 0x2e
    b16c:	3804      	subs	r0, #4
    b16e:	4c0d      	ldr	r4, [pc, #52]	; (b1a4 <PHY_Init+0x78>)
    b170:	47a0      	blx	r4
    b172:	2194      	movs	r1, #148	; 0x94
    b174:	200c      	movs	r0, #12
    b176:	47a0      	blx	r4
    b178:	2103      	movs	r1, #3
    b17a:	2016      	movs	r0, #22
    b17c:	47a0      	blx	r4
    b17e:	2100      	movs	r1, #0
    b180:	2005      	movs	r0, #5
    b182:	47a0      	blx	r4
}
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	46c0      	nop			; (mov r8, r8)
    b188:	0000d401 	.word	0x0000d401
    b18c:	0000d51d 	.word	0x0000d51d
    b190:	200003f0 	.word	0x200003f0
    b194:	2000036c 	.word	0x2000036c
    b198:	0000d54d 	.word	0x0000d54d
    b19c:	2000036e 	.word	0x2000036e
    b1a0:	200003f1 	.word	0x200003f1
    b1a4:	0000d649 	.word	0x0000d649

0000b1a8 <PHY_SetRxState>:
{
    b1a8:	b510      	push	{r4, lr}
	phyRxState = rx;
    b1aa:	4b02      	ldr	r3, [pc, #8]	; (b1b4 <PHY_SetRxState+0xc>)
    b1ac:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    b1ae:	4b02      	ldr	r3, [pc, #8]	; (b1b8 <PHY_SetRxState+0x10>)
    b1b0:	4798      	blx	r3
}
    b1b2:	bd10      	pop	{r4, pc}
    b1b4:	200003f0 	.word	0x200003f0
    b1b8:	0000b019 	.word	0x0000b019

0000b1bc <PHY_SetPanId>:
{
    b1bc:	b530      	push	{r4, r5, lr}
    b1be:	b083      	sub	sp, #12
    b1c0:	466b      	mov	r3, sp
    b1c2:	1d9d      	adds	r5, r3, #6
    b1c4:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    b1c6:	b2c1      	uxtb	r1, r0
    b1c8:	2022      	movs	r0, #34	; 0x22
    b1ca:	4c03      	ldr	r4, [pc, #12]	; (b1d8 <PHY_SetPanId+0x1c>)
    b1cc:	47a0      	blx	r4
    b1ce:	7869      	ldrb	r1, [r5, #1]
    b1d0:	2023      	movs	r0, #35	; 0x23
    b1d2:	47a0      	blx	r4
}
    b1d4:	b003      	add	sp, #12
    b1d6:	bd30      	pop	{r4, r5, pc}
    b1d8:	0000d649 	.word	0x0000d649

0000b1dc <PHY_SetShortAddr>:
{
    b1dc:	b570      	push	{r4, r5, r6, lr}
    b1de:	b082      	sub	sp, #8
    b1e0:	466b      	mov	r3, sp
    b1e2:	1d9e      	adds	r6, r3, #6
    b1e4:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    b1e6:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    b1e8:	0021      	movs	r1, r4
    b1ea:	2020      	movs	r0, #32
    b1ec:	4d05      	ldr	r5, [pc, #20]	; (b204 <PHY_SetShortAddr+0x28>)
    b1ee:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    b1f0:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    b1f2:	0031      	movs	r1, r6
    b1f4:	2021      	movs	r0, #33	; 0x21
    b1f6:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    b1f8:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    b1fa:	b2e1      	uxtb	r1, r4
    b1fc:	202d      	movs	r0, #45	; 0x2d
    b1fe:	47a8      	blx	r5
}
    b200:	b002      	add	sp, #8
    b202:	bd70      	pop	{r4, r5, r6, pc}
    b204:	0000d649 	.word	0x0000d649

0000b208 <PHY_Wakeup>:
{
    b208:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    b20a:	4b07      	ldr	r3, [pc, #28]	; (b228 <PHY_Wakeup+0x20>)
    b20c:	781b      	ldrb	r3, [r3, #0]
    b20e:	2b02      	cmp	r3, #2
    b210:	d000      	beq.n	b214 <PHY_Wakeup+0xc>
}
    b212:	bd10      	pop	{r4, pc}
    b214:	2280      	movs	r2, #128	; 0x80
    b216:	0352      	lsls	r2, r2, #13
    b218:	4b04      	ldr	r3, [pc, #16]	; (b22c <PHY_Wakeup+0x24>)
    b21a:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    b21c:	4b04      	ldr	r3, [pc, #16]	; (b230 <PHY_Wakeup+0x28>)
    b21e:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    b220:	2201      	movs	r2, #1
    b222:	4b01      	ldr	r3, [pc, #4]	; (b228 <PHY_Wakeup+0x20>)
    b224:	701a      	strb	r2, [r3, #0]
}
    b226:	e7f4      	b.n	b212 <PHY_Wakeup+0xa>
    b228:	200003f1 	.word	0x200003f1
    b22c:	40002800 	.word	0x40002800
    b230:	0000b019 	.word	0x0000b019

0000b234 <PHY_SetChannel>:
{
    b234:	b510      	push	{r4, lr}
	phyChannel = channel;
    b236:	4b06      	ldr	r3, [pc, #24]	; (b250 <PHY_SetChannel+0x1c>)
    b238:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    b23a:	4b06      	ldr	r3, [pc, #24]	; (b254 <PHY_SetChannel+0x20>)
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	2b02      	cmp	r3, #2
    b240:	d002      	beq.n	b248 <PHY_SetChannel+0x14>
	phySetChannel();
    b242:	4b05      	ldr	r3, [pc, #20]	; (b258 <PHY_SetChannel+0x24>)
    b244:	4798      	blx	r3
}
    b246:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    b248:	4b04      	ldr	r3, [pc, #16]	; (b25c <PHY_SetChannel+0x28>)
    b24a:	4798      	blx	r3
    b24c:	e7f9      	b.n	b242 <PHY_SetChannel+0xe>
    b24e:	46c0      	nop			; (mov r8, r8)
    b250:	2000036d 	.word	0x2000036d
    b254:	200003f1 	.word	0x200003f1
    b258:	0000af61 	.word	0x0000af61
    b25c:	0000b209 	.word	0x0000b209

0000b260 <PHY_RandomReq>:
{
    b260:	b5f0      	push	{r4, r5, r6, r7, lr}
    b262:	46c6      	mov	lr, r8
    b264:	b500      	push	{lr}
    b266:	b082      	sub	sp, #8
	value = trx_reg_read(reg);
    b268:	2015      	movs	r0, #21
    b26a:	4b15      	ldr	r3, [pc, #84]	; (b2c0 <PHY_RandomReq+0x60>)
    b26c:	4798      	blx	r3
    b26e:	9001      	str	r0, [sp, #4]
	phyWriteRegister(RX_SYN_REG, (prev_rx_pdt_dis | (1<<7)));
    b270:	2180      	movs	r1, #128	; 0x80
    b272:	4249      	negs	r1, r1
    b274:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    b276:	b2c9      	uxtb	r1, r1
    b278:	2015      	movs	r0, #21
    b27a:	4b12      	ldr	r3, [pc, #72]	; (b2c4 <PHY_RandomReq+0x64>)
    b27c:	4798      	blx	r3
	phyTrxSetState(TRX_CMD_RX_ON);
    b27e:	2006      	movs	r0, #6
    b280:	4b11      	ldr	r3, [pc, #68]	; (b2c8 <PHY_RandomReq+0x68>)
    b282:	4798      	blx	r3
    b284:	2500      	movs	r5, #0
	uint16_t rnd = 0;
    b286:	2400      	movs	r4, #0
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    b288:	4b10      	ldr	r3, [pc, #64]	; (b2cc <PHY_RandomReq+0x6c>)
    b28a:	4698      	mov	r8, r3
	value = trx_reg_read(reg);
    b28c:	4f0c      	ldr	r7, [pc, #48]	; (b2c0 <PHY_RandomReq+0x60>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b28e:	2603      	movs	r6, #3
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    b290:	2001      	movs	r0, #1
    b292:	47c0      	blx	r8
	value = trx_reg_read(reg);
    b294:	2006      	movs	r0, #6
    b296:	47b8      	blx	r7
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b298:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    b29a:	4030      	ands	r0, r6
    b29c:	40a8      	lsls	r0, r5
    b29e:	4304      	orrs	r4, r0
    b2a0:	b2a4      	uxth	r4, r4
    b2a2:	3502      	adds	r5, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    b2a4:	2d10      	cmp	r5, #16
    b2a6:	d1f3      	bne.n	b290 <PHY_RandomReq+0x30>
	phySetRxState();
    b2a8:	4b09      	ldr	r3, [pc, #36]	; (b2d0 <PHY_RandomReq+0x70>)
    b2aa:	4798      	blx	r3
	trx_reg_write(reg, value);
    b2ac:	9901      	ldr	r1, [sp, #4]
    b2ae:	2015      	movs	r0, #21
    b2b0:	4b04      	ldr	r3, [pc, #16]	; (b2c4 <PHY_RandomReq+0x64>)
    b2b2:	4798      	blx	r3
}
    b2b4:	0020      	movs	r0, r4
    b2b6:	b002      	add	sp, #8
    b2b8:	bc04      	pop	{r2}
    b2ba:	4690      	mov	r8, r2
    b2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2be:	46c0      	nop			; (mov r8, r8)
    b2c0:	0000d54d 	.word	0x0000d54d
    b2c4:	0000d649 	.word	0x0000d649
    b2c8:	0000afc5 	.word	0x0000afc5
    b2cc:	00006239 	.word	0x00006239
    b2d0:	0000b019 	.word	0x0000b019

0000b2d4 <PHY_EncryptReq>:
{
    b2d4:	b510      	push	{r4, lr}
    b2d6:	0004      	movs	r4, r0
    b2d8:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    b2da:	2200      	movs	r2, #0
    b2dc:	2100      	movs	r1, #0
    b2de:	4b05      	ldr	r3, [pc, #20]	; (b2f4 <PHY_EncryptReq+0x20>)
    b2e0:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    b2e2:	2100      	movs	r1, #0
    b2e4:	0020      	movs	r0, r4
    b2e6:	4b04      	ldr	r3, [pc, #16]	; (b2f8 <PHY_EncryptReq+0x24>)
    b2e8:	4798      	blx	r3
	sal_aes_read(text);
    b2ea:	0020      	movs	r0, r4
    b2ec:	4b03      	ldr	r3, [pc, #12]	; (b2fc <PHY_EncryptReq+0x28>)
    b2ee:	4798      	blx	r3
}
    b2f0:	bd10      	pop	{r4, pc}
    b2f2:	46c0      	nop			; (mov r8, r8)
    b2f4:	0000d299 	.word	0x0000d299
    b2f8:	0000d22d 	.word	0x0000d22d
    b2fc:	0000d3d1 	.word	0x0000d3d1

0000b300 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b300:	b570      	push	{r4, r5, r6, lr}
    b302:	0005      	movs	r5, r0
    b304:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    b306:	4e05      	ldr	r6, [pc, #20]	; (b31c <PHY_SetIEEEAddr+0x1c>)
    b308:	7829      	ldrb	r1, [r5, #0]
    b30a:	0020      	movs	r0, r4
    b30c:	47b0      	blx	r6
		ptr_to_reg++;
    b30e:	3501      	adds	r5, #1
    b310:	3401      	adds	r4, #1
    b312:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    b314:	2c2c      	cmp	r4, #44	; 0x2c
    b316:	d1f7      	bne.n	b308 <PHY_SetIEEEAddr+0x8>
	}
}
    b318:	bd70      	pop	{r4, r5, r6, pc}
    b31a:	46c0      	nop			; (mov r8, r8)
    b31c:	0000d649 	.word	0x0000d649

0000b320 <PHY_TaskHandler>:
	}
}
#else
// Handle Packet Received
void PHY_TaskHandler(void)
{
    b320:	b5f0      	push	{r4, r5, r6, r7, lr}
    b322:	b085      	sub	sp, #20
    PHY_TxHandler();
    b324:	4b40      	ldr	r3, [pc, #256]	; (b428 <PHY_TaskHandler+0x108>)
    b326:	4798      	blx	r3

    if (PHY_STATE_SLEEP == phyState)
    b328:	4b40      	ldr	r3, [pc, #256]	; (b42c <PHY_TaskHandler+0x10c>)
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	2b02      	cmp	r3, #2
    b32e:	d00a      	beq.n	b346 <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    b330:	200f      	movs	r0, #15
    b332:	4b3f      	ldr	r3, [pc, #252]	; (b430 <PHY_TaskHandler+0x110>)
    b334:	4798      	blx	r3
    {
        return;
    }

    if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    b336:	0703      	lsls	r3, r0, #28
    b338:	d505      	bpl.n	b346 <PHY_TaskHandler+0x26>
    {
        if (PHY_STATE_IDLE == phyState)
    b33a:	4b3c      	ldr	r3, [pc, #240]	; (b42c <PHY_TaskHandler+0x10c>)
    b33c:	781b      	ldrb	r3, [r3, #0]
    b33e:	2b01      	cmp	r3, #1
    b340:	d003      	beq.n	b34a <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    b342:	2b03      	cmp	r3, #3
    b344:	d054      	beq.n	b3f0 <PHY_TaskHandler+0xd0>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    b346:	b005      	add	sp, #20
    b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (RxBuffer[i].PayloadLen == 0)
    b34a:	4b3a      	ldr	r3, [pc, #232]	; (b434 <PHY_TaskHandler+0x114>)
    b34c:	781d      	ldrb	r5, [r3, #0]
    b34e:	2d00      	cmp	r5, #0
    b350:	d00f      	beq.n	b372 <PHY_TaskHandler+0x52>
    b352:	234e      	movs	r3, #78	; 0x4e
    b354:	4a37      	ldr	r2, [pc, #220]	; (b434 <PHY_TaskHandler+0x114>)
    b356:	5cd3      	ldrb	r3, [r2, r3]
    b358:	2b00      	cmp	r3, #0
    b35a:	d009      	beq.n	b370 <PHY_TaskHandler+0x50>
    b35c:	239c      	movs	r3, #156	; 0x9c
    b35e:	5cd3      	ldrb	r3, [r2, r3]
    b360:	2b00      	cmp	r3, #0
    b362:	d043      	beq.n	b3ec <PHY_TaskHandler+0xcc>
    b364:	23ea      	movs	r3, #234	; 0xea
    b366:	5cd3      	ldrb	r3, [r2, r3]
            for (i = 0; i < BANK_SIZE; i++)
    b368:	2503      	movs	r5, #3
                if (RxBuffer[i].PayloadLen == 0)
    b36a:	2b00      	cmp	r3, #0
    b36c:	d1eb      	bne.n	b346 <PHY_TaskHandler+0x26>
    b36e:	e000      	b.n	b372 <PHY_TaskHandler+0x52>
            for (i = 0; i < BANK_SIZE; i++)
    b370:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    b372:	2007      	movs	r0, #7
    b374:	4b2e      	ldr	r3, [pc, #184]	; (b430 <PHY_TaskHandler+0x110>)
    b376:	4798      	blx	r3
    b378:	9001      	str	r0, [sp, #4]
                trx_frame_read(&size, 1);
    b37a:	ab02      	add	r3, sp, #8
    b37c:	1dde      	adds	r6, r3, #7
    b37e:	2101      	movs	r1, #1
    b380:	0030      	movs	r0, r6
    b382:	4b2d      	ldr	r3, [pc, #180]	; (b438 <PHY_TaskHandler+0x118>)
    b384:	4798      	blx	r3
				if(size <= MAX_PSDU)
    b386:	7831      	ldrb	r1, [r6, #0]
    b388:	b24b      	sxtb	r3, r1
    b38a:	2b00      	cmp	r3, #0
    b38c:	db26      	blt.n	b3dc <PHY_TaskHandler+0xbc>
					trx_frame_read(phyRxBuffer, size + 2);
    b38e:	3102      	adds	r1, #2
    b390:	b2c9      	uxtb	r1, r1
    b392:	482a      	ldr	r0, [pc, #168]	; (b43c <PHY_TaskHandler+0x11c>)
    b394:	4b28      	ldr	r3, [pc, #160]	; (b438 <PHY_TaskHandler+0x118>)
    b396:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    b398:	002f      	movs	r7, r5
    b39a:	ab02      	add	r3, sp, #8
    b39c:	79d8      	ldrb	r0, [r3, #7]
    b39e:	1c86      	adds	r6, r0, #2
    b3a0:	b2f6      	uxtb	r6, r6
    b3a2:	234e      	movs	r3, #78	; 0x4e
    b3a4:	435d      	muls	r5, r3
    b3a6:	4b23      	ldr	r3, [pc, #140]	; (b434 <PHY_TaskHandler+0x114>)
    b3a8:	54ee      	strb	r6, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    b3aa:	2e4c      	cmp	r6, #76	; 0x4c
    b3ac:	d816      	bhi.n	b3dc <PHY_TaskHandler+0xbc>
						for (i = 1; i <= size+2; i++)
    b3ae:	3002      	adds	r0, #2
    b3b0:	2201      	movs	r2, #1
    b3b2:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    b3b4:	0029      	movs	r1, r5
    b3b6:	4d1f      	ldr	r5, [pc, #124]	; (b434 <PHY_TaskHandler+0x114>)
    b3b8:	186d      	adds	r5, r5, r1
    b3ba:	4c20      	ldr	r4, [pc, #128]	; (b43c <PHY_TaskHandler+0x11c>)
    b3bc:	5ca1      	ldrb	r1, [r4, r2]
    b3be:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    b3c0:	3301      	adds	r3, #1
    b3c2:	b2db      	uxtb	r3, r3
    b3c4:	001a      	movs	r2, r3
    b3c6:	4298      	cmp	r0, r3
    b3c8:	daf8      	bge.n	b3bc <PHY_TaskHandler+0x9c>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + phyRssiBaseVal();
    b3ca:	4b1d      	ldr	r3, [pc, #116]	; (b440 <PHY_TaskHandler+0x120>)
    b3cc:	4798      	blx	r3
    b3ce:	234e      	movs	r3, #78	; 0x4e
    b3d0:	437b      	muls	r3, r7
    b3d2:	4f18      	ldr	r7, [pc, #96]	; (b434 <PHY_TaskHandler+0x114>)
    b3d4:	18ff      	adds	r7, r7, r3
    b3d6:	9b01      	ldr	r3, [sp, #4]
    b3d8:	181c      	adds	r4, r3, r0
    b3da:	55bc      	strb	r4, [r7, r6]
	value = trx_reg_read(reg);
    b3dc:	4d14      	ldr	r5, [pc, #80]	; (b430 <PHY_TaskHandler+0x110>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b3de:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    b3e0:	2001      	movs	r0, #1
    b3e2:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b3e4:	4020      	ands	r0, r4
    b3e6:	2816      	cmp	r0, #22
    b3e8:	d1fa      	bne.n	b3e0 <PHY_TaskHandler+0xc0>
    b3ea:	e7ac      	b.n	b346 <PHY_TaskHandler+0x26>
            for (i = 0; i < BANK_SIZE; i++)
    b3ec:	2502      	movs	r5, #2
    b3ee:	e7c0      	b.n	b372 <PHY_TaskHandler+0x52>
	value = trx_reg_read(reg);
    b3f0:	2002      	movs	r0, #2
    b3f2:	4b0f      	ldr	r3, [pc, #60]	; (b430 <PHY_TaskHandler+0x110>)
    b3f4:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    b3f6:	0940      	lsrs	r0, r0, #5
    b3f8:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    b3fa:	2800      	cmp	r0, #0
    b3fc:	d004      	beq.n	b408 <PHY_TaskHandler+0xe8>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b3fe:	2803      	cmp	r0, #3
    b400:	d00d      	beq.n	b41e <PHY_TaskHandler+0xfe>
			else if (TRAC_STATUS_NO_ACK == status)
    b402:	2805      	cmp	r0, #5
    b404:	d00d      	beq.n	b422 <PHY_TaskHandler+0x102>
				status = PHY_STATUS_ERROR;
    b406:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    b408:	4c0e      	ldr	r4, [pc, #56]	; (b444 <PHY_TaskHandler+0x124>)
    b40a:	68a3      	ldr	r3, [r4, #8]
    b40c:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    b40e:	2300      	movs	r3, #0
    b410:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    b412:	4b0d      	ldr	r3, [pc, #52]	; (b448 <PHY_TaskHandler+0x128>)
    b414:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    b416:	2201      	movs	r2, #1
    b418:	4b04      	ldr	r3, [pc, #16]	; (b42c <PHY_TaskHandler+0x10c>)
    b41a:	701a      	strb	r2, [r3, #0]
    b41c:	e793      	b.n	b346 <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b41e:	2002      	movs	r0, #2
    b420:	e7f2      	b.n	b408 <PHY_TaskHandler+0xe8>
				status = PHY_STATUS_NO_ACK;
    b422:	2003      	movs	r0, #3
    b424:	e7f0      	b.n	b408 <PHY_TaskHandler+0xe8>
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	0000b08d 	.word	0x0000b08d
    b42c:	200003f1 	.word	0x200003f1
    b430:	0000d54d 	.word	0x0000d54d
    b434:	20001e1c 	.word	0x20001e1c
    b438:	0000d749 	.word	0x0000d749
    b43c:	20000370 	.word	0x20000370
    b440:	0000af3d 	.word	0x0000af3d
    b444:	20001e04 	.word	0x20001e04
    b448:	0000b019 	.word	0x0000b019

0000b44c <Find_Index>:
#if defined(PROTOCOL_STAR)
/* All connections (FFD || RFD)are stored in Connection Table of PAN Coordinator
    Each Connection is identified by its index no. In case of Data TX , EDx --> PAN CO --> EDy
    PAN Coordinator will forward the data to EDy , In order to know */
static uint8_t Find_Index (uint8_t *DestAddr)
{
    b44c:	b570      	push	{r4, r5, r6, lr}
    b44e:	0006      	movs	r6, r0
    uint8_t i;
    uint8_t return_val;
    for (i = 0;i < conn_size; i++)
    b450:	4b12      	ldr	r3, [pc, #72]	; (b49c <Find_Index+0x50>)
    b452:	781c      	ldrb	r4, [r3, #0]
    b454:	2c00      	cmp	r4, #0
    b456:	d01e      	beq.n	b496 <Find_Index+0x4a>
    {
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    b458:	4b11      	ldr	r3, [pc, #68]	; (b4a0 <Find_Index+0x54>)
    b45a:	681b      	ldr	r3, [r3, #0]
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	2000      	movs	r0, #0
    b460:	e004      	b.n	b46c <Find_Index+0x20>
    for (i = 0;i < conn_size; i++)
    b462:	3001      	adds	r0, #1
    b464:	b2c0      	uxtb	r0, r0
    b466:	3310      	adds	r3, #16
    b468:	42a0      	cmp	r0, r4
    b46a:	d012      	beq.n	b492 <Find_Index+0x46>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    b46c:	7b1a      	ldrb	r2, [r3, #12]
    b46e:	2a7f      	cmp	r2, #127	; 0x7f
    b470:	d9f7      	bls.n	b462 <Find_Index+0x16>
        {
            if (DestAddr[0] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] && DestAddr[1] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] && DestAddr[2] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] )
    b472:	7835      	ldrb	r5, [r6, #0]
    b474:	791a      	ldrb	r2, [r3, #4]
    b476:	4295      	cmp	r5, r2
    b478:	d1f3      	bne.n	b462 <Find_Index+0x16>
    b47a:	7875      	ldrb	r5, [r6, #1]
    b47c:	795a      	ldrb	r2, [r3, #5]
    b47e:	4295      	cmp	r5, r2
    b480:	d1ef      	bne.n	b462 <Find_Index+0x16>
    b482:	78b5      	ldrb	r5, [r6, #2]
    b484:	799a      	ldrb	r2, [r3, #6]
    b486:	4295      	cmp	r5, r2
    b488:	d1eb      	bne.n	b462 <Find_Index+0x16>
                break;
            }

        }
    }
    if (i == conn_size)
    b48a:	4284      	cmp	r4, r0
    b48c:	d102      	bne.n	b494 <Find_Index+0x48>
    {
        return_val = 0xff;
    b48e:	20ff      	movs	r0, #255	; 0xff
    b490:	e000      	b.n	b494 <Find_Index+0x48>
    b492:	20ff      	movs	r0, #255	; 0xff
    }
    return return_val;
}
    b494:	bd70      	pop	{r4, r5, r6, pc}
        return_val = 0xff;
    b496:	20ff      	movs	r0, #255	; 0xff
    b498:	e7fc      	b.n	b494 <Find_Index+0x48>
    b49a:	46c0      	nop			; (mov r8, r8)
    b49c:	200003f2 	.word	0x200003f2
    b4a0:	20001f84 	.word	0x20001f84

0000b4a4 <CommandConfCallback>:
{
    b4a4:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    b4a6:	0010      	movs	r0, r2
    b4a8:	4b01      	ldr	r3, [pc, #4]	; (b4b0 <CommandConfCallback+0xc>)
    b4aa:	4798      	blx	r3
}
    b4ac:	bd10      	pop	{r4, pc}
    b4ae:	46c0      	nop			; (mov r8, r8)
    b4b0:	0000cc51 	.word	0x0000cc51

0000b4b4 <linkStatusConfCallback>:
{
    b4b4:	b510      	push	{r4, lr}
    b4b6:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    b4b8:	0010      	movs	r0, r2
    b4ba:	4b10      	ldr	r3, [pc, #64]	; (b4fc <linkStatusConfCallback+0x48>)
    b4bc:	4798      	blx	r3
    if (SUCCESS != status)
    b4be:	2c00      	cmp	r4, #0
    b4c0:	d017      	beq.n	b4f2 <linkStatusConfCallback+0x3e>
        if (linkStatusFailureCount >= MAX_LINK_STATUS_FAILURES)
    b4c2:	4b0f      	ldr	r3, [pc, #60]	; (b500 <linkStatusConfCallback+0x4c>)
    b4c4:	781b      	ldrb	r3, [r3, #0]
    b4c6:	2b02      	cmp	r3, #2
    b4c8:	d90e      	bls.n	b4e8 <linkStatusConfCallback+0x34>
            linkStatusTimeInterval = 0;
    b4ca:	2200      	movs	r2, #0
    b4cc:	4b0d      	ldr	r3, [pc, #52]	; (b504 <linkStatusConfCallback+0x50>)
    b4ce:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    b4d0:	4b0d      	ldr	r3, [pc, #52]	; (b508 <linkStatusConfCallback+0x54>)
    b4d2:	681b      	ldr	r3, [r3, #0]
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d004      	beq.n	b4e2 <linkStatusConfCallback+0x2e>
    b4d8:	4a0c      	ldr	r2, [pc, #48]	; (b50c <linkStatusConfCallback+0x58>)
    b4da:	7812      	ldrb	r2, [r2, #0]
    b4dc:	2a08      	cmp	r2, #8
    b4de:	d000      	beq.n	b4e2 <linkStatusConfCallback+0x2e>
                linkFailureCallback();
    b4e0:	4798      	blx	r3
            p2pStarCurrentState = DISCONNECTED;	
    b4e2:	2208      	movs	r2, #8
    b4e4:	4b09      	ldr	r3, [pc, #36]	; (b50c <linkStatusConfCallback+0x58>)
    b4e6:	701a      	strb	r2, [r3, #0]
        ++linkStatusFailureCount;
    b4e8:	4a05      	ldr	r2, [pc, #20]	; (b500 <linkStatusConfCallback+0x4c>)
    b4ea:	7813      	ldrb	r3, [r2, #0]
    b4ec:	3301      	adds	r3, #1
    b4ee:	7013      	strb	r3, [r2, #0]
}
    b4f0:	bd10      	pop	{r4, pc}
        linkStatusFailureCount = 0;
    b4f2:	2200      	movs	r2, #0
    b4f4:	4b02      	ldr	r3, [pc, #8]	; (b500 <linkStatusConfCallback+0x4c>)
    b4f6:	701a      	strb	r2, [r3, #0]
}
    b4f8:	e7fa      	b.n	b4f0 <linkStatusConfCallback+0x3c>
    b4fa:	46c0      	nop			; (mov r8, r8)
    b4fc:	0000cc51 	.word	0x0000cc51
    b500:	20000414 	.word	0x20000414
    b504:	20000416 	.word	0x20000416
    b508:	20002088 	.word	0x20002088
    b50c:	20000418 	.word	0x20000418

0000b510 <frameTxCallback>:
{
    b510:	b510      	push	{r4, lr}
    txCallbackReceived = true;
    b512:	2401      	movs	r4, #1
    b514:	4b08      	ldr	r3, [pc, #32]	; (b538 <frameTxCallback+0x28>)
    b516:	701c      	strb	r4, [r3, #0]
    DataConf_callback_t callback = sentFrame->txFrameEntry.frameConfCallback;
    b518:	4b08      	ldr	r3, [pc, #32]	; (b53c <frameTxCallback+0x2c>)
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	691b      	ldr	r3, [r3, #16]
    if (NULL != callback)
    b51e:	2b00      	cmp	r3, #0
    b520:	d005      	beq.n	b52e <frameTxCallback+0x1e>
        callback(handle, status, msgPointer);
    b522:	4798      	blx	r3
    MiMem_Free((uint8_t *)sentFrame);
    b524:	4b05      	ldr	r3, [pc, #20]	; (b53c <frameTxCallback+0x2c>)
    b526:	6818      	ldr	r0, [r3, #0]
    b528:	4b05      	ldr	r3, [pc, #20]	; (b540 <frameTxCallback+0x30>)
    b52a:	4798      	blx	r3
}
    b52c:	bd10      	pop	{r4, pc}
        MiMem_Free(msgPointer);
    b52e:	0010      	movs	r0, r2
    b530:	4b03      	ldr	r3, [pc, #12]	; (b540 <frameTxCallback+0x30>)
    b532:	4798      	blx	r3
    b534:	e7f6      	b.n	b524 <frameTxCallback+0x14>
    b536:	46c0      	nop			; (mov r8, r8)
    b538:	20000018 	.word	0x20000018
    b53c:	2000209c 	.word	0x2000209c
    b540:	0000cc51 	.word	0x0000cc51

0000b544 <dataTimerHandler>:
{
    b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    b546:	4b19      	ldr	r3, [pc, #100]	; (b5ac <dataTimerHandler+0x68>)
    b548:	7a1b      	ldrb	r3, [r3, #8]
    b54a:	2b00      	cmp	r3, #0
    b54c:	d029      	beq.n	b5a2 <dataTimerHandler+0x5e>
    b54e:	2600      	movs	r6, #0
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    b550:	4c16      	ldr	r4, [pc, #88]	; (b5ac <dataTimerHandler+0x68>)
    b552:	4f17      	ldr	r7, [pc, #92]	; (b5b0 <dataTimerHandler+0x6c>)
    b554:	e009      	b.n	b56a <dataTimerHandler+0x26>
			miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    b556:	0029      	movs	r1, r5
    b558:	4814      	ldr	r0, [pc, #80]	; (b5ac <dataTimerHandler+0x68>)
    b55a:	4b16      	ldr	r3, [pc, #88]	; (b5b4 <dataTimerHandler+0x70>)
    b55c:	4798      	blx	r3
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    b55e:	3601      	adds	r6, #1
    b560:	b2f6      	uxtb	r6, r6
    b562:	4b12      	ldr	r3, [pc, #72]	; (b5ac <dataTimerHandler+0x68>)
    b564:	7a1b      	ldrb	r3, [r3, #8]
    b566:	42b3      	cmp	r3, r6
    b568:	d918      	bls.n	b59c <dataTimerHandler+0x58>
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    b56a:	2100      	movs	r1, #0
    b56c:	0020      	movs	r0, r4
    b56e:	47b8      	blx	r7
    b570:	1e05      	subs	r5, r0, #0
		if (NULL == dataFramePtr)
    b572:	d015      	beq.n	b5a0 <dataTimerHandler+0x5c>
		if((0 != dataFramePtr->dataFrame.timeout) && (--dataFramePtr->dataFrame.timeout) == 0)
    b574:	7c03      	ldrb	r3, [r0, #16]
    b576:	2b00      	cmp	r3, #0
    b578:	d0ed      	beq.n	b556 <dataTimerHandler+0x12>
    b57a:	3b01      	subs	r3, #1
    b57c:	b2db      	uxtb	r3, r3
    b57e:	7403      	strb	r3, [r0, #16]
    b580:	2b00      	cmp	r3, #0
    b582:	d1e8      	bne.n	b556 <dataTimerHandler+0x12>
			DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    b584:	6843      	ldr	r3, [r0, #4]
			if (NULL != callback)
    b586:	2b00      	cmp	r3, #0
    b588:	d004      	beq.n	b594 <dataTimerHandler+0x50>
				callback(dataFramePtr->dataFrame.msghandle, NO_ACK, (uint8_t*)&(dataFramePtr->dataFrame.msg));
    b58a:	7d00      	ldrb	r0, [r0, #20]
    b58c:	002a      	movs	r2, r5
    b58e:	3216      	adds	r2, #22
    b590:	2103      	movs	r1, #3
    b592:	4798      	blx	r3
			MiMem_Free((uint8_t *)dataFramePtr);
    b594:	0028      	movs	r0, r5
    b596:	4b08      	ldr	r3, [pc, #32]	; (b5b8 <dataTimerHandler+0x74>)
    b598:	4798      	blx	r3
		{
    b59a:	e7e0      	b.n	b55e <dataTimerHandler+0x1a>
	if (0 == appAckWaitDataQueue.size)
    b59c:	2b00      	cmp	r3, #0
    b59e:	d000      	beq.n	b5a2 <dataTimerHandler+0x5e>
}
    b5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYS_TimerStop(&dataTimer);
    b5a2:	4806      	ldr	r0, [pc, #24]	; (b5bc <dataTimerHandler+0x78>)
    b5a4:	4b06      	ldr	r3, [pc, #24]	; (b5c0 <dataTimerHandler+0x7c>)
    b5a6:	4798      	blx	r3
    b5a8:	e7fa      	b.n	b5a0 <dataTimerHandler+0x5c>
    b5aa:	46c0      	nop			; (mov r8, r8)
    b5ac:	20001ffc 	.word	0x20001ffc
    b5b0:	0000cdc9 	.word	0x0000cdc9
    b5b4:	0000cd91 	.word	0x0000cd91
    b5b8:	0000cc51 	.word	0x0000cc51
    b5bc:	200003f8 	.word	0x200003f8
    b5c0:	0000cecd 	.word	0x0000cecd

0000b5c4 <MiApp_Set>:
{
    b5c4:	b570      	push	{r4, r5, r6, lr}
    b5c6:	000d      	movs	r5, r1
    return false;
    b5c8:	2400      	movs	r4, #0
    switch(id)
    b5ca:	2800      	cmp	r0, #0
    b5cc:	d001      	beq.n	b5d2 <MiApp_Set+0xe>
}
    b5ce:	0020      	movs	r0, r4
    b5d0:	bd70      	pop	{r4, r5, r6, pc}
            if( MiMAC_Set(MAC_CHANNEL, value))
    b5d2:	4b05      	ldr	r3, [pc, #20]	; (b5e8 <MiApp_Set+0x24>)
    b5d4:	4798      	blx	r3
    b5d6:	1e04      	subs	r4, r0, #0
    b5d8:	d0f9      	beq.n	b5ce <MiApp_Set+0xa>
                currentChannel = *value;
    b5da:	782a      	ldrb	r2, [r5, #0]
    b5dc:	4b03      	ldr	r3, [pc, #12]	; (b5ec <MiApp_Set+0x28>)
    b5de:	701a      	strb	r2, [r3, #0]
                PDS_Store(PDS_CURRENT_CHANNEL_ID);
    b5e0:	2004      	movs	r0, #4
    b5e2:	4b03      	ldr	r3, [pc, #12]	; (b5f0 <MiApp_Set+0x2c>)
    b5e4:	4798      	blx	r3
                return true;
    b5e6:	e7f2      	b.n	b5ce <MiApp_Set+0xa>
    b5e8:	0000a625 	.word	0x0000a625
    b5ec:	2000000d 	.word	0x2000000d
    b5f0:	00009e2d 	.word	0x00009e2d

0000b5f4 <MiApp_ProtocolInit>:
{
    b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5f6:	46c6      	mov	lr, r8
    b5f8:	b500      	push	{lr}
    b5fa:	b084      	sub	sp, #16
    b5fc:	0005      	movs	r5, r0
    uint16_t broadcastAddress = 0xFFFF;
    b5fe:	2201      	movs	r2, #1
    b600:	4252      	negs	r2, r2
    b602:	230e      	movs	r3, #14
    b604:	446b      	add	r3, sp
    b606:	801a      	strh	r2, [r3, #0]
    P2PStatus.Val = 0;//TODO
    b608:	2300      	movs	r3, #0
    b60a:	4a50      	ldr	r2, [pc, #320]	; (b74c <MiApp_ProtocolInit+0x158>)
    b60c:	7013      	strb	r3, [r2, #0]
    miwiDefaultRomOrRamParams = defaultRomOrRamParams;
    b60e:	4a50      	ldr	r2, [pc, #320]	; (b750 <MiApp_ProtocolInit+0x15c>)
    b610:	6010      	str	r0, [r2, #0]
    miwiDefaultRamOnlyParams = defaultRamOnlyParams;
    b612:	4a50      	ldr	r2, [pc, #320]	; (b754 <MiApp_ProtocolInit+0x160>)
    b614:	6011      	str	r1, [r2, #0]
    myPANID.Val = 0;
    b616:	4a50      	ldr	r2, [pc, #320]	; (b758 <MiApp_ProtocolInit+0x164>)
    b618:	8013      	strh	r3, [r2, #0]
    if (defaultRomOrRamParams->networkFreezerRestore)
    b61a:	7b03      	ldrb	r3, [r0, #12]
    b61c:	2b00      	cmp	r3, #0
    b61e:	d165      	bne.n	b6ec <MiApp_ProtocolInit+0xf8>
        p2pStarCurrentState = INIT_STATE;
    b620:	2201      	movs	r2, #1
    b622:	4b4e      	ldr	r3, [pc, #312]	; (b75c <MiApp_ProtocolInit+0x168>)
    b624:	701a      	strb	r2, [r3, #0]
        myPANID.Val = MY_PAN_ID;
    b626:	4a4e      	ldr	r2, [pc, #312]	; (b760 <MiApp_ProtocolInit+0x16c>)
    b628:	4b4b      	ldr	r3, [pc, #300]	; (b758 <MiApp_ProtocolInit+0x164>)
    b62a:	801a      	strh	r2, [r3, #0]
    b62c:	2400      	movs	r4, #0
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    b62e:	2600      	movs	r6, #0
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    b630:	4b4c      	ldr	r3, [pc, #304]	; (b764 <MiApp_ProtocolInit+0x170>)
    b632:	4698      	mov	r8, r3
    for(i = 0; i < CONNECTION_SIZE; i++)
    b634:	27a0      	movs	r7, #160	; 0xa0
    b636:	007f      	lsls	r7, r7, #1
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    b638:	682b      	ldr	r3, [r5, #0]
    b63a:	191b      	adds	r3, r3, r4
    b63c:	731e      	strb	r6, [r3, #12]
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    b63e:	682b      	ldr	r3, [r5, #0]
    b640:	1918      	adds	r0, r3, r4
    b642:	3004      	adds	r0, #4
    b644:	2208      	movs	r2, #8
    b646:	0031      	movs	r1, r6
    b648:	47c0      	blx	r8
    b64a:	3410      	adds	r4, #16
    for(i = 0; i < CONNECTION_SIZE; i++)
    b64c:	42bc      	cmp	r4, r7
    b64e:	d1f3      	bne.n	b638 <MiApp_ProtocolInit+0x44>
    b650:	4b45      	ldr	r3, [pc, #276]	; (b768 <MiApp_ProtocolInit+0x174>)
    b652:	0019      	movs	r1, r3
    b654:	3150      	adds	r1, #80	; 0x50
        IncomingFrameCounter[i].Val = 0;
    b656:	2200      	movs	r2, #0
    b658:	c304      	stmia	r3!, {r2}
    for(i = 0; i < CONNECTION_SIZE; i++)
    b65a:	428b      	cmp	r3, r1
    b65c:	d1fc      	bne.n	b658 <MiApp_ProtocolInit+0x64>
    miwi_status_t initStatus = SUCCESS;
    b65e:	2400      	movs	r4, #0
    initValue.PAddress = myLongAddress;
    b660:	aa01      	add	r2, sp, #4
    initValue.actionFlags.bits.CCAEnable = 1;
    b662:	7813      	ldrb	r3, [r2, #0]
    b664:	2102      	movs	r1, #2
    b666:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    b668:	2187      	movs	r1, #135	; 0x87
    b66a:	400b      	ands	r3, r1
    b66c:	2140      	movs	r1, #64	; 0x40
    b66e:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    b670:	b2db      	uxtb	r3, r3
    b672:	2104      	movs	r1, #4
    b674:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    b676:	21c6      	movs	r1, #198	; 0xc6
    b678:	400b      	ands	r3, r1
    b67a:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    b67c:	9801      	ldr	r0, [sp, #4]
    b67e:	493b      	ldr	r1, [pc, #236]	; (b76c <MiApp_ProtocolInit+0x178>)
    b680:	4b3b      	ldr	r3, [pc, #236]	; (b770 <MiApp_ProtocolInit+0x17c>)
    b682:	4798      	blx	r3
    if (currentChannel != 0xFF)
    b684:	4b3b      	ldr	r3, [pc, #236]	; (b774 <MiApp_ProtocolInit+0x180>)
    b686:	781b      	ldrb	r3, [r3, #0]
    b688:	2bff      	cmp	r3, #255	; 0xff
    b68a:	d003      	beq.n	b694 <MiApp_ProtocolInit+0xa0>
        MiApp_Set(CHANNEL, &currentChannel);
    b68c:	4939      	ldr	r1, [pc, #228]	; (b774 <MiApp_ProtocolInit+0x180>)
    b68e:	2000      	movs	r0, #0
    b690:	4b39      	ldr	r3, [pc, #228]	; (b778 <MiApp_ProtocolInit+0x184>)
    b692:	4798      	blx	r3
    MiMAC_SetAltAddress((uint8_t *)&broadcastAddress, (uint8_t *)&myPANID.Val);
    b694:	4930      	ldr	r1, [pc, #192]	; (b758 <MiApp_ProtocolInit+0x164>)
    b696:	200e      	movs	r0, #14
    b698:	4468      	add	r0, sp
    b69a:	4b38      	ldr	r3, [pc, #224]	; (b77c <MiApp_ProtocolInit+0x188>)
    b69c:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    b69e:	4a38      	ldr	r2, [pc, #224]	; (b780 <MiApp_ProtocolInit+0x18c>)
    b6a0:	4b38      	ldr	r3, [pc, #224]	; (b784 <MiApp_ProtocolInit+0x190>)
    b6a2:	781b      	ldrb	r3, [r3, #0]
    b6a4:	011b      	lsls	r3, r3, #4
    b6a6:	7811      	ldrb	r1, [r2, #0]
    b6a8:	430b      	orrs	r3, r1
    b6aa:	7013      	strb	r3, [r2, #0]
    protocolTimer.interval = PROTOCOL_TIMER_INTERVAL;
    b6ac:	4836      	ldr	r0, [pc, #216]	; (b788 <MiApp_ProtocolInit+0x194>)
    b6ae:	23fa      	movs	r3, #250	; 0xfa
    b6b0:	009b      	lsls	r3, r3, #2
    b6b2:	6083      	str	r3, [r0, #8]
    protocolTimer.mode = SYS_TIMER_PERIODIC_MODE;
    b6b4:	2501      	movs	r5, #1
    b6b6:	7305      	strb	r5, [r0, #12]
    protocolTimer.handler = protocolTimerHandler;
    b6b8:	4b34      	ldr	r3, [pc, #208]	; (b78c <MiApp_ProtocolInit+0x198>)
    b6ba:	6103      	str	r3, [r0, #16]
    SYS_TimerStart(&protocolTimer);
    b6bc:	4b34      	ldr	r3, [pc, #208]	; (b790 <MiApp_ProtocolInit+0x19c>)
    b6be:	4798      	blx	r3
    dataTimer.interval = DATA_TIMER_INTERVAL;
    b6c0:	4b34      	ldr	r3, [pc, #208]	; (b794 <MiApp_ProtocolInit+0x1a0>)
    b6c2:	2264      	movs	r2, #100	; 0x64
    b6c4:	609a      	str	r2, [r3, #8]
    dataTimer.mode = SYS_TIMER_PERIODIC_MODE;
    b6c6:	731d      	strb	r5, [r3, #12]
    dataTimer.handler = dataTimerHandler;
    b6c8:	4a33      	ldr	r2, [pc, #204]	; (b798 <MiApp_ProtocolInit+0x1a4>)
    b6ca:	611a      	str	r2, [r3, #16]
	miQueueInit(&appAckWaitDataQueue);
    b6cc:	4833      	ldr	r0, [pc, #204]	; (b79c <MiApp_ProtocolInit+0x1a8>)
    b6ce:	4d34      	ldr	r5, [pc, #208]	; (b7a0 <MiApp_ProtocolInit+0x1ac>)
    b6d0:	47a8      	blx	r5
	miQueueInit(&macAckOnlyFrameQueue);
    b6d2:	4834      	ldr	r0, [pc, #208]	; (b7a4 <MiApp_ProtocolInit+0x1b0>)
    b6d4:	47a8      	blx	r5
	miQueueInit(&indirectFrameQueue);
    b6d6:	4834      	ldr	r0, [pc, #208]	; (b7a8 <MiApp_ProtocolInit+0x1b4>)
    b6d8:	47a8      	blx	r5
    if (IN_NETWORK_STATE == p2pStarCurrentState)
    b6da:	4b20      	ldr	r3, [pc, #128]	; (b75c <MiApp_ProtocolInit+0x168>)
    b6dc:	781b      	ldrb	r3, [r3, #0]
    b6de:	2b07      	cmp	r3, #7
    b6e0:	d025      	beq.n	b72e <MiApp_ProtocolInit+0x13a>
}
    b6e2:	0020      	movs	r0, r4
    b6e4:	b004      	add	sp, #16
    b6e6:	bc04      	pop	{r2}
    b6e8:	4690      	mov	r8, r2
    b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!PDS_IsAbleToRestore(MIWI_ALL_MEMORY_MEM_ID) || !PDS_Restore(MIWI_ALL_MEMORY_MEM_ID))
    b6ec:	482f      	ldr	r0, [pc, #188]	; (b7ac <MiApp_ProtocolInit+0x1b8>)
    b6ee:	4b30      	ldr	r3, [pc, #192]	; (b7b0 <MiApp_ProtocolInit+0x1bc>)
    b6f0:	4798      	blx	r3
    b6f2:	2800      	cmp	r0, #0
    b6f4:	d004      	beq.n	b700 <MiApp_ProtocolInit+0x10c>
    b6f6:	482d      	ldr	r0, [pc, #180]	; (b7ac <MiApp_ProtocolInit+0x1b8>)
    b6f8:	4b2e      	ldr	r3, [pc, #184]	; (b7b4 <MiApp_ProtocolInit+0x1c0>)
    b6fa:	4798      	blx	r3
    b6fc:	2800      	cmp	r0, #0
    b6fe:	d101      	bne.n	b704 <MiApp_ProtocolInit+0x110>
            PDS_InitItems();
    b700:	4b2d      	ldr	r3, [pc, #180]	; (b7b8 <MiApp_ProtocolInit+0x1c4>)
    b702:	4798      	blx	r3
    if (myPANID.Val != 0x0000 && myPANID.Val != 0xFFFF)
    b704:	4b14      	ldr	r3, [pc, #80]	; (b758 <MiApp_ProtocolInit+0x164>)
    b706:	881b      	ldrh	r3, [r3, #0]
    b708:	3b01      	subs	r3, #1
    b70a:	b29b      	uxth	r3, r3
    b70c:	4a2b      	ldr	r2, [pc, #172]	; (b7bc <MiApp_ProtocolInit+0x1c8>)
    b70e:	4293      	cmp	r3, r2
    b710:	d900      	bls.n	b714 <MiApp_ProtocolInit+0x120>
    b712:	e785      	b.n	b620 <MiApp_ProtocolInit+0x2c>
        p2pStarCurrentState = IN_NETWORK_STATE;
    b714:	2207      	movs	r2, #7
    b716:	4b11      	ldr	r3, [pc, #68]	; (b75c <MiApp_ProtocolInit+0x168>)
    b718:	701a      	strb	r2, [r3, #0]
        if (NULL != reconnectionCallback)
    b71a:	4b29      	ldr	r3, [pc, #164]	; (b7c0 <MiApp_ProtocolInit+0x1cc>)
    b71c:	681b      	ldr	r3, [r3, #0]
    b71e:	2b00      	cmp	r3, #0
    b720:	d003      	beq.n	b72a <MiApp_ProtocolInit+0x136>
            reconnectionCallback(SUCCESS);
    b722:	2000      	movs	r0, #0
    b724:	4798      	blx	r3
        initStatus = RECONNECTED;
    b726:	240f      	movs	r4, #15
    b728:	e79a      	b.n	b660 <MiApp_ProtocolInit+0x6c>
    b72a:	240f      	movs	r4, #15
    b72c:	e798      	b.n	b660 <MiApp_ProtocolInit+0x6c>
        if (PAN_COORD == role)
    b72e:	4b25      	ldr	r3, [pc, #148]	; (b7c4 <MiApp_ProtocolInit+0x1d0>)
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	2b01      	cmp	r3, #1
    b734:	d003      	beq.n	b73e <MiApp_ProtocolInit+0x14a>
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    b736:	220f      	movs	r2, #15
    b738:	4b23      	ldr	r3, [pc, #140]	; (b7c8 <MiApp_ProtocolInit+0x1d4>)
    b73a:	801a      	strh	r2, [r3, #0]
    b73c:	e7d1      	b.n	b6e2 <MiApp_ProtocolInit+0xee>
    inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    b73e:	223c      	movs	r2, #60	; 0x3c
    b740:	4b22      	ldr	r3, [pc, #136]	; (b7cc <MiApp_ProtocolInit+0x1d8>)
    b742:	801a      	strh	r2, [r3, #0]
    sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    b744:	3a2d      	subs	r2, #45	; 0x2d
    b746:	4b22      	ldr	r3, [pc, #136]	; (b7d0 <MiApp_ProtocolInit+0x1dc>)
    b748:	801a      	strh	r2, [r3, #0]
    b74a:	e7ca      	b.n	b6e2 <MiApp_ProtocolInit+0xee>
    b74c:	20001ff8 	.word	0x20001ff8
    b750:	20001f84 	.word	0x20001f84
    b754:	20001f88 	.word	0x20001f88
    b758:	20001f94 	.word	0x20001f94
    b75c:	20000418 	.word	0x20000418
    b760:	00001234 	.word	0x00001234
    b764:	0000f98d 	.word	0x0000f98d
    b768:	20001f98 	.word	0x20001f98
    b76c:	20000010 	.word	0x20000010
    b770:	0000a64d 	.word	0x0000a64d
    b774:	2000000d 	.word	0x2000000d
    b778:	0000b5c5 	.word	0x0000b5c5
    b77c:	0000a1f9 	.word	0x0000a1f9
    b780:	2000000c 	.word	0x2000000c
    b784:	2000000b 	.word	0x2000000b
    b788:	20000420 	.word	0x20000420
    b78c:	0000bf1d 	.word	0x0000bf1d
    b790:	0000cf39 	.word	0x0000cf39
    b794:	200003f8 	.word	0x200003f8
    b798:	0000b545 	.word	0x0000b545
    b79c:	20001ffc 	.word	0x20001ffc
    b7a0:	0000cd85 	.word	0x0000cd85
    b7a4:	20001f58 	.word	0x20001f58
    b7a8:	20001f64 	.word	0x20001f64
    b7ac:	00004001 	.word	0x00004001
    b7b0:	00009fe1 	.word	0x00009fe1
    b7b4:	00009d4d 	.word	0x00009d4d
    b7b8:	0000a04d 	.word	0x0000a04d
    b7bc:	0000fffd 	.word	0x0000fffd
    b7c0:	20001f90 	.word	0x20001f90
    b7c4:	20002074 	.word	0x20002074
    b7c8:	20000416 	.word	0x20000416
    b7cc:	2000040e 	.word	0x2000040e
    b7d0:	20000434 	.word	0x20000434

0000b7d4 <MiApp_ConnectionMode>:
{
    b7d4:	b510      	push	{r4, lr}
    if( Mode > 3 )
    b7d6:	2803      	cmp	r0, #3
    b7d8:	d900      	bls.n	b7dc <MiApp_ConnectionMode+0x8>
}
    b7da:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    b7dc:	4b06      	ldr	r3, [pc, #24]	; (b7f8 <MiApp_ConnectionMode+0x24>)
    b7de:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b7e0:	4a06      	ldr	r2, [pc, #24]	; (b7fc <MiApp_ConnectionMode+0x28>)
    b7e2:	7811      	ldrb	r1, [r2, #0]
    b7e4:	230f      	movs	r3, #15
    b7e6:	400b      	ands	r3, r1
    b7e8:	0100      	lsls	r0, r0, #4
    b7ea:	4318      	orrs	r0, r3
    b7ec:	7010      	strb	r0, [r2, #0]
        PDS_Store(PDS_CONNECTION_MODE_ID);
    b7ee:	2005      	movs	r0, #5
    b7f0:	4b03      	ldr	r3, [pc, #12]	; (b800 <MiApp_ConnectionMode+0x2c>)
    b7f2:	4798      	blx	r3
    b7f4:	e7f1      	b.n	b7da <MiApp_ConnectionMode+0x6>
    b7f6:	46c0      	nop			; (mov r8, r8)
    b7f8:	2000000b 	.word	0x2000000b
    b7fc:	2000000c 	.word	0x2000000c
    b800:	00009e2d 	.word	0x00009e2d

0000b804 <MiApp_StartConnection>:
{
    b804:	b530      	push	{r4, r5, lr}
    b806:	b083      	sub	sp, #12
    b808:	0015      	movs	r5, r2
    b80a:	001c      	movs	r4, r3
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    b80c:	4b2c      	ldr	r3, [pc, #176]	; (b8c0 <MiApp_StartConnection+0xbc>)
    b80e:	781b      	ldrb	r3, [r3, #0]
    b810:	2204      	movs	r2, #4
    b812:	4393      	bics	r3, r2
        return false;
    b814:	2200      	movs	r2, #0
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    b816:	2b01      	cmp	r3, #1
    b818:	d002      	beq.n	b820 <MiApp_StartConnection+0x1c>
}
    b81a:	0010      	movs	r0, r2
    b81c:	b003      	add	sp, #12
    b81e:	bd30      	pop	{r4, r5, pc}
    p2pStarCurrentState = STARTING_NETWORK;
    b820:	3202      	adds	r2, #2
    b822:	4b27      	ldr	r3, [pc, #156]	; (b8c0 <MiApp_StartConnection+0xbc>)
    b824:	701a      	strb	r2, [r3, #0]
    switch(Mode)
    b826:	2801      	cmp	r0, #1
    b828:	d03f      	beq.n	b8aa <MiApp_StartConnection+0xa6>
    b82a:	2800      	cmp	r0, #0
    b82c:	d008      	beq.n	b840 <MiApp_StartConnection+0x3c>
    b82e:	2802      	cmp	r0, #2
    b830:	d03f      	beq.n	b8b2 <MiApp_StartConnection+0xae>
    ConfCallback(FAILURE);
    b832:	2001      	movs	r0, #1
    b834:	47a0      	blx	r4
    p2pStarCurrentState = INIT_STATE;
    b836:	2201      	movs	r2, #1
    b838:	4b21      	ldr	r3, [pc, #132]	; (b8c0 <MiApp_StartConnection+0xbc>)
    b83a:	701a      	strb	r2, [r3, #0]
    return false;
    b83c:	2200      	movs	r2, #0
    b83e:	e7ec      	b.n	b81a <MiApp_StartConnection+0x16>
            uint8_t channel = 0;
    b840:	2200      	movs	r2, #0
    b842:	466b      	mov	r3, sp
    b844:	715a      	strb	r2, [r3, #5]
            uint16_t tmp = 0xFFFF;
    b846:	466b      	mov	r3, sp
    b848:	1d98      	adds	r0, r3, #6
    b84a:	2301      	movs	r3, #1
    b84c:	425b      	negs	r3, r3
    b84e:	8003      	strh	r3, [r0, #0]
            myPANID.Val = MY_PAN_ID;
    b850:	491c      	ldr	r1, [pc, #112]	; (b8c4 <MiApp_StartConnection+0xc0>)
    b852:	4b1d      	ldr	r3, [pc, #116]	; (b8c8 <MiApp_StartConnection+0xc4>)
    b854:	800b      	strh	r3, [r1, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b856:	4b1d      	ldr	r3, [pc, #116]	; (b8cc <MiApp_StartConnection+0xc8>)
    b858:	4798      	blx	r3
            while (!(index & ChannelMap))
    b85a:	07eb      	lsls	r3, r5, #31
    b85c:	d40d      	bmi.n	b87a <MiApp_StartConnection+0x76>
    b85e:	466b      	mov	r3, sp
    b860:	7959      	ldrb	r1, [r3, #5]
    b862:	3101      	adds	r1, #1
    b864:	b2c9      	uxtb	r1, r1
    b866:	2201      	movs	r2, #1
    b868:	e000      	b.n	b86c <MiApp_StartConnection+0x68>
    b86a:	0019      	movs	r1, r3
                index = index << 1;
    b86c:	0052      	lsls	r2, r2, #1
    b86e:	1c4b      	adds	r3, r1, #1
    b870:	b2db      	uxtb	r3, r3
            while (!(index & ChannelMap))
    b872:	422a      	tst	r2, r5
    b874:	d0f9      	beq.n	b86a <MiApp_StartConnection+0x66>
    b876:	466b      	mov	r3, sp
    b878:	7159      	strb	r1, [r3, #5]
            MiApp_Set(CHANNEL, &channel);
    b87a:	466b      	mov	r3, sp
    b87c:	1d59      	adds	r1, r3, #5
    b87e:	2000      	movs	r0, #0
    b880:	4b13      	ldr	r3, [pc, #76]	; (b8d0 <MiApp_StartConnection+0xcc>)
    b882:	4798      	blx	r3
        role = PAN_COORD;
    b884:	2201      	movs	r2, #1
    b886:	4b13      	ldr	r3, [pc, #76]	; (b8d4 <MiApp_StartConnection+0xd0>)
    b888:	701a      	strb	r2, [r3, #0]
        p2pStarCurrentState = IN_NETWORK_STATE;
    b88a:	3206      	adds	r2, #6
    b88c:	4b0c      	ldr	r3, [pc, #48]	; (b8c0 <MiApp_StartConnection+0xbc>)
    b88e:	701a      	strb	r2, [r3, #0]
        PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    b890:	4811      	ldr	r0, [pc, #68]	; (b8d8 <MiApp_StartConnection+0xd4>)
    b892:	4b12      	ldr	r3, [pc, #72]	; (b8dc <MiApp_StartConnection+0xd8>)
    b894:	4798      	blx	r3
    inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    b896:	223c      	movs	r2, #60	; 0x3c
    b898:	4b11      	ldr	r3, [pc, #68]	; (b8e0 <MiApp_StartConnection+0xdc>)
    b89a:	801a      	strh	r2, [r3, #0]
    sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    b89c:	3a2d      	subs	r2, #45	; 0x2d
    b89e:	4b11      	ldr	r3, [pc, #68]	; (b8e4 <MiApp_StartConnection+0xe0>)
    b8a0:	801a      	strh	r2, [r3, #0]
            ConfCallback(SUCCESS);
    b8a2:	2000      	movs	r0, #0
    b8a4:	47a0      	blx	r4
            return true;
    b8a6:	2201      	movs	r2, #1
    b8a8:	e7b7      	b.n	b81a <MiApp_StartConnection+0x16>
        ConfCallback(FAILURE);
    b8aa:	2001      	movs	r0, #1
    b8ac:	47a0      	blx	r4
        return false;
    b8ae:	2200      	movs	r2, #0
    b8b0:	e7b3      	b.n	b81a <MiApp_StartConnection+0x16>
            ConfCallback(FAILURE);
    b8b2:	2001      	movs	r0, #1
    b8b4:	47a0      	blx	r4
            p2pStarCurrentState = INIT_STATE;
    b8b6:	2201      	movs	r2, #1
    b8b8:	4b01      	ldr	r3, [pc, #4]	; (b8c0 <MiApp_StartConnection+0xbc>)
    b8ba:	701a      	strb	r2, [r3, #0]
            return false;
    b8bc:	2200      	movs	r2, #0
    b8be:	e7ac      	b.n	b81a <MiApp_StartConnection+0x16>
    b8c0:	20000418 	.word	0x20000418
    b8c4:	20001f94 	.word	0x20001f94
    b8c8:	00001234 	.word	0x00001234
    b8cc:	0000a1f9 	.word	0x0000a1f9
    b8d0:	0000b5c5 	.word	0x0000b5c5
    b8d4:	20002074 	.word	0x20002074
    b8d8:	00004001 	.word	0x00004001
    b8dc:	00009e2d 	.word	0x00009e2d
    b8e0:	2000040e 	.word	0x2000040e
    b8e4:	20000434 	.word	0x20000434

0000b8e8 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    b8e8:	2800      	cmp	r0, #0
    b8ea:	d003      	beq.n	b8f4 <MiApp_SubscribeDataIndicationCallback+0xc>
	    pktRxcallback = callback;
    b8ec:	4b02      	ldr	r3, [pc, #8]	; (b8f8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b8ee:	6018      	str	r0, [r3, #0]
	    return true;
    b8f0:	2001      	movs	r0, #1
}
    b8f2:	4770      	bx	lr
    return false;
    b8f4:	2000      	movs	r0, #0
    b8f6:	e7fc      	b.n	b8f2 <MiApp_SubscribeDataIndicationCallback+0xa>
    b8f8:	2000041c 	.word	0x2000041c

0000b8fc <Total_Connections>:
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    b8fc:	4b0a      	ldr	r3, [pc, #40]	; (b928 <Total_Connections+0x2c>)
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	681b      	ldr	r3, [r3, #0]
    b902:	0019      	movs	r1, r3
    b904:	3141      	adds	r1, #65	; 0x41
    b906:	31ff      	adds	r1, #255	; 0xff
    uint8_t count=0 , i;
    b908:	2000      	movs	r0, #0
    b90a:	e004      	b.n	b916 <Total_Connections+0x1a>
            count++;
    b90c:	3001      	adds	r0, #1
    b90e:	b2c0      	uxtb	r0, r0
    b910:	3310      	adds	r3, #16
    for (i=0;i<CONNECTION_SIZE;i++)
    b912:	428b      	cmp	r3, r1
    b914:	d006      	beq.n	b924 <Total_Connections+0x28>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    b916:	889a      	ldrh	r2, [r3, #4]
    b918:	2a00      	cmp	r2, #0
    b91a:	d1f7      	bne.n	b90c <Total_Connections+0x10>
    b91c:	799a      	ldrb	r2, [r3, #6]
    b91e:	2a00      	cmp	r2, #0
    b920:	d0f6      	beq.n	b910 <Total_Connections+0x14>
    b922:	e7f3      	b.n	b90c <Total_Connections+0x10>
}
    b924:	4770      	bx	lr
    b926:	46c0      	nop			; (mov r8, r8)
    b928:	20001f84 	.word	0x20001f84

0000b92c <isSameAddress>:
{
    b92c:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    b92e:	7802      	ldrb	r2, [r0, #0]
    b930:	780b      	ldrb	r3, [r1, #0]
    b932:	429a      	cmp	r2, r3
    b934:	d109      	bne.n	b94a <isSameAddress+0x1e>
    b936:	2301      	movs	r3, #1
    b938:	5cc4      	ldrb	r4, [r0, r3]
    b93a:	5cca      	ldrb	r2, [r1, r3]
    b93c:	4294      	cmp	r4, r2
    b93e:	d106      	bne.n	b94e <isSameAddress+0x22>
    b940:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b942:	2b08      	cmp	r3, #8
    b944:	d1f8      	bne.n	b938 <isSameAddress+0xc>
    return true;
    b946:	2001      	movs	r0, #1
}
    b948:	bd10      	pop	{r4, pc}
            return false;
    b94a:	2000      	movs	r0, #0
    b94c:	e7fc      	b.n	b948 <isSameAddress+0x1c>
    b94e:	2000      	movs	r0, #0
    b950:	e7fa      	b.n	b948 <isSameAddress+0x1c>
    b952:	Address 0x0000b952 is out of bounds.


0000b954 <AddConnection>:
{
    b954:	b5f0      	push	{r4, r5, r6, r7, lr}
    b956:	b083      	sub	sp, #12
    b958:	9001      	str	r0, [sp, #4]
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    b95a:	4b2d      	ldr	r3, [pc, #180]	; (ba10 <AddConnection+0xbc>)
    b95c:	681f      	ldr	r7, [r3, #0]
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    b95e:	4b2d      	ldr	r3, [pc, #180]	; (ba14 <AddConnection+0xc0>)
    b960:	685b      	ldr	r3, [r3, #4]
    b962:	9300      	str	r3, [sp, #0]
    b964:	683d      	ldr	r5, [r7, #0]
    uint8_t connectionSlot = 0xFF;
    b966:	26ff      	movs	r6, #255	; 0xff
    for(i = 0; i < CONNECTION_SIZE; i++)
    b968:	2400      	movs	r4, #0
    b96a:	e00a      	b.n	b982 <AddConnection+0x2e>
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    b96c:	1d29      	adds	r1, r5, #4
    b96e:	9800      	ldr	r0, [sp, #0]
    b970:	4b29      	ldr	r3, [pc, #164]	; (ba18 <AddConnection+0xc4>)
    b972:	4798      	blx	r3
    b974:	2800      	cmp	r0, #0
    b976:	d144      	bne.n	ba02 <AddConnection+0xae>
    for(i = 0; i < CONNECTION_SIZE; i++)
    b978:	3401      	adds	r4, #1
    b97a:	b2e4      	uxtb	r4, r4
    b97c:	3510      	adds	r5, #16
    b97e:	2c14      	cmp	r4, #20
    b980:	d006      	beq.n	b990 <AddConnection+0x3c>
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    b982:	7b2b      	ldrb	r3, [r5, #12]
    b984:	2b7f      	cmp	r3, #127	; 0x7f
    b986:	d8f1      	bhi.n	b96c <AddConnection+0x18>
        else if( connectionSlot == 0xFF )
    b988:	2eff      	cmp	r6, #255	; 0xff
    b98a:	d1f5      	bne.n	b978 <AddConnection+0x24>
    b98c:	0026      	movs	r6, r4
    b98e:	e7f3      	b.n	b978 <AddConnection+0x24>
    uint8_t status = STATUS_SUCCESS;
    b990:	2400      	movs	r4, #0
    if( connectionSlot == 0xFF )
    b992:	2eff      	cmp	r6, #255	; 0xff
    b994:	d038      	beq.n	ba08 <AddConnection+0xb4>
        if( ConnMode >= ENABLE_PREV_CONN )
    b996:	4b21      	ldr	r3, [pc, #132]	; (ba1c <AddConnection+0xc8>)
    b998:	781b      	ldrb	r3, [r3, #0]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d135      	bne.n	ba0a <AddConnection+0xb6>
        MyindexinPC = connectionSlot;
    b99e:	4b20      	ldr	r3, [pc, #128]	; (ba20 <AddConnection+0xcc>)
    b9a0:	701e      	strb	r6, [r3, #0]
            miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b9a2:	0130      	lsls	r0, r6, #4
    b9a4:	2200      	movs	r2, #0
    b9a6:	4d1b      	ldr	r5, [pc, #108]	; (ba14 <AddConnection+0xc0>)
    b9a8:	686b      	ldr	r3, [r5, #4]
    b9aa:	5c99      	ldrb	r1, [r3, r2]
    b9ac:	683b      	ldr	r3, [r7, #0]
    b9ae:	181b      	adds	r3, r3, r0
    b9b0:	189b      	adds	r3, r3, r2
    b9b2:	7119      	strb	r1, [r3, #4]
    b9b4:	3201      	adds	r2, #1
        for(i = 0; i < 8; i++)
    b9b6:	2a08      	cmp	r2, #8
    b9b8:	d1f6      	bne.n	b9a8 <AddConnection+0x54>
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b9ba:	683b      	ldr	r3, [r7, #0]
    b9bc:	181b      	adds	r3, r3, r0
    b9be:	7b19      	ldrb	r1, [r3, #12]
    b9c0:	3a88      	subs	r2, #136	; 0x88
    b9c2:	430a      	orrs	r2, r1
    b9c4:	731a      	strb	r2, [r3, #12]
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (capacityInfo & 0x01);
    b9c6:	683b      	ldr	r3, [r7, #0]
    b9c8:	181b      	adds	r3, r3, r0
    b9ca:	2201      	movs	r2, #1
    b9cc:	9901      	ldr	r1, [sp, #4]
    b9ce:	400a      	ands	r2, r1
    b9d0:	7b1d      	ldrb	r5, [r3, #12]
    b9d2:	2101      	movs	r1, #1
    b9d4:	438d      	bics	r5, r1
    b9d6:	432a      	orrs	r2, r5
    b9d8:	731a      	strb	r2, [r3, #12]
                miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b9da:	4b0e      	ldr	r3, [pc, #56]	; (ba14 <AddConnection+0xc0>)
    b9dc:	689b      	ldr	r3, [r3, #8]
    b9de:	78da      	ldrb	r2, [r3, #3]
    b9e0:	683b      	ldr	r3, [r7, #0]
    b9e2:	1818      	adds	r0, r3, r0
    b9e4:	7342      	strb	r2, [r0, #13]
            IncomingFrameCounter[connectionSlot].Val = 0;
    b9e6:	00b2      	lsls	r2, r6, #2
    b9e8:	2100      	movs	r1, #0
    b9ea:	4b0e      	ldr	r3, [pc, #56]	; (ba24 <AddConnection+0xd0>)
    b9ec:	50d1      	str	r1, [r2, r3]
        LatestConnection = connectionSlot;
    b9ee:	4b0e      	ldr	r3, [pc, #56]	; (ba28 <AddConnection+0xd4>)
    b9f0:	701e      	strb	r6, [r3, #0]
    conn_size = Total_Connections();
    b9f2:	4b0e      	ldr	r3, [pc, #56]	; (ba2c <AddConnection+0xd8>)
    b9f4:	4798      	blx	r3
    b9f6:	4b0e      	ldr	r3, [pc, #56]	; (ba30 <AddConnection+0xdc>)
    b9f8:	7018      	strb	r0, [r3, #0]
    PDS_Store(PDS_EDC_ID);
    b9fa:	2007      	movs	r0, #7
    b9fc:	4b0d      	ldr	r3, [pc, #52]	; (ba34 <AddConnection+0xe0>)
    b9fe:	4798      	blx	r3
    return status;
    ba00:	e003      	b.n	ba0a <AddConnection+0xb6>
    ba02:	0026      	movs	r6, r4
                status = STATUS_EXISTS;
    ba04:	2401      	movs	r4, #1
    ba06:	e7c4      	b.n	b992 <AddConnection+0x3e>
        return STATUS_NOT_ENOUGH_SPACE;
    ba08:	24f1      	movs	r4, #241	; 0xf1
}
    ba0a:	0020      	movs	r0, r4
    ba0c:	b003      	add	sp, #12
    ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba10:	20001f84 	.word	0x20001f84
    ba14:	2000208c 	.word	0x2000208c
    ba18:	0000b92d 	.word	0x0000b92d
    ba1c:	2000000b 	.word	0x2000000b
    ba20:	20001ff4 	.word	0x20001ff4
    ba24:	20001f98 	.word	0x20001f98
    ba28:	20001f54 	.word	0x20001f54
    ba2c:	0000b8fd 	.word	0x0000b8fd
    ba30:	200003f2 	.word	0x200003f2
    ba34:	00009e2d 	.word	0x00009e2d

0000ba38 <frameTransmit>:
{
    ba38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba3a:	46de      	mov	lr, fp
    ba3c:	4657      	mov	r7, sl
    ba3e:	464e      	mov	r6, r9
    ba40:	4645      	mov	r5, r8
    ba42:	b5e0      	push	{r5, r6, r7, lr}
    ba44:	b083      	sub	sp, #12
    ba46:	0005      	movs	r5, r0
    ba48:	4668      	mov	r0, sp
    ba4a:	80c1      	strh	r1, [r0, #6]
    ba4c:	0017      	movs	r7, r2
    ba4e:	469a      	mov	sl, r3
    ba50:	ab0c      	add	r3, sp, #48	; 0x30
    ba52:	781e      	ldrb	r6, [r3, #0]
    ba54:	ab0d      	add	r3, sp, #52	; 0x34
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	4698      	mov	r8, r3
    ba5a:	ab0f      	add	r3, sp, #60	; 0x3c
    ba5c:	781b      	ldrb	r3, [r3, #0]
    ba5e:	4699      	mov	r9, r3
    ba60:	ab10      	add	r3, sp, #64	; 0x40
    ba62:	781b      	ldrb	r3, [r3, #0]
    ba64:	469b      	mov	fp, r3
    txFramePtr = (TxFrame_t *) MiMem_Alloc(sizeof(TxFrame_t));
    ba66:	2028      	movs	r0, #40	; 0x28
    ba68:	4b30      	ldr	r3, [pc, #192]	; (bb2c <frameTransmit+0xf4>)
    ba6a:	4798      	blx	r3
    ba6c:	1e04      	subs	r4, r0, #0
    if (NULL == txFramePtr)
    ba6e:	d05b      	beq.n	bb28 <frameTransmit+0xf0>
    tParam->flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    ba70:	2303      	movs	r3, #3
    ba72:	4652      	mov	r2, sl
    ba74:	4013      	ands	r3, r2
    ba76:	7603      	strb	r3, [r0, #24]
    tParam->flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
    ba78:	2300      	movs	r3, #0
    ba7a:	2d00      	cmp	r5, #0
    ba7c:	d100      	bne.n	ba80 <frameTransmit+0x48>
    ba7e:	465b      	mov	r3, fp
    ba80:	2201      	movs	r2, #1
    ba82:	4013      	ands	r3, r2
    ba84:	015b      	lsls	r3, r3, #5
    ba86:	469c      	mov	ip, r3
    ba88:	7e23      	ldrb	r3, [r4, #24]
    ba8a:	2120      	movs	r1, #32
    ba8c:	468a      	mov	sl, r1
    ba8e:	438b      	bics	r3, r1
    tParam->flags.bits.broadcast = Broadcast;
    ba90:	0010      	movs	r0, r2
    ba92:	4028      	ands	r0, r5
    ba94:	0080      	lsls	r0, r0, #2
    ba96:	4661      	mov	r1, ip
    ba98:	430b      	orrs	r3, r1
    ba9a:	2104      	movs	r1, #4
    ba9c:	438b      	bics	r3, r1
    tParam->flags.bits.secEn = SecurityEnabled;
    ba9e:	4016      	ands	r6, r2
    baa0:	00f6      	lsls	r6, r6, #3
    baa2:	4303      	orrs	r3, r0
    baa4:	2008      	movs	r0, #8
    baa6:	4383      	bics	r3, r0
        tParam->altSrcAddr = 0;
    baa8:	2100      	movs	r1, #0
    baaa:	3019      	adds	r0, #25
    baac:	5421      	strb	r1, [r4, r0]
        tParam->altDestAddr = (Broadcast) ? true : false;
    baae:	4651      	mov	r1, sl
    bab0:	5465      	strb	r5, [r4, r1]
        tParam->flags.bits.destPrsnt = (Broadcast) ? 0:1;
    bab2:	2101      	movs	r1, #1
    bab4:	404d      	eors	r5, r1
    bab6:	402a      	ands	r2, r5
    bab8:	0192      	lsls	r2, r2, #6
    baba:	431e      	orrs	r6, r3
    babc:	2340      	movs	r3, #64	; 0x40
    babe:	439e      	bics	r6, r3
        tParam->flags.bits.sourcePrsnt = 1;
    bac0:	4332      	orrs	r2, r6
    bac2:	2680      	movs	r6, #128	; 0x80
    bac4:	4276      	negs	r6, r6
    bac6:	4332      	orrs	r2, r6
    bac8:	7622      	strb	r2, [r4, #24]
    tParam->DestAddress = DestinationAddress;
    baca:	61e7      	str	r7, [r4, #28]
        tParam->DestPANID.Val = DestinationPANID.Val;
    bacc:	466b      	mov	r3, sp
    bace:	88db      	ldrh	r3, [r3, #6]
    bad0:	8463      	strh	r3, [r4, #34]	; 0x22
    if (NULL != DestinationAddress)
    bad2:	2f00      	cmp	r7, #0
    bad4:	d008      	beq.n	bae8 <frameTransmit+0xb0>
        if (false == tParam->flags.bits.broadcast)
    bad6:	b2d3      	uxtb	r3, r2
    bad8:	075b      	lsls	r3, r3, #29
    bada:	d41e      	bmi.n	bb1a <frameTransmit+0xe2>
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, LONG_ADDR_LEN);
    badc:	0020      	movs	r0, r4
    bade:	3008      	adds	r0, #8
    bae0:	2208      	movs	r2, #8
    bae2:	0039      	movs	r1, r7
    bae4:	4b12      	ldr	r3, [pc, #72]	; (bb30 <frameTransmit+0xf8>)
    bae6:	4798      	blx	r3
    txFramePtr->txFrameEntry.frame = msgPtr;
    bae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    baea:	6163      	str	r3, [r4, #20]
    tParam->DestAddress = (uint8_t*)&(txFramePtr->txFrameEntry.frameDstAddr);
    baec:	0023      	movs	r3, r4
    baee:	3308      	adds	r3, #8
    baf0:	61e3      	str	r3, [r4, #28]
    txFramePtr->txFrameEntry.frameConfCallback = ConfCallback;
    baf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    baf4:	6123      	str	r3, [r4, #16]
    txFramePtr->txFrameEntry.frameHandle = msghandle;
    baf6:	2325      	movs	r3, #37	; 0x25
    baf8:	464a      	mov	r2, r9
    bafa:	54e2      	strb	r2, [r4, r3]
    txFramePtr->txFrameEntry.frameLength = msgLen;
    bafc:	3b01      	subs	r3, #1
    bafe:	4642      	mov	r2, r8
    bb00:	54e2      	strb	r2, [r4, r3]
    miQueueAppend(&frameTxQueue, (miQueueBuffer_t *)txFramePtr);
    bb02:	0021      	movs	r1, r4
    bb04:	480b      	ldr	r0, [pc, #44]	; (bb34 <frameTransmit+0xfc>)
    bb06:	4b0c      	ldr	r3, [pc, #48]	; (bb38 <frameTransmit+0x100>)
    bb08:	4798      	blx	r3
    return true;
    bb0a:	2001      	movs	r0, #1
}
    bb0c:	b003      	add	sp, #12
    bb0e:	bc3c      	pop	{r2, r3, r4, r5}
    bb10:	4690      	mov	r8, r2
    bb12:	4699      	mov	r9, r3
    bb14:	46a2      	mov	sl, r4
    bb16:	46ab      	mov	fp, r5
    bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, SHORT_ADDR_LEN);
    bb1a:	0020      	movs	r0, r4
    bb1c:	3008      	adds	r0, #8
    bb1e:	2202      	movs	r2, #2
    bb20:	0039      	movs	r1, r7
    bb22:	4b03      	ldr	r3, [pc, #12]	; (bb30 <frameTransmit+0xf8>)
    bb24:	4798      	blx	r3
    bb26:	e7df      	b.n	bae8 <frameTransmit+0xb0>
        return false;
    bb28:	2000      	movs	r0, #0
    bb2a:	e7ef      	b.n	bb0c <frameTransmit+0xd4>
    bb2c:	0000cb95 	.word	0x0000cb95
    bb30:	0000f97b 	.word	0x0000f97b
    bb34:	20001fe8 	.word	0x20001fe8
    bb38:	0000cd91 	.word	0x0000cd91

0000bb3c <sendConnectionRequest>:
{
    bb3c:	b510      	push	{r4, lr}
    bb3e:	b086      	sub	sp, #24
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bb40:	4b26      	ldr	r3, [pc, #152]	; (bbdc <sendConnectionRequest+0xa0>)
    bb42:	78db      	ldrb	r3, [r3, #3]
    bb44:	2b00      	cmp	r3, #0
    bb46:	d111      	bne.n	bb6c <sendConnectionRequest+0x30>
        if ((gEstConnectionInfo.status == ALREADY_EXISTS) || (gEstConnectionInfo.status == SUCCESS))
    bb48:	4b24      	ldr	r3, [pc, #144]	; (bbdc <sendConnectionRequest+0xa0>)
    bb4a:	7858      	ldrb	r0, [r3, #1]
    bb4c:	2806      	cmp	r0, #6
    bb4e:	d001      	beq.n	bb54 <sendConnectionRequest+0x18>
    bb50:	2800      	cmp	r0, #0
    bb52:	d136      	bne.n	bbc2 <sendConnectionRequest+0x86>
            p2pStarCurrentState = IN_NETWORK_STATE;
    bb54:	2207      	movs	r2, #7
    bb56:	4b22      	ldr	r3, [pc, #136]	; (bbe0 <sendConnectionRequest+0xa4>)
    bb58:	701a      	strb	r2, [r3, #0]
            gEstConnectionInfo.confCallback(gEstConnectionInfo.status);
    bb5a:	4b20      	ldr	r3, [pc, #128]	; (bbdc <sendConnectionRequest+0xa0>)
    bb5c:	68db      	ldr	r3, [r3, #12]
    bb5e:	4798      	blx	r3
        gEstConnectionInfo.confCallback = NULL;
    bb60:	2200      	movs	r2, #0
    bb62:	4b1e      	ldr	r3, [pc, #120]	; (bbdc <sendConnectionRequest+0xa0>)
    bb64:	60da      	str	r2, [r3, #12]
        return TIMER_EXPIRED;
    bb66:	2004      	movs	r0, #4
}
    bb68:	b006      	add	sp, #24
    bb6a:	bd10      	pop	{r4, pc}
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bb6c:	4b1c      	ldr	r3, [pc, #112]	; (bbe0 <sendConnectionRequest+0xa4>)
    bb6e:	781b      	ldrb	r3, [r3, #0]
    bb70:	2b04      	cmp	r3, #4
    bb72:	d1e9      	bne.n	bb48 <sendConnectionRequest+0xc>
        dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REQUEST);
    bb74:	2005      	movs	r0, #5
    bb76:	4b1b      	ldr	r3, [pc, #108]	; (bbe4 <sendConnectionRequest+0xa8>)
    bb78:	4798      	blx	r3
        if (NULL == dataPtr)
    bb7a:	2800      	cmp	r0, #0
    bb7c:	d029      	beq.n	bbd2 <sendConnectionRequest+0x96>
        dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    bb7e:	2381      	movs	r3, #129	; 0x81
    bb80:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = currentChannel;
    bb82:	4b19      	ldr	r3, [pc, #100]	; (bbe8 <sendConnectionRequest+0xac>)
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = P2PCapacityInfo;
    bb88:	4b18      	ldr	r3, [pc, #96]	; (bbec <sendConnectionRequest+0xb0>)
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	7083      	strb	r3, [r0, #2]
            dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    bb8e:	4b18      	ldr	r3, [pc, #96]	; (bbf0 <sendConnectionRequest+0xb4>)
    bb90:	681b      	ldr	r3, [r3, #0]
    bb92:	689b      	ldr	r3, [r3, #8]
    bb94:	781b      	ldrb	r3, [r3, #0]
    bb96:	70c3      	strb	r3, [r0, #3]
        if(frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, connReqConfCallback))
    bb98:	4b16      	ldr	r3, [pc, #88]	; (bbf4 <sendConnectionRequest+0xb8>)
    bb9a:	8819      	ldrh	r1, [r3, #0]
    bb9c:	4b16      	ldr	r3, [pc, #88]	; (bbf8 <sendConnectionRequest+0xbc>)
    bb9e:	9305      	str	r3, [sp, #20]
    bba0:	2301      	movs	r3, #1
    bba2:	9304      	str	r3, [sp, #16]
    bba4:	2300      	movs	r3, #0
    bba6:	9303      	str	r3, [sp, #12]
    bba8:	9002      	str	r0, [sp, #8]
    bbaa:	2204      	movs	r2, #4
    bbac:	9201      	str	r2, [sp, #4]
    bbae:	9300      	str	r3, [sp, #0]
    bbb0:	3301      	adds	r3, #1
    bbb2:	2200      	movs	r2, #0
    bbb4:	2001      	movs	r0, #1
    bbb6:	4c11      	ldr	r4, [pc, #68]	; (bbfc <sendConnectionRequest+0xc0>)
    bbb8:	47a0      	blx	r4
    bbba:	2800      	cmp	r0, #0
    bbbc:	d10b      	bne.n	bbd6 <sendConnectionRequest+0x9a>
            return MEMORY_UNAVAILABLE;
    bbbe:	300a      	adds	r0, #10
    bbc0:	e7d2      	b.n	bb68 <sendConnectionRequest+0x2c>
            p2pStarCurrentState = gEstConnectionInfo.backupState;
    bbc2:	4b06      	ldr	r3, [pc, #24]	; (bbdc <sendConnectionRequest+0xa0>)
    bbc4:	7899      	ldrb	r1, [r3, #2]
    bbc6:	4a06      	ldr	r2, [pc, #24]	; (bbe0 <sendConnectionRequest+0xa4>)
    bbc8:	7011      	strb	r1, [r2, #0]
            gEstConnectionInfo.confCallback(FAILURE);
    bbca:	68db      	ldr	r3, [r3, #12]
    bbcc:	2001      	movs	r0, #1
    bbce:	4798      	blx	r3
    bbd0:	e7c6      	b.n	bb60 <sendConnectionRequest+0x24>
          return MEMORY_UNAVAILABLE;
    bbd2:	200a      	movs	r0, #10
    bbd4:	e7c8      	b.n	bb68 <sendConnectionRequest+0x2c>
            return SUCCESS;
    bbd6:	2000      	movs	r0, #0
    bbd8:	e7c6      	b.n	bb68 <sendConnectionRequest+0x2c>
    bbda:	46c0      	nop			; (mov r8, r8)
    bbdc:	20002008 	.word	0x20002008
    bbe0:	20000418 	.word	0x20000418
    bbe4:	0000cb95 	.word	0x0000cb95
    bbe8:	2000000d 	.word	0x2000000d
    bbec:	2000000c 	.word	0x2000000c
    bbf0:	20001f84 	.word	0x20001f84
    bbf4:	20001f94 	.word	0x20001f94
    bbf8:	0000bc01 	.word	0x0000bc01
    bbfc:	0000ba39 	.word	0x0000ba39

0000bc00 <connReqConfCallback>:
{
    bc00:	b510      	push	{r4, lr}
    bc02:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    bc04:	0010      	movs	r0, r2
    bc06:	4b07      	ldr	r3, [pc, #28]	; (bc24 <connReqConfCallback+0x24>)
    bc08:	4798      	blx	r3
    --gEstConnectionInfo.connectionRetries;
    bc0a:	4a07      	ldr	r2, [pc, #28]	; (bc28 <connReqConfCallback+0x28>)
    bc0c:	78d3      	ldrb	r3, [r2, #3]
    bc0e:	3b01      	subs	r3, #1
    bc10:	70d3      	strb	r3, [r2, #3]
    if (SUCCESS == status)
    bc12:	2c00      	cmp	r4, #0
    bc14:	d103      	bne.n	bc1e <connReqConfCallback+0x1e>
        connectionTimeInterval = CONNECTION_INTERVAL;
    bc16:	2202      	movs	r2, #2
    bc18:	4b04      	ldr	r3, [pc, #16]	; (bc2c <connReqConfCallback+0x2c>)
    bc1a:	801a      	strh	r2, [r3, #0]
}
    bc1c:	bd10      	pop	{r4, pc}
        sendConnectionRequest();
    bc1e:	4b04      	ldr	r3, [pc, #16]	; (bc30 <connReqConfCallback+0x30>)
    bc20:	4798      	blx	r3
}
    bc22:	e7fb      	b.n	bc1c <connReqConfCallback+0x1c>
    bc24:	0000cc51 	.word	0x0000cc51
    bc28:	20002008 	.word	0x20002008
    bc2c:	200003f4 	.word	0x200003f4
    bc30:	0000bb3d 	.word	0x0000bb3d

0000bc34 <MiApp_EstablishConnection>:
{
    bc34:	b570      	push	{r4, r5, r6, lr}
    bc36:	b082      	sub	sp, #8
    bc38:	0016      	movs	r6, r2
    bc3a:	466b      	mov	r3, sp
    bc3c:	71d8      	strb	r0, [r3, #7]
    if (p2pStarCurrentState == INITIAL_STATE)
    bc3e:	4b11      	ldr	r3, [pc, #68]	; (bc84 <MiApp_EstablishConnection+0x50>)
    bc40:	781d      	ldrb	r5, [r3, #0]
        return 0;
    bc42:	2000      	movs	r0, #0
    if (p2pStarCurrentState == INITIAL_STATE)
    bc44:	2d00      	cmp	r5, #0
    bc46:	d101      	bne.n	bc4c <MiApp_EstablishConnection+0x18>
}
    bc48:	b002      	add	sp, #8
    bc4a:	bd70      	pop	{r4, r5, r6, pc}
    ConnMode = ENABLE_ALL_CONN;
    bc4c:	2200      	movs	r2, #0
    bc4e:	4b0e      	ldr	r3, [pc, #56]	; (bc88 <MiApp_EstablishConnection+0x54>)
    bc50:	701a      	strb	r2, [r3, #0]
    gEstConnectionInfo.confCallback = ConfCallback;
    bc52:	4c0e      	ldr	r4, [pc, #56]	; (bc8c <MiApp_EstablishConnection+0x58>)
    bc54:	9b06      	ldr	r3, [sp, #24]
    bc56:	60e3      	str	r3, [r4, #12]
    gEstConnectionInfo.addrLen = addr_len;
    bc58:	7021      	strb	r1, [r4, #0]
    memcpy(gEstConnectionInfo.address, addr, addr_len);
    bc5a:	1d20      	adds	r0, r4, #4
    bc5c:	000a      	movs	r2, r1
    bc5e:	0031      	movs	r1, r6
    bc60:	4b0b      	ldr	r3, [pc, #44]	; (bc90 <MiApp_EstablishConnection+0x5c>)
    bc62:	4798      	blx	r3
    gEstConnectionInfo.backupState = p2pStarCurrentState;
    bc64:	70a5      	strb	r5, [r4, #2]
	gEstConnectionInfo.status = SCAN_NO_BEACON;
    bc66:	2308      	movs	r3, #8
    bc68:	7063      	strb	r3, [r4, #1]
    gEstConnectionInfo.connectionRetries = CONNECTION_RETRY_TIMES;
    bc6a:	3b05      	subs	r3, #5
    bc6c:	70e3      	strb	r3, [r4, #3]
    p2pStarCurrentState = ESTABLISHING_NETWORK;
    bc6e:	2204      	movs	r2, #4
    bc70:	4b04      	ldr	r3, [pc, #16]	; (bc84 <MiApp_EstablishConnection+0x50>)
    bc72:	701a      	strb	r2, [r3, #0]
    MiApp_Set(CHANNEL, &Channel);
    bc74:	466b      	mov	r3, sp
    bc76:	1dd9      	adds	r1, r3, #7
    bc78:	2000      	movs	r0, #0
    bc7a:	4b06      	ldr	r3, [pc, #24]	; (bc94 <MiApp_EstablishConnection+0x60>)
    bc7c:	4798      	blx	r3
    return sendConnectionRequest();
    bc7e:	4b06      	ldr	r3, [pc, #24]	; (bc98 <MiApp_EstablishConnection+0x64>)
    bc80:	4798      	blx	r3
    bc82:	e7e1      	b.n	bc48 <MiApp_EstablishConnection+0x14>
    bc84:	20000418 	.word	0x20000418
    bc88:	2000000b 	.word	0x2000000b
    bc8c:	20002008 	.word	0x20002008
    bc90:	0000f97b 	.word	0x0000f97b
    bc94:	0000b5c5 	.word	0x0000b5c5
    bc98:	0000bb3d 	.word	0x0000bb3d

0000bc9c <MiApp_BroadcastConnectionTable>:
{
    bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc9e:	46de      	mov	lr, fp
    bca0:	4657      	mov	r7, sl
    bca2:	464e      	mov	r6, r9
    bca4:	4645      	mov	r5, r8
    bca6:	b5e0      	push	{r5, r6, r7, lr}
    bca8:	b089      	sub	sp, #36	; 0x24
    if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
    bcaa:	4b5c      	ldr	r3, [pc, #368]	; (be1c <MiApp_BroadcastConnectionTable+0x180>)
    bcac:	781c      	ldrb	r4, [r3, #0]
    bcae:	3401      	adds	r4, #1
    bcb0:	00a4      	lsls	r4, r4, #2
    bcb2:	2c27      	cmp	r4, #39	; 0x27
    bcb4:	dd1a      	ble.n	bcec <MiApp_BroadcastConnectionTable+0x50>
        broadcast_count = ((conn_size * 4) + 4 )/ TX_BUFFER_SIZE;
    bcb6:	2128      	movs	r1, #40	; 0x28
    bcb8:	0020      	movs	r0, r4
    bcba:	4b59      	ldr	r3, [pc, #356]	; (be20 <MiApp_BroadcastConnectionTable+0x184>)
    bcbc:	4798      	blx	r3
    bcbe:	b2c3      	uxtb	r3, r0
    bcc0:	001d      	movs	r5, r3
    bcc2:	9307      	str	r3, [sp, #28]
        if ((conn_size *4) + 4 % TX_BUFFER_SIZE != 0)
    bcc4:	2c00      	cmp	r4, #0
    bcc6:	d007      	beq.n	bcd8 <MiApp_BroadcastConnectionTable+0x3c>
            broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
    bcc8:	2128      	movs	r1, #40	; 0x28
    bcca:	0020      	movs	r0, r4
    bccc:	4b55      	ldr	r3, [pc, #340]	; (be24 <MiApp_BroadcastConnectionTable+0x188>)
    bcce:	4798      	blx	r3
    bcd0:	46ac      	mov	ip, r5
    bcd2:	4461      	add	r1, ip
    bcd4:	b2cb      	uxtb	r3, r1
    bcd6:	9307      	str	r3, [sp, #28]
    for (i = 0 ; i < broadcast_count ; i++)
    bcd8:	9b07      	ldr	r3, [sp, #28]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d108      	bne.n	bcf0 <MiApp_BroadcastConnectionTable+0x54>
}
    bcde:	b009      	add	sp, #36	; 0x24
    bce0:	bc3c      	pop	{r2, r3, r4, r5}
    bce2:	4690      	mov	r8, r2
    bce4:	4699      	mov	r9, r3
    bce6:	46a2      	mov	sl, r4
    bce8:	46ab      	mov	fp, r5
    bcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        broadcast_count = 1;
    bcec:	2301      	movs	r3, #1
    bcee:	9307      	str	r3, [sp, #28]
    bcf0:	2309      	movs	r3, #9
    bcf2:	9306      	str	r3, [sp, #24]
    bcf4:	2400      	movs	r4, #0
    bcf6:	2300      	movs	r3, #0
    bcf8:	469a      	mov	sl, r3
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    bcfa:	4e4b      	ldr	r6, [pc, #300]	; (be28 <MiApp_BroadcastConnectionTable+0x18c>)
    bcfc:	e066      	b.n	bdcc <MiApp_BroadcastConnectionTable+0x130>
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    bcfe:	792d      	ldrb	r5, [r5, #4]
    bd00:	5485      	strb	r5, [r0, r2]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    bd02:	4d49      	ldr	r5, [pc, #292]	; (be28 <MiApp_BroadcastConnectionTable+0x18c>)
    bd04:	682d      	ldr	r5, [r5, #0]
    bd06:	682d      	ldr	r5, [r5, #0]
    bd08:	192d      	adds	r5, r5, r4
    bd0a:	796d      	ldrb	r5, [r5, #5]
    bd0c:	46ab      	mov	fp, r5
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    bd0e:	1c55      	adds	r5, r2, #1
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    bd10:	b2ed      	uxtb	r5, r5
    bd12:	465f      	mov	r7, fp
    bd14:	5547      	strb	r7, [r0, r5]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    bd16:	1cd5      	adds	r5, r2, #3
    bd18:	b2ed      	uxtb	r5, r5
    bd1a:	46ab      	mov	fp, r5
    bd1c:	4d42      	ldr	r5, [pc, #264]	; (be28 <MiApp_BroadcastConnectionTable+0x18c>)
    bd1e:	682d      	ldr	r5, [r5, #0]
    bd20:	682d      	ldr	r5, [r5, #0]
    bd22:	192c      	adds	r4, r5, r4
    bd24:	79a5      	ldrb	r5, [r4, #6]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    bd26:	1c94      	adds	r4, r2, #2
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    bd28:	b2e4      	uxtb	r4, r4
    bd2a:	5505      	strb	r5, [r0, r4]
                    dataPtr[dataLen++] = j;
    bd2c:	3204      	adds	r2, #4
    bd2e:	b2d2      	uxtb	r2, r2
    bd30:	465c      	mov	r4, fp
    bd32:	5503      	strb	r3, [r0, r4]
                count = count + 4;
    bd34:	3104      	adds	r1, #4
    bd36:	b2c9      	uxtb	r1, r1
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    bd38:	3301      	adds	r3, #1
    bd3a:	b2db      	uxtb	r3, r3
    bd3c:	4543      	cmp	r3, r8
    bd3e:	da1a      	bge.n	bd76 <MiApp_BroadcastConnectionTable+0xda>
            if (j < conn_size)
    bd40:	464c      	mov	r4, r9
    bd42:	7824      	ldrb	r4, [r4, #0]
    bd44:	429c      	cmp	r4, r3
    bd46:	d9f7      	bls.n	bd38 <MiApp_BroadcastConnectionTable+0x9c>
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    bd48:	011c      	lsls	r4, r3, #4
    bd4a:	6835      	ldr	r5, [r6, #0]
    bd4c:	682d      	ldr	r5, [r5, #0]
    bd4e:	192d      	adds	r5, r5, r4
    bd50:	7b2f      	ldrb	r7, [r5, #12]
    bd52:	2f7f      	cmp	r7, #127	; 0x7f
    bd54:	d8d3      	bhi.n	bcfe <MiApp_BroadcastConnectionTable+0x62>
                    dataPtr[dataLen++] = 0xff;
    bd56:	4664      	mov	r4, ip
    bd58:	5484      	strb	r4, [r0, r2]
    bd5a:	1c54      	adds	r4, r2, #1
                    dataPtr[dataLen++] = 0xff;
    bd5c:	b2e4      	uxtb	r4, r4
    bd5e:	4665      	mov	r5, ip
    bd60:	5505      	strb	r5, [r0, r4]
                    dataPtr[dataLen++] = 0xff;
    bd62:	1cd4      	adds	r4, r2, #3
    bd64:	b2e4      	uxtb	r4, r4
                    dataPtr[dataLen++] = 0xff;
    bd66:	1c95      	adds	r5, r2, #2
                    dataPtr[dataLen++] = 0xff;
    bd68:	b2ed      	uxtb	r5, r5
    bd6a:	4667      	mov	r7, ip
    bd6c:	5547      	strb	r7, [r0, r5]
                    dataPtr[dataLen++] = j;
    bd6e:	3204      	adds	r2, #4
    bd70:	b2d2      	uxtb	r2, r2
    bd72:	5503      	strb	r3, [r0, r4]
    bd74:	e7de      	b.n	bd34 <MiApp_BroadcastConnectionTable+0x98>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    bd76:	2927      	cmp	r1, #39	; 0x27
    bd78:	d84d      	bhi.n	be16 <MiApp_BroadcastConnectionTable+0x17a>
        count = 4;
    bd7a:	0015      	movs	r5, r2
            dataPtr[dataLen++] = 0xFF;   // Garbage Value
    bd7c:	23ff      	movs	r3, #255	; 0xff
    bd7e:	469c      	mov	ip, r3
    bd80:	1a8a      	subs	r2, r1, r2
    bd82:	b2d2      	uxtb	r2, r2
    bd84:	1c6c      	adds	r4, r5, #1
    bd86:	b2e4      	uxtb	r4, r4
    bd88:	4663      	mov	r3, ip
    bd8a:	5543      	strb	r3, [r0, r5]
    bd8c:	0025      	movs	r5, r4
        for (k=count;k<TX_BUFFER_SIZE;k++)
    bd8e:	1913      	adds	r3, r2, r4
    bd90:	b2db      	uxtb	r3, r3
    bd92:	2b27      	cmp	r3, #39	; 0x27
    bd94:	d9f6      	bls.n	bd84 <MiApp_BroadcastConnectionTable+0xe8>
        frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bd96:	4b25      	ldr	r3, [pc, #148]	; (be2c <MiApp_BroadcastConnectionTable+0x190>)
    bd98:	8819      	ldrh	r1, [r3, #0]
    bd9a:	4b25      	ldr	r3, [pc, #148]	; (be30 <MiApp_BroadcastConnectionTable+0x194>)
    bd9c:	9305      	str	r3, [sp, #20]
    bd9e:	2301      	movs	r3, #1
    bda0:	9304      	str	r3, [sp, #16]
    bda2:	2300      	movs	r3, #0
    bda4:	9303      	str	r3, [sp, #12]
    bda6:	9002      	str	r0, [sp, #8]
    bda8:	9401      	str	r4, [sp, #4]
    bdaa:	9300      	str	r3, [sp, #0]
    bdac:	3301      	adds	r3, #1
    bdae:	2200      	movs	r2, #0
    bdb0:	2001      	movs	r0, #1
    bdb2:	4d20      	ldr	r5, [pc, #128]	; (be34 <MiApp_BroadcastConnectionTable+0x198>)
    bdb4:	47a8      	blx	r5
    for (i = 0 ; i < broadcast_count ; i++)
    bdb6:	4653      	mov	r3, sl
    bdb8:	3301      	adds	r3, #1
    bdba:	b2db      	uxtb	r3, r3
    bdbc:	469a      	mov	sl, r3
    bdbe:	9b06      	ldr	r3, [sp, #24]
    bdc0:	3309      	adds	r3, #9
    bdc2:	9306      	str	r3, [sp, #24]
    bdc4:	9b07      	ldr	r3, [sp, #28]
    bdc6:	459a      	cmp	sl, r3
    bdc8:	d300      	bcc.n	bdcc <MiApp_BroadcastConnectionTable+0x130>
    bdca:	e788      	b.n	bcde <MiApp_BroadcastConnectionTable+0x42>
        dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    bdcc:	2028      	movs	r0, #40	; 0x28
    bdce:	4b1a      	ldr	r3, [pc, #104]	; (be38 <MiApp_BroadcastConnectionTable+0x19c>)
    bdd0:	4798      	blx	r3
        if (NULL == dataPtr)
    bdd2:	2800      	cmp	r0, #0
    bdd4:	d100      	bne.n	bdd8 <MiApp_BroadcastConnectionTable+0x13c>
    bdd6:	e782      	b.n	bcde <MiApp_BroadcastConnectionTable+0x42>
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    bdd8:	2377      	movs	r3, #119	; 0x77
    bdda:	5503      	strb	r3, [r0, r4]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    bddc:	4b0f      	ldr	r3, [pc, #60]	; (be1c <MiApp_BroadcastConnectionTable+0x180>)
    bdde:	781a      	ldrb	r2, [r3, #0]
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    bde0:	1c63      	adds	r3, r4, #1
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    bde2:	b2db      	uxtb	r3, r3
    bde4:	54c2      	strb	r2, [r0, r3]
    bde6:	4653      	mov	r3, sl
    bde8:	00db      	lsls	r3, r3, #3
    bdea:	4453      	add	r3, sl
    bdec:	b2db      	uxtb	r3, r3
    bdee:	1ca2      	adds	r2, r4, #2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    bdf0:	b2d2      	uxtb	r2, r2
    bdf2:	5483      	strb	r3, [r0, r2]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    bdf4:	1d22      	adds	r2, r4, #4
    bdf6:	b2d2      	uxtb	r2, r2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    bdf8:	3403      	adds	r4, #3
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    bdfa:	b2e4      	uxtb	r4, r4
    bdfc:	9906      	ldr	r1, [sp, #24]
    bdfe:	5501      	strb	r1, [r0, r4]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    be00:	4688      	mov	r8, r1
    be02:	428b      	cmp	r3, r1
    be04:	da05      	bge.n	be12 <MiApp_BroadcastConnectionTable+0x176>
    be06:	2104      	movs	r1, #4
            if (j < conn_size)
    be08:	4c04      	ldr	r4, [pc, #16]	; (be1c <MiApp_BroadcastConnectionTable+0x180>)
    be0a:	46a1      	mov	r9, r4
                    dataPtr[dataLen++] = 0xff;
    be0c:	24ff      	movs	r4, #255	; 0xff
    be0e:	46a4      	mov	ip, r4
    be10:	e796      	b.n	bd40 <MiApp_BroadcastConnectionTable+0xa4>
        count = 4;
    be12:	2104      	movs	r1, #4
    be14:	e7b1      	b.n	bd7a <MiApp_BroadcastConnectionTable+0xde>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    be16:	0014      	movs	r4, r2
    be18:	e7bd      	b.n	bd96 <MiApp_BroadcastConnectionTable+0xfa>
    be1a:	46c0      	nop			; (mov r8, r8)
    be1c:	200003f2 	.word	0x200003f2
    be20:	0000eaa5 	.word	0x0000eaa5
    be24:	0000ec71 	.word	0x0000ec71
    be28:	20001f84 	.word	0x20001f84
    be2c:	20001f94 	.word	0x20001f94
    be30:	0000b4a5 	.word	0x0000b4a5
    be34:	0000ba39 	.word	0x0000ba39
    be38:	0000cb95 	.word	0x0000cb95

0000be3c <connectionRespConfCallback>:
{
    be3c:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    be3e:	0010      	movs	r0, r2
    be40:	4b02      	ldr	r3, [pc, #8]	; (be4c <connectionRespConfCallback+0x10>)
    be42:	4798      	blx	r3
    MiApp_BroadcastConnectionTable();
    be44:	4b02      	ldr	r3, [pc, #8]	; (be50 <connectionRespConfCallback+0x14>)
    be46:	4798      	blx	r3
}
    be48:	bd10      	pop	{r4, pc}
    be4a:	46c0      	nop			; (mov r8, r8)
    be4c:	0000cc51 	.word	0x0000cc51
    be50:	0000bc9d 	.word	0x0000bc9d

0000be54 <removeConnection>:
{
    be54:	b510      	push	{r4, lr}
    be56:	b086      	sub	sp, #24
    be58:	0004      	movs	r4, r0
    dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST);
    be5a:	2001      	movs	r0, #1
    be5c:	4b0e      	ldr	r3, [pc, #56]	; (be98 <removeConnection+0x44>)
    be5e:	4798      	blx	r3
    if (NULL == dataPtr)
    be60:	2800      	cmp	r0, #0
    be62:	d016      	beq.n	be92 <removeConnection+0x3e>
    dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    be64:	2382      	movs	r3, #130	; 0x82
    be66:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[index].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    be68:	4b0c      	ldr	r3, [pc, #48]	; (be9c <removeConnection+0x48>)
    be6a:	681b      	ldr	r3, [r3, #0]
    be6c:	0124      	lsls	r4, r4, #4
    be6e:	681a      	ldr	r2, [r3, #0]
    be70:	1912      	adds	r2, r2, r4
    be72:	3204      	adds	r2, #4
    be74:	4b0a      	ldr	r3, [pc, #40]	; (bea0 <removeConnection+0x4c>)
    be76:	8819      	ldrh	r1, [r3, #0]
    be78:	4b0a      	ldr	r3, [pc, #40]	; (bea4 <removeConnection+0x50>)
    be7a:	9305      	str	r3, [sp, #20]
    be7c:	2401      	movs	r4, #1
    be7e:	9404      	str	r4, [sp, #16]
    be80:	2300      	movs	r3, #0
    be82:	9303      	str	r3, [sp, #12]
    be84:	9002      	str	r0, [sp, #8]
    be86:	9401      	str	r4, [sp, #4]
    be88:	9300      	str	r3, [sp, #0]
    be8a:	3301      	adds	r3, #1
    be8c:	2000      	movs	r0, #0
    be8e:	4c06      	ldr	r4, [pc, #24]	; (bea8 <removeConnection+0x54>)
    be90:	47a0      	blx	r4
}
    be92:	b006      	add	sp, #24
    be94:	bd10      	pop	{r4, pc}
    be96:	46c0      	nop			; (mov r8, r8)
    be98:	0000cb95 	.word	0x0000cb95
    be9c:	20001f84 	.word	0x20001f84
    bea0:	20001f94 	.word	0x20001f94
    bea4:	0000b4a5 	.word	0x0000b4a5
    bea8:	0000ba39 	.word	0x0000ba39

0000beac <MiApp_RemoveConnection>:
{
    beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ConnectionIndex == 0xFF )
    beae:	28ff      	cmp	r0, #255	; 0xff
    beb0:	d008      	beq.n	bec4 <MiApp_RemoveConnection+0x18>
    else if( miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.bits.isValid )
    beb2:	0104      	lsls	r4, r0, #4
    beb4:	4b16      	ldr	r3, [pc, #88]	; (bf10 <MiApp_RemoveConnection+0x64>)
    beb6:	681b      	ldr	r3, [r3, #0]
    beb8:	681b      	ldr	r3, [r3, #0]
    beba:	191b      	adds	r3, r3, r4
    bebc:	7b1b      	ldrb	r3, [r3, #12]
    bebe:	2b7f      	cmp	r3, #127	; 0x7f
    bec0:	d81a      	bhi.n	bef8 <MiApp_RemoveConnection+0x4c>
}
    bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bec4:	2400      	movs	r4, #0
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    bec6:	4f12      	ldr	r7, [pc, #72]	; (bf10 <MiApp_RemoveConnection+0x64>)
            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    bec8:	003e      	movs	r6, r7
    beca:	e00a      	b.n	bee2 <MiApp_RemoveConnection+0x36>
    becc:	6833      	ldr	r3, [r6, #0]
    bece:	681b      	ldr	r3, [r3, #0]
    bed0:	195b      	adds	r3, r3, r5
    bed2:	2200      	movs	r2, #0
    bed4:	731a      	strb	r2, [r3, #12]
            PDS_Store(PDS_CONNECTION_TABLE_ID);
    bed6:	2006      	movs	r0, #6
    bed8:	4b0e      	ldr	r3, [pc, #56]	; (bf14 <MiApp_RemoveConnection+0x68>)
    beda:	4798      	blx	r3
    bedc:	3401      	adds	r4, #1
        for(i = 0; i < CONNECTION_SIZE; i++)
    bede:	2c14      	cmp	r4, #20
    bee0:	d0ef      	beq.n	bec2 <MiApp_RemoveConnection+0x16>
    bee2:	b2e0      	uxtb	r0, r4
    bee4:	0125      	lsls	r5, r4, #4
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    bee6:	683b      	ldr	r3, [r7, #0]
    bee8:	681b      	ldr	r3, [r3, #0]
    beea:	195b      	adds	r3, r3, r5
    beec:	7b1b      	ldrb	r3, [r3, #12]
    beee:	2b7f      	cmp	r3, #127	; 0x7f
    bef0:	d9ec      	bls.n	becc <MiApp_RemoveConnection+0x20>
                removeConnection(i);
    bef2:	4b09      	ldr	r3, [pc, #36]	; (bf18 <MiApp_RemoveConnection+0x6c>)
    bef4:	4798      	blx	r3
    bef6:	e7e9      	b.n	becc <MiApp_RemoveConnection+0x20>
        removeConnection(ConnectionIndex);
    bef8:	4b07      	ldr	r3, [pc, #28]	; (bf18 <MiApp_RemoveConnection+0x6c>)
    befa:	4798      	blx	r3
        miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.Val = 0;
    befc:	4b04      	ldr	r3, [pc, #16]	; (bf10 <MiApp_RemoveConnection+0x64>)
    befe:	681b      	ldr	r3, [r3, #0]
    bf00:	681b      	ldr	r3, [r3, #0]
    bf02:	191c      	adds	r4, r3, r4
    bf04:	2300      	movs	r3, #0
    bf06:	7323      	strb	r3, [r4, #12]
       PDS_Store(PDS_CONNECTION_TABLE_ID);
    bf08:	2006      	movs	r0, #6
    bf0a:	4b02      	ldr	r3, [pc, #8]	; (bf14 <MiApp_RemoveConnection+0x68>)
    bf0c:	4798      	blx	r3
}
    bf0e:	e7d8      	b.n	bec2 <MiApp_RemoveConnection+0x16>
    bf10:	20001f84 	.word	0x20001f84
    bf14:	00009e2d 	.word	0x00009e2d
    bf18:	0000be55 	.word	0x0000be55

0000bf1c <protocolTimerHandler>:
{
    bf1c:	b570      	push	{r4, r5, r6, lr}
    bf1e:	b086      	sub	sp, #24
    if((0 != connectionTimeInterval) && ((--connectionTimeInterval) == 0))
    bf20:	4b36      	ldr	r3, [pc, #216]	; (bffc <protocolTimerHandler+0xe0>)
    bf22:	881b      	ldrh	r3, [r3, #0]
    bf24:	2b00      	cmp	r3, #0
    bf26:	d005      	beq.n	bf34 <protocolTimerHandler+0x18>
    bf28:	3b01      	subs	r3, #1
    bf2a:	b29b      	uxth	r3, r3
    bf2c:	4a33      	ldr	r2, [pc, #204]	; (bffc <protocolTimerHandler+0xe0>)
    bf2e:	8013      	strh	r3, [r2, #0]
    bf30:	2b00      	cmp	r3, #0
    bf32:	d01f      	beq.n	bf74 <protocolTimerHandler+0x58>
    if((0 != sharePeerDevInfoTimeInterval) && ((--sharePeerDevInfoTimeInterval) == 0))
    bf34:	4b32      	ldr	r3, [pc, #200]	; (c000 <protocolTimerHandler+0xe4>)
    bf36:	881b      	ldrh	r3, [r3, #0]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d005      	beq.n	bf48 <protocolTimerHandler+0x2c>
    bf3c:	3b01      	subs	r3, #1
    bf3e:	b29b      	uxth	r3, r3
    bf40:	2b00      	cmp	r3, #0
    bf42:	d01a      	beq.n	bf7a <protocolTimerHandler+0x5e>
    bf44:	4a2e      	ldr	r2, [pc, #184]	; (c000 <protocolTimerHandler+0xe4>)
    bf46:	8013      	strh	r3, [r2, #0]
    if((0 != inActiveDeviceCheckTimeInterval) && ((--inActiveDeviceCheckTimeInterval) == 0))
    bf48:	4b2e      	ldr	r3, [pc, #184]	; (c004 <protocolTimerHandler+0xe8>)
    bf4a:	881b      	ldrh	r3, [r3, #0]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d005      	beq.n	bf5c <protocolTimerHandler+0x40>
    bf50:	3b01      	subs	r3, #1
    bf52:	b29b      	uxth	r3, r3
    bf54:	2b00      	cmp	r3, #0
    bf56:	d016      	beq.n	bf86 <protocolTimerHandler+0x6a>
    bf58:	4a2a      	ldr	r2, [pc, #168]	; (c004 <protocolTimerHandler+0xe8>)
    bf5a:	8013      	strh	r3, [r2, #0]
    if((0 != linkStatusTimeInterval) && ((--linkStatusTimeInterval) == 0))
    bf5c:	4b2a      	ldr	r3, [pc, #168]	; (c008 <protocolTimerHandler+0xec>)
    bf5e:	881b      	ldrh	r3, [r3, #0]
    bf60:	2b00      	cmp	r3, #0
    bf62:	d005      	beq.n	bf70 <protocolTimerHandler+0x54>
    bf64:	3b01      	subs	r3, #1
    bf66:	b29b      	uxth	r3, r3
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d028      	beq.n	bfbe <protocolTimerHandler+0xa2>
    bf6c:	4a26      	ldr	r2, [pc, #152]	; (c008 <protocolTimerHandler+0xec>)
    bf6e:	8013      	strh	r3, [r2, #0]
}
    bf70:	b006      	add	sp, #24
    bf72:	bd70      	pop	{r4, r5, r6, pc}
        sendConnectionRequest();
    bf74:	4b25      	ldr	r3, [pc, #148]	; (c00c <protocolTimerHandler+0xf0>)
    bf76:	4798      	blx	r3
    bf78:	e7dc      	b.n	bf34 <protocolTimerHandler+0x18>
        sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    bf7a:	220f      	movs	r2, #15
    bf7c:	4b20      	ldr	r3, [pc, #128]	; (c000 <protocolTimerHandler+0xe4>)
    bf7e:	801a      	strh	r2, [r3, #0]
        MiApp_BroadcastConnectionTable();
    bf80:	4b23      	ldr	r3, [pc, #140]	; (c010 <protocolTimerHandler+0xf4>)
    bf82:	4798      	blx	r3
    bf84:	e7e0      	b.n	bf48 <protocolTimerHandler+0x2c>
        inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    bf86:	223c      	movs	r2, #60	; 0x3c
    bf88:	4b1e      	ldr	r3, [pc, #120]	; (c004 <protocolTimerHandler+0xe8>)
    bf8a:	801a      	strh	r2, [r3, #0]
    bf8c:	2400      	movs	r4, #0
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bf8e:	4d21      	ldr	r5, [pc, #132]	; (c014 <protocolTimerHandler+0xf8>)
                miwiDefaultRomOrRamParams->ConnectionTable[i].link_status = 0;
    bf90:	2600      	movs	r6, #0
    bf92:	e003      	b.n	bf9c <protocolTimerHandler+0x80>
    bf94:	739e      	strb	r6, [r3, #14]
    bf96:	3401      	adds	r4, #1
    for (i = 0;i < CONNECTION_SIZE; i++)
    bf98:	2c14      	cmp	r4, #20
    bf9a:	d0df      	beq.n	bf5c <protocolTimerHandler+0x40>
    bf9c:	b2e0      	uxtb	r0, r4
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bf9e:	0122      	lsls	r2, r4, #4
    bfa0:	682b      	ldr	r3, [r5, #0]
    bfa2:	681b      	ldr	r3, [r3, #0]
    bfa4:	189b      	adds	r3, r3, r2
    bfa6:	7b1a      	ldrb	r2, [r3, #12]
    bfa8:	2a7f      	cmp	r2, #127	; 0x7f
    bfaa:	d9f4      	bls.n	bf96 <protocolTimerHandler+0x7a>
            if (miwiDefaultRomOrRamParams->ConnectionTable[i].link_status == 0 && miwiDefaultRomOrRamParams->ConnectionTable[i].permanent_connections != 0xFF)
    bfac:	7b9a      	ldrb	r2, [r3, #14]
    bfae:	2a00      	cmp	r2, #0
    bfb0:	d1f0      	bne.n	bf94 <protocolTimerHandler+0x78>
    bfb2:	7bda      	ldrb	r2, [r3, #15]
    bfb4:	2aff      	cmp	r2, #255	; 0xff
    bfb6:	d0ed      	beq.n	bf94 <protocolTimerHandler+0x78>
                MiApp_RemoveConnection(i);
    bfb8:	4b17      	ldr	r3, [pc, #92]	; (c018 <protocolTimerHandler+0xfc>)
    bfba:	4798      	blx	r3
    bfbc:	e7eb      	b.n	bf96 <protocolTimerHandler+0x7a>
        linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    bfbe:	220f      	movs	r2, #15
    bfc0:	4b11      	ldr	r3, [pc, #68]	; (c008 <protocolTimerHandler+0xec>)
    bfc2:	801a      	strh	r2, [r3, #0]
    dataPtr = MiMem_Alloc(PACKETLEN_CMD_IAM_ALIVE);
    bfc4:	2001      	movs	r0, #1
    bfc6:	4b15      	ldr	r3, [pc, #84]	; (c01c <protocolTimerHandler+0x100>)
    bfc8:	4798      	blx	r3
    if (NULL == dataPtr)
    bfca:	2800      	cmp	r0, #0
    bfcc:	d0d0      	beq.n	bf70 <protocolTimerHandler+0x54>
    dataPtr[dataLen++] = CMD_IAM_ALIVE;
    bfce:	237a      	movs	r3, #122	; 0x7a
    bfd0:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false,
    bfd2:	4b10      	ldr	r3, [pc, #64]	; (c014 <protocolTimerHandler+0xf8>)
    bfd4:	681b      	ldr	r3, [r3, #0]
    bfd6:	681a      	ldr	r2, [r3, #0]
    bfd8:	3204      	adds	r2, #4
    bfda:	4b11      	ldr	r3, [pc, #68]	; (c020 <protocolTimerHandler+0x104>)
    bfdc:	8819      	ldrh	r1, [r3, #0]
    bfde:	4b11      	ldr	r3, [pc, #68]	; (c024 <protocolTimerHandler+0x108>)
    bfe0:	9305      	str	r3, [sp, #20]
    bfe2:	2401      	movs	r4, #1
    bfe4:	9404      	str	r4, [sp, #16]
    bfe6:	2300      	movs	r3, #0
    bfe8:	9303      	str	r3, [sp, #12]
    bfea:	9002      	str	r0, [sp, #8]
    bfec:	9401      	str	r4, [sp, #4]
    bfee:	9300      	str	r3, [sp, #0]
    bff0:	3301      	adds	r3, #1
    bff2:	2000      	movs	r0, #0
    bff4:	4c0c      	ldr	r4, [pc, #48]	; (c028 <protocolTimerHandler+0x10c>)
    bff6:	47a0      	blx	r4
}
    bff8:	e7ba      	b.n	bf70 <protocolTimerHandler+0x54>
    bffa:	46c0      	nop			; (mov r8, r8)
    bffc:	200003f4 	.word	0x200003f4
    c000:	20000434 	.word	0x20000434
    c004:	2000040e 	.word	0x2000040e
    c008:	20000416 	.word	0x20000416
    c00c:	0000bb3d 	.word	0x0000bb3d
    c010:	0000bc9d 	.word	0x0000bc9d
    c014:	20001f84 	.word	0x20001f84
    c018:	0000bead 	.word	0x0000bead
    c01c:	0000cb95 	.word	0x0000cb95
    c020:	20001f94 	.word	0x20001f94
    c024:	0000b4b5 	.word	0x0000b4b5
    c028:	0000ba39 	.word	0x0000ba39

0000c02c <MiApp_SendData>:
{
    c02c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c02e:	46ce      	mov	lr, r9
    c030:	4647      	mov	r7, r8
    c032:	b580      	push	{r7, lr}
    c034:	b08b      	sub	sp, #44	; 0x2c
    c036:	9008      	str	r0, [sp, #32]
    c038:	9107      	str	r1, [sp, #28]
    c03a:	0015      	movs	r5, r2
    c03c:	9309      	str	r3, [sp, #36]	; 0x24
    c03e:	ab12      	add	r3, sp, #72	; 0x48
    c040:	781e      	ldrb	r6, [r3, #0]
    c042:	ab13      	add	r3, sp, #76	; 0x4c
    c044:	781b      	ldrb	r3, [r3, #0]
    c046:	4699      	mov	r9, r3
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c048:	4b77      	ldr	r3, [pc, #476]	; (c228 <MiApp_SendData+0x1fc>)
    c04a:	781b      	ldrb	r3, [r3, #0]
	return true;
    c04c:	2401      	movs	r4, #1
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c04e:	2b07      	cmp	r3, #7
    c050:	d005      	beq.n	c05e <MiApp_SendData+0x32>
}
    c052:	0020      	movs	r0, r4
    c054:	b00b      	add	sp, #44	; 0x2c
    c056:	bc0c      	pop	{r2, r3}
    c058:	4690      	mov	r8, r2
    c05a:	4699      	mov	r9, r3
    c05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c05e:	2a4c      	cmp	r2, #76	; 0x4c
    c060:	d8f7      	bhi.n	c052 <MiApp_SendData+0x26>
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c062:	2802      	cmp	r0, #2
    c064:	d033      	beq.n	c0ce <MiApp_SendData+0xa2>
		dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c066:	2068      	movs	r0, #104	; 0x68
    c068:	4b70      	ldr	r3, [pc, #448]	; (c22c <MiApp_SendData+0x200>)
    c06a:	4798      	blx	r3
    c06c:	1e07      	subs	r7, r0, #0
		if (NULL == dataFramePtr)
    c06e:	d100      	bne.n	c072 <MiApp_SendData+0x46>
    c070:	e0d8      	b.n	c224 <MiApp_SendData+0x1f8>
		dataFramePtr->dataFrame.confCallback = ConfCallback;
    c072:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c074:	6043      	str	r3, [r0, #4]
		memcpy(&(dataFramePtr->dataFrame.destAddress), addr, MY_ADDRESS_LENGTH);
    c076:	3008      	adds	r0, #8
    c078:	2208      	movs	r2, #8
    c07a:	9c07      	ldr	r4, [sp, #28]
    c07c:	0021      	movs	r1, r4
    c07e:	4b6c      	ldr	r3, [pc, #432]	; (c230 <MiApp_SendData+0x204>)
    c080:	4798      	blx	r3
		dataFramePtr->dataFrame.msghandle = msghandle;
    c082:	753e      	strb	r6, [r7, #20]
		dataFramePtr->dataFrame.msgLength = msglen;
    c084:	757d      	strb	r5, [r7, #21]
		dataFramePtr->dataFrame.timeout = 0;
    c086:	2300      	movs	r3, #0
    c088:	743b      	strb	r3, [r7, #16]
		dataFramePtr->dataFrame.ackReq = ackReq;
    c08a:	464b      	mov	r3, r9
    c08c:	747b      	strb	r3, [r7, #17]
		if (END_DEVICE == role)
    c08e:	4b69      	ldr	r3, [pc, #420]	; (c234 <MiApp_SendData+0x208>)
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	2b02      	cmp	r3, #2
    c094:	d04c      	beq.n	c130 <MiApp_SendData+0x104>
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c096:	003c      	movs	r4, r7
    c098:	3416      	adds	r4, #22
    c09a:	002a      	movs	r2, r5
    c09c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c09e:	0020      	movs	r0, r4
    c0a0:	4b63      	ldr	r3, [pc, #396]	; (c230 <MiApp_SendData+0x204>)
    c0a2:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c0a4:	4b64      	ldr	r3, [pc, #400]	; (c238 <MiApp_SendData+0x20c>)
    c0a6:	8819      	ldrh	r1, [r3, #0]
    c0a8:	4b64      	ldr	r3, [pc, #400]	; (c23c <MiApp_SendData+0x210>)
    c0aa:	9305      	str	r3, [sp, #20]
    c0ac:	464b      	mov	r3, r9
    c0ae:	9304      	str	r3, [sp, #16]
    c0b0:	9603      	str	r6, [sp, #12]
    c0b2:	9402      	str	r4, [sp, #8]
    c0b4:	9501      	str	r5, [sp, #4]
    c0b6:	2300      	movs	r3, #0
    c0b8:	9300      	str	r3, [sp, #0]
    c0ba:	9a07      	ldr	r2, [sp, #28]
    c0bc:	2000      	movs	r0, #0
    c0be:	4c60      	ldr	r4, [pc, #384]	; (c240 <MiApp_SendData+0x214>)
    c0c0:	47a0      	blx	r4
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c0c2:	0039      	movs	r1, r7
    c0c4:	485f      	ldr	r0, [pc, #380]	; (c244 <MiApp_SendData+0x218>)
    c0c6:	4b60      	ldr	r3, [pc, #384]	; (c248 <MiApp_SendData+0x21c>)
    c0c8:	4798      	blx	r3
	return true;
    c0ca:	2401      	movs	r4, #1
    c0cc:	e7c1      	b.n	c052 <MiApp_SendData+0x26>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    c0ce:	784a      	ldrb	r2, [r1, #1]
    c0d0:	0212      	lsls	r2, r2, #8
    c0d2:	780b      	ldrb	r3, [r1, #0]
    c0d4:	189b      	adds	r3, r3, r2
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c0d6:	b29b      	uxth	r3, r3
    c0d8:	4a5c      	ldr	r2, [pc, #368]	; (c24c <MiApp_SendData+0x220>)
    c0da:	4293      	cmp	r3, r2
    c0dc:	d1c3      	bne.n	c066 <MiApp_SendData+0x3a>
			dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c0de:	2068      	movs	r0, #104	; 0x68
    c0e0:	4b52      	ldr	r3, [pc, #328]	; (c22c <MiApp_SendData+0x200>)
    c0e2:	4798      	blx	r3
    c0e4:	1e04      	subs	r4, r0, #0
			if (NULL == dataFramePtr)
    c0e6:	d100      	bne.n	c0ea <MiApp_SendData+0xbe>
    c0e8:	e09a      	b.n	c220 <MiApp_SendData+0x1f4>
			dataFramePtr->dataFrame.confCallback = ConfCallback;
    c0ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c0ec:	6043      	str	r3, [r0, #4]
			dataFramePtr->dataFrame.msghandle = msghandle;
    c0ee:	7506      	strb	r6, [r0, #20]
			dataFramePtr->dataFrame.msgLength = msglen;
    c0f0:	7545      	strb	r5, [r0, #21]
			dataFramePtr->dataFrame.timeout = 0;
    c0f2:	2700      	movs	r7, #0
    c0f4:	7407      	strb	r7, [r0, #16]
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c0f6:	2316      	movs	r3, #22
    c0f8:	4698      	mov	r8, r3
    c0fa:	4480      	add	r8, r0
    c0fc:	002a      	movs	r2, r5
    c0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    c100:	4640      	mov	r0, r8
    c102:	4b4b      	ldr	r3, [pc, #300]	; (c230 <MiApp_SendData+0x204>)
    c104:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, 0, macAckOnlyDataCallback);
    c106:	4b4c      	ldr	r3, [pc, #304]	; (c238 <MiApp_SendData+0x20c>)
    c108:	8819      	ldrh	r1, [r3, #0]
    c10a:	4b4c      	ldr	r3, [pc, #304]	; (c23c <MiApp_SendData+0x210>)
    c10c:	9305      	str	r3, [sp, #20]
    c10e:	9704      	str	r7, [sp, #16]
    c110:	9603      	str	r6, [sp, #12]
    c112:	4643      	mov	r3, r8
    c114:	9302      	str	r3, [sp, #8]
    c116:	9501      	str	r5, [sp, #4]
    c118:	9700      	str	r7, [sp, #0]
    c11a:	2300      	movs	r3, #0
    c11c:	9a07      	ldr	r2, [sp, #28]
    c11e:	2001      	movs	r0, #1
    c120:	4d47      	ldr	r5, [pc, #284]	; (c240 <MiApp_SendData+0x214>)
    c122:	47a8      	blx	r5
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c124:	0021      	movs	r1, r4
    c126:	4847      	ldr	r0, [pc, #284]	; (c244 <MiApp_SendData+0x218>)
    c128:	4b47      	ldr	r3, [pc, #284]	; (c248 <MiApp_SendData+0x21c>)
    c12a:	4798      	blx	r3
			return true;
    c12c:	2401      	movs	r4, #1
    c12e:	e790      	b.n	c052 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c130:	9b08      	ldr	r3, [sp, #32]
    c132:	2b08      	cmp	r3, #8
    c134:	d034      	beq.n	c1a0 <MiApp_SendData+0x174>
				dataFramePtr->dataFrame.msg[0] = CMD_FORWRD_PACKET;
    c136:	23cc      	movs	r3, #204	; 0xcc
    c138:	75bb      	strb	r3, [r7, #22]
				dataFramePtr->dataFrame.msg[1] = addr[0];
    c13a:	9a07      	ldr	r2, [sp, #28]
    c13c:	7813      	ldrb	r3, [r2, #0]
    c13e:	75fb      	strb	r3, [r7, #23]
				dataFramePtr->dataFrame.msg[2] = addr[1];
    c140:	7853      	ldrb	r3, [r2, #1]
    c142:	763b      	strb	r3, [r7, #24]
				dataFramePtr->dataFrame.msg[3] = addr[2];
    c144:	7893      	ldrb	r3, [r2, #2]
    c146:	767b      	strb	r3, [r7, #25]
				memcpy(&(dataFramePtr->dataFrame.msg[4]), msgpointer, msglen);
    c148:	002a      	movs	r2, r5
    c14a:	9909      	ldr	r1, [sp, #36]	; 0x24
    c14c:	0038      	movs	r0, r7
    c14e:	301a      	adds	r0, #26
    c150:	4b37      	ldr	r3, [pc, #220]	; (c230 <MiApp_SendData+0x204>)
    c152:	4798      	blx	r3
				dataFramePtr->dataFrame.msgLength = msglen + 4;
    c154:	3504      	adds	r5, #4
    c156:	b2ed      	uxtb	r5, r5
    c158:	757d      	strb	r5, [r7, #21]
				if (ackReq)
    c15a:	464b      	mov	r3, r9
    c15c:	2b00      	cmp	r3, #0
    c15e:	d045      	beq.n	c1ec <MiApp_SendData+0x1c0>
					dataFramePtr->dataFrame.timeout = SW_ACK_TIMEOUT + 1;
    c160:	2303      	movs	r3, #3
    c162:	743b      	strb	r3, [r7, #16]
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, appAckWaitDataCallback);
    c164:	4b3a      	ldr	r3, [pc, #232]	; (c250 <MiApp_SendData+0x224>)
    c166:	681b      	ldr	r3, [r3, #0]
    c168:	681a      	ldr	r2, [r3, #0]
    c16a:	3204      	adds	r2, #4
    c16c:	4b32      	ldr	r3, [pc, #200]	; (c238 <MiApp_SendData+0x20c>)
    c16e:	8819      	ldrh	r1, [r3, #0]
    c170:	4b38      	ldr	r3, [pc, #224]	; (c254 <MiApp_SendData+0x228>)
    c172:	9305      	str	r3, [sp, #20]
    c174:	2301      	movs	r3, #1
    c176:	9304      	str	r3, [sp, #16]
    c178:	9603      	str	r6, [sp, #12]
    c17a:	003b      	movs	r3, r7
    c17c:	3316      	adds	r3, #22
    c17e:	9302      	str	r3, [sp, #8]
    c180:	9501      	str	r5, [sp, #4]
    c182:	2300      	movs	r3, #0
    c184:	9300      	str	r3, [sp, #0]
    c186:	3301      	adds	r3, #1
    c188:	2000      	movs	r0, #0
    c18a:	4c2d      	ldr	r4, [pc, #180]	; (c240 <MiApp_SendData+0x214>)
    c18c:	47a0      	blx	r4
					miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataFramePtr);
    c18e:	0039      	movs	r1, r7
    c190:	4831      	ldr	r0, [pc, #196]	; (c258 <MiApp_SendData+0x22c>)
    c192:	4b2d      	ldr	r3, [pc, #180]	; (c248 <MiApp_SendData+0x21c>)
    c194:	4798      	blx	r3
					SYS_TimerStart(&dataTimer);
    c196:	4831      	ldr	r0, [pc, #196]	; (c25c <MiApp_SendData+0x230>)
    c198:	4b31      	ldr	r3, [pc, #196]	; (c260 <MiApp_SendData+0x234>)
    c19a:	4798      	blx	r3
	return true;
    c19c:	464c      	mov	r4, r9
    c19e:	e758      	b.n	c052 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c1a0:	4b2b      	ldr	r3, [pc, #172]	; (c250 <MiApp_SendData+0x224>)
    c1a2:	681b      	ldr	r3, [r3, #0]
    c1a4:	6819      	ldr	r1, [r3, #0]
    c1a6:	3104      	adds	r1, #4
    c1a8:	0020      	movs	r0, r4
    c1aa:	4b2e      	ldr	r3, [pc, #184]	; (c264 <MiApp_SendData+0x238>)
    c1ac:	4798      	blx	r3
    c1ae:	1e04      	subs	r4, r0, #0
    c1b0:	d0c1      	beq.n	c136 <MiApp_SendData+0x10a>
				memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c1b2:	2316      	movs	r3, #22
    c1b4:	4698      	mov	r8, r3
    c1b6:	44b8      	add	r8, r7
    c1b8:	002a      	movs	r2, r5
    c1ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    c1bc:	4640      	mov	r0, r8
    c1be:	4b1c      	ldr	r3, [pc, #112]	; (c230 <MiApp_SendData+0x204>)
    c1c0:	4798      	blx	r3
				frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c1c2:	4b1d      	ldr	r3, [pc, #116]	; (c238 <MiApp_SendData+0x20c>)
    c1c4:	8819      	ldrh	r1, [r3, #0]
    c1c6:	4b1d      	ldr	r3, [pc, #116]	; (c23c <MiApp_SendData+0x210>)
    c1c8:	9305      	str	r3, [sp, #20]
    c1ca:	464b      	mov	r3, r9
    c1cc:	9304      	str	r3, [sp, #16]
    c1ce:	9603      	str	r6, [sp, #12]
    c1d0:	4643      	mov	r3, r8
    c1d2:	9302      	str	r3, [sp, #8]
    c1d4:	9501      	str	r5, [sp, #4]
    c1d6:	2300      	movs	r3, #0
    c1d8:	9300      	str	r3, [sp, #0]
    c1da:	9a07      	ldr	r2, [sp, #28]
    c1dc:	2000      	movs	r0, #0
    c1de:	4d18      	ldr	r5, [pc, #96]	; (c240 <MiApp_SendData+0x214>)
    c1e0:	47a8      	blx	r5
				miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c1e2:	0039      	movs	r1, r7
    c1e4:	4817      	ldr	r0, [pc, #92]	; (c244 <MiApp_SendData+0x218>)
    c1e6:	4b18      	ldr	r3, [pc, #96]	; (c248 <MiApp_SendData+0x21c>)
    c1e8:	4798      	blx	r3
    c1ea:	e732      	b.n	c052 <MiApp_SendData+0x26>
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c1ec:	4b18      	ldr	r3, [pc, #96]	; (c250 <MiApp_SendData+0x224>)
    c1ee:	681b      	ldr	r3, [r3, #0]
    c1f0:	681a      	ldr	r2, [r3, #0]
    c1f2:	3204      	adds	r2, #4
    c1f4:	4b10      	ldr	r3, [pc, #64]	; (c238 <MiApp_SendData+0x20c>)
    c1f6:	8819      	ldrh	r1, [r3, #0]
    c1f8:	4b10      	ldr	r3, [pc, #64]	; (c23c <MiApp_SendData+0x210>)
    c1fa:	9305      	str	r3, [sp, #20]
    c1fc:	2300      	movs	r3, #0
    c1fe:	9304      	str	r3, [sp, #16]
    c200:	9603      	str	r6, [sp, #12]
    c202:	0038      	movs	r0, r7
    c204:	3016      	adds	r0, #22
    c206:	9002      	str	r0, [sp, #8]
    c208:	9501      	str	r5, [sp, #4]
    c20a:	9300      	str	r3, [sp, #0]
    c20c:	3301      	adds	r3, #1
    c20e:	2000      	movs	r0, #0
    c210:	4c0b      	ldr	r4, [pc, #44]	; (c240 <MiApp_SendData+0x214>)
    c212:	47a0      	blx	r4
					miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c214:	0039      	movs	r1, r7
    c216:	480b      	ldr	r0, [pc, #44]	; (c244 <MiApp_SendData+0x218>)
    c218:	4b0b      	ldr	r3, [pc, #44]	; (c248 <MiApp_SendData+0x21c>)
    c21a:	4798      	blx	r3
	return true;
    c21c:	2401      	movs	r4, #1
    c21e:	e718      	b.n	c052 <MiApp_SendData+0x26>
				return false;
    c220:	2400      	movs	r4, #0
    c222:	e716      	b.n	c052 <MiApp_SendData+0x26>
			return false;
    c224:	2400      	movs	r4, #0
    c226:	e714      	b.n	c052 <MiApp_SendData+0x26>
    c228:	20000418 	.word	0x20000418
    c22c:	0000cb95 	.word	0x0000cb95
    c230:	0000f97b 	.word	0x0000f97b
    c234:	20002074 	.word	0x20002074
    c238:	20001f94 	.word	0x20001f94
    c23c:	0000c975 	.word	0x0000c975
    c240:	0000ba39 	.word	0x0000ba39
    c244:	20001f58 	.word	0x20001f58
    c248:	0000cd91 	.word	0x0000cd91
    c24c:	0000ffff 	.word	0x0000ffff
    c250:	20001f84 	.word	0x20001f84
    c254:	0000ca19 	.word	0x0000ca19
    c258:	20001ffc 	.word	0x20001ffc
    c25c:	200003f8 	.word	0x200003f8
    c260:	0000cf39 	.word	0x0000cf39
    c264:	0000b92d 	.word	0x0000b92d

0000c268 <P2PTasks>:
{
    c268:	b5f0      	push	{r4, r5, r6, r7, lr}
    c26a:	46de      	mov	lr, fp
    c26c:	464f      	mov	r7, r9
    c26e:	4646      	mov	r6, r8
    c270:	b5c0      	push	{r6, r7, lr}
    c272:	b08a      	sub	sp, #40	; 0x28
    currentTick.Val = MiWi_TickGet();
    c274:	4bcb      	ldr	r3, [pc, #812]	; (c5a4 <P2PTasks+0x33c>)
    c276:	4798      	blx	r3
    c278:	0004      	movs	r4, r0
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c27a:	4bcb      	ldr	r3, [pc, #812]	; (c5a8 <P2PTasks+0x340>)
    c27c:	7a1b      	ldrb	r3, [r3, #8]
    c27e:	2b00      	cmp	r3, #0
    c280:	d003      	beq.n	c28a <P2PTasks+0x22>
    c282:	4bca      	ldr	r3, [pc, #808]	; (c5ac <P2PTasks+0x344>)
    c284:	781b      	ldrb	r3, [r3, #0]
    c286:	2b00      	cmp	r3, #0
    c288:	d10d      	bne.n	c2a6 <P2PTasks+0x3e>
    if(MiMAC_ReceivedPacket())
    c28a:	4bc9      	ldr	r3, [pc, #804]	; (c5b0 <P2PTasks+0x348>)
    c28c:	4798      	blx	r3
    c28e:	2800      	cmp	r0, #0
    c290:	d139      	bne.n	c306 <P2PTasks+0x9e>
    MiMAC_Task();
    c292:	4bc8      	ldr	r3, [pc, #800]	; (c5b4 <P2PTasks+0x34c>)
    c294:	4798      	blx	r3
    SYS_TimerTaskHandler();
    c296:	4bc8      	ldr	r3, [pc, #800]	; (c5b8 <P2PTasks+0x350>)
    c298:	4798      	blx	r3
}
    c29a:	b00a      	add	sp, #40	; 0x28
    c29c:	bc1c      	pop	{r2, r3, r4}
    c29e:	4690      	mov	r8, r2
    c2a0:	4699      	mov	r9, r3
    c2a2:	46a3      	mov	fp, r4
    c2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c2a6:	4bc5      	ldr	r3, [pc, #788]	; (c5bc <P2PTasks+0x354>)
    c2a8:	6819      	ldr	r1, [r3, #0]
    c2aa:	4bc5      	ldr	r3, [pc, #788]	; (c5c0 <P2PTasks+0x358>)
    c2ac:	4798      	blx	r3
    c2ae:	4bc5      	ldr	r3, [pc, #788]	; (c5c4 <P2PTasks+0x35c>)
    c2b0:	681b      	ldr	r3, [r3, #0]
    c2b2:	4298      	cmp	r0, r3
    c2b4:	d9e9      	bls.n	c28a <P2PTasks+0x22>
        txFramePtr =  (TxFrame_t *)miQueueRemove(&frameTxQueue, NULL);
    c2b6:	2100      	movs	r1, #0
    c2b8:	48bb      	ldr	r0, [pc, #748]	; (c5a8 <P2PTasks+0x340>)
    c2ba:	4bc3      	ldr	r3, [pc, #780]	; (c5c8 <P2PTasks+0x360>)
    c2bc:	4798      	blx	r3
    c2be:	1e05      	subs	r5, r0, #0
        if (NULL != txFramePtr)
    c2c0:	d0e3      	beq.n	c28a <P2PTasks+0x22>
            sentFrame = txFramePtr;
    c2c2:	4bc2      	ldr	r3, [pc, #776]	; (c5cc <P2PTasks+0x364>)
    c2c4:	6018      	str	r0, [r3, #0]
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c2c6:	2324      	movs	r3, #36	; 0x24
    c2c8:	5cc3      	ldrb	r3, [r0, r3]
    c2ca:	331c      	adds	r3, #28
                transaction_duration_sym = macMinLIFSPeriod_def;
    c2cc:	2028      	movs	r0, #40	; 0x28
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c2ce:	2b12      	cmp	r3, #18
    c2d0:	dc00      	bgt.n	c2d4 <P2PTasks+0x6c>
                transaction_duration_sym = macMinSIFSPeriod_def;
    c2d2:	381c      	subs	r0, #28
            transaction_duration_us = MiMAC_SymbolToTicks(transaction_duration_sym);
    c2d4:	3020      	adds	r0, #32
    c2d6:	4bbe      	ldr	r3, [pc, #760]	; (c5d0 <P2PTasks+0x368>)
    c2d8:	4798      	blx	r3
    c2da:	4bba      	ldr	r3, [pc, #744]	; (c5c4 <P2PTasks+0x35c>)
    c2dc:	6018      	str	r0, [r3, #0]
            lastTxFrameTick = currentTick;
    c2de:	4bb7      	ldr	r3, [pc, #732]	; (c5bc <P2PTasks+0x354>)
    c2e0:	601c      	str	r4, [r3, #0]
            MiMAC_SendPacket(txFramePtr->txFrameEntry.frameParam, txFramePtr->txFrameEntry.frame,
    c2e2:	696b      	ldr	r3, [r5, #20]
    c2e4:	4abb      	ldr	r2, [pc, #748]	; (c5d4 <P2PTasks+0x36c>)
    c2e6:	9202      	str	r2, [sp, #8]
    c2e8:	2225      	movs	r2, #37	; 0x25
    c2ea:	5caa      	ldrb	r2, [r5, r2]
    c2ec:	9201      	str	r2, [sp, #4]
    c2ee:	2224      	movs	r2, #36	; 0x24
    c2f0:	5caa      	ldrb	r2, [r5, r2]
    c2f2:	9200      	str	r2, [sp, #0]
    c2f4:	69a8      	ldr	r0, [r5, #24]
    c2f6:	69e9      	ldr	r1, [r5, #28]
    c2f8:	6a2a      	ldr	r2, [r5, #32]
    c2fa:	4cb7      	ldr	r4, [pc, #732]	; (c5d8 <P2PTasks+0x370>)
    c2fc:	47a0      	blx	r4
            txCallbackReceived = false;
    c2fe:	2200      	movs	r2, #0
    c300:	4baa      	ldr	r3, [pc, #680]	; (c5ac <P2PTasks+0x344>)
    c302:	701a      	strb	r2, [r3, #0]
    c304:	e7c1      	b.n	c28a <P2PTasks+0x22>
    rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
    c306:	4bb5      	ldr	r3, [pc, #724]	; (c5dc <P2PTasks+0x374>)
    c308:	7819      	ldrb	r1, [r3, #0]
    c30a:	074a      	lsls	r2, r1, #29
    rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    c30c:	08cd      	lsrs	r5, r1, #3
    c30e:	2401      	movs	r4, #1
    c310:	4025      	ands	r5, r4
    c312:	00ed      	lsls	r5, r5, #3
    c314:	0fd2      	lsrs	r2, r2, #31
    rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    c316:	2303      	movs	r3, #3
    c318:	400b      	ands	r3, r1
    c31a:	3b01      	subs	r3, #1
    c31c:	425f      	negs	r7, r3
    c31e:	415f      	adcs	r7, r3
    c320:	003b      	movs	r3, r7
    c322:	4023      	ands	r3, r4
    c324:	015b      	lsls	r3, r3, #5
    c326:	432a      	orrs	r2, r5
    rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    c328:	09cd      	lsrs	r5, r1, #7
    c32a:	402c      	ands	r4, r5
    c32c:	01a4      	lsls	r4, r4, #6
    c32e:	4313      	orrs	r3, r2
    c330:	4323      	orrs	r3, r4
    c332:	4aab      	ldr	r2, [pc, #684]	; (c5e0 <P2PTasks+0x378>)
    c334:	7013      	strb	r3, [r2, #0]
    if( MACRxPacket.flags.bits.sourcePrsnt )
    c336:	b249      	sxtb	r1, r1
    c338:	2900      	cmp	r1, #0
    c33a:	db19      	blt.n	c370 <P2PTasks+0x108>
    rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    c33c:	4aa7      	ldr	r2, [pc, #668]	; (c5dc <P2PTasks+0x374>)
    c33e:	8a15      	ldrh	r5, [r2, #16]
    c340:	4ba7      	ldr	r3, [pc, #668]	; (c5e0 <P2PTasks+0x378>)
    c342:	805d      	strh	r5, [r3, #2]
    rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    c344:	7b16      	ldrb	r6, [r2, #12]
    c346:	731e      	strb	r6, [r3, #12]
    rxMessage.Payload = MACRxPacket.Payload;
    c348:	6894      	ldr	r4, [r2, #8]
    c34a:	609c      	str	r4, [r3, #8]
    rxMessage.PacketLQI = MACRxPacket.LQIValue;
    c34c:	7b91      	ldrb	r1, [r2, #14]
    c34e:	7399      	strb	r1, [r3, #14]
    rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    c350:	7b52      	ldrb	r2, [r2, #13]
    c352:	735a      	strb	r2, [r3, #13]
    if( rxMessage.flags.bits.command )
    c354:	781b      	ldrb	r3, [r3, #0]
    c356:	069b      	lsls	r3, r3, #26
    c358:	d400      	bmi.n	c35c <P2PTasks+0xf4>
    c35a:	e2c7      	b.n	c8ec <P2PTasks+0x684>
        switch( rxMessage.Payload[0] )
    c35c:	7823      	ldrb	r3, [r4, #0]
    c35e:	3b77      	subs	r3, #119	; 0x77
    c360:	b2da      	uxtb	r2, r3
    c362:	2a63      	cmp	r2, #99	; 0x63
    c364:	d900      	bls.n	c368 <P2PTasks+0x100>
    c366:	e2c5      	b.n	c8f4 <P2PTasks+0x68c>
    c368:	0093      	lsls	r3, r2, #2
    c36a:	4a9e      	ldr	r2, [pc, #632]	; (c5e4 <P2PTasks+0x37c>)
    c36c:	58d3      	ldr	r3, [r2, r3]
    c36e:	469f      	mov	pc, r3
        rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    c370:	4b9a      	ldr	r3, [pc, #616]	; (c5dc <P2PTasks+0x374>)
    c372:	685a      	ldr	r2, [r3, #4]
    c374:	4b9a      	ldr	r3, [pc, #616]	; (c5e0 <P2PTasks+0x378>)
    c376:	605a      	str	r2, [r3, #4]
    c378:	e7e0      	b.n	c33c <P2PTasks+0xd4>
                if(PAN_COORD != role)
    c37a:	4b9b      	ldr	r3, [pc, #620]	; (c5e8 <P2PTasks+0x380>)
    c37c:	781b      	ldrb	r3, [r3, #0]
    c37e:	2b01      	cmp	r3, #1
    c380:	d000      	beq.n	c384 <P2PTasks+0x11c>
    c382:	e2b7      	b.n	c8f4 <P2PTasks+0x68c>
                if( ConnMode > ENABLE_PREV_CONN )
    c384:	4b99      	ldr	r3, [pc, #612]	; (c5ec <P2PTasks+0x384>)
    c386:	781b      	ldrb	r3, [r3, #0]
    c388:	2b01      	cmp	r3, #1
    c38a:	d900      	bls.n	c38e <P2PTasks+0x126>
    c38c:	e2b2      	b.n	c8f4 <P2PTasks+0x68c>
                if( currentChannel != rxMessage.Payload[1] )
    c38e:	7862      	ldrb	r2, [r4, #1]
    c390:	4b97      	ldr	r3, [pc, #604]	; (c5f0 <P2PTasks+0x388>)
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	429a      	cmp	r2, r3
    c396:	d000      	beq.n	c39a <P2PTasks+0x132>
    c398:	e2ac      	b.n	c8f4 <P2PTasks+0x68c>
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    c39a:	4b96      	ldr	r3, [pc, #600]	; (c5f4 <P2PTasks+0x38c>)
    c39c:	429d      	cmp	r5, r3
    c39e:	d007      	beq.n	c3b0 <P2PTasks+0x148>
    c3a0:	4b95      	ldr	r3, [pc, #596]	; (c5f8 <P2PTasks+0x390>)
    c3a2:	881b      	ldrh	r3, [r3, #0]
    c3a4:	42ab      	cmp	r3, r5
    c3a6:	d003      	beq.n	c3b0 <P2PTasks+0x148>
                    status = STATUS_NOT_SAME_PAN;
    c3a8:	23f2      	movs	r3, #242	; 0xf2
    c3aa:	4698      	mov	r8, r3
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    c3ac:	2e02      	cmp	r6, #2
    c3ae:	d803      	bhi.n	c3b8 <P2PTasks+0x150>
                    status = AddConnection(rxMessage.Payload[2]);
    c3b0:	78a0      	ldrb	r0, [r4, #2]
    c3b2:	4b92      	ldr	r3, [pc, #584]	; (c5fc <P2PTasks+0x394>)
    c3b4:	4798      	blx	r3
    c3b6:	4680      	mov	r8, r0
                if (rxMessage.Payload[3] == 0xAA)
    c3b8:	4b89      	ldr	r3, [pc, #548]	; (c5e0 <P2PTasks+0x378>)
    c3ba:	689b      	ldr	r3, [r3, #8]
    c3bc:	78db      	ldrb	r3, [r3, #3]
    c3be:	2baa      	cmp	r3, #170	; 0xaa
    c3c0:	d02d      	beq.n	c41e <P2PTasks+0x1b6>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c3c2:	4b8a      	ldr	r3, [pc, #552]	; (c5ec <P2PTasks+0x384>)
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	2b01      	cmp	r3, #1
    c3c8:	d043      	beq.n	c452 <P2PTasks+0x1ea>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c3ca:	2028      	movs	r0, #40	; 0x28
    c3cc:	4b8c      	ldr	r3, [pc, #560]	; (c600 <P2PTasks+0x398>)
    c3ce:	4798      	blx	r3
    c3d0:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    c3d2:	d100      	bne.n	c3d6 <P2PTasks+0x16e>
    c3d4:	e28e      	b.n	c8f4 <P2PTasks+0x68c>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c3d6:	2391      	movs	r3, #145	; 0x91
    c3d8:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = status;
    c3da:	4643      	mov	r3, r8
    c3dc:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = MyindexinPC;
    c3de:	4b89      	ldr	r3, [pc, #548]	; (c604 <P2PTasks+0x39c>)
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	7083      	strb	r3, [r0, #2]
    c3e4:	2403      	movs	r4, #3
                if( status == STATUS_SUCCESS || status == STATUS_EXISTS )
    c3e6:	4643      	mov	r3, r8
    c3e8:	2b01      	cmp	r3, #1
    c3ea:	d957      	bls.n	c49c <P2PTasks+0x234>
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c3ec:	497c      	ldr	r1, [pc, #496]	; (c5e0 <P2PTasks+0x378>)
    c3ee:	4b86      	ldr	r3, [pc, #536]	; (c608 <P2PTasks+0x3a0>)
    c3f0:	9305      	str	r3, [sp, #20]
    c3f2:	2301      	movs	r3, #1
    c3f4:	9304      	str	r3, [sp, #16]
    c3f6:	2000      	movs	r0, #0
    c3f8:	9003      	str	r0, [sp, #12]
    c3fa:	9202      	str	r2, [sp, #8]
    c3fc:	9401      	str	r4, [sp, #4]
    c3fe:	780a      	ldrb	r2, [r1, #0]
    c400:	0712      	lsls	r2, r2, #28
    c402:	0fd2      	lsrs	r2, r2, #31
    c404:	9200      	str	r2, [sp, #0]
    c406:	684a      	ldr	r2, [r1, #4]
    c408:	8849      	ldrh	r1, [r1, #2]
    c40a:	4c80      	ldr	r4, [pc, #512]	; (c60c <P2PTasks+0x3a4>)
    c40c:	47a0      	blx	r4
                if( status == STATUS_SUCCESS )
    c40e:	4643      	mov	r3, r8
    c410:	2b00      	cmp	r3, #0
    c412:	d000      	beq.n	c416 <P2PTasks+0x1ae>
    c414:	e26e      	b.n	c8f4 <P2PTasks+0x68c>
                     PDS_Store(PDS_CONNECTION_TABLE_ID);
    c416:	2006      	movs	r0, #6
    c418:	4b7d      	ldr	r3, [pc, #500]	; (c610 <P2PTasks+0x3a8>)
    c41a:	4798      	blx	r3
    c41c:	e26a      	b.n	c8f4 <P2PTasks+0x68c>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    c41e:	4b70      	ldr	r3, [pc, #448]	; (c5e0 <P2PTasks+0x378>)
    c420:	685b      	ldr	r3, [r3, #4]
    c422:	9306      	str	r3, [sp, #24]
    c424:	4b7b      	ldr	r3, [pc, #492]	; (c614 <P2PTasks+0x3ac>)
    c426:	681f      	ldr	r7, [r3, #0]
    c428:	2500      	movs	r5, #0
    c42a:	4b7b      	ldr	r3, [pc, #492]	; (c618 <P2PTasks+0x3b0>)
    c42c:	4699      	mov	r9, r3
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    c42e:	23ff      	movs	r3, #255	; 0xff
    c430:	469b      	mov	fp, r3
                    for (uint8_t p = 0 ;p <CONNECTION_SIZE;p++)
    c432:	26a0      	movs	r6, #160	; 0xa0
    c434:	0076      	lsls	r6, r6, #1
    c436:	e002      	b.n	c43e <P2PTasks+0x1d6>
    c438:	3510      	adds	r5, #16
    c43a:	42b5      	cmp	r5, r6
    c43c:	d0c1      	beq.n	c3c2 <P2PTasks+0x15a>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    c43e:	683b      	ldr	r3, [r7, #0]
    c440:	195c      	adds	r4, r3, r5
    c442:	1d21      	adds	r1, r4, #4
    c444:	9806      	ldr	r0, [sp, #24]
    c446:	47c8      	blx	r9
    c448:	2800      	cmp	r0, #0
    c44a:	d0f5      	beq.n	c438 <P2PTasks+0x1d0>
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    c44c:	465b      	mov	r3, fp
    c44e:	73e3      	strb	r3, [r4, #15]
    c450:	e7f2      	b.n	c438 <P2PTasks+0x1d0>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c452:	4643      	mov	r3, r8
    c454:	3b01      	subs	r3, #1
    c456:	b2db      	uxtb	r3, r3
    c458:	2b01      	cmp	r3, #1
    c45a:	d9b6      	bls.n	c3ca <P2PTasks+0x162>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c45c:	2028      	movs	r0, #40	; 0x28
    c45e:	4b68      	ldr	r3, [pc, #416]	; (c600 <P2PTasks+0x398>)
    c460:	4798      	blx	r3
    c462:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    c464:	d100      	bne.n	c468 <P2PTasks+0x200>
    c466:	e245      	b.n	c8f4 <P2PTasks+0x68c>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c468:	2391      	movs	r3, #145	; 0x91
    c46a:	7013      	strb	r3, [r2, #0]
                dataPtr[dataLen++] = status;
    c46c:	3362      	adds	r3, #98	; 0x62
    c46e:	7053      	strb	r3, [r2, #1]
                dataPtr[dataLen++] = MyindexinPC;
    c470:	4b64      	ldr	r3, [pc, #400]	; (c604 <P2PTasks+0x39c>)
    c472:	781b      	ldrb	r3, [r3, #0]
    c474:	7093      	strb	r3, [r2, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c476:	495a      	ldr	r1, [pc, #360]	; (c5e0 <P2PTasks+0x378>)
    c478:	4b63      	ldr	r3, [pc, #396]	; (c608 <P2PTasks+0x3a0>)
    c47a:	9305      	str	r3, [sp, #20]
    c47c:	2301      	movs	r3, #1
    c47e:	9304      	str	r3, [sp, #16]
    c480:	2000      	movs	r0, #0
    c482:	9003      	str	r0, [sp, #12]
    c484:	9202      	str	r2, [sp, #8]
    c486:	2203      	movs	r2, #3
    c488:	9201      	str	r2, [sp, #4]
    c48a:	780a      	ldrb	r2, [r1, #0]
    c48c:	0712      	lsls	r2, r2, #28
    c48e:	0fd2      	lsrs	r2, r2, #31
    c490:	9200      	str	r2, [sp, #0]
    c492:	684a      	ldr	r2, [r1, #4]
    c494:	8849      	ldrh	r1, [r1, #2]
    c496:	4c5d      	ldr	r4, [pc, #372]	; (c60c <P2PTasks+0x3a4>)
    c498:	47a0      	blx	r4
    c49a:	e22b      	b.n	c8f4 <P2PTasks+0x68c>
                    dataPtr[dataLen++] = P2PCapacityInfo;
    c49c:	4b5f      	ldr	r3, [pc, #380]	; (c61c <P2PTasks+0x3b4>)
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	70c3      	strb	r3, [r0, #3]
                        dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    c4a2:	4b5c      	ldr	r3, [pc, #368]	; (c614 <P2PTasks+0x3ac>)
    c4a4:	681b      	ldr	r3, [r3, #0]
    c4a6:	689b      	ldr	r3, [r3, #8]
    c4a8:	781b      	ldrb	r3, [r3, #0]
    c4aa:	7103      	strb	r3, [r0, #4]
    c4ac:	3402      	adds	r4, #2
    c4ae:	e79d      	b.n	c3ec <P2PTasks+0x184>
                if(ESTABLISHING_NETWORK != p2pStarCurrentState)
    c4b0:	4b5b      	ldr	r3, [pc, #364]	; (c620 <P2PTasks+0x3b8>)
    c4b2:	781b      	ldrb	r3, [r3, #0]
    c4b4:	2b04      	cmp	r3, #4
    c4b6:	d000      	beq.n	c4ba <P2PTasks+0x252>
    c4b8:	e21c      	b.n	c8f4 <P2PTasks+0x68c>
                switch( rxMessage.Payload[1] )
    c4ba:	7863      	ldrb	r3, [r4, #1]
    c4bc:	2b01      	cmp	r3, #1
    c4be:	d900      	bls.n	c4c2 <P2PTasks+0x25a>
    c4c0:	e218      	b.n	c8f4 <P2PTasks+0x68c>
                    if( myPANID.Val == 0xFFFF )
    c4c2:	4b4d      	ldr	r3, [pc, #308]	; (c5f8 <P2PTasks+0x390>)
    c4c4:	881a      	ldrh	r2, [r3, #0]
    c4c6:	4b4b      	ldr	r3, [pc, #300]	; (c5f4 <P2PTasks+0x38c>)
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d01c      	beq.n	c506 <P2PTasks+0x29e>
                    if (rxMessage.Payload[1] == STATUS_EXISTS)
    c4cc:	4b44      	ldr	r3, [pc, #272]	; (c5e0 <P2PTasks+0x378>)
    c4ce:	689b      	ldr	r3, [r3, #8]
    c4d0:	785a      	ldrb	r2, [r3, #1]
    c4d2:	2a01      	cmp	r2, #1
    c4d4:	d026      	beq.n	c524 <P2PTasks+0x2bc>
                    else if (rxMessage.Payload[1] == STATUS_SUCCESS)
    c4d6:	2a00      	cmp	r2, #0
    c4d8:	d128      	bne.n	c52c <P2PTasks+0x2c4>
                        gEstConnectionInfo.status = SUCCESS;
    c4da:	2100      	movs	r1, #0
    c4dc:	4a51      	ldr	r2, [pc, #324]	; (c624 <P2PTasks+0x3bc>)
    c4de:	7051      	strb	r1, [r2, #1]
                    gEstConnectionInfo.connectionRetries = 0;
    c4e0:	2100      	movs	r1, #0
    c4e2:	4a50      	ldr	r2, [pc, #320]	; (c624 <P2PTasks+0x3bc>)
    c4e4:	70d1      	strb	r1, [r2, #3]
                    uint8_t status = AddConnection(rxMessage.Payload[3]);
    c4e6:	78d8      	ldrb	r0, [r3, #3]
    c4e8:	4b44      	ldr	r3, [pc, #272]	; (c5fc <P2PTasks+0x394>)
    c4ea:	4798      	blx	r3
                    if ((status == STATUS_SUCCESS) || (status == STATUS_EXISTS))
    c4ec:	2801      	cmp	r0, #1
    c4ee:	d921      	bls.n	c534 <P2PTasks+0x2cc>
                    myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    c4f0:	4b3b      	ldr	r3, [pc, #236]	; (c5e0 <P2PTasks+0x378>)
    c4f2:	689b      	ldr	r3, [r3, #8]
    c4f4:	789a      	ldrb	r2, [r3, #2]
    c4f6:	4b4c      	ldr	r3, [pc, #304]	; (c628 <P2PTasks+0x3c0>)
    c4f8:	701a      	strb	r2, [r3, #0]
                    PDS_Store(PDS_MYINDEX_ID);
    c4fa:	2009      	movs	r0, #9
    c4fc:	4c44      	ldr	r4, [pc, #272]	; (c610 <P2PTasks+0x3a8>)
    c4fe:	47a0      	blx	r4
                   PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    c500:	484a      	ldr	r0, [pc, #296]	; (c62c <P2PTasks+0x3c4>)
    c502:	47a0      	blx	r4
    c504:	e1f6      	b.n	c8f4 <P2PTasks+0x68c>
                        uint16_t broadcastAddr = 0xFFFF;
    c506:	201e      	movs	r0, #30
    c508:	ab02      	add	r3, sp, #8
    c50a:	469c      	mov	ip, r3
    c50c:	4460      	add	r0, ip
    c50e:	2301      	movs	r3, #1
    c510:	425b      	negs	r3, r3
    c512:	8003      	strh	r3, [r0, #0]
                        myPANID.Val = rxMessage.SourcePANID.Val;
    c514:	4938      	ldr	r1, [pc, #224]	; (c5f8 <P2PTasks+0x390>)
    c516:	800d      	strh	r5, [r1, #0]
                        MiMAC_SetAltAddress((uint8_t *)&broadcastAddr, (uint8_t *)&myPANID.Val);
    c518:	4b45      	ldr	r3, [pc, #276]	; (c630 <P2PTasks+0x3c8>)
    c51a:	4798      	blx	r3
                        PDS_Store(PDS_PANID_ID);
    c51c:	2002      	movs	r0, #2
    c51e:	4b3c      	ldr	r3, [pc, #240]	; (c610 <P2PTasks+0x3a8>)
    c520:	4798      	blx	r3
    c522:	e7d3      	b.n	c4cc <P2PTasks+0x264>
                        gEstConnectionInfo.status = ALREADY_EXISTS;
    c524:	2106      	movs	r1, #6
    c526:	4a3f      	ldr	r2, [pc, #252]	; (c624 <P2PTasks+0x3bc>)
    c528:	7051      	strb	r1, [r2, #1]
    c52a:	e7d9      	b.n	c4e0 <P2PTasks+0x278>
                        gEstConnectionInfo.status = FAILURE;
    c52c:	2101      	movs	r1, #1
    c52e:	4a3d      	ldr	r2, [pc, #244]	; (c624 <P2PTasks+0x3bc>)
    c530:	7051      	strb	r1, [r2, #1]
    c532:	e7d5      	b.n	c4e0 <P2PTasks+0x278>
                        role = END_DEVICE;
    c534:	2202      	movs	r2, #2
    c536:	4b2c      	ldr	r3, [pc, #176]	; (c5e8 <P2PTasks+0x380>)
    c538:	701a      	strb	r2, [r3, #0]
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    c53a:	320d      	adds	r2, #13
    c53c:	4b3d      	ldr	r3, [pc, #244]	; (c634 <P2PTasks+0x3cc>)
    c53e:	801a      	strh	r2, [r3, #0]
    c540:	e7d6      	b.n	c4f0 <P2PTasks+0x288>
                if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    c542:	4b2a      	ldr	r3, [pc, #168]	; (c5ec <P2PTasks+0x384>)
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	2b02      	cmp	r3, #2
    c548:	d900      	bls.n	c54c <P2PTasks+0x2e4>
    c54a:	e1d3      	b.n	c8f4 <P2PTasks+0x68c>
                if( currentChannel != rxMessage.Payload[1] )
    c54c:	7862      	ldrb	r2, [r4, #1]
    c54e:	4b28      	ldr	r3, [pc, #160]	; (c5f0 <P2PTasks+0x388>)
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	429a      	cmp	r2, r3
    c554:	d000      	beq.n	c558 <P2PTasks+0x2f0>
    c556:	e1cd      	b.n	c8f4 <P2PTasks+0x68c>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE);
    c558:	2003      	movs	r0, #3
    c55a:	4b29      	ldr	r3, [pc, #164]	; (c600 <P2PTasks+0x398>)
    c55c:	4798      	blx	r3
                if (NULL == dataPtr)
    c55e:	2800      	cmp	r0, #0
    c560:	d100      	bne.n	c564 <P2PTasks+0x2fc>
    c562:	e1c7      	b.n	c8f4 <P2PTasks+0x68c>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    c564:	2397      	movs	r3, #151	; 0x97
    c566:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = P2PCapacityInfo;
    c568:	4b2c      	ldr	r3, [pc, #176]	; (c61c <P2PTasks+0x3b4>)
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	7043      	strb	r3, [r0, #1]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->AdditionalNodeID[i]);
    c56e:	4b29      	ldr	r3, [pc, #164]	; (c614 <P2PTasks+0x3ac>)
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	689b      	ldr	r3, [r3, #8]
    c574:	781b      	ldrb	r3, [r3, #0]
    c576:	7083      	strb	r3, [r0, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c578:	4b19      	ldr	r3, [pc, #100]	; (c5e0 <P2PTasks+0x378>)
    c57a:	685a      	ldr	r2, [r3, #4]
    c57c:	8859      	ldrh	r1, [r3, #2]
    c57e:	4c2e      	ldr	r4, [pc, #184]	; (c638 <P2PTasks+0x3d0>)
    c580:	9405      	str	r4, [sp, #20]
    c582:	2401      	movs	r4, #1
    c584:	9404      	str	r4, [sp, #16]
    c586:	2400      	movs	r4, #0
    c588:	9403      	str	r4, [sp, #12]
    c58a:	9002      	str	r0, [sp, #8]
    c58c:	2003      	movs	r0, #3
    c58e:	9001      	str	r0, [sp, #4]
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	071b      	lsls	r3, r3, #28
    c594:	0fdb      	lsrs	r3, r3, #31
    c596:	9300      	str	r3, [sp, #0]
    c598:	2301      	movs	r3, #1
    c59a:	2000      	movs	r0, #0
    c59c:	4c1b      	ldr	r4, [pc, #108]	; (c60c <P2PTasks+0x3a4>)
    c59e:	47a0      	blx	r4
    c5a0:	e1a8      	b.n	c8f4 <P2PTasks+0x68c>
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	0000cfe5 	.word	0x0000cfe5
    c5a8:	20001fe8 	.word	0x20001fe8
    c5ac:	20000018 	.word	0x20000018
    c5b0:	0000aa3d 	.word	0x0000aa3d
    c5b4:	0000aef5 	.word	0x0000aef5
    c5b8:	0000cf59 	.word	0x0000cf59
    c5bc:	20000410 	.word	0x20000410
    c5c0:	0000d035 	.word	0x0000d035
    c5c4:	20000438 	.word	0x20000438
    c5c8:	0000cdc9 	.word	0x0000cdc9
    c5cc:	2000209c 	.word	0x2000209c
    c5d0:	0000aed9 	.word	0x0000aed9
    c5d4:	0000b511 	.word	0x0000b511
    c5d8:	0000a6ed 	.word	0x0000a6ed
    c5dc:	20001f70 	.word	0x20001f70
    c5e0:	2000208c 	.word	0x2000208c
    c5e4:	000113a4 	.word	0x000113a4
    c5e8:	20002074 	.word	0x20002074
    c5ec:	2000000b 	.word	0x2000000b
    c5f0:	2000000d 	.word	0x2000000d
    c5f4:	0000ffff 	.word	0x0000ffff
    c5f8:	20001f94 	.word	0x20001f94
    c5fc:	0000b955 	.word	0x0000b955
    c600:	0000cb95 	.word	0x0000cb95
    c604:	20001ff4 	.word	0x20001ff4
    c608:	0000be3d 	.word	0x0000be3d
    c60c:	0000ba39 	.word	0x0000ba39
    c610:	00009e2d 	.word	0x00009e2d
    c614:	20001f84 	.word	0x20001f84
    c618:	0000b92d 	.word	0x0000b92d
    c61c:	2000000c 	.word	0x2000000c
    c620:	20000418 	.word	0x20000418
    c624:	20002008 	.word	0x20002008
    c628:	20001f8c 	.word	0x20001f8c
    c62c:	00004001 	.word	0x00004001
    c630:	0000a1f9 	.word	0x0000a1f9
    c634:	20000416 	.word	0x20000416
    c638:	0000b4a5 	.word	0x0000b4a5
                if(RESYNC_IN_PROGRESS == p2pStarCurrentState)
    c63c:	4bb1      	ldr	r3, [pc, #708]	; (c904 <P2PTasks+0x69c>)
    c63e:	781b      	ldrb	r3, [r3, #0]
    c640:	2b09      	cmp	r3, #9
    c642:	d000      	beq.n	c646 <P2PTasks+0x3de>
    c644:	e156      	b.n	c8f4 <P2PTasks+0x68c>
                    resyncInfo.resyncTimes = 0;
    c646:	4cb0      	ldr	r4, [pc, #704]	; (c908 <P2PTasks+0x6a0>)
    c648:	2500      	movs	r5, #0
    c64a:	7065      	strb	r5, [r4, #1]
                    p2pStarCurrentState = IN_NETWORK_STATE;
    c64c:	2207      	movs	r2, #7
    c64e:	4bad      	ldr	r3, [pc, #692]	; (c904 <P2PTasks+0x69c>)
    c650:	701a      	strb	r2, [r3, #0]
                    resyncInfo.confCallback(currentChannel, SUCCESS);
    c652:	4bae      	ldr	r3, [pc, #696]	; (c90c <P2PTasks+0x6a4>)
    c654:	7818      	ldrb	r0, [r3, #0]
    c656:	2100      	movs	r1, #0
    c658:	68e3      	ldr	r3, [r4, #12]
    c65a:	4798      	blx	r3
                    resyncInfo.confCallback = NULL;
    c65c:	60e5      	str	r5, [r4, #12]
    c65e:	e149      	b.n	c8f4 <P2PTasks+0x68c>
                if (END_DEVICE == role)
    c660:	4bab      	ldr	r3, [pc, #684]	; (c910 <P2PTasks+0x6a8>)
    c662:	781b      	ldrb	r3, [r3, #0]
    c664:	2b02      	cmp	r3, #2
    c666:	d000      	beq.n	c66a <P2PTasks+0x402>
    c668:	e144      	b.n	c8f4 <P2PTasks+0x68c>
                    end_nodes = rxMessage.Payload[1];
    c66a:	7866      	ldrb	r6, [r4, #1]
    c66c:	4ba9      	ldr	r3, [pc, #676]	; (c914 <P2PTasks+0x6ac>)
    c66e:	701e      	strb	r6, [r3, #0]
    c670:	1d23      	adds	r3, r4, #4
    c672:	3428      	adds	r4, #40	; 0x28
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    {
        j = payload[i+3];
        if (0xFF != j)
        {
            END_DEVICES_Short_Address[j].connection_slot = j;
    c674:	4fa8      	ldr	r7, [pc, #672]	; (c918 <P2PTasks+0x6b0>)
    c676:	e002      	b.n	c67e <P2PTasks+0x416>
    c678:	3304      	adds	r3, #4
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    c67a:	42a3      	cmp	r3, r4
    c67c:	d00c      	beq.n	c698 <P2PTasks+0x430>
        j = payload[i+3];
    c67e:	78da      	ldrb	r2, [r3, #3]
        if (0xFF != j)
    c680:	2aff      	cmp	r2, #255	; 0xff
    c682:	d0f9      	beq.n	c678 <P2PTasks+0x410>
            END_DEVICES_Short_Address[j].connection_slot = j;
    c684:	0095      	lsls	r5, r2, #2
    c686:	1979      	adds	r1, r7, r5
    c688:	70ca      	strb	r2, [r1, #3]
            END_DEVICES_Short_Address[j].Address[0] = payload[i];
    c68a:	781a      	ldrb	r2, [r3, #0]
    c68c:	55ea      	strb	r2, [r5, r7]
            END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    c68e:	785a      	ldrb	r2, [r3, #1]
    c690:	704a      	strb	r2, [r1, #1]
            END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    c692:	789a      	ldrb	r2, [r3, #2]
    c694:	708a      	strb	r2, [r1, #2]
    c696:	e7ef      	b.n	c678 <P2PTasks+0x410>
        for (i = 0; i < end_nodes; i++)
    c698:	2e00      	cmp	r6, #0
    c69a:	d018      	beq.n	c6ce <P2PTasks+0x466>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c69c:	4b9f      	ldr	r3, [pc, #636]	; (c91c <P2PTasks+0x6b4>)
    c69e:	781c      	ldrb	r4, [r3, #0]
    c6a0:	785f      	ldrb	r7, [r3, #1]
    c6a2:	4b9d      	ldr	r3, [pc, #628]	; (c918 <P2PTasks+0x6b0>)
    c6a4:	3e01      	subs	r6, #1
    c6a6:	b2f2      	uxtb	r2, r6
    c6a8:	3201      	adds	r2, #1
    c6aa:	0092      	lsls	r2, r2, #2
    c6ac:	18d2      	adds	r2, r2, r3
    c6ae:	2500      	movs	r5, #0
    c6b0:	e002      	b.n	c6b8 <P2PTasks+0x450>
    c6b2:	3304      	adds	r3, #4
        for (i = 0; i < end_nodes; i++)
    c6b4:	429a      	cmp	r2, r3
    c6b6:	d007      	beq.n	c6c8 <P2PTasks+0x460>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c6b8:	7819      	ldrb	r1, [r3, #0]
    c6ba:	42a1      	cmp	r1, r4
    c6bc:	d1f9      	bne.n	c6b2 <P2PTasks+0x44a>
    c6be:	7859      	ldrb	r1, [r3, #1]
    c6c0:	42b9      	cmp	r1, r7
    c6c2:	d1f6      	bne.n	c6b2 <P2PTasks+0x44a>
                stat = true;
    c6c4:	0005      	movs	r5, r0
    c6c6:	e7f4      	b.n	c6b2 <P2PTasks+0x44a>
        if (!stat)
    c6c8:	2d00      	cmp	r5, #0
    c6ca:	d000      	beq.n	c6ce <P2PTasks+0x466>
    c6cc:	e112      	b.n	c8f4 <P2PTasks+0x68c>
            linkStatusTimeInterval = 0;
    c6ce:	2200      	movs	r2, #0
    c6d0:	4b93      	ldr	r3, [pc, #588]	; (c920 <P2PTasks+0x6b8>)
    c6d2:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    c6d4:	4b93      	ldr	r3, [pc, #588]	; (c924 <P2PTasks+0x6bc>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	4293      	cmp	r3, r2
    c6da:	d004      	beq.n	c6e6 <P2PTasks+0x47e>
    c6dc:	4a89      	ldr	r2, [pc, #548]	; (c904 <P2PTasks+0x69c>)
    c6de:	7812      	ldrb	r2, [r2, #0]
    c6e0:	2a08      	cmp	r2, #8
    c6e2:	d000      	beq.n	c6e6 <P2PTasks+0x47e>
                linkFailureCallback();
    c6e4:	4798      	blx	r3
            p2pStarCurrentState = DISCONNECTED;
    c6e6:	2208      	movs	r2, #8
    c6e8:	4b86      	ldr	r3, [pc, #536]	; (c904 <P2PTasks+0x69c>)
    c6ea:	701a      	strb	r2, [r3, #0]
    c6ec:	e102      	b.n	c8f4 <P2PTasks+0x68c>
				dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    c6ee:	2100      	movs	r1, #0
    c6f0:	488d      	ldr	r0, [pc, #564]	; (c928 <P2PTasks+0x6c0>)
    c6f2:	4b8e      	ldr	r3, [pc, #568]	; (c92c <P2PTasks+0x6c4>)
    c6f4:	4798      	blx	r3
    c6f6:	1e04      	subs	r4, r0, #0
				if (NULL == dataFramePtr)
    c6f8:	d100      	bne.n	c6fc <P2PTasks+0x494>
    c6fa:	e0fb      	b.n	c8f4 <P2PTasks+0x68c>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    c6fc:	6843      	ldr	r3, [r0, #4]
				if (NULL != callback)
    c6fe:	2b00      	cmp	r3, #0
    c700:	d004      	beq.n	c70c <P2PTasks+0x4a4>
					callback(dataFramePtr->dataFrame.msghandle, SUCCESS, dataFramePtr->dataFrame.msg);
    c702:	7d00      	ldrb	r0, [r0, #20]
    c704:	0022      	movs	r2, r4
    c706:	3216      	adds	r2, #22
    c708:	2100      	movs	r1, #0
    c70a:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    c70c:	0020      	movs	r0, r4
    c70e:	4b88      	ldr	r3, [pc, #544]	; (c930 <P2PTasks+0x6c8>)
    c710:	4798      	blx	r3
    c712:	e0ef      	b.n	c8f4 <P2PTasks+0x68c>
	            if (PAN_COORD == role)
    c714:	4b7e      	ldr	r3, [pc, #504]	; (c910 <P2PTasks+0x6a8>)
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	2b01      	cmp	r3, #1
    c71a:	d000      	beq.n	c71e <P2PTasks+0x4b6>
    c71c:	e0ea      	b.n	c8f4 <P2PTasks+0x68c>
					uint8_t ed_index = Find_Index(&(rxMessage.Payload[1]));
    c71e:	1c60      	adds	r0, r4, #1
    c720:	4b84      	ldr	r3, [pc, #528]	; (c934 <P2PTasks+0x6cc>)
    c722:	4798      	blx	r3
    c724:	0005      	movs	r5, r0
					if (0xFF != ed_index)
    c726:	28ff      	cmp	r0, #255	; 0xff
    c728:	d100      	bne.n	c72c <P2PTasks+0x4c4>
    c72a:	e0e3      	b.n	c8f4 <P2PTasks+0x68c>
						dataPtr = (P2PStarDataFrame_t*)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c72c:	2068      	movs	r0, #104	; 0x68
    c72e:	4b82      	ldr	r3, [pc, #520]	; (c938 <P2PTasks+0x6d0>)
    c730:	4798      	blx	r3
    c732:	1e04      	subs	r4, r0, #0
						if (NULL == dataPtr)
    c734:	d100      	bne.n	c738 <P2PTasks+0x4d0>
    c736:	e0dd      	b.n	c8f4 <P2PTasks+0x68c>
						memcpy(dataPtr->dataFrame.destAddress, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, LONG_ADDR_LEN);
    c738:	4b80      	ldr	r3, [pc, #512]	; (c93c <P2PTasks+0x6d4>)
    c73a:	681e      	ldr	r6, [r3, #0]
    c73c:	012d      	lsls	r5, r5, #4
    c73e:	3008      	adds	r0, #8
    c740:	6833      	ldr	r3, [r6, #0]
    c742:	1959      	adds	r1, r3, r5
    c744:	3104      	adds	r1, #4
    c746:	2208      	movs	r2, #8
    c748:	4b7d      	ldr	r3, [pc, #500]	; (c940 <P2PTasks+0x6d8>)
    c74a:	4798      	blx	r3
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[0];    // Unique address of EDy (DEST ED)
    c74c:	4a7d      	ldr	r2, [pc, #500]	; (c944 <P2PTasks+0x6dc>)
    c74e:	6853      	ldr	r3, [r2, #4]
    c750:	7819      	ldrb	r1, [r3, #0]
    c752:	75a1      	strb	r1, [r4, #22]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[1];    // Unique address of EDy (DEST ED)
    c754:	7859      	ldrb	r1, [r3, #1]
    c756:	75e1      	strb	r1, [r4, #23]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    c758:	789b      	ldrb	r3, [r3, #2]
    c75a:	7623      	strb	r3, [r4, #24]
						for(i = 4; i < rxMessage.PayloadSize; i++)
    c75c:	7b17      	ldrb	r7, [r2, #12]
    c75e:	2f04      	cmp	r7, #4
    c760:	d92f      	bls.n	c7c2 <P2PTasks+0x55a>
							dataPtr->dataFrame.msg[dataLen++] = rxMessage.Payload[i];
    c762:	6890      	ldr	r0, [r2, #8]
    c764:	1d03      	adds	r3, r0, #4
    c766:	0022      	movs	r2, r4
    c768:	3219      	adds	r2, #25
    c76a:	1f79      	subs	r1, r7, #5
    c76c:	b2c9      	uxtb	r1, r1
    c76e:	3105      	adds	r1, #5
    c770:	1840      	adds	r0, r0, r1
    c772:	7819      	ldrb	r1, [r3, #0]
    c774:	7011      	strb	r1, [r2, #0]
    c776:	3301      	adds	r3, #1
    c778:	3201      	adds	r2, #1
						for(i = 4; i < rxMessage.PayloadSize; i++)
    c77a:	4283      	cmp	r3, r0
    c77c:	d1f9      	bne.n	c772 <P2PTasks+0x50a>
    c77e:	1e7b      	subs	r3, r7, #1
    c780:	b2db      	uxtb	r3, r3
						dataPtr->dataFrame.msgLength = dataLen;
    c782:	7563      	strb	r3, [r4, #21]
						dataPtr->dataFrame.fromEDToED = 1;
    c784:	2201      	movs	r2, #1
    c786:	74e2      	strb	r2, [r4, #19]
						if(miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.isValid && miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.RXOnWhenIdle == 0)
    c788:	6832      	ldr	r2, [r6, #0]
    c78a:	1955      	adds	r5, r2, r5
    c78c:	7b2a      	ldrb	r2, [r5, #12]
    c78e:	217e      	movs	r1, #126	; 0x7e
    c790:	438a      	bics	r2, r1
    c792:	2a80      	cmp	r2, #128	; 0x80
    c794:	d017      	beq.n	c7c6 <P2PTasks+0x55e>
							frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, false, false, dataLen, dataPtr->dataFrame.msg, 1, true, appAckWaitDataCallback);
    c796:	1d2a      	adds	r2, r5, #4
    c798:	496b      	ldr	r1, [pc, #428]	; (c948 <P2PTasks+0x6e0>)
    c79a:	8809      	ldrh	r1, [r1, #0]
    c79c:	486b      	ldr	r0, [pc, #428]	; (c94c <P2PTasks+0x6e4>)
    c79e:	9005      	str	r0, [sp, #20]
    c7a0:	2001      	movs	r0, #1
    c7a2:	9004      	str	r0, [sp, #16]
    c7a4:	9003      	str	r0, [sp, #12]
    c7a6:	0020      	movs	r0, r4
    c7a8:	3016      	adds	r0, #22
    c7aa:	9002      	str	r0, [sp, #8]
    c7ac:	9301      	str	r3, [sp, #4]
    c7ae:	2300      	movs	r3, #0
    c7b0:	9300      	str	r3, [sp, #0]
    c7b2:	2000      	movs	r0, #0
    c7b4:	4d66      	ldr	r5, [pc, #408]	; (c950 <P2PTasks+0x6e8>)
    c7b6:	47a8      	blx	r5
							miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataPtr);
    c7b8:	0021      	movs	r1, r4
    c7ba:	485b      	ldr	r0, [pc, #364]	; (c928 <P2PTasks+0x6c0>)
    c7bc:	4b65      	ldr	r3, [pc, #404]	; (c954 <P2PTasks+0x6ec>)
    c7be:	4798      	blx	r3
    c7c0:	e098      	b.n	c8f4 <P2PTasks+0x68c>
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    c7c2:	2303      	movs	r3, #3
    c7c4:	e7dd      	b.n	c782 <P2PTasks+0x51a>
							if (50 < MiMem_PercentageOfFreeBuffers())
    c7c6:	4b64      	ldr	r3, [pc, #400]	; (c958 <P2PTasks+0x6f0>)
    c7c8:	4798      	blx	r3
    c7ca:	2832      	cmp	r0, #50	; 0x32
    c7cc:	d800      	bhi.n	c7d0 <P2PTasks+0x568>
    c7ce:	e091      	b.n	c8f4 <P2PTasks+0x68c>
								dataPtr->dataFrame.confCallback = NULL;
    c7d0:	2300      	movs	r3, #0
    c7d2:	6063      	str	r3, [r4, #4]
								dataPtr->dataFrame.timeout = INDIRECT_MESSAGE_TIMEOUT;
    c7d4:	3318      	adds	r3, #24
    c7d6:	7423      	strb	r3, [r4, #16]
								dataPtr->dataFrame.ackReq = true;
    c7d8:	3b17      	subs	r3, #23
    c7da:	7463      	strb	r3, [r4, #17]
								miQueueAppend(&indirectFrameQueue, (miQueueBuffer_t*)dataPtr);
    c7dc:	0021      	movs	r1, r4
    c7de:	485f      	ldr	r0, [pc, #380]	; (c95c <P2PTasks+0x6f4>)
    c7e0:	4b5c      	ldr	r3, [pc, #368]	; (c954 <P2PTasks+0x6ec>)
    c7e2:	4798      	blx	r3
    c7e4:	e086      	b.n	c8f4 <P2PTasks+0x68c>
                if (PAN_COORD == role)
    c7e6:	4b4a      	ldr	r3, [pc, #296]	; (c910 <P2PTasks+0x6a8>)
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	2b01      	cmp	r3, #1
    c7ec:	d000      	beq.n	c7f0 <P2PTasks+0x588>
    c7ee:	e081      	b.n	c8f4 <P2PTasks+0x68c>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    c7f0:	4b52      	ldr	r3, [pc, #328]	; (c93c <P2PTasks+0x6d4>)
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	6819      	ldr	r1, [r3, #0]
    c7f6:	4b53      	ldr	r3, [pc, #332]	; (c944 <P2PTasks+0x6dc>)
    c7f8:	685e      	ldr	r6, [r3, #4]
    c7fa:	7834      	ldrb	r4, [r6, #0]
    c7fc:	000b      	movs	r3, r1
    c7fe:	3141      	adds	r1, #65	; 0x41
    c800:	31ff      	adds	r1, #255	; 0xff
    c802:	e002      	b.n	c80a <P2PTasks+0x5a2>
    c804:	3310      	adds	r3, #16
                    for (p=0  ; p < CONNECTION_SIZE ; p++)
    c806:	4299      	cmp	r1, r3
    c808:	d074      	beq.n	c8f4 <P2PTasks+0x68c>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    c80a:	0018      	movs	r0, r3
    c80c:	791a      	ldrb	r2, [r3, #4]
    c80e:	42a2      	cmp	r2, r4
    c810:	d1f8      	bne.n	c804 <P2PTasks+0x59c>
    c812:	795d      	ldrb	r5, [r3, #5]
    c814:	7872      	ldrb	r2, [r6, #1]
    c816:	4295      	cmp	r5, r2
    c818:	d1f4      	bne.n	c804 <P2PTasks+0x59c>
                        && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    c81a:	799d      	ldrb	r5, [r3, #6]
    c81c:	78b2      	ldrb	r2, [r6, #2]
    c81e:	4295      	cmp	r5, r2
    c820:	d1f0      	bne.n	c804 <P2PTasks+0x59c>
                            miwiDefaultRomOrRamParams->ConnectionTable[p].link_status++;
    c822:	7b9b      	ldrb	r3, [r3, #14]
    c824:	3301      	adds	r3, #1
    c826:	7383      	strb	r3, [r0, #14]
    c828:	e064      	b.n	c8f4 <P2PTasks+0x68c>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE);
    c82a:	2002      	movs	r0, #2
    c82c:	4b42      	ldr	r3, [pc, #264]	; (c938 <P2PTasks+0x6d0>)
    c82e:	4798      	blx	r3
    c830:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    c832:	d05f      	beq.n	c8f4 <P2PTasks+0x68c>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    c834:	2392      	movs	r3, #146	; 0x92
    c836:	7003      	strb	r3, [r0, #0]
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c838:	4b42      	ldr	r3, [pc, #264]	; (c944 <P2PTasks+0x6dc>)
    c83a:	685b      	ldr	r3, [r3, #4]
    c83c:	9307      	str	r3, [sp, #28]
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c83e:	4b3f      	ldr	r3, [pc, #252]	; (c93c <P2PTasks+0x6d4>)
    c840:	681b      	ldr	r3, [r3, #0]
    c842:	681d      	ldr	r5, [r3, #0]
                for(i = 0; i < CONNECTION_SIZE; i++)
    c844:	2400      	movs	r4, #0
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c846:	4e46      	ldr	r6, [pc, #280]	; (c960 <P2PTasks+0x6f8>)
    c848:	e004      	b.n	c854 <P2PTasks+0x5ec>
                for(i = 0; i < CONNECTION_SIZE; i++)
    c84a:	3401      	adds	r4, #1
    c84c:	b2e4      	uxtb	r4, r4
    c84e:	3510      	adds	r5, #16
    c850:	2c14      	cmp	r4, #20
    c852:	d013      	beq.n	c87c <P2PTasks+0x614>
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c854:	9506      	str	r5, [sp, #24]
    c856:	7b2b      	ldrb	r3, [r5, #12]
    c858:	2b7f      	cmp	r3, #127	; 0x7f
    c85a:	d9f6      	bls.n	c84a <P2PTasks+0x5e2>
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c85c:	1d29      	adds	r1, r5, #4
    c85e:	9807      	ldr	r0, [sp, #28]
    c860:	47b0      	blx	r6
    c862:	2800      	cmp	r0, #0
    c864:	d0f1      	beq.n	c84a <P2PTasks+0x5e2>
                            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c866:	2600      	movs	r6, #0
    c868:	9b06      	ldr	r3, [sp, #24]
    c86a:	731e      	strb	r6, [r3, #12]
                            PDS_Store(PDS_CONNECTION_TABLE_ID);
    c86c:	2006      	movs	r0, #6
    c86e:	4b3d      	ldr	r3, [pc, #244]	; (c964 <P2PTasks+0x6fc>)
    c870:	4798      	blx	r3
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c872:	707e      	strb	r6, [r7, #1]
                if( i == CONNECTION_SIZE )
    c874:	2c14      	cmp	r4, #20
    c876:	d018      	beq.n	c8aa <P2PTasks+0x642>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c878:	2402      	movs	r4, #2
    c87a:	e003      	b.n	c884 <P2PTasks+0x61c>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    c87c:	2301      	movs	r3, #1
                    dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    c87e:	1c5c      	adds	r4, r3, #1
    c880:	22f0      	movs	r2, #240	; 0xf0
    c882:	54fa      	strb	r2, [r7, r3]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c884:	4b2f      	ldr	r3, [pc, #188]	; (c944 <P2PTasks+0x6dc>)
    c886:	685a      	ldr	r2, [r3, #4]
    c888:	8859      	ldrh	r1, [r3, #2]
    c88a:	4837      	ldr	r0, [pc, #220]	; (c968 <P2PTasks+0x700>)
    c88c:	9005      	str	r0, [sp, #20]
    c88e:	2001      	movs	r0, #1
    c890:	9004      	str	r0, [sp, #16]
    c892:	2000      	movs	r0, #0
    c894:	9003      	str	r0, [sp, #12]
    c896:	9702      	str	r7, [sp, #8]
    c898:	9401      	str	r4, [sp, #4]
    c89a:	781b      	ldrb	r3, [r3, #0]
    c89c:	071b      	lsls	r3, r3, #28
    c89e:	0fdb      	lsrs	r3, r3, #31
    c8a0:	9300      	str	r3, [sp, #0]
    c8a2:	2301      	movs	r3, #1
    c8a4:	4c2a      	ldr	r4, [pc, #168]	; (c950 <P2PTasks+0x6e8>)
    c8a6:	47a0      	blx	r4
    c8a8:	e024      	b.n	c8f4 <P2PTasks+0x68c>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c8aa:	2302      	movs	r3, #2
    c8ac:	e7e7      	b.n	c87e <P2PTasks+0x616>
                if( rxMessage.Payload[1] == STATUS_SUCCESS )
    c8ae:	7863      	ldrb	r3, [r4, #1]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d11f      	bne.n	c8f4 <P2PTasks+0x68c>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c8b4:	4b21      	ldr	r3, [pc, #132]	; (c93c <P2PTasks+0x6d4>)
    c8b6:	681b      	ldr	r3, [r3, #0]
    c8b8:	681f      	ldr	r7, [r3, #0]
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c8ba:	4a22      	ldr	r2, [pc, #136]	; (c944 <P2PTasks+0x6dc>)
    c8bc:	6853      	ldr	r3, [r2, #4]
    c8be:	9306      	str	r3, [sp, #24]
    c8c0:	003c      	movs	r4, r7
    c8c2:	3741      	adds	r7, #65	; 0x41
    c8c4:	37ff      	adds	r7, #255	; 0xff
    c8c6:	4e26      	ldr	r6, [pc, #152]	; (c960 <P2PTasks+0x6f8>)
    c8c8:	e002      	b.n	c8d0 <P2PTasks+0x668>
    c8ca:	3410      	adds	r4, #16
                    for(i = 0; i < CONNECTION_SIZE; i++)
    c8cc:	42a7      	cmp	r7, r4
    c8ce:	d011      	beq.n	c8f4 <P2PTasks+0x68c>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c8d0:	7b23      	ldrb	r3, [r4, #12]
    c8d2:	2b7f      	cmp	r3, #127	; 0x7f
    c8d4:	d9f9      	bls.n	c8ca <P2PTasks+0x662>
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c8d6:	1d21      	adds	r1, r4, #4
    c8d8:	9806      	ldr	r0, [sp, #24]
    c8da:	47b0      	blx	r6
    c8dc:	2800      	cmp	r0, #0
    c8de:	d0f4      	beq.n	c8ca <P2PTasks+0x662>
                                miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c8e0:	2300      	movs	r3, #0
    c8e2:	7323      	strb	r3, [r4, #12]
                                PDS_Store(PDS_CONNECTION_TABLE_ID);
    c8e4:	2006      	movs	r0, #6
    c8e6:	4b1f      	ldr	r3, [pc, #124]	; (c964 <P2PTasks+0x6fc>)
    c8e8:	4798      	blx	r3
    c8ea:	e003      	b.n	c8f4 <P2PTasks+0x68c>
		if (IN_NETWORK_STATE == p2pStarCurrentState)
    c8ec:	4b05      	ldr	r3, [pc, #20]	; (c904 <P2PTasks+0x69c>)
    c8ee:	781b      	ldrb	r3, [r3, #0]
    c8f0:	2b07      	cmp	r3, #7
    c8f2:	d002      	beq.n	c8fa <P2PTasks+0x692>
        MiMAC_DiscardPacket();
    c8f4:	4b1d      	ldr	r3, [pc, #116]	; (c96c <P2PTasks+0x704>)
    c8f6:	4798      	blx	r3
    c8f8:	e4cb      	b.n	c292 <P2PTasks+0x2a>
			pktRxcallback(&rxMessage);
    c8fa:	4b1d      	ldr	r3, [pc, #116]	; (c970 <P2PTasks+0x708>)
    c8fc:	681b      	ldr	r3, [r3, #0]
    c8fe:	4811      	ldr	r0, [pc, #68]	; (c944 <P2PTasks+0x6dc>)
    c900:	4798      	blx	r3
    c902:	e7f7      	b.n	c8f4 <P2PTasks+0x68c>
    c904:	20000418 	.word	0x20000418
    c908:	20002078 	.word	0x20002078
    c90c:	2000000d 	.word	0x2000000d
    c910:	20002074 	.word	0x20002074
    c914:	2000040c 	.word	0x2000040c
    c918:	20002018 	.word	0x20002018
    c91c:	20000010 	.word	0x20000010
    c920:	20000416 	.word	0x20000416
    c924:	20002088 	.word	0x20002088
    c928:	20001ffc 	.word	0x20001ffc
    c92c:	0000cdc9 	.word	0x0000cdc9
    c930:	0000cc51 	.word	0x0000cc51
    c934:	0000b44d 	.word	0x0000b44d
    c938:	0000cb95 	.word	0x0000cb95
    c93c:	20001f84 	.word	0x20001f84
    c940:	0000f97b 	.word	0x0000f97b
    c944:	2000208c 	.word	0x2000208c
    c948:	20001f94 	.word	0x20001f94
    c94c:	0000ca19 	.word	0x0000ca19
    c950:	0000ba39 	.word	0x0000ba39
    c954:	0000cd91 	.word	0x0000cd91
    c958:	0000cccd 	.word	0x0000cccd
    c95c:	20001f64 	.word	0x20001f64
    c960:	0000b92d 	.word	0x0000b92d
    c964:	00009e2d 	.word	0x00009e2d
    c968:	0000b4a5 	.word	0x0000b4a5
    c96c:	0000aa21 	.word	0x0000aa21
    c970:	2000041c 	.word	0x2000041c

0000c974 <macAckOnlyDataCallback>:
    return false;
}
#endif

void macAckOnlyDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    c974:	b5f0      	push	{r4, r5, r6, r7, lr}
    c976:	b087      	sub	sp, #28
    c978:	0005      	movs	r5, r0
    c97a:	000e      	movs	r6, r1
    c97c:	0017      	movs	r7, r2
	P2PStarDataFrame_t *dataFramePtr = NULL;
	dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&macAckOnlyFrameQueue, NULL);
    c97e:	2100      	movs	r1, #0
    c980:	481c      	ldr	r0, [pc, #112]	; (c9f4 <macAckOnlyDataCallback+0x80>)
    c982:	4b1d      	ldr	r3, [pc, #116]	; (c9f8 <macAckOnlyDataCallback+0x84>)
    c984:	4798      	blx	r3
    c986:	1e04      	subs	r4, r0, #0

	if (NULL != dataFramePtr)
    c988:	d031      	beq.n	c9ee <macAckOnlyDataCallback+0x7a>
	{
		DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    c98a:	6843      	ldr	r3, [r0, #4]
		if (NULL != callback && 1 != dataFramePtr->dataFrame.broadcast)
    c98c:	2b00      	cmp	r3, #0
    c98e:	d006      	beq.n	c99e <macAckOnlyDataCallback+0x2a>
    c990:	7c82      	ldrb	r2, [r0, #18]
    c992:	2a01      	cmp	r2, #1
    c994:	d003      	beq.n	c99e <macAckOnlyDataCallback+0x2a>
		{
			callback(handle, status, msgPointer);
    c996:	003a      	movs	r2, r7
    c998:	0031      	movs	r1, r6
    c99a:	0028      	movs	r0, r5
    c99c:	4798      	blx	r3
		}
#if defined(PROTOCOL_STAR)
		if (dataFramePtr->dataFrame.fromEDToED)
    c99e:	7ce3      	ldrb	r3, [r4, #19]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d021      	beq.n	c9e8 <macAckOnlyDataCallback+0x74>
		{
			uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    c9a4:	0020      	movs	r0, r4
    c9a6:	3016      	adds	r0, #22
    c9a8:	4b14      	ldr	r3, [pc, #80]	; (c9fc <macAckOnlyDataCallback+0x88>)
    c9aa:	4798      	blx	r3
    c9ac:	0005      	movs	r5, r0
			if (0xFF != ed_index)
    c9ae:	28ff      	cmp	r0, #255	; 0xff
    c9b0:	d01a      	beq.n	c9e8 <macAckOnlyDataCallback+0x74>
			{
				uint8_t* dataPtr;
				dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    c9b2:	2001      	movs	r0, #1
    c9b4:	4b12      	ldr	r3, [pc, #72]	; (ca00 <macAckOnlyDataCallback+0x8c>)
    c9b6:	4798      	blx	r3
				if (NULL == dataPtr)
    c9b8:	2800      	cmp	r0, #0
    c9ba:	d018      	beq.n	c9ee <macAckOnlyDataCallback+0x7a>
				return;
				dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    c9bc:	23da      	movs	r3, #218	; 0xda
    c9be:	7003      	strb	r3, [r0, #0]
				frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    c9c0:	4b10      	ldr	r3, [pc, #64]	; (ca04 <macAckOnlyDataCallback+0x90>)
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	012d      	lsls	r5, r5, #4
    c9c6:	681a      	ldr	r2, [r3, #0]
    c9c8:	1952      	adds	r2, r2, r5
    c9ca:	3204      	adds	r2, #4
    c9cc:	4b0e      	ldr	r3, [pc, #56]	; (ca08 <macAckOnlyDataCallback+0x94>)
    c9ce:	8819      	ldrh	r1, [r3, #0]
    c9d0:	4b0e      	ldr	r3, [pc, #56]	; (ca0c <macAckOnlyDataCallback+0x98>)
    c9d2:	9305      	str	r3, [sp, #20]
    c9d4:	2301      	movs	r3, #1
    c9d6:	9304      	str	r3, [sp, #16]
    c9d8:	2500      	movs	r5, #0
    c9da:	9503      	str	r5, [sp, #12]
    c9dc:	9002      	str	r0, [sp, #8]
    c9de:	9301      	str	r3, [sp, #4]
    c9e0:	9300      	str	r3, [sp, #0]
    c9e2:	2000      	movs	r0, #0
    c9e4:	4d0a      	ldr	r5, [pc, #40]	; (ca10 <macAckOnlyDataCallback+0x9c>)
    c9e6:	47a8      	blx	r5
			}
		}
#endif
		MiMem_Free((uint8_t *)dataFramePtr);
    c9e8:	0020      	movs	r0, r4
    c9ea:	4b0a      	ldr	r3, [pc, #40]	; (ca14 <macAckOnlyDataCallback+0xa0>)
    c9ec:	4798      	blx	r3
	}
}
    c9ee:	b007      	add	sp, #28
    c9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9f2:	46c0      	nop			; (mov r8, r8)
    c9f4:	20001f58 	.word	0x20001f58
    c9f8:	0000cdc9 	.word	0x0000cdc9
    c9fc:	0000b44d 	.word	0x0000b44d
    ca00:	0000cb95 	.word	0x0000cb95
    ca04:	20001f84 	.word	0x20001f84
    ca08:	20001f94 	.word	0x20001f94
    ca0c:	0000b4a5 	.word	0x0000b4a5
    ca10:	0000ba39 	.word	0x0000ba39
    ca14:	0000cc51 	.word	0x0000cc51

0000ca18 <appAckWaitDataCallback>:

#if defined(PROTOCOL_STAR)
void appAckWaitDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    ca18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca1a:	46d6      	mov	lr, sl
    ca1c:	464f      	mov	r7, r9
    ca1e:	4646      	mov	r6, r8
    ca20:	b5c0      	push	{r6, r7, lr}
    ca22:	b086      	sub	sp, #24
    ca24:	4681      	mov	r9, r0
    ca26:	4688      	mov	r8, r1
    ca28:	0016      	movs	r6, r2
	if (PAN_COORD == role)
    ca2a:	4b3b      	ldr	r3, [pc, #236]	; (cb18 <appAckWaitDataCallback+0x100>)
    ca2c:	781b      	ldrb	r3, [r3, #0]
    ca2e:	2b01      	cmp	r3, #1
    ca30:	d008      	beq.n	ca44 <appAckWaitDataCallback+0x2c>
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
			}
		}
	}
	else if (SUCCESS != status)
    ca32:	2900      	cmp	r1, #0
    ca34:	d069      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
	{
		uint8_t loopIndex;
		P2PStarDataFrame_t *dataFramePtr = NULL;
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    ca36:	4b39      	ldr	r3, [pc, #228]	; (cb1c <appAckWaitDataCallback+0x104>)
    ca38:	7a1b      	ldrb	r3, [r3, #8]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d065      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
    ca3e:	2400      	movs	r4, #0
		{
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    ca40:	4f37      	ldr	r7, [pc, #220]	; (cb20 <appAckWaitDataCallback+0x108>)
    ca42:	e04c      	b.n	cade <appAckWaitDataCallback+0xc6>
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    ca44:	4b35      	ldr	r3, [pc, #212]	; (cb1c <appAckWaitDataCallback+0x104>)
    ca46:	7a1b      	ldrb	r3, [r3, #8]
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d05e      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
    ca4c:	2400      	movs	r4, #0
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    ca4e:	4b34      	ldr	r3, [pc, #208]	; (cb20 <appAckWaitDataCallback+0x108>)
    ca50:	4699      	mov	r9, r3
    ca52:	e02d      	b.n	cab0 <appAckWaitDataCallback+0x98>
				if (SUCCESS == status)
    ca54:	4643      	mov	r3, r8
    ca56:	2b00      	cmp	r3, #0
    ca58:	d121      	bne.n	ca9e <appAckWaitDataCallback+0x86>
					uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    ca5a:	4b32      	ldr	r3, [pc, #200]	; (cb24 <appAckWaitDataCallback+0x10c>)
    ca5c:	4798      	blx	r3
    ca5e:	4682      	mov	sl, r0
					if (0xFF != ed_index)
    ca60:	28ff      	cmp	r0, #255	; 0xff
    ca62:	d01c      	beq.n	ca9e <appAckWaitDataCallback+0x86>
						dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    ca64:	2001      	movs	r0, #1
    ca66:	4b30      	ldr	r3, [pc, #192]	; (cb28 <appAckWaitDataCallback+0x110>)
    ca68:	4798      	blx	r3
						if (NULL == dataPtr)
    ca6a:	2800      	cmp	r0, #0
    ca6c:	d04d      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
						dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    ca6e:	23da      	movs	r3, #218	; 0xda
    ca70:	7003      	strb	r3, [r0, #0]
						frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    ca72:	4b2e      	ldr	r3, [pc, #184]	; (cb2c <appAckWaitDataCallback+0x114>)
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	4652      	mov	r2, sl
    ca78:	0112      	lsls	r2, r2, #4
    ca7a:	681b      	ldr	r3, [r3, #0]
    ca7c:	189a      	adds	r2, r3, r2
    ca7e:	1d17      	adds	r7, r2, #4
    ca80:	4b2b      	ldr	r3, [pc, #172]	; (cb30 <appAckWaitDataCallback+0x118>)
    ca82:	8819      	ldrh	r1, [r3, #0]
    ca84:	4b2b      	ldr	r3, [pc, #172]	; (cb34 <appAckWaitDataCallback+0x11c>)
    ca86:	9305      	str	r3, [sp, #20]
    ca88:	2301      	movs	r3, #1
    ca8a:	9304      	str	r3, [sp, #16]
    ca8c:	2200      	movs	r2, #0
    ca8e:	9203      	str	r2, [sp, #12]
    ca90:	9002      	str	r0, [sp, #8]
    ca92:	9301      	str	r3, [sp, #4]
    ca94:	9300      	str	r3, [sp, #0]
    ca96:	003a      	movs	r2, r7
    ca98:	2000      	movs	r0, #0
    ca9a:	4f27      	ldr	r7, [pc, #156]	; (cb38 <appAckWaitDataCallback+0x120>)
    ca9c:	47b8      	blx	r7
				MiMem_Free(dataFramePtr);
    ca9e:	0028      	movs	r0, r5
    caa0:	4b26      	ldr	r3, [pc, #152]	; (cb3c <appAckWaitDataCallback+0x124>)
    caa2:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    caa4:	3401      	adds	r4, #1
    caa6:	b2e4      	uxtb	r4, r4
    caa8:	4b1c      	ldr	r3, [pc, #112]	; (cb1c <appAckWaitDataCallback+0x104>)
    caaa:	7a1b      	ldrb	r3, [r3, #8]
    caac:	42a3      	cmp	r3, r4
    caae:	d92c      	bls.n	cb0a <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cab0:	2100      	movs	r1, #0
    cab2:	481a      	ldr	r0, [pc, #104]	; (cb1c <appAckWaitDataCallback+0x104>)
    cab4:	47c8      	blx	r9
    cab6:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    cab8:	d027      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
			if(msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    caba:	3016      	adds	r0, #22
    cabc:	42b0      	cmp	r0, r6
    cabe:	d0c9      	beq.n	ca54 <appAckWaitDataCallback+0x3c>
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    cac0:	0029      	movs	r1, r5
    cac2:	4816      	ldr	r0, [pc, #88]	; (cb1c <appAckWaitDataCallback+0x104>)
    cac4:	4b1e      	ldr	r3, [pc, #120]	; (cb40 <appAckWaitDataCallback+0x128>)
    cac6:	4798      	blx	r3
    cac8:	e7ec      	b.n	caa4 <appAckWaitDataCallback+0x8c>
				}
				MiMem_Free((uint8_t *)dataFramePtr);
			}
			else
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    caca:	0029      	movs	r1, r5
    cacc:	4813      	ldr	r0, [pc, #76]	; (cb1c <appAckWaitDataCallback+0x104>)
    cace:	4b1c      	ldr	r3, [pc, #112]	; (cb40 <appAckWaitDataCallback+0x128>)
    cad0:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    cad2:	3401      	adds	r4, #1
    cad4:	b2e4      	uxtb	r4, r4
    cad6:	4b11      	ldr	r3, [pc, #68]	; (cb1c <appAckWaitDataCallback+0x104>)
    cad8:	7a1b      	ldrb	r3, [r3, #8]
    cada:	42a3      	cmp	r3, r4
    cadc:	d915      	bls.n	cb0a <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cade:	2100      	movs	r1, #0
    cae0:	480e      	ldr	r0, [pc, #56]	; (cb1c <appAckWaitDataCallback+0x104>)
    cae2:	47b8      	blx	r7
    cae4:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    cae6:	d010      	beq.n	cb0a <appAckWaitDataCallback+0xf2>
			if(handle == dataFramePtr->dataFrame.msghandle && msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    cae8:	7d00      	ldrb	r0, [r0, #20]
    caea:	4548      	cmp	r0, r9
    caec:	d1ed      	bne.n	caca <appAckWaitDataCallback+0xb2>
    caee:	002b      	movs	r3, r5
    caf0:	3316      	adds	r3, #22
    caf2:	429e      	cmp	r6, r3
    caf4:	d1e9      	bne.n	caca <appAckWaitDataCallback+0xb2>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    caf6:	686b      	ldr	r3, [r5, #4]
				if (NULL != callback)
    caf8:	2b00      	cmp	r3, #0
    cafa:	d002      	beq.n	cb02 <appAckWaitDataCallback+0xea>
					callback(handle, status, msgPointer);
    cafc:	0032      	movs	r2, r6
    cafe:	4641      	mov	r1, r8
    cb00:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    cb02:	0028      	movs	r0, r5
    cb04:	4b0d      	ldr	r3, [pc, #52]	; (cb3c <appAckWaitDataCallback+0x124>)
    cb06:	4798      	blx	r3
			{
    cb08:	e7e3      	b.n	cad2 <appAckWaitDataCallback+0xba>
			}
		}
	}
}
    cb0a:	b006      	add	sp, #24
    cb0c:	bc1c      	pop	{r2, r3, r4}
    cb0e:	4690      	mov	r8, r2
    cb10:	4699      	mov	r9, r3
    cb12:	46a2      	mov	sl, r4
    cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb16:	46c0      	nop			; (mov r8, r8)
    cb18:	20002074 	.word	0x20002074
    cb1c:	20001ffc 	.word	0x20001ffc
    cb20:	0000cdc9 	.word	0x0000cdc9
    cb24:	0000b44d 	.word	0x0000b44d
    cb28:	0000cb95 	.word	0x0000cb95
    cb2c:	20001f84 	.word	0x20001f84
    cb30:	20001f94 	.word	0x20001f94
    cb34:	0000b4a5 	.word	0x0000b4a5
    cb38:	0000ba39 	.word	0x0000ba39
    cb3c:	0000cc51 	.word	0x0000cc51
    cb40:	0000cd91 	.word	0x0000cd91

0000cb44 <MiApp_SubscribeLinkFailureCallback>:
    if (NULL != callback)
    cb44:	2800      	cmp	r0, #0
    cb46:	d003      	beq.n	cb50 <MiApp_SubscribeLinkFailureCallback+0xc>
        linkFailureCallback = callback;
    cb48:	4b02      	ldr	r3, [pc, #8]	; (cb54 <MiApp_SubscribeLinkFailureCallback+0x10>)
    cb4a:	6018      	str	r0, [r3, #0]
        return true;
    cb4c:	2001      	movs	r0, #1
}
    cb4e:	4770      	bx	lr
    return false;
    cb50:	2000      	movs	r0, #0
    cb52:	e7fc      	b.n	cb4e <MiApp_SubscribeLinkFailureCallback+0xa>
    cb54:	20002088 	.word	0x20002088

0000cb58 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    cb58:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    cb5a:	4a0b      	ldr	r2, [pc, #44]	; (cb88 <MiMem_Init+0x30>)
    cb5c:	1e50      	subs	r0, r2, #1
    cb5e:	2403      	movs	r4, #3
    cb60:	43a0      	bics	r0, r4
    cb62:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    cb64:	4b09      	ldr	r3, [pc, #36]	; (cb8c <MiMem_Init+0x34>)
    cb66:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    cb68:	4253      	negs	r3, r2
    cb6a:	43a3      	bics	r3, r4
    cb6c:	24c0      	movs	r4, #192	; 0xc0
    cb6e:	0164      	lsls	r4, r4, #5
    cb70:	46a4      	mov	ip, r4
    cb72:	4462      	add	r2, ip
    cb74:	189b      	adds	r3, r3, r2
    cb76:	4a06      	ldr	r2, [pc, #24]	; (cb90 <MiMem_Init+0x38>)
    cb78:	6013      	str	r3, [r2, #0]
    cb7a:	60c3      	str	r3, [r0, #12]
	base->free = true;
    cb7c:	2301      	movs	r3, #1
    cb7e:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    cb80:	2300      	movs	r3, #0
    cb82:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    cb84:	6083      	str	r3, [r0, #8]
}
    cb86:	bd10      	pop	{r4, pc}
    cb88:	20000440 	.word	0x20000440
    cb8c:	2000043c 	.word	0x2000043c
    cb90:	20001c40 	.word	0x20001c40

0000cb94 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    cb94:	b570      	push	{r4, r5, r6, lr}
    cb96:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    cb98:	4b29      	ldr	r3, [pc, #164]	; (cc40 <MiMem_Alloc+0xac>)
    cb9a:	681b      	ldr	r3, [r3, #0]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d012      	beq.n	cbc6 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    cba0:	2d00      	cmp	r5, #0
    cba2:	d047      	beq.n	cc34 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    cba4:	0029      	movs	r1, r5
    cba6:	310f      	adds	r1, #15
    cba8:	2303      	movs	r3, #3
    cbaa:	4399      	bics	r1, r3
    cbac:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    cbae:	4b25      	ldr	r3, [pc, #148]	; (cc44 <MiMem_Alloc+0xb0>)
    cbb0:	6818      	ldr	r0, [r3, #0]
    cbb2:	4281      	cmp	r1, r0
    cbb4:	d840      	bhi.n	cc38 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    cbb6:	4b22      	ldr	r3, [pc, #136]	; (cc40 <MiMem_Alloc+0xac>)
    cbb8:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    cbba:	2b00      	cmp	r3, #0
    cbbc:	d03e      	beq.n	cc3c <MiMem_Alloc+0xa8>
    cbbe:	2600      	movs	r6, #0
    cbc0:	2401      	movs	r4, #1
    cbc2:	4264      	negs	r4, r4
    cbc4:	e005      	b.n	cbd2 <MiMem_Alloc+0x3e>
		MiMem_Init();
    cbc6:	4b20      	ldr	r3, [pc, #128]	; (cc48 <MiMem_Alloc+0xb4>)
    cbc8:	4798      	blx	r3
    cbca:	e7e9      	b.n	cba0 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    cbcc:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d00a      	beq.n	cbe8 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    cbd2:	7b1a      	ldrb	r2, [r3, #12]
    cbd4:	2a00      	cmp	r2, #0
    cbd6:	d0f9      	beq.n	cbcc <MiMem_Alloc+0x38>
    cbd8:	689a      	ldr	r2, [r3, #8]
    cbda:	4291      	cmp	r1, r2
    cbdc:	d8f6      	bhi.n	cbcc <MiMem_Alloc+0x38>
    cbde:	42a2      	cmp	r2, r4
    cbe0:	d2f4      	bcs.n	cbcc <MiMem_Alloc+0x38>
    cbe2:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    cbe4:	0014      	movs	r4, r2
    cbe6:	e7f1      	b.n	cbcc <MiMem_Alloc+0x38>
    cbe8:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    cbea:	2e00      	cmp	r6, #0
    cbec:	d012      	beq.n	cc14 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    cbee:	68b3      	ldr	r3, [r6, #8]
    cbf0:	1a5b      	subs	r3, r3, r1
    cbf2:	2b14      	cmp	r3, #20
    cbf4:	d810      	bhi.n	cc18 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    cbf6:	2300      	movs	r3, #0
    cbf8:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    cbfa:	68b3      	ldr	r3, [r6, #8]
    cbfc:	1ac0      	subs	r0, r0, r3
    cbfe:	4b11      	ldr	r3, [pc, #68]	; (cc44 <MiMem_Alloc+0xb0>)
    cc00:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    cc02:	0034      	movs	r4, r6
    cc04:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    cc06:	2c00      	cmp	r4, #0
    cc08:	d004      	beq.n	cc14 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    cc0a:	002a      	movs	r2, r5
    cc0c:	2100      	movs	r1, #0
    cc0e:	0020      	movs	r0, r4
    cc10:	4b0e      	ldr	r3, [pc, #56]	; (cc4c <MiMem_Alloc+0xb8>)
    cc12:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    cc14:	0020      	movs	r0, r4
    cc16:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    cc18:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    cc1a:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    cc1c:	6833      	ldr	r3, [r6, #0]
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d000      	beq.n	cc24 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    cc22:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    cc24:	6833      	ldr	r3, [r6, #0]
    cc26:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    cc28:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    cc2a:	2301      	movs	r3, #1
    cc2c:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    cc2e:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    cc30:	60b1      	str	r1, [r6, #8]
    cc32:	e7e0      	b.n	cbf6 <MiMem_Alloc+0x62>
    cc34:	2400      	movs	r4, #0
    cc36:	e7ed      	b.n	cc14 <MiMem_Alloc+0x80>
    cc38:	2400      	movs	r4, #0
    cc3a:	e7eb      	b.n	cc14 <MiMem_Alloc+0x80>
			while (blockPtr)
    cc3c:	2400      	movs	r4, #0
    cc3e:	e7e9      	b.n	cc14 <MiMem_Alloc+0x80>
    cc40:	2000043c 	.word	0x2000043c
    cc44:	20001c40 	.word	0x20001c40
    cc48:	0000cb59 	.word	0x0000cb59
    cc4c:	0000f98d 	.word	0x0000f98d

0000cc50 <MiMem_Free>:
	Block_t* blockPtr = base;
    cc50:	4b1c      	ldr	r3, [pc, #112]	; (ccc4 <MiMem_Free+0x74>)
    cc52:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    cc54:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    cc56:	2b00      	cmp	r3, #0
    cc58:	d030      	beq.n	ccbc <MiMem_Free+0x6c>
    cc5a:	4283      	cmp	r3, r0
    cc5c:	d02f      	beq.n	ccbe <MiMem_Free+0x6e>
    cc5e:	681b      	ldr	r3, [r3, #0]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d02b      	beq.n	ccbc <MiMem_Free+0x6c>
    cc64:	4298      	cmp	r0, r3
    cc66:	d1fa      	bne.n	cc5e <MiMem_Free+0xe>
		blockPtr->free = true;
    cc68:	2301      	movs	r3, #1
    cc6a:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    cc6c:	6881      	ldr	r1, [r0, #8]
    cc6e:	4a16      	ldr	r2, [pc, #88]	; (ccc8 <MiMem_Free+0x78>)
    cc70:	6813      	ldr	r3, [r2, #0]
    cc72:	185b      	adds	r3, r3, r1
    cc74:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    cc76:	6843      	ldr	r3, [r0, #4]
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d00f      	beq.n	cc9c <MiMem_Free+0x4c>
    cc7c:	7b1a      	ldrb	r2, [r3, #12]
    cc7e:	2a00      	cmp	r2, #0
    cc80:	d00c      	beq.n	cc9c <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    cc82:	689a      	ldr	r2, [r3, #8]
    cc84:	4694      	mov	ip, r2
    cc86:	4461      	add	r1, ip
    cc88:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    cc8a:	6803      	ldr	r3, [r0, #0]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d001      	beq.n	cc94 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    cc90:	6842      	ldr	r2, [r0, #4]
    cc92:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    cc94:	6843      	ldr	r3, [r0, #4]
    cc96:	6802      	ldr	r2, [r0, #0]
    cc98:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    cc9a:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    cc9c:	6803      	ldr	r3, [r0, #0]
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d00c      	beq.n	ccbc <MiMem_Free+0x6c>
    cca2:	7b1a      	ldrb	r2, [r3, #12]
    cca4:	2a00      	cmp	r2, #0
    cca6:	d009      	beq.n	ccbc <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    cca8:	6882      	ldr	r2, [r0, #8]
    ccaa:	6899      	ldr	r1, [r3, #8]
    ccac:	468c      	mov	ip, r1
    ccae:	4462      	add	r2, ip
    ccb0:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    ccb2:	681b      	ldr	r3, [r3, #0]
    ccb4:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d000      	beq.n	ccbc <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    ccba:	6058      	str	r0, [r3, #4]
}
    ccbc:	4770      	bx	lr
	Block_t* blockPtr = base;
    ccbe:	0018      	movs	r0, r3
    ccc0:	e7d2      	b.n	cc68 <MiMem_Free+0x18>
    ccc2:	46c0      	nop			; (mov r8, r8)
    ccc4:	2000043c 	.word	0x2000043c
    ccc8:	20001c40 	.word	0x20001c40

0000cccc <MiMem_PercentageOfFreeBuffers>:
}

uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    cccc:	b510      	push	{r4, lr}
	return (totalFreeBytesRemaining * 100) / HEAP_SIZE;;
    ccce:	4b05      	ldr	r3, [pc, #20]	; (cce4 <MiMem_PercentageOfFreeBuffers+0x18>)
    ccd0:	6818      	ldr	r0, [r3, #0]
    ccd2:	2364      	movs	r3, #100	; 0x64
    ccd4:	4358      	muls	r0, r3
    ccd6:	21c0      	movs	r1, #192	; 0xc0
    ccd8:	0149      	lsls	r1, r1, #5
    ccda:	4b03      	ldr	r3, [pc, #12]	; (cce8 <MiMem_PercentageOfFreeBuffers+0x1c>)
    ccdc:	4798      	blx	r3
    ccde:	b2c0      	uxtb	r0, r0
}
    cce0:	bd10      	pop	{r4, pc}
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	20001c40 	.word	0x20001c40
    cce8:	0000e991 	.word	0x0000e991

0000ccec <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    ccec:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccee:	46c6      	mov	lr, r8
    ccf0:	b500      	push	{lr}
    ccf2:	0007      	movs	r7, r0
    ccf4:	4688      	mov	r8, r1
    ccf6:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    ccf8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ccfa:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    ccfe:	2200      	movs	r2, #0
    cd00:	4b1f      	ldr	r3, [pc, #124]	; (cd80 <miQueueReadOrRemove+0x94>)
    cd02:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    cd04:	7a03      	ldrb	r3, [r0, #8]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d037      	beq.n	cd7a <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    cd0a:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    cd0c:	2d00      	cmp	r5, #0
    cd0e:	d019      	beq.n	cd44 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    cd10:	2c00      	cmp	r4, #0
    cd12:	d00c      	beq.n	cd2e <miQueueReadOrRemove+0x42>
    cd14:	0026      	movs	r6, r4
    cd16:	e000      	b.n	cd1a <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    cd18:	001c      	movs	r4, r3
				match = search->criteria_func(
    cd1a:	6869      	ldr	r1, [r5, #4]
    cd1c:	6860      	ldr	r0, [r4, #4]
    cd1e:	682b      	ldr	r3, [r5, #0]
    cd20:	4798      	blx	r3
				if (match) {
    cd22:	2800      	cmp	r0, #0
    cd24:	d10f      	bne.n	cd46 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    cd26:	6823      	ldr	r3, [r4, #0]
    cd28:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d1f4      	bne.n	cd18 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    cd2e:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    cd30:	2201      	movs	r2, #1
    cd32:	4b13      	ldr	r3, [pc, #76]	; (cd80 <miQueueReadOrRemove+0x94>)
    cd34:	701a      	strb	r2, [r3, #0]
    cd36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd3a:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    cd3c:	0020      	movs	r0, r4
    cd3e:	bc04      	pop	{r2}
    cd40:	4690      	mov	r8, r2
    cd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    cd44:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    cd46:	2c00      	cmp	r4, #0
    cd48:	d0f2      	beq.n	cd30 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    cd4a:	4643      	mov	r3, r8
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	d1ef      	bne.n	cd30 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    cd50:	683b      	ldr	r3, [r7, #0]
    cd52:	429c      	cmp	r4, r3
    cd54:	d00c      	beq.n	cd70 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    cd56:	6823      	ldr	r3, [r4, #0]
    cd58:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    cd5a:	687b      	ldr	r3, [r7, #4]
    cd5c:	429c      	cmp	r4, r3
    cd5e:	d00a      	beq.n	cd76 <miQueueReadOrRemove+0x8a>
				q->size--;
    cd60:	7a3b      	ldrb	r3, [r7, #8]
    cd62:	3b01      	subs	r3, #1
    cd64:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    cd66:	683b      	ldr	r3, [r7, #0]
    cd68:	2b00      	cmp	r3, #0
    cd6a:	d1e1      	bne.n	cd30 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    cd6c:	607b      	str	r3, [r7, #4]
    cd6e:	e7df      	b.n	cd30 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    cd70:	6823      	ldr	r3, [r4, #0]
    cd72:	603b      	str	r3, [r7, #0]
    cd74:	e7f1      	b.n	cd5a <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    cd76:	607e      	str	r6, [r7, #4]
    cd78:	e7f2      	b.n	cd60 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    cd7a:	2400      	movs	r4, #0
    cd7c:	e7d8      	b.n	cd30 <miQueueReadOrRemove+0x44>
    cd7e:	46c0      	nop			; (mov r8, r8)
    cd80:	20000008 	.word	0x20000008

0000cd84 <miQueueInit>:
	q->head = NULL;
    cd84:	2300      	movs	r3, #0
    cd86:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    cd88:	6043      	str	r3, [r0, #4]
	q->size = 0;
    cd8a:	7203      	strb	r3, [r0, #8]
}
    cd8c:	4770      	bx	lr
    cd8e:	Address 0x0000cd8e is out of bounds.


0000cd90 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    cd90:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cd92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cd96:	2200      	movs	r2, #0
    cd98:	4b0a      	ldr	r3, [pc, #40]	; (cdc4 <miQueueAppend+0x34>)
    cd9a:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    cd9c:	7a03      	ldrb	r3, [r0, #8]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d00e      	beq.n	cdc0 <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    cda2:	6843      	ldr	r3, [r0, #4]
    cda4:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    cda6:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    cda8:	2300      	movs	r3, #0
    cdaa:	600b      	str	r3, [r1, #0]
	q->size++;
    cdac:	7a03      	ldrb	r3, [r0, #8]
    cdae:	3301      	adds	r3, #1
    cdb0:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    cdb2:	2201      	movs	r2, #1
    cdb4:	4b03      	ldr	r3, [pc, #12]	; (cdc4 <miQueueAppend+0x34>)
    cdb6:	701a      	strb	r2, [r3, #0]
    cdb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cdbc:	b662      	cpsie	i
} /* miQueueAppend */
    cdbe:	4770      	bx	lr
		q->head = bufPtr;
    cdc0:	6001      	str	r1, [r0, #0]
    cdc2:	e7f0      	b.n	cda6 <miQueueAppend+0x16>
    cdc4:	20000008 	.word	0x20000008

0000cdc8 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    cdc8:	b510      	push	{r4, lr}
    cdca:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    cdcc:	2100      	movs	r1, #0
    cdce:	4b01      	ldr	r3, [pc, #4]	; (cdd4 <miQueueRemove+0xc>)
    cdd0:	4798      	blx	r3
}
    cdd2:	bd10      	pop	{r4, pc}
    cdd4:	0000cced 	.word	0x0000cced

0000cdd8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    cdd8:	b530      	push	{r4, r5, lr}
	if (timers) {
    cdda:	4b14      	ldr	r3, [pc, #80]	; (ce2c <placeTimer+0x54>)
    cddc:	681d      	ldr	r5, [r3, #0]
    cdde:	2d00      	cmp	r5, #0
    cde0:	d01c      	beq.n	ce1c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    cde2:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    cde4:	6869      	ldr	r1, [r5, #4]
    cde6:	428a      	cmp	r2, r1
    cde8:	d309      	bcc.n	cdfe <placeTimer+0x26>
    cdea:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    cdec:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    cdee:	6823      	ldr	r3, [r4, #0]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d008      	beq.n	ce06 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    cdf4:	6859      	ldr	r1, [r3, #4]
    cdf6:	4291      	cmp	r1, r2
    cdf8:	d803      	bhi.n	ce02 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    cdfa:	001c      	movs	r4, r3
    cdfc:	e7f6      	b.n	cdec <placeTimer+0x14>
    cdfe:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    ce00:	2400      	movs	r4, #0
				t->timeout -= timeout;
    ce02:	1a89      	subs	r1, r1, r2
    ce04:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    ce06:	6042      	str	r2, [r0, #4]

		if (prev) {
    ce08:	2c00      	cmp	r4, #0
    ce0a:	d003      	beq.n	ce14 <placeTimer+0x3c>
			timer->next = prev->next;
    ce0c:	6823      	ldr	r3, [r4, #0]
    ce0e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    ce10:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    ce12:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    ce14:	6005      	str	r5, [r0, #0]
			timers = timer;
    ce16:	4b05      	ldr	r3, [pc, #20]	; (ce2c <placeTimer+0x54>)
    ce18:	6018      	str	r0, [r3, #0]
    ce1a:	e7fa      	b.n	ce12 <placeTimer+0x3a>
		timer->next = NULL;
    ce1c:	2300      	movs	r3, #0
    ce1e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    ce20:	6883      	ldr	r3, [r0, #8]
    ce22:	6043      	str	r3, [r0, #4]
		timers = timer;
    ce24:	4b01      	ldr	r3, [pc, #4]	; (ce2c <placeTimer+0x54>)
    ce26:	6018      	str	r0, [r3, #0]
}
    ce28:	e7f3      	b.n	ce12 <placeTimer+0x3a>
    ce2a:	46c0      	nop			; (mov r8, r8)
    ce2c:	20001c44 	.word	0x20001c44

0000ce30 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    ce30:	4a06      	ldr	r2, [pc, #24]	; (ce4c <SYS_HwOverflow_Cb+0x1c>)
    ce32:	7813      	ldrb	r3, [r2, #0]
    ce34:	3301      	adds	r3, #1
    ce36:	b2db      	uxtb	r3, r3
    ce38:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    ce3a:	7813      	ldrb	r3, [r2, #0]
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d104      	bne.n	ce4a <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    ce40:	4a03      	ldr	r2, [pc, #12]	; (ce50 <SYS_HwOverflow_Cb+0x20>)
    ce42:	7813      	ldrb	r3, [r2, #0]
    ce44:	3301      	adds	r3, #1
    ce46:	b2db      	uxtb	r3, r3
    ce48:	7013      	strb	r3, [r2, #0]
	}
}
    ce4a:	4770      	bx	lr
    ce4c:	200020a4 	.word	0x200020a4
    ce50:	200020a5 	.word	0x200020a5

0000ce54 <SYS_HwExpiry_Cb>:
{
    ce54:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    ce56:	4a04      	ldr	r2, [pc, #16]	; (ce68 <SYS_HwExpiry_Cb+0x14>)
    ce58:	6813      	ldr	r3, [r2, #0]
    ce5a:	3301      	adds	r3, #1
    ce5c:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    ce5e:	4803      	ldr	r0, [pc, #12]	; (ce6c <SYS_HwExpiry_Cb+0x18>)
    ce60:	4b03      	ldr	r3, [pc, #12]	; (ce70 <SYS_HwExpiry_Cb+0x1c>)
    ce62:	4798      	blx	r3
}
    ce64:	bd10      	pop	{r4, pc}
    ce66:	46c0      	nop			; (mov r8, r8)
    ce68:	200020a0 	.word	0x200020a0
    ce6c:	00002710 	.word	0x00002710
    ce70:	0000e889 	.word	0x0000e889

0000ce74 <SYS_TimerInit>:
{
    ce74:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    ce76:	2400      	movs	r4, #0
    ce78:	4b09      	ldr	r3, [pc, #36]	; (cea0 <SYS_TimerInit+0x2c>)
    ce7a:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    ce7c:	4b09      	ldr	r3, [pc, #36]	; (cea4 <SYS_TimerInit+0x30>)
    ce7e:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    ce80:	4b09      	ldr	r3, [pc, #36]	; (cea8 <SYS_TimerInit+0x34>)
    ce82:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    ce84:	4809      	ldr	r0, [pc, #36]	; (ceac <SYS_TimerInit+0x38>)
    ce86:	4b0a      	ldr	r3, [pc, #40]	; (ceb0 <SYS_TimerInit+0x3c>)
    ce88:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    ce8a:	480a      	ldr	r0, [pc, #40]	; (ceb4 <SYS_TimerInit+0x40>)
    ce8c:	4b0a      	ldr	r3, [pc, #40]	; (ceb8 <SYS_TimerInit+0x44>)
    ce8e:	4798      	blx	r3
	common_tc_init();
    ce90:	4b0a      	ldr	r3, [pc, #40]	; (cebc <SYS_TimerInit+0x48>)
    ce92:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    ce94:	480a      	ldr	r0, [pc, #40]	; (cec0 <SYS_TimerInit+0x4c>)
    ce96:	4b0b      	ldr	r3, [pc, #44]	; (cec4 <SYS_TimerInit+0x50>)
    ce98:	4798      	blx	r3
	timers = NULL;
    ce9a:	4b0b      	ldr	r3, [pc, #44]	; (cec8 <SYS_TimerInit+0x54>)
    ce9c:	601c      	str	r4, [r3, #0]
}
    ce9e:	bd10      	pop	{r4, pc}
    cea0:	200020a0 	.word	0x200020a0
    cea4:	200020a4 	.word	0x200020a4
    cea8:	200020a5 	.word	0x200020a5
    ceac:	0000ce31 	.word	0x0000ce31
    ceb0:	0000e979 	.word	0x0000e979
    ceb4:	0000ce55 	.word	0x0000ce55
    ceb8:	0000e985 	.word	0x0000e985
    cebc:	0000e8f5 	.word	0x0000e8f5
    cec0:	00002710 	.word	0x00002710
    cec4:	0000e889 	.word	0x0000e889
    cec8:	20001c44 	.word	0x20001c44

0000cecc <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    cecc:	4b0e      	ldr	r3, [pc, #56]	; (cf08 <SYS_TimerStop+0x3c>)
    cece:	681a      	ldr	r2, [r3, #0]
    ced0:	2a00      	cmp	r2, #0
    ced2:	d014      	beq.n	cefe <SYS_TimerStop+0x32>
		if (t == timer) {
    ced4:	4282      	cmp	r2, r0
    ced6:	d013      	beq.n	cf00 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ced8:	6813      	ldr	r3, [r2, #0]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d00f      	beq.n	cefe <SYS_TimerStop+0x32>
		if (t == timer) {
    cede:	4298      	cmp	r0, r3
    cee0:	d001      	beq.n	cee6 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    cee2:	001a      	movs	r2, r3
    cee4:	e7f8      	b.n	ced8 <SYS_TimerStop+0xc>
			if (prev) {
    cee6:	2a00      	cmp	r2, #0
    cee8:	d00a      	beq.n	cf00 <SYS_TimerStop+0x34>
				prev->next = t->next;
    ceea:	6803      	ldr	r3, [r0, #0]
    ceec:	6013      	str	r3, [r2, #0]
			if (t->next) {
    ceee:	6803      	ldr	r3, [r0, #0]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d004      	beq.n	cefe <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    cef4:	6842      	ldr	r2, [r0, #4]
    cef6:	6859      	ldr	r1, [r3, #4]
    cef8:	468c      	mov	ip, r1
    cefa:	4462      	add	r2, ip
    cefc:	605a      	str	r2, [r3, #4]
}
    cefe:	4770      	bx	lr
				timers = t->next;
    cf00:	4b01      	ldr	r3, [pc, #4]	; (cf08 <SYS_TimerStop+0x3c>)
    cf02:	6802      	ldr	r2, [r0, #0]
    cf04:	601a      	str	r2, [r3, #0]
    cf06:	e7f2      	b.n	ceee <SYS_TimerStop+0x22>
    cf08:	20001c44 	.word	0x20001c44

0000cf0c <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    cf0c:	4b09      	ldr	r3, [pc, #36]	; (cf34 <SYS_TimerStarted+0x28>)
    cf0e:	681b      	ldr	r3, [r3, #0]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d00a      	beq.n	cf2a <SYS_TimerStarted+0x1e>
		if (t == timer) {
    cf14:	4283      	cmp	r3, r0
    cf16:	d00a      	beq.n	cf2e <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    cf18:	681b      	ldr	r3, [r3, #0]
    cf1a:	2b00      	cmp	r3, #0
    cf1c:	d003      	beq.n	cf26 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    cf1e:	4298      	cmp	r0, r3
    cf20:	d1fa      	bne.n	cf18 <SYS_TimerStarted+0xc>
			return true;
    cf22:	2001      	movs	r0, #1
    cf24:	e000      	b.n	cf28 <SYS_TimerStarted+0x1c>
	return false;
    cf26:	2000      	movs	r0, #0
}
    cf28:	4770      	bx	lr
	return false;
    cf2a:	2000      	movs	r0, #0
    cf2c:	e7fc      	b.n	cf28 <SYS_TimerStarted+0x1c>
			return true;
    cf2e:	2001      	movs	r0, #1
    cf30:	e7fa      	b.n	cf28 <SYS_TimerStarted+0x1c>
    cf32:	46c0      	nop			; (mov r8, r8)
    cf34:	20001c44 	.word	0x20001c44

0000cf38 <SYS_TimerStart>:
{
    cf38:	b510      	push	{r4, lr}
    cf3a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    cf3c:	4b04      	ldr	r3, [pc, #16]	; (cf50 <SYS_TimerStart+0x18>)
    cf3e:	4798      	blx	r3
    cf40:	2800      	cmp	r0, #0
    cf42:	d000      	beq.n	cf46 <SYS_TimerStart+0xe>
}
    cf44:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    cf46:	0020      	movs	r0, r4
    cf48:	4b02      	ldr	r3, [pc, #8]	; (cf54 <SYS_TimerStart+0x1c>)
    cf4a:	4798      	blx	r3
}
    cf4c:	e7fa      	b.n	cf44 <SYS_TimerStart+0xc>
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	0000cf0d 	.word	0x0000cf0d
    cf54:	0000cdd9 	.word	0x0000cdd9

0000cf58 <SYS_TimerTaskHandler>:
{
    cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf5a:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    cf5c:	4b1d      	ldr	r3, [pc, #116]	; (cfd4 <SYS_TimerTaskHandler+0x7c>)
    cf5e:	681b      	ldr	r3, [r3, #0]
    cf60:	2b00      	cmp	r3, #0
    cf62:	d034      	beq.n	cfce <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cf64:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cf68:	4253      	negs	r3, r2
    cf6a:	4153      	adcs	r3, r2
    cf6c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cf6e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cf70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cf74:	2100      	movs	r1, #0
    cf76:	4b18      	ldr	r3, [pc, #96]	; (cfd8 <SYS_TimerTaskHandler+0x80>)
    cf78:	7019      	strb	r1, [r3, #0]
	return flags;
    cf7a:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    cf7c:	4a15      	ldr	r2, [pc, #84]	; (cfd4 <SYS_TimerTaskHandler+0x7c>)
    cf7e:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    cf80:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    cf82:	2800      	cmp	r0, #0
    cf84:	d005      	beq.n	cf92 <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    cf86:	3101      	adds	r1, #1
    cf88:	4a13      	ldr	r2, [pc, #76]	; (cfd8 <SYS_TimerTaskHandler+0x80>)
    cf8a:	7011      	strb	r1, [r2, #0]
    cf8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cf90:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    cf92:	009d      	lsls	r5, r3, #2
    cf94:	18ed      	adds	r5, r5, r3
    cf96:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    cf98:	4e10      	ldr	r6, [pc, #64]	; (cfdc <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    cf9a:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    cf9c:	e005      	b.n	cfaa <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    cf9e:	0020      	movs	r0, r4
    cfa0:	4b0f      	ldr	r3, [pc, #60]	; (cfe0 <SYS_TimerTaskHandler+0x88>)
    cfa2:	4798      	blx	r3
    cfa4:	e00d      	b.n	cfc2 <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    cfa6:	0020      	movs	r0, r4
    cfa8:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    cfaa:	6834      	ldr	r4, [r6, #0]
    cfac:	2c00      	cmp	r4, #0
    cfae:	d00e      	beq.n	cfce <SYS_TimerTaskHandler+0x76>
    cfb0:	6863      	ldr	r3, [r4, #4]
    cfb2:	429d      	cmp	r5, r3
    cfb4:	d309      	bcc.n	cfca <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    cfb6:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    cfb8:	6823      	ldr	r3, [r4, #0]
    cfba:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    cfbc:	7b23      	ldrb	r3, [r4, #12]
    cfbe:	2b01      	cmp	r3, #1
    cfc0:	d0ed      	beq.n	cf9e <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    cfc2:	6923      	ldr	r3, [r4, #16]
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d1ee      	bne.n	cfa6 <SYS_TimerTaskHandler+0x4e>
    cfc8:	e7ef      	b.n	cfaa <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    cfca:	1b5d      	subs	r5, r3, r5
    cfcc:	6065      	str	r5, [r4, #4]
}
    cfce:	b003      	add	sp, #12
    cfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfd2:	46c0      	nop			; (mov r8, r8)
    cfd4:	200020a0 	.word	0x200020a0
    cfd8:	20000008 	.word	0x20000008
    cfdc:	20001c44 	.word	0x20001c44
    cfe0:	0000cdd9 	.word	0x0000cdd9

0000cfe4 <MiWi_TickGet>:
{
    cfe4:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    cfe6:	4e0f      	ldr	r6, [pc, #60]	; (d024 <MiWi_TickGet+0x40>)
    cfe8:	7835      	ldrb	r5, [r6, #0]
    cfea:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    cfec:	4b0e      	ldr	r3, [pc, #56]	; (d028 <MiWi_TickGet+0x44>)
    cfee:	4798      	blx	r3
    cff0:	0004      	movs	r4, r0
	nop();
    cff2:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    cff4:	7833      	ldrb	r3, [r6, #0]
    cff6:	b2db      	uxtb	r3, r3
    cff8:	429d      	cmp	r5, r3
    cffa:	d004      	beq.n	d006 <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    cffc:	4b0a      	ldr	r3, [pc, #40]	; (d028 <MiWi_TickGet+0x44>)
    cffe:	4798      	blx	r3
    d000:	0c24      	lsrs	r4, r4, #16
    d002:	0424      	lsls	r4, r4, #16
    d004:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    d006:	4b07      	ldr	r3, [pc, #28]	; (d024 <MiWi_TickGet+0x40>)
    d008:	781b      	ldrb	r3, [r3, #0]
    d00a:	041b      	lsls	r3, r3, #16
    d00c:	4807      	ldr	r0, [pc, #28]	; (d02c <MiWi_TickGet+0x48>)
    d00e:	4004      	ands	r4, r0
    d010:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    d012:	4b07      	ldr	r3, [pc, #28]	; (d030 <MiWi_TickGet+0x4c>)
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	061b      	lsls	r3, r3, #24
    d018:	0224      	lsls	r4, r4, #8
    d01a:	0a24      	lsrs	r4, r4, #8
    d01c:	431c      	orrs	r4, r3
}
    d01e:	0020      	movs	r0, r4
    d020:	bd70      	pop	{r4, r5, r6, pc}
    d022:	46c0      	nop			; (mov r8, r8)
    d024:	200020a4 	.word	0x200020a4
    d028:	0000e83d 	.word	0x0000e83d
    d02c:	ff00ffff 	.word	0xff00ffff
    d030:	200020a5 	.word	0x200020a5

0000d034 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    d034:	4288      	cmp	r0, r1
    d036:	d802      	bhi.n	d03e <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    d038:	3801      	subs	r0, #1
    d03a:	1a40      	subs	r0, r0, r1
}
    d03c:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    d03e:	1a40      	subs	r0, r0, r1
    d040:	e7fc      	b.n	d03c <MiWi_TickGetDiff+0x8>
    d042:	Address 0x0000d042 is out of bounds.


0000d044 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d044:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d046:	4b01      	ldr	r3, [pc, #4]	; (d04c <tc_cca_callback+0x8>)
    d048:	4798      	blx	r3
}
    d04a:	bd10      	pop	{r4, pc}
    d04c:	0000e95d 	.word	0x0000e95d

0000d050 <tc_ovf_callback>:
{
    d050:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d052:	4b01      	ldr	r3, [pc, #4]	; (d058 <tc_ovf_callback+0x8>)
    d054:	4798      	blx	r3
}
    d056:	bd10      	pop	{r4, pc}
    d058:	0000e915 	.word	0x0000e915

0000d05c <tmr_read_count>:
{
    d05c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d05e:	4802      	ldr	r0, [pc, #8]	; (d068 <tmr_read_count+0xc>)
    d060:	4b02      	ldr	r3, [pc, #8]	; (d06c <tmr_read_count+0x10>)
    d062:	4798      	blx	r3
    d064:	b280      	uxth	r0, r0
}
    d066:	bd10      	pop	{r4, pc}
    d068:	200020e0 	.word	0x200020e0
    d06c:	0000828d 	.word	0x0000828d

0000d070 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d070:	4b03      	ldr	r3, [pc, #12]	; (d080 <tmr_disable_cc_interrupt+0x10>)
    d072:	2110      	movs	r1, #16
    d074:	681a      	ldr	r2, [r3, #0]
    d076:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d078:	7e5a      	ldrb	r2, [r3, #25]
    d07a:	438a      	bics	r2, r1
    d07c:	765a      	strb	r2, [r3, #25]
}
    d07e:	4770      	bx	lr
    d080:	200020e0 	.word	0x200020e0

0000d084 <tmr_enable_cc_interrupt>:
{
    d084:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d086:	4c0b      	ldr	r4, [pc, #44]	; (d0b4 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    d088:	2510      	movs	r5, #16
    d08a:	6823      	ldr	r3, [r4, #0]
    d08c:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d08e:	0018      	movs	r0, r3
    d090:	4b09      	ldr	r3, [pc, #36]	; (d0b8 <tmr_enable_cc_interrupt+0x34>)
    d092:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d094:	4b09      	ldr	r3, [pc, #36]	; (d0bc <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d096:	5c1b      	ldrb	r3, [r3, r0]
    d098:	221f      	movs	r2, #31
    d09a:	401a      	ands	r2, r3
    d09c:	2301      	movs	r3, #1
    d09e:	4093      	lsls	r3, r2
    d0a0:	4a07      	ldr	r2, [pc, #28]	; (d0c0 <tmr_enable_cc_interrupt+0x3c>)
    d0a2:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d0a4:	7e63      	ldrb	r3, [r4, #25]
    d0a6:	2210      	movs	r2, #16
    d0a8:	4313      	orrs	r3, r2
    d0aa:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d0ac:	6823      	ldr	r3, [r4, #0]
    d0ae:	725d      	strb	r5, [r3, #9]
}
    d0b0:	bd70      	pop	{r4, r5, r6, pc}
    d0b2:	46c0      	nop			; (mov r8, r8)
    d0b4:	200020e0 	.word	0x200020e0
    d0b8:	00007f75 	.word	0x00007f75
    d0bc:	00011534 	.word	0x00011534
    d0c0:	e000e100 	.word	0xe000e100

0000d0c4 <tmr_write_cmpreg>:
{
    d0c4:	b510      	push	{r4, lr}
    d0c6:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d0c8:	2100      	movs	r1, #0
    d0ca:	4802      	ldr	r0, [pc, #8]	; (d0d4 <tmr_write_cmpreg+0x10>)
    d0cc:	4b02      	ldr	r3, [pc, #8]	; (d0d8 <tmr_write_cmpreg+0x14>)
    d0ce:	4798      	blx	r3
}
    d0d0:	bd10      	pop	{r4, pc}
    d0d2:	46c0      	nop			; (mov r8, r8)
    d0d4:	200020e0 	.word	0x200020e0
    d0d8:	000082d5 	.word	0x000082d5

0000d0dc <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d0dc:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d0de:	4a33      	ldr	r2, [pc, #204]	; (d1ac <tmr_init+0xd0>)
    d0e0:	2100      	movs	r1, #0
    d0e2:	2300      	movs	r3, #0
    d0e4:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d0e6:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d0e8:	2000      	movs	r0, #0
    d0ea:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d0ec:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d0ee:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d0f0:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d0f2:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d0f4:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d0f6:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d0f8:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d0fa:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d0fc:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d0fe:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d100:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d102:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d104:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d106:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d108:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d10a:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d10c:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d10e:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d110:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d112:	2334      	movs	r3, #52	; 0x34
    d114:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d116:	3b35      	subs	r3, #53	; 0x35
    d118:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d11a:	4c25      	ldr	r4, [pc, #148]	; (d1b0 <tmr_init+0xd4>)
    d11c:	4925      	ldr	r1, [pc, #148]	; (d1b4 <tmr_init+0xd8>)
    d11e:	0020      	movs	r0, r4
    d120:	4b25      	ldr	r3, [pc, #148]	; (d1b8 <tmr_init+0xdc>)
    d122:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d124:	2200      	movs	r2, #0
    d126:	4925      	ldr	r1, [pc, #148]	; (d1bc <tmr_init+0xe0>)
    d128:	0020      	movs	r0, r4
    d12a:	4d25      	ldr	r5, [pc, #148]	; (d1c0 <tmr_init+0xe4>)
    d12c:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d12e:	2202      	movs	r2, #2
    d130:	4924      	ldr	r1, [pc, #144]	; (d1c4 <tmr_init+0xe8>)
    d132:	0020      	movs	r0, r4
    d134:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d136:	6820      	ldr	r0, [r4, #0]
    d138:	4b23      	ldr	r3, [pc, #140]	; (d1c8 <tmr_init+0xec>)
    d13a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d13c:	4b23      	ldr	r3, [pc, #140]	; (d1cc <tmr_init+0xf0>)
    d13e:	5c1a      	ldrb	r2, [r3, r0]
    d140:	231f      	movs	r3, #31
    d142:	4013      	ands	r3, r2
    d144:	2101      	movs	r1, #1
    d146:	000a      	movs	r2, r1
    d148:	409a      	lsls	r2, r3
    d14a:	4b21      	ldr	r3, [pc, #132]	; (d1d0 <tmr_init+0xf4>)
    d14c:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d14e:	7e63      	ldrb	r3, [r4, #25]
    d150:	2201      	movs	r2, #1
    d152:	4313      	orrs	r3, r2
    d154:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d156:	6822      	ldr	r2, [r4, #0]
    d158:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d15a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d15c:	2b00      	cmp	r3, #0
    d15e:	d1fc      	bne.n	d15a <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d160:	6813      	ldr	r3, [r2, #0]
    d162:	2102      	movs	r1, #2
    d164:	430b      	orrs	r3, r1
    d166:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d168:	2000      	movs	r0, #0
    d16a:	4b1a      	ldr	r3, [pc, #104]	; (d1d4 <tmr_init+0xf8>)
    d16c:	4798      	blx	r3
    d16e:	4d1a      	ldr	r5, [pc, #104]	; (d1d8 <tmr_init+0xfc>)
    d170:	47a8      	blx	r5
    d172:	491a      	ldr	r1, [pc, #104]	; (d1dc <tmr_init+0x100>)
    d174:	4b1a      	ldr	r3, [pc, #104]	; (d1e0 <tmr_init+0x104>)
    d176:	4798      	blx	r3
    d178:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d17a:	4b1a      	ldr	r3, [pc, #104]	; (d1e4 <tmr_init+0x108>)
    d17c:	4798      	blx	r3
    d17e:	47a8      	blx	r5
    d180:	1c01      	adds	r1, r0, #0
    d182:	1c20      	adds	r0, r4, #0
    d184:	4b18      	ldr	r3, [pc, #96]	; (d1e8 <tmr_init+0x10c>)
    d186:	4798      	blx	r3
    d188:	21fc      	movs	r1, #252	; 0xfc
    d18a:	0589      	lsls	r1, r1, #22
    d18c:	4b17      	ldr	r3, [pc, #92]	; (d1ec <tmr_init+0x110>)
    d18e:	4798      	blx	r3
    d190:	2800      	cmp	r0, #0
    d192:	d005      	beq.n	d1a0 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d194:	21fe      	movs	r1, #254	; 0xfe
    d196:	0589      	lsls	r1, r1, #22
    d198:	1c20      	adds	r0, r4, #0
    d19a:	4b15      	ldr	r3, [pc, #84]	; (d1f0 <tmr_init+0x114>)
    d19c:	4798      	blx	r3
    d19e:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d1a0:	1c20      	adds	r0, r4, #0
    d1a2:	4b10      	ldr	r3, [pc, #64]	; (d1e4 <tmr_init+0x108>)
    d1a4:	4798      	blx	r3
    d1a6:	b2c0      	uxtb	r0, r0
}
    d1a8:	bd70      	pop	{r4, r5, r6, pc}
    d1aa:	46c0      	nop			; (mov r8, r8)
    d1ac:	200020a8 	.word	0x200020a8
    d1b0:	200020e0 	.word	0x200020e0
    d1b4:	42002000 	.word	0x42002000
    d1b8:	00007fad 	.word	0x00007fad
    d1bc:	0000d051 	.word	0x0000d051
    d1c0:	00007ead 	.word	0x00007ead
    d1c4:	0000d045 	.word	0x0000d045
    d1c8:	00007f75 	.word	0x00007f75
    d1cc:	00011534 	.word	0x00011534
    d1d0:	e000e100 	.word	0xe000e100
    d1d4:	00007c75 	.word	0x00007c75
    d1d8:	0000f7f1 	.word	0x0000f7f1
    d1dc:	49742400 	.word	0x49742400
    d1e0:	0000f099 	.word	0x0000f099
    d1e4:	0000ed45 	.word	0x0000ed45
    d1e8:	0000f479 	.word	0x0000f479
    d1ec:	0000ecdd 	.word	0x0000ecdd
    d1f0:	0000ed75 	.word	0x0000ed75

0000d1f4 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    d1f4:	b500      	push	{lr}
    d1f6:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    d1f8:	2800      	cmp	r0, #0
    d1fa:	d110      	bne.n	d21e <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    d1fc:	2300      	movs	r3, #0
    d1fe:	466a      	mov	r2, sp
    d200:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    d202:	4a08      	ldr	r2, [pc, #32]	; (d224 <nvm_init+0x30>)
    d204:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    d206:	466a      	mov	r2, sp
    d208:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    d20a:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    d20c:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    d20e:	3302      	adds	r3, #2
    d210:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    d212:	4668      	mov	r0, sp
    d214:	4b04      	ldr	r3, [pc, #16]	; (d228 <nvm_init+0x34>)
    d216:	4798      	blx	r3

		return STATUS_OK;
    d218:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    d21a:	b003      	add	sp, #12
    d21c:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    d21e:	2008      	movs	r0, #8
    d220:	4240      	negs	r0, r0
    d222:	e7fa      	b.n	d21a <nvm_init+0x26>
    d224:	41004000 	.word	0x41004000
    d228:	000065dd 	.word	0x000065dd

0000d22c <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    d22c:	b570      	push	{r4, r5, r6, lr}
    d22e:	0003      	movs	r3, r0
    d230:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    d232:	4c14      	ldr	r4, [pc, #80]	; (d284 <sal_aes_wrrd+0x58>)
    d234:	1c60      	adds	r0, r4, #1
    d236:	2210      	movs	r2, #16
    d238:	0019      	movs	r1, r3
    d23a:	4b13      	ldr	r3, [pc, #76]	; (d288 <sal_aes_wrrd+0x5c>)
    d23c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    d23e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    d240:	4b12      	ldr	r3, [pc, #72]	; (d28c <sal_aes_wrrd+0x60>)
    d242:	781b      	ldrb	r3, [r3, #0]
    d244:	2b00      	cmp	r3, #0
    d246:	d015      	beq.n	d274 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    d248:	2212      	movs	r2, #18
    d24a:	490e      	ldr	r1, [pc, #56]	; (d284 <sal_aes_wrrd+0x58>)
    d24c:	2083      	movs	r0, #131	; 0x83
    d24e:	4b10      	ldr	r3, [pc, #64]	; (d290 <sal_aes_wrrd+0x64>)
    d250:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    d252:	2200      	movs	r2, #0
    d254:	4b0d      	ldr	r3, [pc, #52]	; (d28c <sal_aes_wrrd+0x60>)
    d256:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    d258:	2d00      	cmp	r5, #0
    d25a:	d005      	beq.n	d268 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    d25c:	2210      	movs	r2, #16
    d25e:	4909      	ldr	r1, [pc, #36]	; (d284 <sal_aes_wrrd+0x58>)
    d260:	3101      	adds	r1, #1
    d262:	0028      	movs	r0, r5
    d264:	4b08      	ldr	r3, [pc, #32]	; (d288 <sal_aes_wrrd+0x5c>)
    d266:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    d268:	4b06      	ldr	r3, [pc, #24]	; (d284 <sal_aes_wrrd+0x58>)
    d26a:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    d26c:	2018      	movs	r0, #24
    d26e:	4b09      	ldr	r3, [pc, #36]	; (d294 <sal_aes_wrrd+0x68>)
    d270:	4798      	blx	r3
}
    d272:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    d274:	2211      	movs	r2, #17
    d276:	4903      	ldr	r1, [pc, #12]	; (d284 <sal_aes_wrrd+0x58>)
    d278:	3101      	adds	r1, #1
    d27a:	2084      	movs	r0, #132	; 0x84
    d27c:	4b04      	ldr	r3, [pc, #16]	; (d290 <sal_aes_wrrd+0x64>)
    d27e:	4798      	blx	r3
    d280:	e7ea      	b.n	d258 <sal_aes_wrrd+0x2c>
    d282:	46c0      	nop			; (mov r8, r8)
    d284:	20001c48 	.word	0x20001c48
    d288:	0000f97b 	.word	0x0000f97b
    d28c:	20001c7c 	.word	0x20001c7c
    d290:	0000dc89 	.word	0x0000dc89
    d294:	00006239 	.word	0x00006239

0000d298 <sal_aes_setup>:
{
    d298:	b5f0      	push	{r4, r5, r6, r7, lr}
    d29a:	46c6      	mov	lr, r8
    d29c:	b500      	push	{lr}
    d29e:	b084      	sub	sp, #16
    d2a0:	0005      	movs	r5, r0
    d2a2:	000e      	movs	r6, r1
    d2a4:	0014      	movs	r4, r2
	if (key != NULL) {
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d017      	beq.n	d2da <sal_aes_setup+0x42>
		dec_initialized = false;
    d2aa:	2200      	movs	r2, #0
    d2ac:	4b3e      	ldr	r3, [pc, #248]	; (d3a8 <sal_aes_setup+0x110>)
    d2ae:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    d2b0:	3202      	adds	r2, #2
    d2b2:	4b3e      	ldr	r3, [pc, #248]	; (d3ac <sal_aes_setup+0x114>)
    d2b4:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    d2b6:	320e      	adds	r2, #14
    d2b8:	0001      	movs	r1, r0
    d2ba:	483d      	ldr	r0, [pc, #244]	; (d3b0 <sal_aes_setup+0x118>)
    d2bc:	4b3d      	ldr	r3, [pc, #244]	; (d3b4 <sal_aes_setup+0x11c>)
    d2be:	4698      	mov	r8, r3
    d2c0:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d2c2:	4f3d      	ldr	r7, [pc, #244]	; (d3b8 <sal_aes_setup+0x120>)
    d2c4:	2310      	movs	r3, #16
    d2c6:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    d2c8:	1c78      	adds	r0, r7, #1
    d2ca:	2210      	movs	r2, #16
    d2cc:	0029      	movs	r1, r5
    d2ce:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    d2d0:	2211      	movs	r2, #17
    d2d2:	0039      	movs	r1, r7
    d2d4:	2083      	movs	r0, #131	; 0x83
    d2d6:	4b39      	ldr	r3, [pc, #228]	; (d3bc <sal_aes_setup+0x124>)
    d2d8:	4798      	blx	r3
	switch (dir) {
    d2da:	2c00      	cmp	r4, #0
    d2dc:	d003      	beq.n	d2e6 <sal_aes_setup+0x4e>
    d2de:	2c01      	cmp	r4, #1
    d2e0:	d02f      	beq.n	d342 <sal_aes_setup+0xaa>
		return false;
    d2e2:	2000      	movs	r0, #0
    d2e4:	e01b      	b.n	d31e <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    d2e6:	4b31      	ldr	r3, [pc, #196]	; (d3ac <sal_aes_setup+0x114>)
    d2e8:	781b      	ldrb	r3, [r3, #0]
    d2ea:	2b01      	cmp	r3, #1
    d2ec:	d01b      	beq.n	d326 <sal_aes_setup+0x8e>
	last_dir = dir;
    d2ee:	4b2f      	ldr	r3, [pc, #188]	; (d3ac <sal_aes_setup+0x114>)
    d2f0:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    d2f2:	2e00      	cmp	r6, #0
    d2f4:	d002      	beq.n	d2fc <sal_aes_setup+0x64>
		return (false);
    d2f6:	2000      	movs	r0, #0
	switch (enc_mode) {
    d2f8:	2e02      	cmp	r6, #2
    d2fa:	d110      	bne.n	d31e <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    d2fc:	0136      	lsls	r6, r6, #4
    d2fe:	2370      	movs	r3, #112	; 0x70
    d300:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    d302:	00e4      	lsls	r4, r4, #3
    d304:	3b68      	subs	r3, #104	; 0x68
    d306:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    d308:	4334      	orrs	r4, r6
    d30a:	4b2b      	ldr	r3, [pc, #172]	; (d3b8 <sal_aes_setup+0x120>)
    d30c:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    d30e:	2680      	movs	r6, #128	; 0x80
    d310:	4276      	negs	r6, r6
    d312:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    d314:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    d316:	2201      	movs	r2, #1
    d318:	4b29      	ldr	r3, [pc, #164]	; (d3c0 <sal_aes_setup+0x128>)
    d31a:	701a      	strb	r2, [r3, #0]
	return (true);
    d31c:	2001      	movs	r0, #1
}
    d31e:	b004      	add	sp, #16
    d320:	bc04      	pop	{r2}
    d322:	4690      	mov	r8, r2
    d324:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d326:	4d24      	ldr	r5, [pc, #144]	; (d3b8 <sal_aes_setup+0x120>)
    d328:	330f      	adds	r3, #15
    d32a:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    d32c:	1c68      	adds	r0, r5, #1
    d32e:	2210      	movs	r2, #16
    d330:	491f      	ldr	r1, [pc, #124]	; (d3b0 <sal_aes_setup+0x118>)
    d332:	4b20      	ldr	r3, [pc, #128]	; (d3b4 <sal_aes_setup+0x11c>)
    d334:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    d336:	2211      	movs	r2, #17
    d338:	0029      	movs	r1, r5
    d33a:	2083      	movs	r0, #131	; 0x83
    d33c:	4b1f      	ldr	r3, [pc, #124]	; (d3bc <sal_aes_setup+0x124>)
    d33e:	4798      	blx	r3
    d340:	e7d5      	b.n	d2ee <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    d342:	4b1a      	ldr	r3, [pc, #104]	; (d3ac <sal_aes_setup+0x114>)
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	2b01      	cmp	r3, #1
    d348:	d0d1      	beq.n	d2ee <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d34a:	2210      	movs	r2, #16
    d34c:	4b1a      	ldr	r3, [pc, #104]	; (d3b8 <sal_aes_setup+0x120>)
    d34e:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    d350:	4b15      	ldr	r3, [pc, #84]	; (d3a8 <sal_aes_setup+0x110>)
    d352:	781b      	ldrb	r3, [r3, #0]
    d354:	2b00      	cmp	r3, #0
    d356:	d00e      	beq.n	d376 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    d358:	4d17      	ldr	r5, [pc, #92]	; (d3b8 <sal_aes_setup+0x120>)
    d35a:	1c68      	adds	r0, r5, #1
    d35c:	2210      	movs	r2, #16
    d35e:	4919      	ldr	r1, [pc, #100]	; (d3c4 <sal_aes_setup+0x12c>)
    d360:	4b14      	ldr	r3, [pc, #80]	; (d3b4 <sal_aes_setup+0x11c>)
    d362:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    d364:	2211      	movs	r2, #17
    d366:	0029      	movs	r1, r5
    d368:	2083      	movs	r0, #131	; 0x83
    d36a:	4b14      	ldr	r3, [pc, #80]	; (d3bc <sal_aes_setup+0x124>)
    d36c:	4798      	blx	r3
			dec_initialized = true;
    d36e:	4b0e      	ldr	r3, [pc, #56]	; (d3a8 <sal_aes_setup+0x110>)
    d370:	2201      	movs	r2, #1
    d372:	701a      	strb	r2, [r3, #0]
    d374:	e7bb      	b.n	d2ee <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    d376:	4d10      	ldr	r5, [pc, #64]	; (d3b8 <sal_aes_setup+0x120>)
    d378:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    d37a:	3380      	adds	r3, #128	; 0x80
    d37c:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    d37e:	3a0f      	subs	r2, #15
    d380:	4b0f      	ldr	r3, [pc, #60]	; (d3c0 <sal_aes_setup+0x128>)
    d382:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    d384:	2100      	movs	r1, #0
    d386:	4668      	mov	r0, sp
    d388:	4b0f      	ldr	r3, [pc, #60]	; (d3c8 <sal_aes_setup+0x130>)
    d38a:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d38c:	2310      	movs	r3, #16
    d38e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    d390:	2201      	movs	r2, #1
    d392:	0029      	movs	r1, r5
    d394:	2083      	movs	r0, #131	; 0x83
    d396:	4b09      	ldr	r3, [pc, #36]	; (d3bc <sal_aes_setup+0x124>)
    d398:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    d39a:	2210      	movs	r2, #16
    d39c:	4909      	ldr	r1, [pc, #36]	; (d3c4 <sal_aes_setup+0x12c>)
    d39e:	2084      	movs	r0, #132	; 0x84
    d3a0:	4b0a      	ldr	r3, [pc, #40]	; (d3cc <sal_aes_setup+0x134>)
    d3a2:	4798      	blx	r3
    d3a4:	e7d8      	b.n	d358 <sal_aes_setup+0xc0>
    d3a6:	46c0      	nop			; (mov r8, r8)
    d3a8:	20001c5a 	.word	0x20001c5a
    d3ac:	20000019 	.word	0x20000019
    d3b0:	20001c6c 	.word	0x20001c6c
    d3b4:	0000f97b 	.word	0x0000f97b
    d3b8:	20001c48 	.word	0x20001c48
    d3bc:	0000d995 	.word	0x0000d995
    d3c0:	20001c7c 	.word	0x20001c7c
    d3c4:	20001c5c 	.word	0x20001c5c
    d3c8:	0000d22d 	.word	0x0000d22d
    d3cc:	0000db01 	.word	0x0000db01

0000d3d0 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    d3d0:	b510      	push	{r4, lr}
    d3d2:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    d3d4:	2210      	movs	r2, #16
    d3d6:	2084      	movs	r0, #132	; 0x84
    d3d8:	4b01      	ldr	r3, [pc, #4]	; (d3e0 <sal_aes_read+0x10>)
    d3da:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    d3dc:	bd10      	pop	{r4, pc}
    d3de:	46c0      	nop			; (mov r8, r8)
    d3e0:	0000db01 	.word	0x0000db01

0000d3e4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    d3e4:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    d3e6:	2201      	movs	r2, #1
    d3e8:	4b03      	ldr	r3, [pc, #12]	; (d3f8 <AT86RFX_ISR+0x14>)
    d3ea:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    d3ec:	4b03      	ldr	r3, [pc, #12]	; (d3fc <AT86RFX_ISR+0x18>)
    d3ee:	681b      	ldr	r3, [r3, #0]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d000      	beq.n	d3f6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    d3f4:	4798      	blx	r3
	}
}
    d3f6:	bd10      	pop	{r4, pc}
    d3f8:	40002400 	.word	0x40002400
    d3fc:	20001c80 	.word	0x20001c80

0000d400 <trx_spi_init>:

void trx_spi_init(void)
{
    d400:	b530      	push	{r4, r5, lr}
    d402:	b085      	sub	sp, #20
	config->address_enabled = false;
    d404:	4a34      	ldr	r2, [pc, #208]	; (d4d8 <trx_spi_init+0xd8>)
    d406:	2300      	movs	r3, #0
    d408:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    d40a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    d40c:	213f      	movs	r1, #63	; 0x3f
    d40e:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    d410:	4c32      	ldr	r4, [pc, #200]	; (d4dc <trx_spi_init+0xdc>)
    d412:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    d414:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    d416:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    d418:	2201      	movs	r2, #1
    d41a:	4669      	mov	r1, sp
    d41c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    d41e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d420:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d422:	203f      	movs	r0, #63	; 0x3f
    d424:	4b2e      	ldr	r3, [pc, #184]	; (d4e0 <trx_spi_init+0xe0>)
    d426:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d428:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    d42a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d42c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d42e:	2900      	cmp	r1, #0
    d430:	d104      	bne.n	d43c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    d432:	0953      	lsrs	r3, r2, #5
    d434:	01db      	lsls	r3, r3, #7
    d436:	492b      	ldr	r1, [pc, #172]	; (d4e4 <trx_spi_init+0xe4>)
    d438:	468c      	mov	ip, r1
    d43a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d43c:	211f      	movs	r1, #31
    d43e:	4011      	ands	r1, r2
    d440:	2201      	movs	r2, #1
    d442:	0010      	movs	r0, r2
    d444:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    d446:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    d448:	4c27      	ldr	r4, [pc, #156]	; (d4e8 <trx_spi_init+0xe8>)
    d44a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d44c:	2300      	movs	r3, #0
    d44e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d450:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d452:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    d454:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    d456:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    d458:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    d45a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d45c:	3223      	adds	r2, #35	; 0x23
    d45e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d460:	0020      	movs	r0, r4
    d462:	3018      	adds	r0, #24
    d464:	3a18      	subs	r2, #24
    d466:	2100      	movs	r1, #0
    d468:	4b20      	ldr	r3, [pc, #128]	; (d4ec <trx_spi_init+0xec>)
    d46a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    d46c:	2380      	movs	r3, #128	; 0x80
    d46e:	025b      	lsls	r3, r3, #9
    d470:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    d472:	4b1f      	ldr	r3, [pc, #124]	; (d4f0 <trx_spi_init+0xf0>)
    d474:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    d476:	4b1f      	ldr	r3, [pc, #124]	; (d4f4 <trx_spi_init+0xf4>)
    d478:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    d47a:	2301      	movs	r3, #1
    d47c:	425b      	negs	r3, r3
    d47e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    d480:	4b1d      	ldr	r3, [pc, #116]	; (d4f8 <trx_spi_init+0xf8>)
    d482:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    d484:	4b1d      	ldr	r3, [pc, #116]	; (d4fc <trx_spi_init+0xfc>)
    d486:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    d488:	4d1d      	ldr	r5, [pc, #116]	; (d500 <trx_spi_init+0x100>)
    d48a:	0022      	movs	r2, r4
    d48c:	491d      	ldr	r1, [pc, #116]	; (d504 <trx_spi_init+0x104>)
    d48e:	0028      	movs	r0, r5
    d490:	4b1d      	ldr	r3, [pc, #116]	; (d508 <trx_spi_init+0x108>)
    d492:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d494:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    d496:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    d498:	2b00      	cmp	r3, #0
    d49a:	d1fc      	bne.n	d496 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d49c:	6813      	ldr	r3, [r2, #0]
    d49e:	2502      	movs	r5, #2
    d4a0:	432b      	orrs	r3, r5
    d4a2:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    d4a4:	ac01      	add	r4, sp, #4
    d4a6:	0020      	movs	r0, r4
    d4a8:	4b18      	ldr	r3, [pc, #96]	; (d50c <trx_spi_init+0x10c>)
    d4aa:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    d4ac:	2320      	movs	r3, #32
    d4ae:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    d4b0:	2380      	movs	r3, #128	; 0x80
    d4b2:	039b      	lsls	r3, r3, #14
    d4b4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    d4b6:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    d4b8:	2300      	movs	r3, #0
    d4ba:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    d4bc:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    d4be:	3301      	adds	r3, #1
    d4c0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    d4c2:	0021      	movs	r1, r4
    d4c4:	2000      	movs	r0, #0
    d4c6:	4b12      	ldr	r3, [pc, #72]	; (d510 <trx_spi_init+0x110>)
    d4c8:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    d4ca:	2200      	movs	r2, #0
    d4cc:	2100      	movs	r1, #0
    d4ce:	4811      	ldr	r0, [pc, #68]	; (d514 <trx_spi_init+0x114>)
    d4d0:	4b11      	ldr	r3, [pc, #68]	; (d518 <trx_spi_init+0x118>)
    d4d2:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    d4d4:	b005      	add	sp, #20
    d4d6:	bd30      	pop	{r4, r5, pc}
    d4d8:	20002100 	.word	0x20002100
    d4dc:	20002104 	.word	0x20002104
    d4e0:	000068c5 	.word	0x000068c5
    d4e4:	40002800 	.word	0x40002800
    d4e8:	20002108 	.word	0x20002108
    d4ec:	0000f98d 	.word	0x0000f98d
    d4f0:	003d0900 	.word	0x003d0900
    d4f4:	00530005 	.word	0x00530005
    d4f8:	003e0005 	.word	0x003e0005
    d4fc:	00520005 	.word	0x00520005
    d500:	20002140 	.word	0x20002140
    d504:	42001000 	.word	0x42001000
    d508:	00006d79 	.word	0x00006d79
    d50c:	0000653d 	.word	0x0000653d
    d510:	00006551 	.word	0x00006551
    d514:	0000d3e5 	.word	0x0000d3e5
    d518:	000063bd 	.word	0x000063bd

0000d51c <PhyReset>:

void PhyReset(void)
{
    d51c:	b570      	push	{r4, r5, r6, lr}
    d51e:	4c08      	ldr	r4, [pc, #32]	; (d540 <PhyReset+0x24>)
    d520:	2580      	movs	r5, #128	; 0x80
    d522:	022d      	lsls	r5, r5, #8
    d524:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    d526:	2280      	movs	r2, #128	; 0x80
    d528:	0352      	lsls	r2, r2, #13
    d52a:	4b06      	ldr	r3, [pc, #24]	; (d544 <PhyReset+0x28>)
    d52c:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    d52e:	20a5      	movs	r0, #165	; 0xa5
    d530:	0040      	lsls	r0, r0, #1
    d532:	4e05      	ldr	r6, [pc, #20]	; (d548 <PhyReset+0x2c>)
    d534:	47b0      	blx	r6
    d536:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    d538:	200a      	movs	r0, #10
    d53a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    d53c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    d53e:	bd70      	pop	{r4, r5, r6, pc}
    d540:	40002880 	.word	0x40002880
    d544:	40002800 	.word	0x40002800
    d548:	00006239 	.word	0x00006239

0000d54c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    d54c:	b570      	push	{r4, r5, r6, lr}
    d54e:	b082      	sub	sp, #8
    d550:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d552:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d556:	425a      	negs	r2, r3
    d558:	4153      	adcs	r3, r2
    d55a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d55c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d55e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d562:	2200      	movs	r2, #0
    d564:	4b33      	ldr	r3, [pc, #204]	; (d634 <trx_reg_read+0xe8>)
    d566:	701a      	strb	r2, [r3, #0]
	return flags;
    d568:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d56a:	4e33      	ldr	r6, [pc, #204]	; (d638 <trx_reg_read+0xec>)
    d56c:	3201      	adds	r2, #1
    d56e:	4933      	ldr	r1, [pc, #204]	; (d63c <trx_reg_read+0xf0>)
    d570:	0030      	movs	r0, r6
    d572:	4b33      	ldr	r3, [pc, #204]	; (d640 <trx_reg_read+0xf4>)
    d574:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d576:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d578:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d57a:	7e1a      	ldrb	r2, [r3, #24]
    d57c:	420a      	tst	r2, r1
    d57e:	d0fc      	beq.n	d57a <trx_reg_read+0x2e>
    d580:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d582:	07d2      	lsls	r2, r2, #31
    d584:	d502      	bpl.n	d58c <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d586:	2280      	movs	r2, #128	; 0x80
    d588:	4315      	orrs	r5, r2
    d58a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d58c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d58e:	7e1a      	ldrb	r2, [r3, #24]
    d590:	420a      	tst	r2, r1
    d592:	d0fc      	beq.n	d58e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d594:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d596:	7e1a      	ldrb	r2, [r3, #24]
    d598:	420a      	tst	r2, r1
    d59a:	d0fc      	beq.n	d596 <trx_reg_read+0x4a>
    d59c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d59e:	0752      	lsls	r2, r2, #29
    d5a0:	d50c      	bpl.n	d5bc <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d5a2:	8b5a      	ldrh	r2, [r3, #26]
    d5a4:	0752      	lsls	r2, r2, #29
    d5a6:	d501      	bpl.n	d5ac <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d5a8:	2204      	movs	r2, #4
    d5aa:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d5ac:	4a22      	ldr	r2, [pc, #136]	; (d638 <trx_reg_read+0xec>)
    d5ae:	7992      	ldrb	r2, [r2, #6]
    d5b0:	2a01      	cmp	r2, #1
    d5b2:	d034      	beq.n	d61e <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d5b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d5b6:	b2d2      	uxtb	r2, r2
    d5b8:	4922      	ldr	r1, [pc, #136]	; (d644 <trx_reg_read+0xf8>)
    d5ba:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    d5bc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d5be:	7e1a      	ldrb	r2, [r3, #24]
    d5c0:	420a      	tst	r2, r1
    d5c2:	d0fc      	beq.n	d5be <trx_reg_read+0x72>
    d5c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d5c6:	07d2      	lsls	r2, r2, #31
    d5c8:	d501      	bpl.n	d5ce <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d5ca:	2200      	movs	r2, #0
    d5cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    d5ce:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d5d0:	7e1a      	ldrb	r2, [r3, #24]
    d5d2:	420a      	tst	r2, r1
    d5d4:	d0fc      	beq.n	d5d0 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    d5d6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d5d8:	7e1a      	ldrb	r2, [r3, #24]
    d5da:	420a      	tst	r2, r1
    d5dc:	d0fc      	beq.n	d5d8 <trx_reg_read+0x8c>
    d5de:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    d5e0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    d5e2:	0752      	lsls	r2, r2, #29
    d5e4:	d50a      	bpl.n	d5fc <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d5e6:	8b5a      	ldrh	r2, [r3, #26]
    d5e8:	0752      	lsls	r2, r2, #29
    d5ea:	d501      	bpl.n	d5f0 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d5ec:	2204      	movs	r2, #4
    d5ee:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d5f0:	4a11      	ldr	r2, [pc, #68]	; (d638 <trx_reg_read+0xec>)
    d5f2:	7992      	ldrb	r2, [r2, #6]
    d5f4:	2a01      	cmp	r2, #1
    d5f6:	d018      	beq.n	d62a <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d5f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d5fa:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d5fc:	2200      	movs	r2, #0
    d5fe:	490f      	ldr	r1, [pc, #60]	; (d63c <trx_reg_read+0xf0>)
    d600:	480d      	ldr	r0, [pc, #52]	; (d638 <trx_reg_read+0xec>)
    d602:	4b0f      	ldr	r3, [pc, #60]	; (d640 <trx_reg_read+0xf4>)
    d604:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d606:	23ff      	movs	r3, #255	; 0xff
    d608:	4223      	tst	r3, r4
    d60a:	d005      	beq.n	d618 <trx_reg_read+0xcc>
		cpu_irq_enable();
    d60c:	2201      	movs	r2, #1
    d60e:	4b09      	ldr	r3, [pc, #36]	; (d634 <trx_reg_read+0xe8>)
    d610:	701a      	strb	r2, [r3, #0]
    d612:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d616:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    d618:	b2e8      	uxtb	r0, r5
}
    d61a:	b002      	add	sp, #8
    d61c:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d61e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d620:	05d2      	lsls	r2, r2, #23
    d622:	0dd2      	lsrs	r2, r2, #23
    d624:	4907      	ldr	r1, [pc, #28]	; (d644 <trx_reg_read+0xf8>)
    d626:	800a      	strh	r2, [r1, #0]
    d628:	e7c8      	b.n	d5bc <trx_reg_read+0x70>
    d62a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d62c:	05ed      	lsls	r5, r5, #23
    d62e:	0ded      	lsrs	r5, r5, #23
    d630:	e7e4      	b.n	d5fc <trx_reg_read+0xb0>
    d632:	46c0      	nop			; (mov r8, r8)
    d634:	20000008 	.word	0x20000008
    d638:	20002140 	.word	0x20002140
    d63c:	20002104 	.word	0x20002104
    d640:	00007055 	.word	0x00007055
    d644:	200020fc 	.word	0x200020fc

0000d648 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    d648:	b5f0      	push	{r4, r5, r6, r7, lr}
    d64a:	b083      	sub	sp, #12
    d64c:	0006      	movs	r6, r0
    d64e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d650:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d654:	425a      	negs	r2, r3
    d656:	4153      	adcs	r3, r2
    d658:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d65a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d65c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d660:	2200      	movs	r2, #0
    d662:	4b34      	ldr	r3, [pc, #208]	; (d734 <trx_reg_write+0xec>)
    d664:	701a      	strb	r2, [r3, #0]
	return flags;
    d666:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d668:	4f33      	ldr	r7, [pc, #204]	; (d738 <trx_reg_write+0xf0>)
    d66a:	3201      	adds	r2, #1
    d66c:	4933      	ldr	r1, [pc, #204]	; (d73c <trx_reg_write+0xf4>)
    d66e:	0038      	movs	r0, r7
    d670:	4b33      	ldr	r3, [pc, #204]	; (d740 <trx_reg_write+0xf8>)
    d672:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d674:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d676:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d678:	7e1a      	ldrb	r2, [r3, #24]
    d67a:	420a      	tst	r2, r1
    d67c:	d0fc      	beq.n	d678 <trx_reg_write+0x30>
    d67e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d680:	07d2      	lsls	r2, r2, #31
    d682:	d502      	bpl.n	d68a <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d684:	22c0      	movs	r2, #192	; 0xc0
    d686:	4316      	orrs	r6, r2
    d688:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d68a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d68c:	7e1a      	ldrb	r2, [r3, #24]
    d68e:	420a      	tst	r2, r1
    d690:	d0fc      	beq.n	d68c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d692:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d694:	7e1a      	ldrb	r2, [r3, #24]
    d696:	420a      	tst	r2, r1
    d698:	d0fc      	beq.n	d694 <trx_reg_write+0x4c>
    d69a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d69c:	0752      	lsls	r2, r2, #29
    d69e:	d50c      	bpl.n	d6ba <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d6a0:	8b5a      	ldrh	r2, [r3, #26]
    d6a2:	0752      	lsls	r2, r2, #29
    d6a4:	d501      	bpl.n	d6aa <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d6a6:	2204      	movs	r2, #4
    d6a8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6aa:	4a23      	ldr	r2, [pc, #140]	; (d738 <trx_reg_write+0xf0>)
    d6ac:	7992      	ldrb	r2, [r2, #6]
    d6ae:	2a01      	cmp	r2, #1
    d6b0:	d033      	beq.n	d71a <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d6b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d6b4:	b2d2      	uxtb	r2, r2
    d6b6:	4923      	ldr	r1, [pc, #140]	; (d744 <trx_reg_write+0xfc>)
    d6b8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    d6ba:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d6bc:	7e1a      	ldrb	r2, [r3, #24]
    d6be:	420a      	tst	r2, r1
    d6c0:	d0fc      	beq.n	d6bc <trx_reg_write+0x74>
    d6c2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d6c4:	07d2      	lsls	r2, r2, #31
    d6c6:	d500      	bpl.n	d6ca <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6c8:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    d6ca:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d6cc:	7e1a      	ldrb	r2, [r3, #24]
    d6ce:	420a      	tst	r2, r1
    d6d0:	d0fc      	beq.n	d6cc <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d6d2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d6d4:	7e1a      	ldrb	r2, [r3, #24]
    d6d6:	420a      	tst	r2, r1
    d6d8:	d0fc      	beq.n	d6d4 <trx_reg_write+0x8c>
    d6da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d6dc:	0752      	lsls	r2, r2, #29
    d6de:	d50c      	bpl.n	d6fa <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d6e0:	8b5a      	ldrh	r2, [r3, #26]
    d6e2:	0752      	lsls	r2, r2, #29
    d6e4:	d501      	bpl.n	d6ea <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d6e6:	2204      	movs	r2, #4
    d6e8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6ea:	4a13      	ldr	r2, [pc, #76]	; (d738 <trx_reg_write+0xf0>)
    d6ec:	7992      	ldrb	r2, [r2, #6]
    d6ee:	2a01      	cmp	r2, #1
    d6f0:	d019      	beq.n	d726 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d6f4:	b2db      	uxtb	r3, r3
    d6f6:	4a13      	ldr	r2, [pc, #76]	; (d744 <trx_reg_write+0xfc>)
    d6f8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d6fa:	2200      	movs	r2, #0
    d6fc:	490f      	ldr	r1, [pc, #60]	; (d73c <trx_reg_write+0xf4>)
    d6fe:	480e      	ldr	r0, [pc, #56]	; (d738 <trx_reg_write+0xf0>)
    d700:	4b0f      	ldr	r3, [pc, #60]	; (d740 <trx_reg_write+0xf8>)
    d702:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d704:	23ff      	movs	r3, #255	; 0xff
    d706:	422b      	tst	r3, r5
    d708:	d005      	beq.n	d716 <trx_reg_write+0xce>
		cpu_irq_enable();
    d70a:	2201      	movs	r2, #1
    d70c:	4b09      	ldr	r3, [pc, #36]	; (d734 <trx_reg_write+0xec>)
    d70e:	701a      	strb	r2, [r3, #0]
    d710:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d714:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d716:	b003      	add	sp, #12
    d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d71a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d71c:	05d2      	lsls	r2, r2, #23
    d71e:	0dd2      	lsrs	r2, r2, #23
    d720:	4908      	ldr	r1, [pc, #32]	; (d744 <trx_reg_write+0xfc>)
    d722:	800a      	strh	r2, [r1, #0]
    d724:	e7c9      	b.n	d6ba <trx_reg_write+0x72>
    d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d728:	05db      	lsls	r3, r3, #23
    d72a:	0ddb      	lsrs	r3, r3, #23
    d72c:	4a05      	ldr	r2, [pc, #20]	; (d744 <trx_reg_write+0xfc>)
    d72e:	8013      	strh	r3, [r2, #0]
    d730:	e7e3      	b.n	d6fa <trx_reg_write+0xb2>
    d732:	46c0      	nop			; (mov r8, r8)
    d734:	20000008 	.word	0x20000008
    d738:	20002140 	.word	0x20002140
    d73c:	20002104 	.word	0x20002104
    d740:	00007055 	.word	0x00007055
    d744:	200020fc 	.word	0x200020fc

0000d748 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    d748:	b5f0      	push	{r4, r5, r6, r7, lr}
    d74a:	46d6      	mov	lr, sl
    d74c:	464f      	mov	r7, r9
    d74e:	4646      	mov	r6, r8
    d750:	b5c0      	push	{r6, r7, lr}
    d752:	b082      	sub	sp, #8
    d754:	0005      	movs	r5, r0
    d756:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d758:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d75c:	425a      	negs	r2, r3
    d75e:	4153      	adcs	r3, r2
    d760:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d762:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d764:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d768:	2200      	movs	r2, #0
    d76a:	4b3e      	ldr	r3, [pc, #248]	; (d864 <trx_frame_read+0x11c>)
    d76c:	701a      	strb	r2, [r3, #0]
	return flags;
    d76e:	9b01      	ldr	r3, [sp, #4]
    d770:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d772:	4f3d      	ldr	r7, [pc, #244]	; (d868 <trx_frame_read+0x120>)
    d774:	3201      	adds	r2, #1
    d776:	493d      	ldr	r1, [pc, #244]	; (d86c <trx_frame_read+0x124>)
    d778:	0038      	movs	r0, r7
    d77a:	4b3d      	ldr	r3, [pc, #244]	; (d870 <trx_frame_read+0x128>)
    d77c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d77e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d780:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d782:	7e1a      	ldrb	r2, [r3, #24]
    d784:	420a      	tst	r2, r1
    d786:	d0fc      	beq.n	d782 <trx_frame_read+0x3a>
    d788:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d78a:	07d2      	lsls	r2, r2, #31
    d78c:	d501      	bpl.n	d792 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d78e:	2220      	movs	r2, #32
    d790:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d792:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d794:	7e1a      	ldrb	r2, [r3, #24]
    d796:	420a      	tst	r2, r1
    d798:	d0fc      	beq.n	d794 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d79a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d79c:	7e1a      	ldrb	r2, [r3, #24]
    d79e:	420a      	tst	r2, r1
    d7a0:	d0fc      	beq.n	d79c <trx_frame_read+0x54>
    d7a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d7a4:	0752      	lsls	r2, r2, #29
    d7a6:	d50c      	bpl.n	d7c2 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d7a8:	8b5a      	ldrh	r2, [r3, #26]
    d7aa:	0752      	lsls	r2, r2, #29
    d7ac:	d501      	bpl.n	d7b2 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d7ae:	2204      	movs	r2, #4
    d7b0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7b2:	4a2d      	ldr	r2, [pc, #180]	; (d868 <trx_frame_read+0x120>)
    d7b4:	7992      	ldrb	r2, [r2, #6]
    d7b6:	2a01      	cmp	r2, #1
    d7b8:	d013      	beq.n	d7e2 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7bc:	b2db      	uxtb	r3, r3
    d7be:	4a2d      	ldr	r2, [pc, #180]	; (d874 <trx_frame_read+0x12c>)
    d7c0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    d7c2:	1e63      	subs	r3, r4, #1
    d7c4:	b2db      	uxtb	r3, r3
    d7c6:	2c00      	cmp	r4, #0
    d7c8:	d036      	beq.n	d838 <trx_frame_read+0xf0>
    d7ca:	3301      	adds	r3, #1
    d7cc:	469c      	mov	ip, r3
    d7ce:	44ac      	add	ip, r5
    d7d0:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    d7d2:	4e25      	ldr	r6, [pc, #148]	; (d868 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    d7d4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d7d6:	2300      	movs	r3, #0
    d7d8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    d7da:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d7dc:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7de:	46b1      	mov	r9, r6
    d7e0:	e00f      	b.n	d802 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7e4:	05db      	lsls	r3, r3, #23
    d7e6:	0ddb      	lsrs	r3, r3, #23
    d7e8:	4a22      	ldr	r2, [pc, #136]	; (d874 <trx_frame_read+0x12c>)
    d7ea:	8013      	strh	r3, [r2, #0]
    d7ec:	e7e9      	b.n	d7c2 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7ee:	464a      	mov	r2, r9
    d7f0:	7992      	ldrb	r2, [r2, #6]
    d7f2:	2a01      	cmp	r2, #1
    d7f4:	d01c      	beq.n	d830 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d7f6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d7f8:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    d7fa:	702f      	strb	r7, [r5, #0]
		data++;
    d7fc:	3501      	adds	r5, #1
	while (length--) {
    d7fe:	4565      	cmp	r5, ip
    d800:	d01a      	beq.n	d838 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d802:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d804:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d806:	4202      	tst	r2, r0
    d808:	d0fc      	beq.n	d804 <trx_frame_read+0xbc>
    d80a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d80c:	4202      	tst	r2, r0
    d80e:	d001      	beq.n	d814 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d810:	4652      	mov	r2, sl
    d812:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d814:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d816:	4222      	tst	r2, r4
    d818:	d0fc      	beq.n	d814 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d81a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d81c:	420a      	tst	r2, r1
    d81e:	d0fc      	beq.n	d81a <trx_frame_read+0xd2>
    d820:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d822:	420a      	tst	r2, r1
    d824:	d0e9      	beq.n	d7fa <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d826:	8b5a      	ldrh	r2, [r3, #26]
    d828:	420a      	tst	r2, r1
    d82a:	d0e0      	beq.n	d7ee <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d82c:	8359      	strh	r1, [r3, #26]
    d82e:	e7de      	b.n	d7ee <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d830:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d832:	05ff      	lsls	r7, r7, #23
    d834:	0dff      	lsrs	r7, r7, #23
    d836:	e7e0      	b.n	d7fa <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d838:	2200      	movs	r2, #0
    d83a:	490c      	ldr	r1, [pc, #48]	; (d86c <trx_frame_read+0x124>)
    d83c:	480a      	ldr	r0, [pc, #40]	; (d868 <trx_frame_read+0x120>)
    d83e:	4b0c      	ldr	r3, [pc, #48]	; (d870 <trx_frame_read+0x128>)
    d840:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d842:	23ff      	movs	r3, #255	; 0xff
    d844:	4642      	mov	r2, r8
    d846:	4213      	tst	r3, r2
    d848:	d005      	beq.n	d856 <trx_frame_read+0x10e>
		cpu_irq_enable();
    d84a:	2201      	movs	r2, #1
    d84c:	4b05      	ldr	r3, [pc, #20]	; (d864 <trx_frame_read+0x11c>)
    d84e:	701a      	strb	r2, [r3, #0]
    d850:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d854:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d856:	b002      	add	sp, #8
    d858:	bc1c      	pop	{r2, r3, r4}
    d85a:	4690      	mov	r8, r2
    d85c:	4699      	mov	r9, r3
    d85e:	46a2      	mov	sl, r4
    d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d862:	46c0      	nop			; (mov r8, r8)
    d864:	20000008 	.word	0x20000008
    d868:	20002140 	.word	0x20002140
    d86c:	20002104 	.word	0x20002104
    d870:	00007055 	.word	0x00007055
    d874:	200020fc 	.word	0x200020fc

0000d878 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    d878:	b5f0      	push	{r4, r5, r6, r7, lr}
    d87a:	46c6      	mov	lr, r8
    d87c:	b500      	push	{lr}
    d87e:	b082      	sub	sp, #8
    d880:	0004      	movs	r4, r0
    d882:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d884:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d888:	425a      	negs	r2, r3
    d88a:	4153      	adcs	r3, r2
    d88c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d88e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d890:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d894:	2200      	movs	r2, #0
    d896:	4b3a      	ldr	r3, [pc, #232]	; (d980 <trx_frame_write+0x108>)
    d898:	701a      	strb	r2, [r3, #0]
	return flags;
    d89a:	9b01      	ldr	r3, [sp, #4]
    d89c:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d89e:	4f39      	ldr	r7, [pc, #228]	; (d984 <trx_frame_write+0x10c>)
    d8a0:	3201      	adds	r2, #1
    d8a2:	4939      	ldr	r1, [pc, #228]	; (d988 <trx_frame_write+0x110>)
    d8a4:	0038      	movs	r0, r7
    d8a6:	4b39      	ldr	r3, [pc, #228]	; (d98c <trx_frame_write+0x114>)
    d8a8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d8aa:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d8ac:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d8ae:	7e1a      	ldrb	r2, [r3, #24]
    d8b0:	420a      	tst	r2, r1
    d8b2:	d0fc      	beq.n	d8ae <trx_frame_write+0x36>
    d8b4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d8b6:	07d2      	lsls	r2, r2, #31
    d8b8:	d501      	bpl.n	d8be <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d8ba:	2260      	movs	r2, #96	; 0x60
    d8bc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d8be:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d8c0:	7e1a      	ldrb	r2, [r3, #24]
    d8c2:	420a      	tst	r2, r1
    d8c4:	d0fc      	beq.n	d8c0 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d8c6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d8c8:	7e1a      	ldrb	r2, [r3, #24]
    d8ca:	420a      	tst	r2, r1
    d8cc:	d0fc      	beq.n	d8c8 <trx_frame_write+0x50>
    d8ce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d8d0:	0752      	lsls	r2, r2, #29
    d8d2:	d50c      	bpl.n	d8ee <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d8d4:	8b5a      	ldrh	r2, [r3, #26]
    d8d6:	0752      	lsls	r2, r2, #29
    d8d8:	d501      	bpl.n	d8de <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d8da:	2204      	movs	r2, #4
    d8dc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d8de:	4a29      	ldr	r2, [pc, #164]	; (d984 <trx_frame_write+0x10c>)
    d8e0:	7992      	ldrb	r2, [r2, #6]
    d8e2:	2a01      	cmp	r2, #1
    d8e4:	d00b      	beq.n	d8fe <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d8e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8e8:	b2d2      	uxtb	r2, r2
    d8ea:	4929      	ldr	r1, [pc, #164]	; (d990 <trx_frame_write+0x118>)
    d8ec:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d8ee:	4a25      	ldr	r2, [pc, #148]	; (d984 <trx_frame_write+0x10c>)
    d8f0:	7992      	ldrb	r2, [r2, #6]
    d8f2:	4694      	mov	ip, r2
    d8f4:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    d8f6:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    d8f8:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d8fa:	2404      	movs	r4, #4
    d8fc:	e00d      	b.n	d91a <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d8fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d900:	05d2      	lsls	r2, r2, #23
    d902:	0dd2      	lsrs	r2, r2, #23
    d904:	4922      	ldr	r1, [pc, #136]	; (d990 <trx_frame_write+0x118>)
    d906:	800a      	strh	r2, [r1, #0]
    d908:	e7f1      	b.n	d8ee <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d90a:	4662      	mov	r2, ip
    d90c:	2a01      	cmp	r2, #1
    d90e:	d01e      	beq.n	d94e <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d912:	b2d2      	uxtb	r2, r2
    d914:	4e1e      	ldr	r6, [pc, #120]	; (d990 <trx_frame_write+0x118>)
    d916:	8032      	strh	r2, [r6, #0]
    d918:	3101      	adds	r1, #1
	while (length--) {
    d91a:	3d01      	subs	r5, #1
    d91c:	b2ed      	uxtb	r5, r5
    d91e:	2dff      	cmp	r5, #255	; 0xff
    d920:	d01b      	beq.n	d95a <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d922:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d924:	423a      	tst	r2, r7
    d926:	d0fc      	beq.n	d922 <trx_frame_write+0xaa>
    d928:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d92a:	423a      	tst	r2, r7
    d92c:	d001      	beq.n	d932 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d92e:	780a      	ldrb	r2, [r1, #0]
    d930:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d932:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d934:	4202      	tst	r2, r0
    d936:	d0fc      	beq.n	d932 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d938:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d93a:	4222      	tst	r2, r4
    d93c:	d0fc      	beq.n	d938 <trx_frame_write+0xc0>
    d93e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d940:	4222      	tst	r2, r4
    d942:	d0e9      	beq.n	d918 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d944:	8b5a      	ldrh	r2, [r3, #26]
    d946:	4222      	tst	r2, r4
    d948:	d0df      	beq.n	d90a <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d94a:	835c      	strh	r4, [r3, #26]
    d94c:	e7dd      	b.n	d90a <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d950:	05d2      	lsls	r2, r2, #23
    d952:	0dd2      	lsrs	r2, r2, #23
    d954:	4e0e      	ldr	r6, [pc, #56]	; (d990 <trx_frame_write+0x118>)
    d956:	8032      	strh	r2, [r6, #0]
    d958:	e7de      	b.n	d918 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d95a:	2200      	movs	r2, #0
    d95c:	490a      	ldr	r1, [pc, #40]	; (d988 <trx_frame_write+0x110>)
    d95e:	4809      	ldr	r0, [pc, #36]	; (d984 <trx_frame_write+0x10c>)
    d960:	4b0a      	ldr	r3, [pc, #40]	; (d98c <trx_frame_write+0x114>)
    d962:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d964:	23ff      	movs	r3, #255	; 0xff
    d966:	4642      	mov	r2, r8
    d968:	4213      	tst	r3, r2
    d96a:	d005      	beq.n	d978 <trx_frame_write+0x100>
		cpu_irq_enable();
    d96c:	2201      	movs	r2, #1
    d96e:	4b04      	ldr	r3, [pc, #16]	; (d980 <trx_frame_write+0x108>)
    d970:	701a      	strb	r2, [r3, #0]
    d972:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d976:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d978:	b002      	add	sp, #8
    d97a:	bc04      	pop	{r2}
    d97c:	4690      	mov	r8, r2
    d97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d980:	20000008 	.word	0x20000008
    d984:	20002140 	.word	0x20002140
    d988:	20002104 	.word	0x20002104
    d98c:	00007055 	.word	0x00007055
    d990:	200020fc 	.word	0x200020fc

0000d994 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    d994:	b5f0      	push	{r4, r5, r6, r7, lr}
    d996:	46c6      	mov	lr, r8
    d998:	b500      	push	{lr}
    d99a:	b082      	sub	sp, #8
    d99c:	0006      	movs	r6, r0
    d99e:	000d      	movs	r5, r1
    d9a0:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d9a2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d9a6:	425a      	negs	r2, r3
    d9a8:	4153      	adcs	r3, r2
    d9aa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d9ac:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d9ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d9b2:	2200      	movs	r2, #0
    d9b4:	4b4d      	ldr	r3, [pc, #308]	; (daec <trx_sram_write+0x158>)
    d9b6:	701a      	strb	r2, [r3, #0]
	return flags;
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d9bc:	4f4c      	ldr	r7, [pc, #304]	; (daf0 <trx_sram_write+0x15c>)
    d9be:	3201      	adds	r2, #1
    d9c0:	494c      	ldr	r1, [pc, #304]	; (daf4 <trx_sram_write+0x160>)
    d9c2:	0038      	movs	r0, r7
    d9c4:	4b4c      	ldr	r3, [pc, #304]	; (daf8 <trx_sram_write+0x164>)
    d9c6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d9c8:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d9ca:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d9cc:	7e1a      	ldrb	r2, [r3, #24]
    d9ce:	420a      	tst	r2, r1
    d9d0:	d0fc      	beq.n	d9cc <trx_sram_write+0x38>
    d9d2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d9d4:	07d2      	lsls	r2, r2, #31
    d9d6:	d501      	bpl.n	d9dc <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d9d8:	2240      	movs	r2, #64	; 0x40
    d9da:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d9dc:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d9de:	7e1a      	ldrb	r2, [r3, #24]
    d9e0:	420a      	tst	r2, r1
    d9e2:	d0fc      	beq.n	d9de <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d9e4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d9e6:	7e1a      	ldrb	r2, [r3, #24]
    d9e8:	420a      	tst	r2, r1
    d9ea:	d0fc      	beq.n	d9e6 <trx_sram_write+0x52>
    d9ec:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d9ee:	0752      	lsls	r2, r2, #29
    d9f0:	d50c      	bpl.n	da0c <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d9f2:	8b5a      	ldrh	r2, [r3, #26]
    d9f4:	0752      	lsls	r2, r2, #29
    d9f6:	d501      	bpl.n	d9fc <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d9f8:	2204      	movs	r2, #4
    d9fa:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d9fc:	4a3c      	ldr	r2, [pc, #240]	; (daf0 <trx_sram_write+0x15c>)
    d9fe:	7992      	ldrb	r2, [r2, #6]
    da00:	2a01      	cmp	r2, #1
    da02:	d02b      	beq.n	da5c <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da06:	b2d2      	uxtb	r2, r2
    da08:	493c      	ldr	r1, [pc, #240]	; (dafc <trx_sram_write+0x168>)
    da0a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    da0c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    da0e:	7e1a      	ldrb	r2, [r3, #24]
    da10:	420a      	tst	r2, r1
    da12:	d0fc      	beq.n	da0e <trx_sram_write+0x7a>
    da14:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    da16:	07d2      	lsls	r2, r2, #31
    da18:	d500      	bpl.n	da1c <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da1a:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    da1c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    da1e:	7e1a      	ldrb	r2, [r3, #24]
    da20:	420a      	tst	r2, r1
    da22:	d0fc      	beq.n	da1e <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    da24:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    da26:	7e1a      	ldrb	r2, [r3, #24]
    da28:	420a      	tst	r2, r1
    da2a:	d0fc      	beq.n	da26 <trx_sram_write+0x92>
    da2c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    da2e:	0752      	lsls	r2, r2, #29
    da30:	d50c      	bpl.n	da4c <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    da32:	8b5a      	ldrh	r2, [r3, #26]
    da34:	0752      	lsls	r2, r2, #29
    da36:	d501      	bpl.n	da3c <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    da38:	2204      	movs	r2, #4
    da3a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da3c:	4a2c      	ldr	r2, [pc, #176]	; (daf0 <trx_sram_write+0x15c>)
    da3e:	7992      	ldrb	r2, [r2, #6]
    da40:	2a01      	cmp	r2, #1
    da42:	d011      	beq.n	da68 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da46:	b2d2      	uxtb	r2, r2
    da48:	492c      	ldr	r1, [pc, #176]	; (dafc <trx_sram_write+0x168>)
    da4a:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da4c:	4a28      	ldr	r2, [pc, #160]	; (daf0 <trx_sram_write+0x15c>)
    da4e:	7992      	ldrb	r2, [r2, #6]
    da50:	4694      	mov	ip, r2
    da52:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    da54:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    da56:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    da58:	2104      	movs	r1, #4
    da5a:	e013      	b.n	da84 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    da5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da5e:	05d2      	lsls	r2, r2, #23
    da60:	0dd2      	lsrs	r2, r2, #23
    da62:	4926      	ldr	r1, [pc, #152]	; (dafc <trx_sram_write+0x168>)
    da64:	800a      	strh	r2, [r1, #0]
    da66:	e7d1      	b.n	da0c <trx_sram_write+0x78>
    da68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da6a:	05d2      	lsls	r2, r2, #23
    da6c:	0dd2      	lsrs	r2, r2, #23
    da6e:	4923      	ldr	r1, [pc, #140]	; (dafc <trx_sram_write+0x168>)
    da70:	800a      	strh	r2, [r1, #0]
    da72:	e7eb      	b.n	da4c <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da74:	4662      	mov	r2, ip
    da76:	2a01      	cmp	r2, #1
    da78:	d01e      	beq.n	dab8 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da7c:	b2d2      	uxtb	r2, r2
    da7e:	4f1f      	ldr	r7, [pc, #124]	; (dafc <trx_sram_write+0x168>)
    da80:	803a      	strh	r2, [r7, #0]
    da82:	3001      	adds	r0, #1
	while (length--) {
    da84:	3c01      	subs	r4, #1
    da86:	b2e4      	uxtb	r4, r4
    da88:	2cff      	cmp	r4, #255	; 0xff
    da8a:	d01b      	beq.n	dac4 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    da8c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    da8e:	4232      	tst	r2, r6
    da90:	d0fc      	beq.n	da8c <trx_sram_write+0xf8>
    da92:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    da94:	4232      	tst	r2, r6
    da96:	d001      	beq.n	da9c <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da98:	7802      	ldrb	r2, [r0, #0]
    da9a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    da9c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    da9e:	422a      	tst	r2, r5
    daa0:	d0fc      	beq.n	da9c <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    daa2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    daa4:	420a      	tst	r2, r1
    daa6:	d0fc      	beq.n	daa2 <trx_sram_write+0x10e>
    daa8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    daaa:	420a      	tst	r2, r1
    daac:	d0e9      	beq.n	da82 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    daae:	8b5a      	ldrh	r2, [r3, #26]
    dab0:	420a      	tst	r2, r1
    dab2:	d0df      	beq.n	da74 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dab4:	8359      	strh	r1, [r3, #26]
    dab6:	e7dd      	b.n	da74 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    daba:	05d2      	lsls	r2, r2, #23
    dabc:	0dd2      	lsrs	r2, r2, #23
    dabe:	4f0f      	ldr	r7, [pc, #60]	; (dafc <trx_sram_write+0x168>)
    dac0:	803a      	strh	r2, [r7, #0]
    dac2:	e7de      	b.n	da82 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    dac4:	2200      	movs	r2, #0
    dac6:	490b      	ldr	r1, [pc, #44]	; (daf4 <trx_sram_write+0x160>)
    dac8:	4809      	ldr	r0, [pc, #36]	; (daf0 <trx_sram_write+0x15c>)
    daca:	4b0b      	ldr	r3, [pc, #44]	; (daf8 <trx_sram_write+0x164>)
    dacc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dace:	23ff      	movs	r3, #255	; 0xff
    dad0:	4642      	mov	r2, r8
    dad2:	4213      	tst	r3, r2
    dad4:	d005      	beq.n	dae2 <trx_sram_write+0x14e>
		cpu_irq_enable();
    dad6:	2201      	movs	r2, #1
    dad8:	4b04      	ldr	r3, [pc, #16]	; (daec <trx_sram_write+0x158>)
    dada:	701a      	strb	r2, [r3, #0]
    dadc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dae0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dae2:	b002      	add	sp, #8
    dae4:	bc04      	pop	{r2}
    dae6:	4690      	mov	r8, r2
    dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    daea:	46c0      	nop			; (mov r8, r8)
    daec:	20000008 	.word	0x20000008
    daf0:	20002140 	.word	0x20002140
    daf4:	20002104 	.word	0x20002104
    daf8:	00007055 	.word	0x00007055
    dafc:	200020fc 	.word	0x200020fc

0000db00 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    db00:	b5f0      	push	{r4, r5, r6, r7, lr}
    db02:	46d6      	mov	lr, sl
    db04:	464f      	mov	r7, r9
    db06:	4646      	mov	r6, r8
    db08:	b5c0      	push	{r6, r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	0004      	movs	r4, r0
    db0e:	000d      	movs	r5, r1
    db10:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    db12:	2001      	movs	r0, #1
    db14:	4b56      	ldr	r3, [pc, #344]	; (dc70 <trx_sram_read+0x170>)
    db16:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    db18:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    db1c:	425a      	negs	r2, r3
    db1e:	4153      	adcs	r3, r2
    db20:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    db22:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    db24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    db28:	2200      	movs	r2, #0
    db2a:	4b52      	ldr	r3, [pc, #328]	; (dc74 <trx_sram_read+0x174>)
    db2c:	701a      	strb	r2, [r3, #0]
	return flags;
    db2e:	9b01      	ldr	r3, [sp, #4]
    db30:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    db32:	4e51      	ldr	r6, [pc, #324]	; (dc78 <trx_sram_read+0x178>)
    db34:	3201      	adds	r2, #1
    db36:	4951      	ldr	r1, [pc, #324]	; (dc7c <trx_sram_read+0x17c>)
    db38:	0030      	movs	r0, r6
    db3a:	4b51      	ldr	r3, [pc, #324]	; (dc80 <trx_sram_read+0x180>)
    db3c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    db3e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    db40:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    db42:	7e1a      	ldrb	r2, [r3, #24]
    db44:	420a      	tst	r2, r1
    db46:	d0fc      	beq.n	db42 <trx_sram_read+0x42>
    db48:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    db4a:	07d2      	lsls	r2, r2, #31
    db4c:	d501      	bpl.n	db52 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    db4e:	2200      	movs	r2, #0
    db50:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    db52:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    db54:	7e1a      	ldrb	r2, [r3, #24]
    db56:	420a      	tst	r2, r1
    db58:	d0fc      	beq.n	db54 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    db5a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db5c:	7e1a      	ldrb	r2, [r3, #24]
    db5e:	420a      	tst	r2, r1
    db60:	d0fc      	beq.n	db5c <trx_sram_read+0x5c>
    db62:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    db64:	0752      	lsls	r2, r2, #29
    db66:	d50c      	bpl.n	db82 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    db68:	8b5a      	ldrh	r2, [r3, #26]
    db6a:	0752      	lsls	r2, r2, #29
    db6c:	d501      	bpl.n	db72 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    db6e:	2204      	movs	r2, #4
    db70:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db72:	4a41      	ldr	r2, [pc, #260]	; (dc78 <trx_sram_read+0x178>)
    db74:	7992      	ldrb	r2, [r2, #6]
    db76:	2a01      	cmp	r2, #1
    db78:	d033      	beq.n	dbe2 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    db7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db7c:	b2d2      	uxtb	r2, r2
    db7e:	4941      	ldr	r1, [pc, #260]	; (dc84 <trx_sram_read+0x184>)
    db80:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    db82:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    db84:	7e1a      	ldrb	r2, [r3, #24]
    db86:	420a      	tst	r2, r1
    db88:	d0fc      	beq.n	db84 <trx_sram_read+0x84>
    db8a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    db8c:	07d2      	lsls	r2, r2, #31
    db8e:	d500      	bpl.n	db92 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    db90:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    db92:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    db94:	7e1a      	ldrb	r2, [r3, #24]
    db96:	420a      	tst	r2, r1
    db98:	d0fc      	beq.n	db94 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    db9a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db9c:	7e1a      	ldrb	r2, [r3, #24]
    db9e:	420a      	tst	r2, r1
    dba0:	d0fc      	beq.n	db9c <trx_sram_read+0x9c>
    dba2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dba4:	0752      	lsls	r2, r2, #29
    dba6:	d50c      	bpl.n	dbc2 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dba8:	8b5a      	ldrh	r2, [r3, #26]
    dbaa:	0752      	lsls	r2, r2, #29
    dbac:	d501      	bpl.n	dbb2 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dbae:	2204      	movs	r2, #4
    dbb0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dbb2:	4a31      	ldr	r2, [pc, #196]	; (dc78 <trx_sram_read+0x178>)
    dbb4:	7992      	ldrb	r2, [r2, #6]
    dbb6:	2a01      	cmp	r2, #1
    dbb8:	d019      	beq.n	dbee <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbbc:	b2db      	uxtb	r3, r3
    dbbe:	4a31      	ldr	r2, [pc, #196]	; (dc84 <trx_sram_read+0x184>)
    dbc0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    dbc2:	1e7b      	subs	r3, r7, #1
    dbc4:	b2db      	uxtb	r3, r3
    dbc6:	2f00      	cmp	r7, #0
    dbc8:	d03c      	beq.n	dc44 <trx_sram_read+0x144>
    dbca:	3301      	adds	r3, #1
    dbcc:	469c      	mov	ip, r3
    dbce:	44ac      	add	ip, r5
    dbd0:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    dbd2:	4e29      	ldr	r6, [pc, #164]	; (dc78 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    dbd4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dbd6:	2300      	movs	r3, #0
    dbd8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    dbda:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    dbdc:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dbde:	46b1      	mov	r9, r6
    dbe0:	e015      	b.n	dc0e <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dbe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbe4:	05d2      	lsls	r2, r2, #23
    dbe6:	0dd2      	lsrs	r2, r2, #23
    dbe8:	4926      	ldr	r1, [pc, #152]	; (dc84 <trx_sram_read+0x184>)
    dbea:	800a      	strh	r2, [r1, #0]
    dbec:	e7c9      	b.n	db82 <trx_sram_read+0x82>
    dbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbf0:	05db      	lsls	r3, r3, #23
    dbf2:	0ddb      	lsrs	r3, r3, #23
    dbf4:	4a23      	ldr	r2, [pc, #140]	; (dc84 <trx_sram_read+0x184>)
    dbf6:	8013      	strh	r3, [r2, #0]
    dbf8:	e7e3      	b.n	dbc2 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dbfa:	464a      	mov	r2, r9
    dbfc:	7992      	ldrb	r2, [r2, #6]
    dbfe:	2a01      	cmp	r2, #1
    dc00:	d01c      	beq.n	dc3c <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dc02:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    dc04:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    dc06:	702f      	strb	r7, [r5, #0]
		data++;
    dc08:	3501      	adds	r5, #1
	while (length--) {
    dc0a:	4565      	cmp	r5, ip
    dc0c:	d01a      	beq.n	dc44 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dc0e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dc10:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    dc12:	4202      	tst	r2, r0
    dc14:	d0fc      	beq.n	dc10 <trx_sram_read+0x110>
    dc16:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dc18:	4202      	tst	r2, r0
    dc1a:	d001      	beq.n	dc20 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dc1c:	4652      	mov	r2, sl
    dc1e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dc20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    dc22:	4222      	tst	r2, r4
    dc24:	d0fc      	beq.n	dc20 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dc26:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    dc28:	420a      	tst	r2, r1
    dc2a:	d0fc      	beq.n	dc26 <trx_sram_read+0x126>
    dc2c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dc2e:	420a      	tst	r2, r1
    dc30:	d0e9      	beq.n	dc06 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dc32:	8b5a      	ldrh	r2, [r3, #26]
    dc34:	420a      	tst	r2, r1
    dc36:	d0e0      	beq.n	dbfa <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dc38:	8359      	strh	r1, [r3, #26]
    dc3a:	e7de      	b.n	dbfa <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dc3c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    dc3e:	05ff      	lsls	r7, r7, #23
    dc40:	0dff      	lsrs	r7, r7, #23
    dc42:	e7e0      	b.n	dc06 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    dc44:	2200      	movs	r2, #0
    dc46:	490d      	ldr	r1, [pc, #52]	; (dc7c <trx_sram_read+0x17c>)
    dc48:	480b      	ldr	r0, [pc, #44]	; (dc78 <trx_sram_read+0x178>)
    dc4a:	4b0d      	ldr	r3, [pc, #52]	; (dc80 <trx_sram_read+0x180>)
    dc4c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dc4e:	23ff      	movs	r3, #255	; 0xff
    dc50:	4642      	mov	r2, r8
    dc52:	4213      	tst	r3, r2
    dc54:	d005      	beq.n	dc62 <trx_sram_read+0x162>
		cpu_irq_enable();
    dc56:	2201      	movs	r2, #1
    dc58:	4b06      	ldr	r3, [pc, #24]	; (dc74 <trx_sram_read+0x174>)
    dc5a:	701a      	strb	r2, [r3, #0]
    dc5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dc60:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dc62:	b002      	add	sp, #8
    dc64:	bc1c      	pop	{r2, r3, r4}
    dc66:	4690      	mov	r8, r2
    dc68:	4699      	mov	r9, r3
    dc6a:	46a2      	mov	sl, r4
    dc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc6e:	46c0      	nop			; (mov r8, r8)
    dc70:	00006239 	.word	0x00006239
    dc74:	20000008 	.word	0x20000008
    dc78:	20002140 	.word	0x20002140
    dc7c:	20002104 	.word	0x20002104
    dc80:	00007055 	.word	0x00007055
    dc84:	200020fc 	.word	0x200020fc

0000dc88 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc8a:	46d6      	mov	lr, sl
    dc8c:	464f      	mov	r7, r9
    dc8e:	4646      	mov	r6, r8
    dc90:	b5c0      	push	{r6, r7, lr}
    dc92:	0006      	movs	r6, r0
    dc94:	468a      	mov	sl, r1
    dc96:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    dc98:	2001      	movs	r0, #1
    dc9a:	4b76      	ldr	r3, [pc, #472]	; (de74 <trx_aes_wrrd+0x1ec>)
    dc9c:	4798      	blx	r3

	ENTER_TRX_REGION();
    dc9e:	2100      	movs	r1, #0
    dca0:	2000      	movs	r0, #0
    dca2:	4b75      	ldr	r3, [pc, #468]	; (de78 <trx_aes_wrrd+0x1f0>)
    dca4:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    dca6:	4f75      	ldr	r7, [pc, #468]	; (de7c <trx_aes_wrrd+0x1f4>)
    dca8:	2201      	movs	r2, #1
    dcaa:	4975      	ldr	r1, [pc, #468]	; (de80 <trx_aes_wrrd+0x1f8>)
    dcac:	0038      	movs	r0, r7
    dcae:	4b75      	ldr	r3, [pc, #468]	; (de84 <trx_aes_wrrd+0x1fc>)
    dcb0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    dcb2:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    dcb4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dcb6:	7e1a      	ldrb	r2, [r3, #24]
    dcb8:	420a      	tst	r2, r1
    dcba:	d0fc      	beq.n	dcb6 <trx_aes_wrrd+0x2e>
    dcbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dcbe:	07d2      	lsls	r2, r2, #31
    dcc0:	d501      	bpl.n	dcc6 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dcc2:	2240      	movs	r2, #64	; 0x40
    dcc4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    dcc6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dcc8:	7e1a      	ldrb	r2, [r3, #24]
    dcca:	420a      	tst	r2, r1
    dccc:	d0fc      	beq.n	dcc8 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dcce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dcd0:	7e1a      	ldrb	r2, [r3, #24]
    dcd2:	420a      	tst	r2, r1
    dcd4:	d0fc      	beq.n	dcd0 <trx_aes_wrrd+0x48>
    dcd6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dcd8:	0752      	lsls	r2, r2, #29
    dcda:	d50c      	bpl.n	dcf6 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dcdc:	8b5a      	ldrh	r2, [r3, #26]
    dcde:	0752      	lsls	r2, r2, #29
    dce0:	d501      	bpl.n	dce6 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dce2:	2204      	movs	r2, #4
    dce4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dce6:	4a65      	ldr	r2, [pc, #404]	; (de7c <trx_aes_wrrd+0x1f4>)
    dce8:	7992      	ldrb	r2, [r2, #6]
    dcea:	2a01      	cmp	r2, #1
    dcec:	d055      	beq.n	dd9a <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dcee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dcf0:	b2d2      	uxtb	r2, r2
    dcf2:	4965      	ldr	r1, [pc, #404]	; (de88 <trx_aes_wrrd+0x200>)
    dcf4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    dcf6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dcf8:	7e1a      	ldrb	r2, [r3, #24]
    dcfa:	420a      	tst	r2, r1
    dcfc:	d0fc      	beq.n	dcf8 <trx_aes_wrrd+0x70>
    dcfe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dd00:	07d2      	lsls	r2, r2, #31
    dd02:	d500      	bpl.n	dd06 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dd04:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    dd06:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dd08:	7e1a      	ldrb	r2, [r3, #24]
    dd0a:	420a      	tst	r2, r1
    dd0c:	d0fc      	beq.n	dd08 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dd0e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dd10:	7e1a      	ldrb	r2, [r3, #24]
    dd12:	420a      	tst	r2, r1
    dd14:	d0fc      	beq.n	dd10 <trx_aes_wrrd+0x88>
    dd16:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dd18:	0752      	lsls	r2, r2, #29
    dd1a:	d50c      	bpl.n	dd36 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dd1c:	8b5a      	ldrh	r2, [r3, #26]
    dd1e:	0752      	lsls	r2, r2, #29
    dd20:	d501      	bpl.n	dd26 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dd22:	2204      	movs	r2, #4
    dd24:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dd26:	4a55      	ldr	r2, [pc, #340]	; (de7c <trx_aes_wrrd+0x1f4>)
    dd28:	7992      	ldrb	r2, [r2, #6]
    dd2a:	2a01      	cmp	r2, #1
    dd2c:	d03b      	beq.n	dda6 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dd2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd30:	b2d2      	uxtb	r2, r2
    dd32:	4955      	ldr	r1, [pc, #340]	; (de88 <trx_aes_wrrd+0x200>)
    dd34:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    dd36:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dd38:	7e1a      	ldrb	r2, [r3, #24]
    dd3a:	420a      	tst	r2, r1
    dd3c:	d0fc      	beq.n	dd38 <trx_aes_wrrd+0xb0>
    dd3e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dd40:	07d2      	lsls	r2, r2, #31
    dd42:	d502      	bpl.n	dd4a <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dd44:	4652      	mov	r2, sl
    dd46:	7812      	ldrb	r2, [r2, #0]
    dd48:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    dd4a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dd4c:	7e1a      	ldrb	r2, [r3, #24]
    dd4e:	420a      	tst	r2, r1
    dd50:	d0fc      	beq.n	dd4c <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dd52:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dd54:	7e1a      	ldrb	r2, [r3, #24]
    dd56:	420a      	tst	r2, r1
    dd58:	d0fc      	beq.n	dd54 <trx_aes_wrrd+0xcc>
    dd5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dd5c:	0752      	lsls	r2, r2, #29
    dd5e:	d50c      	bpl.n	dd7a <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dd60:	8b5a      	ldrh	r2, [r3, #26]
    dd62:	0752      	lsls	r2, r2, #29
    dd64:	d501      	bpl.n	dd6a <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dd66:	2204      	movs	r2, #4
    dd68:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dd6a:	4a44      	ldr	r2, [pc, #272]	; (de7c <trx_aes_wrrd+0x1f4>)
    dd6c:	7992      	ldrb	r2, [r2, #6]
    dd6e:	2a01      	cmp	r2, #1
    dd70:	d01f      	beq.n	ddb2 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd74:	b2db      	uxtb	r3, r3
    dd76:	4a44      	ldr	r2, [pc, #272]	; (de88 <trx_aes_wrrd+0x200>)
    dd78:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    dd7a:	2700      	movs	r7, #0
    dd7c:	2c00      	cmp	r4, #0
    dd7e:	d043      	beq.n	de08 <trx_aes_wrrd+0x180>
    dd80:	4656      	mov	r6, sl
    dd82:	3c01      	subs	r4, #1
    dd84:	b2e4      	uxtb	r4, r4
    dd86:	3401      	adds	r4, #1
    dd88:	44a2      	add	sl, r4
    dd8a:	46d0      	mov	r8, sl
    dd8c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    dd8e:	4d3b      	ldr	r5, [pc, #236]	; (de7c <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    dd90:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    dd92:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    dd94:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dd96:	46a9      	mov	r9, r5
    dd98:	e01b      	b.n	ddd2 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dd9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd9c:	05d2      	lsls	r2, r2, #23
    dd9e:	0dd2      	lsrs	r2, r2, #23
    dda0:	4939      	ldr	r1, [pc, #228]	; (de88 <trx_aes_wrrd+0x200>)
    dda2:	800a      	strh	r2, [r1, #0]
    dda4:	e7a7      	b.n	dcf6 <trx_aes_wrrd+0x6e>
    dda6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dda8:	05d2      	lsls	r2, r2, #23
    ddaa:	0dd2      	lsrs	r2, r2, #23
    ddac:	4936      	ldr	r1, [pc, #216]	; (de88 <trx_aes_wrrd+0x200>)
    ddae:	800a      	strh	r2, [r1, #0]
    ddb0:	e7c1      	b.n	dd36 <trx_aes_wrrd+0xae>
    ddb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddb4:	05db      	lsls	r3, r3, #23
    ddb6:	0ddb      	lsrs	r3, r3, #23
    ddb8:	4a33      	ldr	r2, [pc, #204]	; (de88 <trx_aes_wrrd+0x200>)
    ddba:	8013      	strh	r3, [r2, #0]
    ddbc:	e7dd      	b.n	dd7a <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ddbe:	464a      	mov	r2, r9
    ddc0:	7992      	ldrb	r2, [r2, #6]
    ddc2:	2a01      	cmp	r2, #1
    ddc4:	d01c      	beq.n	de00 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ddc6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ddc8:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    ddca:	7037      	strb	r7, [r6, #0]
    ddcc:	3601      	adds	r6, #1
	while (length > 0) {
    ddce:	45b0      	cmp	r8, r6
    ddd0:	d01a      	beq.n	de08 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ddd2:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ddd4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    ddd6:	4202      	tst	r2, r0
    ddd8:	d0fc      	beq.n	ddd4 <trx_aes_wrrd+0x14c>
    ddda:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dddc:	4202      	tst	r2, r0
    ddde:	d001      	beq.n	dde4 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dde0:	7872      	ldrb	r2, [r6, #1]
    dde2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dde4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    dde6:	4222      	tst	r2, r4
    dde8:	d0fc      	beq.n	dde4 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ddea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    ddec:	420a      	tst	r2, r1
    ddee:	d0fc      	beq.n	ddea <trx_aes_wrrd+0x162>
    ddf0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ddf2:	420a      	tst	r2, r1
    ddf4:	d0e9      	beq.n	ddca <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ddf6:	8b5a      	ldrh	r2, [r3, #26]
    ddf8:	420a      	tst	r2, r1
    ddfa:	d0e0      	beq.n	ddbe <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ddfc:	8359      	strh	r1, [r3, #26]
    ddfe:	e7de      	b.n	ddbe <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    de00:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    de02:	05ff      	lsls	r7, r7, #23
    de04:	0dff      	lsrs	r7, r7, #23
    de06:	e7e0      	b.n	ddca <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    de08:	4b1c      	ldr	r3, [pc, #112]	; (de7c <trx_aes_wrrd+0x1f4>)
    de0a:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    de0c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de0e:	7e1a      	ldrb	r2, [r3, #24]
    de10:	420a      	tst	r2, r1
    de12:	d0fc      	beq.n	de0e <trx_aes_wrrd+0x186>
    de14:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de16:	07d2      	lsls	r2, r2, #31
    de18:	d501      	bpl.n	de1e <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de1a:	2200      	movs	r2, #0
    de1c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    de1e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de20:	7e1a      	ldrb	r2, [r3, #24]
    de22:	420a      	tst	r2, r1
    de24:	d0fc      	beq.n	de20 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    de26:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de28:	7e1a      	ldrb	r2, [r3, #24]
    de2a:	420a      	tst	r2, r1
    de2c:	d0fc      	beq.n	de28 <trx_aes_wrrd+0x1a0>
    de2e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    de30:	0752      	lsls	r2, r2, #29
    de32:	d50a      	bpl.n	de4a <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de34:	8b5a      	ldrh	r2, [r3, #26]
    de36:	0752      	lsls	r2, r2, #29
    de38:	d501      	bpl.n	de3e <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de3a:	2204      	movs	r2, #4
    de3c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de3e:	4a0f      	ldr	r2, [pc, #60]	; (de7c <trx_aes_wrrd+0x1f4>)
    de40:	7992      	ldrb	r2, [r2, #6]
    de42:	2a01      	cmp	r2, #1
    de44:	d011      	beq.n	de6a <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de46:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    de48:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    de4a:	4653      	mov	r3, sl
    de4c:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    de4e:	2200      	movs	r2, #0
    de50:	490b      	ldr	r1, [pc, #44]	; (de80 <trx_aes_wrrd+0x1f8>)
    de52:	480a      	ldr	r0, [pc, #40]	; (de7c <trx_aes_wrrd+0x1f4>)
    de54:	4b0b      	ldr	r3, [pc, #44]	; (de84 <trx_aes_wrrd+0x1fc>)
    de56:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    de58:	2100      	movs	r1, #0
    de5a:	2000      	movs	r0, #0
    de5c:	4b0b      	ldr	r3, [pc, #44]	; (de8c <trx_aes_wrrd+0x204>)
    de5e:	4798      	blx	r3
}
    de60:	bc1c      	pop	{r2, r3, r4}
    de62:	4690      	mov	r8, r2
    de64:	4699      	mov	r9, r3
    de66:	46a2      	mov	sl, r4
    de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    de6a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    de6c:	05ff      	lsls	r7, r7, #23
    de6e:	0dff      	lsrs	r7, r7, #23
    de70:	e7eb      	b.n	de4a <trx_aes_wrrd+0x1c2>
    de72:	46c0      	nop			; (mov r8, r8)
    de74:	00006239 	.word	0x00006239
    de78:	00006409 	.word	0x00006409
    de7c:	20002140 	.word	0x20002140
    de80:	20002104 	.word	0x20002104
    de84:	00007055 	.word	0x00007055
    de88:	200020fc 	.word	0x200020fc
    de8c:	000063e9 	.word	0x000063e9

0000de90 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    de90:	b510      	push	{r4, lr}
        printf("\r\nStarting Node 1 of Simple Demo for MiWi(TM) STAR Stack ...");  
    de92:	4809      	ldr	r0, [pc, #36]	; (deb8 <DemoOutput_Greeting+0x28>)
    de94:	4c09      	ldr	r4, [pc, #36]	; (debc <DemoOutput_Greeting+0x2c>)
    de96:	47a0      	blx	r4
        printf("\r\n     RF Transceiver: AT86RF212B");
    de98:	4809      	ldr	r0, [pc, #36]	; (dec0 <DemoOutput_Greeting+0x30>)
    de9a:	47a0      	blx	r4
        printf("\r\n   Demo Instruction:");
    de9c:	4809      	ldr	r0, [pc, #36]	; (dec4 <DemoOutput_Greeting+0x34>)
    de9e:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    dea0:	4809      	ldr	r0, [pc, #36]	; (dec8 <DemoOutput_Greeting+0x38>)
    dea2:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    dea4:	4809      	ldr	r0, [pc, #36]	; (decc <DemoOutput_Greeting+0x3c>)
    dea6:	47a0      	blx	r4
        printf("\r\n                     Press SW Button to broadcast message.");
    dea8:	4809      	ldr	r0, [pc, #36]	; (ded0 <DemoOutput_Greeting+0x40>)
    deaa:	47a0      	blx	r4
		printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    deac:	4809      	ldr	r0, [pc, #36]	; (ded4 <DemoOutput_Greeting+0x44>)
    deae:	47a0      	blx	r4
        printf("\r\n\r\n");		
    deb0:	4809      	ldr	r0, [pc, #36]	; (ded8 <DemoOutput_Greeting+0x48>)
    deb2:	4b0a      	ldr	r3, [pc, #40]	; (dedc <DemoOutput_Greeting+0x4c>)
    deb4:	4798      	blx	r3
}        
    deb6:	bd10      	pop	{r4, pc}
    deb8:	000115c4 	.word	0x000115c4
    debc:	0000ff35 	.word	0x0000ff35
    dec0:	00011604 	.word	0x00011604
    dec4:	00011628 	.word	0x00011628
    dec8:	00011640 	.word	0x00011640
    decc:	00011680 	.word	0x00011680
    ded0:	000116bc 	.word	0x000116bc
    ded4:	000116fc 	.word	0x000116fc
    ded8:	00011744 	.word	0x00011744
    dedc:	00010029 	.word	0x00010029

0000dee0 <DemoOutput_Channel>:

void demo_output_freezer_options(void)
{ 
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    dee0:	b570      	push	{r4, r5, r6, lr}
    dee2:	0004      	movs	r4, r0
    if( Step == 0 )
    dee4:	2900      	cmp	r1, #0
    dee6:	d009      	beq.n	defc <DemoOutput_Channel+0x1c>
        #endif
    }
    else
    { 
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    dee8:	4809      	ldr	r0, [pc, #36]	; (df10 <DemoOutput_Channel+0x30>)
    deea:	4d0a      	ldr	r5, [pc, #40]	; (df14 <DemoOutput_Channel+0x34>)
    deec:	47a8      	blx	r5
        printf("%d",channel);
    deee:	0021      	movs	r1, r4
    def0:	4809      	ldr	r0, [pc, #36]	; (df18 <DemoOutput_Channel+0x38>)
    def2:	47a8      	blx	r5
        printf("\r\n");
    def4:	4809      	ldr	r0, [pc, #36]	; (df1c <DemoOutput_Channel+0x3c>)
    def6:	4b0a      	ldr	r3, [pc, #40]	; (df20 <DemoOutput_Channel+0x40>)
    def8:	4798      	blx	r3
        #endif
    }
}    
    defa:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    defc:	4809      	ldr	r0, [pc, #36]	; (df24 <DemoOutput_Channel+0x44>)
    defe:	4d05      	ldr	r5, [pc, #20]	; (df14 <DemoOutput_Channel+0x34>)
    df00:	47a8      	blx	r5
        printf("%d",channel);
    df02:	0021      	movs	r1, r4
    df04:	4804      	ldr	r0, [pc, #16]	; (df18 <DemoOutput_Channel+0x38>)
    df06:	47a8      	blx	r5
        printf("\r\n");
    df08:	4804      	ldr	r0, [pc, #16]	; (df1c <DemoOutput_Channel+0x3c>)
    df0a:	4b05      	ldr	r3, [pc, #20]	; (df20 <DemoOutput_Channel+0x40>)
    df0c:	4798      	blx	r3
    df0e:	e7f4      	b.n	defa <DemoOutput_Channel+0x1a>
    df10:	0001155c 	.word	0x0001155c
    df14:	0000ff35 	.word	0x0000ff35
    df18:	00011558 	.word	0x00011558
    df1c:	00011910 	.word	0x00011910
    df20:	00010029 	.word	0x00010029
    df24:	00011538 	.word	0x00011538

0000df28 <DemoOutput_HandleMessage>:
{
}


void DemoOutput_HandleMessage(void)
{
    df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	uint8_t startPayloadIndex = 0;

    if( rxMessage.flags.bits.secEn )
    df2a:	4b2d      	ldr	r3, [pc, #180]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	071b      	lsls	r3, r3, #28
    df30:	d427      	bmi.n	df82 <DemoOutput_HandleMessage+0x5a>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    df32:	4b2b      	ldr	r3, [pc, #172]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	079b      	lsls	r3, r3, #30
    df38:	d028      	beq.n	df8c <DemoOutput_HandleMessage+0x64>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    df3a:	211c      	movs	r1, #28
    df3c:	4829      	ldr	r0, [pc, #164]	; (dfe4 <DemoOutput_HandleMessage+0xbc>)
    df3e:	4b2a      	ldr	r3, [pc, #168]	; (dfe8 <DemoOutput_HandleMessage+0xc0>)
    df40:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    df42:	4c27      	ldr	r4, [pc, #156]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    df44:	7b61      	ldrb	r1, [r4, #13]
    df46:	4829      	ldr	r0, [pc, #164]	; (dfec <DemoOutput_HandleMessage+0xc4>)
    df48:	4b29      	ldr	r3, [pc, #164]	; (dff0 <DemoOutput_HandleMessage+0xc8>)
    df4a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    df4c:	7823      	ldrb	r3, [r4, #0]
    df4e:	065b      	lsls	r3, r3, #25
    df50:	d421      	bmi.n	df96 <DemoOutput_HandleMessage+0x6e>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    df52:	2103      	movs	r1, #3
    df54:	4827      	ldr	r0, [pc, #156]	; (dff4 <DemoOutput_HandleMessage+0xcc>)
    df56:	4b24      	ldr	r3, [pc, #144]	; (dfe8 <DemoOutput_HandleMessage+0xc0>)
    df58:	4798      	blx	r3

	/* If the role is not PAN Coordinator and receiving a unicast
	   then first three bytes are source end device info, so skip this*/
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    df5a:	4b27      	ldr	r3, [pc, #156]	; (dff8 <DemoOutput_HandleMessage+0xd0>)
    df5c:	781b      	ldrb	r3, [r3, #0]
	uint8_t startPayloadIndex = 0;
    df5e:	2400      	movs	r4, #0
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    df60:	2b02      	cmp	r3, #2
    df62:	d037      	beq.n	dfd4 <DemoOutput_HandleMessage+0xac>
	{
	    startPayloadIndex = 3;
	}
    
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    df64:	4b1e      	ldr	r3, [pc, #120]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    df66:	7b1b      	ldrb	r3, [r3, #12]
    df68:	42a3      	cmp	r3, r4
    df6a:	d909      	bls.n	df80 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_putchar(rxMessage.Payload[i]);
    df6c:	4d1c      	ldr	r5, [pc, #112]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    df6e:	4e23      	ldr	r6, [pc, #140]	; (dffc <DemoOutput_HandleMessage+0xd4>)
    df70:	68ab      	ldr	r3, [r5, #8]
    df72:	5d18      	ldrb	r0, [r3, r4]
    df74:	47b0      	blx	r6
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    df76:	3401      	adds	r4, #1
    df78:	b2e4      	uxtb	r4, r4
    df7a:	7b2b      	ldrb	r3, [r5, #12]
    df7c:	42a3      	cmp	r3, r4
    df7e:	d8f7      	bhi.n	df70 <DemoOutput_HandleMessage+0x48>
    }
} 
    df80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    df82:	2109      	movs	r1, #9
    df84:	481e      	ldr	r0, [pc, #120]	; (e000 <DemoOutput_HandleMessage+0xd8>)
    df86:	4b18      	ldr	r3, [pc, #96]	; (dfe8 <DemoOutput_HandleMessage+0xc0>)
    df88:	4798      	blx	r3
    df8a:	e7d2      	b.n	df32 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    df8c:	211a      	movs	r1, #26
    df8e:	481d      	ldr	r0, [pc, #116]	; (e004 <DemoOutput_HandleMessage+0xdc>)
    df90:	4b15      	ldr	r3, [pc, #84]	; (dfe8 <DemoOutput_HandleMessage+0xc0>)
    df92:	4798      	blx	r3
    df94:	e7d5      	b.n	df42 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    df96:	2107      	movs	r1, #7
    df98:	481b      	ldr	r0, [pc, #108]	; (e008 <DemoOutput_HandleMessage+0xe0>)
    df9a:	4b13      	ldr	r3, [pc, #76]	; (dfe8 <DemoOutput_HandleMessage+0xc0>)
    df9c:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    df9e:	4b10      	ldr	r3, [pc, #64]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    dfa0:	781b      	ldrb	r3, [r3, #0]
    dfa2:	2407      	movs	r4, #7
    dfa4:	2b7f      	cmp	r3, #127	; 0x7f
    dfa6:	d809      	bhi.n	dfbc <DemoOutput_HandleMessage+0x94>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    dfa8:	4f0d      	ldr	r7, [pc, #52]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    dfaa:	4e18      	ldr	r6, [pc, #96]	; (e00c <DemoOutput_HandleMessage+0xe4>)
    dfac:	4d10      	ldr	r5, [pc, #64]	; (dff0 <DemoOutput_HandleMessage+0xc8>)
    dfae:	687b      	ldr	r3, [r7, #4]
    dfb0:	5d19      	ldrb	r1, [r3, r4]
    dfb2:	0030      	movs	r0, r6
    dfb4:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    dfb6:	3c01      	subs	r4, #1
    dfb8:	d2f9      	bcs.n	dfae <DemoOutput_HandleMessage+0x86>
    dfba:	e7ca      	b.n	df52 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    dfbc:	4e08      	ldr	r6, [pc, #32]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    dfbe:	6873      	ldr	r3, [r6, #4]
    dfc0:	7859      	ldrb	r1, [r3, #1]
    dfc2:	4d12      	ldr	r5, [pc, #72]	; (e00c <DemoOutput_HandleMessage+0xe4>)
    dfc4:	0028      	movs	r0, r5
    dfc6:	4c0a      	ldr	r4, [pc, #40]	; (dff0 <DemoOutput_HandleMessage+0xc8>)
    dfc8:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    dfca:	6873      	ldr	r3, [r6, #4]
    dfcc:	7819      	ldrb	r1, [r3, #0]
    dfce:	0028      	movs	r0, r5
    dfd0:	47a0      	blx	r4
    dfd2:	e7be      	b.n	df52 <DemoOutput_HandleMessage+0x2a>
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    dfd4:	4b02      	ldr	r3, [pc, #8]	; (dfe0 <DemoOutput_HandleMessage+0xb8>)
    dfd6:	781b      	ldrb	r3, [r3, #0]
    dfd8:	079b      	lsls	r3, r3, #30
    dfda:	d1c3      	bne.n	df64 <DemoOutput_HandleMessage+0x3c>
	    startPayloadIndex = 3;
    dfdc:	3403      	adds	r4, #3
    dfde:	e7c1      	b.n	df64 <DemoOutput_HandleMessage+0x3c>
    dfe0:	2000208c 	.word	0x2000208c
    dfe4:	00011754 	.word	0x00011754
    dfe8:	000086c9 	.word	0x000086c9
    dfec:	0001178c 	.word	0x0001178c
    dff0:	0000ff35 	.word	0x0000ff35
    dff4:	000117a0 	.word	0x000117a0
    dff8:	20002074 	.word	0x20002074
    dffc:	000086f5 	.word	0x000086f5
    e000:	00011748 	.word	0x00011748
    e004:	00011770 	.word	0x00011770
    e008:	00011794 	.word	0x00011794
    e00c:	0001179c 	.word	0x0001179c

0000e010 <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
}
    e010:	4770      	bx	lr
    e012:	Address 0x0000e012 is out of bounds.


0000e014 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    e014:	b570      	push	{r4, r5, r6, lr}
    e016:	0005      	movs	r5, r0
    printf("\r\nSelection of channel ");
    e018:	4804      	ldr	r0, [pc, #16]	; (e02c <DemoOutput_ChannelError+0x18>)
    e01a:	4c05      	ldr	r4, [pc, #20]	; (e030 <DemoOutput_ChannelError+0x1c>)
    e01c:	47a0      	blx	r4
    printf("%d", channel);
    e01e:	0029      	movs	r1, r5
    e020:	4804      	ldr	r0, [pc, #16]	; (e034 <DemoOutput_ChannelError+0x20>)
    e022:	47a0      	blx	r4
    printf(" is not supported in current configuration.\r\n");
    e024:	4804      	ldr	r0, [pc, #16]	; (e038 <DemoOutput_ChannelError+0x24>)
    e026:	4b05      	ldr	r3, [pc, #20]	; (e03c <DemoOutput_ChannelError+0x28>)
    e028:	4798      	blx	r3
}
    e02a:	bd70      	pop	{r4, r5, r6, pc}
    e02c:	0001157c 	.word	0x0001157c
    e030:	0000ff35 	.word	0x0000ff35
    e034:	00011558 	.word	0x00011558
    e038:	00011594 	.word	0x00011594
    e03c:	00010029 	.word	0x00010029

0000e040 <Source_END_DEVICE_INFO>:
{
    printf("\r\nUnicast Failed\r\n");
}    

void Source_END_DEVICE_INFO(uint8_t *SrAddr)
{
    e040:	b510      	push	{r4, lr}
	delay_ms(1200);
    e042:	2096      	movs	r0, #150	; 0x96
    e044:	00c0      	lsls	r0, r0, #3
    e046:	4b01      	ldr	r3, [pc, #4]	; (e04c <Source_END_DEVICE_INFO+0xc>)
    e048:	4798      	blx	r3
}
    e04a:	bd10      	pop	{r4, pc}
    e04c:	00006265 	.word	0x00006265

0000e050 <STAR_DEMO_OPTIONS_MESSAGE>:
    
void STAR_DEMO_OPTIONS_MESSAGE(DeviceRole_t deviceRole)
{
}    
    e050:	4770      	bx	lr
    e052:	Address 0x0000e052 is out of bounds.


0000e054 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    e054:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    e056:	4b10      	ldr	r3, [pc, #64]	; (e098 <ButtonPressed+0x44>)
    e058:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    e05a:	061b      	lsls	r3, r3, #24
    e05c:	d40e      	bmi.n	e07c <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    e05e:	4b0f      	ldr	r3, [pc, #60]	; (e09c <ButtonPressed+0x48>)
    e060:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    e062:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    e064:	2b00      	cmp	r3, #0
    e066:	d000      	beq.n	e06a <ButtonPressed+0x16>
}
    e068:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    e06a:	2201      	movs	r2, #1
    e06c:	4b0b      	ldr	r3, [pc, #44]	; (e09c <ButtonPressed+0x48>)
    e06e:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    e070:	4b0b      	ldr	r3, [pc, #44]	; (e0a0 <ButtonPressed+0x4c>)
    e072:	4798      	blx	r3
    e074:	4b0b      	ldr	r3, [pc, #44]	; (e0a4 <ButtonPressed+0x50>)
    e076:	6018      	str	r0, [r3, #0]
            return 1;
    e078:	2001      	movs	r0, #1
    e07a:	e7f5      	b.n	e068 <ButtonPressed+0x14>
        t.Val = MiWi_TickGet();
    e07c:	4b08      	ldr	r3, [pc, #32]	; (e0a0 <ButtonPressed+0x4c>)
    e07e:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    e080:	4b08      	ldr	r3, [pc, #32]	; (e0a4 <ButtonPressed+0x50>)
    e082:	6819      	ldr	r1, [r3, #0]
    e084:	4b08      	ldr	r3, [pc, #32]	; (e0a8 <ButtonPressed+0x54>)
    e086:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    e088:	4b08      	ldr	r3, [pc, #32]	; (e0ac <ButtonPressed+0x58>)
    e08a:	4298      	cmp	r0, r3
    e08c:	d902      	bls.n	e094 <ButtonPressed+0x40>
            PUSH_BUTTON_pressed = false;
    e08e:	2200      	movs	r2, #0
    e090:	4b02      	ldr	r3, [pc, #8]	; (e09c <ButtonPressed+0x48>)
    e092:	701a      	strb	r2, [r3, #0]
    return 0;
    e094:	2000      	movs	r0, #0
    e096:	e7e7      	b.n	e068 <ButtonPressed+0x14>
    e098:	40002800 	.word	0x40002800
    e09c:	2000214c 	.word	0x2000214c
    e0a0:	0000cfe5 	.word	0x0000cfe5
    e0a4:	20002150 	.word	0x20002150
    e0a8:	0000d035 	.word	0x0000d035
    e0ac:	00003fff 	.word	0x00003fff

0000e0b0 <ReadMacAddress>:
* Overview:            Uses the MAC Address from the EEPROM for addressing
*
* Note:
**********************************************************************/
void ReadMacAddress(void)
{
    e0b0:	b530      	push	{r4, r5, lr}
    e0b2:	4b09      	ldr	r3, [pc, #36]	; (e0d8 <ReadMacAddress+0x28>)
    e0b4:	4d09      	ldr	r5, [pc, #36]	; (e0dc <ReadMacAddress+0x2c>)
   uint8_t i = 0, j = 0;
   for (i = 0; i < 8; i += 2, j++)
    e0b6:	4c0a      	ldr	r4, [pc, #40]	; (e0e0 <ReadMacAddress+0x30>)
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
    e0b8:	8818      	ldrh	r0, [r3, #0]
    e0ba:	195a      	adds	r2, r3, r5
    e0bc:	4909      	ldr	r1, [pc, #36]	; (e0e4 <ReadMacAddress+0x34>)
    e0be:	1851      	adds	r1, r2, r1
    e0c0:	7008      	strb	r0, [r1, #0]
     myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
    e0c2:	8819      	ldrh	r1, [r3, #0]
    e0c4:	4808      	ldr	r0, [pc, #32]	; (e0e8 <ReadMacAddress+0x38>)
    e0c6:	4684      	mov	ip, r0
    e0c8:	4462      	add	r2, ip
    e0ca:	0a09      	lsrs	r1, r1, #8
    e0cc:	7011      	strb	r1, [r2, #0]
    e0ce:	3302      	adds	r3, #2
   for (i = 0; i < 8; i += 2, j++)
    e0d0:	42a3      	cmp	r3, r4
    e0d2:	d1f1      	bne.n	e0b8 <ReadMacAddress+0x8>
   }
}
    e0d4:	bd30      	pop	{r4, r5, pc}
    e0d6:	46c0      	nop			; (mov r8, r8)
    e0d8:	0080400a 	.word	0x0080400a
    e0dc:	20000010 	.word	0x20000010
    e0e0:	00804012 	.word	0x00804012
    e0e4:	ff7fbff6 	.word	0xff7fbff6
    e0e8:	ff7fbff7 	.word	0xff7fbff7

0000e0ec <main>:
{
    e0ec:	b510      	push	{r4, lr}
    system_init();
    e0ee:	4b0f      	ldr	r3, [pc, #60]	; (e12c <main+0x40>)
    e0f0:	4798      	blx	r3
    delay_init();
    e0f2:	4b0f      	ldr	r3, [pc, #60]	; (e130 <main+0x44>)
    e0f4:	4798      	blx	r3
    cpu_irq_enable();
    e0f6:	2201      	movs	r2, #1
    e0f8:	4b0e      	ldr	r3, [pc, #56]	; (e134 <main+0x48>)
    e0fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e0fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e100:	b662      	cpsie	i
    sio2host_init();
    e102:	4b0d      	ldr	r3, [pc, #52]	; (e138 <main+0x4c>)
    e104:	4798      	blx	r3
    ReadMacAddress();
    e106:	4b0d      	ldr	r3, [pc, #52]	; (e13c <main+0x50>)
    e108:	4798      	blx	r3
    SYS_TimerInit();
    e10a:	4b0d      	ldr	r3, [pc, #52]	; (e140 <main+0x54>)
    e10c:	4798      	blx	r3
    DemoOutput_Greeting();
    e10e:	4b0d      	ldr	r3, [pc, #52]	; (e144 <main+0x58>)
    e110:	4798      	blx	r3
    nvm_init(INT_FLASH);
    e112:	2000      	movs	r0, #0
    e114:	4b0c      	ldr	r3, [pc, #48]	; (e148 <main+0x5c>)
    e116:	4798      	blx	r3
    PDS_Init();
    e118:	4b0c      	ldr	r3, [pc, #48]	; (e14c <main+0x60>)
    e11a:	4798      	blx	r3
    freezer_enable = freezer_feature();
    e11c:	4b0c      	ldr	r3, [pc, #48]	; (e150 <main+0x64>)
    e11e:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    e120:	4b0c      	ldr	r3, [pc, #48]	; (e154 <main+0x68>)
    e122:	4798      	blx	r3
        Run_Demo();
    e124:	4c0c      	ldr	r4, [pc, #48]	; (e158 <main+0x6c>)
    e126:	47a0      	blx	r4
    e128:	e7fd      	b.n	e126 <main+0x3a>
    e12a:	46c0      	nop			; (mov r8, r8)
    e12c:	00007e81 	.word	0x00007e81
    e130:	000061f9 	.word	0x000061f9
    e134:	20000008 	.word	0x20000008
    e138:	00008579 	.word	0x00008579
    e13c:	0000e0b1 	.word	0x0000e0b1
    e140:	0000ce75 	.word	0x0000ce75
    e144:	0000de91 	.word	0x0000de91
    e148:	0000d1f5 	.word	0x0000d1f5
    e14c:	0000a039 	.word	0x0000a039
    e150:	0000e491 	.word	0x0000e491
    e154:	0000e4cd 	.word	0x0000e4cd
    e158:	0000e62d 	.word	0x0000e62d

0000e15c <dataConfcb>:
* Overview: Confirmation Callback for MiApp_SendData
*
* Parameters:  handle - message handle, miwi_status_t status of data send
****************************************************************************/
static void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    e15c:	b510      	push	{r4, lr}
    if (SUCCESS == status)
    e15e:	2900      	cmp	r1, #0
    e160:	d004      	beq.n	e16c <dataConfcb+0x10>
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
        /* Delay for Display */
        delay_ms(100);
    }
    /* After Displaying TX and RX Counts , Switch back to showing Demo Instructions */
    STAR_DEMO_OPTIONS_MESSAGE (role);
    e162:	4b09      	ldr	r3, [pc, #36]	; (e188 <dataConfcb+0x2c>)
    e164:	7818      	ldrb	r0, [r3, #0]
    e166:	4b09      	ldr	r3, [pc, #36]	; (e18c <dataConfcb+0x30>)
    e168:	4798      	blx	r3
}
    e16a:	bd10      	pop	{r4, pc}
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
    e16c:	4b08      	ldr	r3, [pc, #32]	; (e190 <dataConfcb+0x34>)
    e16e:	7818      	ldrb	r0, [r3, #0]
    e170:	3001      	adds	r0, #1
    e172:	b2c0      	uxtb	r0, r0
    e174:	7018      	strb	r0, [r3, #0]
    e176:	4b07      	ldr	r3, [pc, #28]	; (e194 <dataConfcb+0x38>)
    e178:	7819      	ldrb	r1, [r3, #0]
    e17a:	4b07      	ldr	r3, [pc, #28]	; (e198 <dataConfcb+0x3c>)
    e17c:	4798      	blx	r3
        delay_ms(100);
    e17e:	2064      	movs	r0, #100	; 0x64
    e180:	4b06      	ldr	r3, [pc, #24]	; (e19c <dataConfcb+0x40>)
    e182:	4798      	blx	r3
    e184:	e7ed      	b.n	e162 <dataConfcb+0x6>
    e186:	46c0      	nop			; (mov r8, r8)
    e188:	20002074 	.word	0x20002074
    e18c:	0000e051 	.word	0x0000e051
    e190:	20001c85 	.word	0x20001c85
    e194:	20001c84 	.word	0x20001c84
    e198:	0000e011 	.word	0x0000e011
    e19c:	00006265 	.word	0x00006265

0000e1a0 <run_star_demo>:
* Overview: runs the demo based on input
*
* Parameters: None
*********************************************************************/
void run_star_demo(void)
{
    e1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1a2:	46d6      	mov	lr, sl
    e1a4:	464f      	mov	r7, r9
    e1a6:	4646      	mov	r6, r8
    e1a8:	b5c0      	push	{r6, r7, lr}
    e1aa:	b086      	sub	sp, #24
    t1.Val = MiWi_TickGet ();
    e1ac:	4b6f      	ldr	r3, [pc, #444]	; (e36c <run_star_demo+0x1cc>)
    e1ae:	4798      	blx	r3
    e1b0:	4b6f      	ldr	r3, [pc, #444]	; (e370 <run_star_demo+0x1d0>)
    e1b2:	6018      	str	r0, [r3, #0]
    display_connections = true;
    e1b4:	2201      	movs	r2, #1
    e1b6:	4b6f      	ldr	r3, [pc, #444]	; (e374 <run_star_demo+0x1d4>)
    e1b8:	701a      	strb	r2, [r3, #0]
                                P2PTasks ();

                                /* Button 1 is pressed, Initiate the Packet transmission */
                                if(switch_val == 1)
                                {
                                    update_ed = false;    // No Display of peer Device Info
    e1ba:	4b6f      	ldr	r3, [pc, #444]	; (e378 <run_star_demo+0x1d8>)
    e1bc:	4698      	mov	r8, r3
    e1be:	e0aa      	b.n	e316 <run_star_demo+0x176>
                if (role == PAN_COORD)
    e1c0:	4b6e      	ldr	r3, [pc, #440]	; (e37c <run_star_demo+0x1dc>)
    e1c2:	781b      	ldrb	r3, [r3, #0]
    e1c4:	2b01      	cmp	r3, #1
    e1c6:	d00a      	beq.n	e1de <run_star_demo+0x3e>
                    select_ed = 0;
    e1c8:	2200      	movs	r2, #0
    e1ca:	4b6d      	ldr	r3, [pc, #436]	; (e380 <run_star_demo+0x1e0>)
    e1cc:	701a      	strb	r2, [r3, #0]
                    update_ed = true;
    e1ce:	3201      	adds	r2, #1
    e1d0:	4b69      	ldr	r3, [pc, #420]	; (e378 <run_star_demo+0x1d8>)
    e1d2:	701a      	strb	r2, [r3, #0]
                        chk_sel_status = true;
    e1d4:	4b6b      	ldr	r3, [pc, #428]	; (e384 <run_star_demo+0x1e4>)
    e1d6:	469a      	mov	sl, r3
    e1d8:	2701      	movs	r7, #1
    e1da:	46b9      	mov	r9, r7
    e1dc:	e06d      	b.n	e2ba <run_star_demo+0x11a>
                    uint16_t broadcastAddress = 0xFFFF;
    e1de:	2416      	movs	r4, #22
    e1e0:	446c      	add	r4, sp
    e1e2:	3b02      	subs	r3, #2
    e1e4:	8023      	strh	r3, [r4, #0]
                        MIWI_TEXT_LEN, (uint8_t *)&MiWi[(TxSynCount%6)][0], msghandledemo++, true, dataConfcb);
    e1e6:	4b68      	ldr	r3, [pc, #416]	; (e388 <run_star_demo+0x1e8>)
    e1e8:	7818      	ldrb	r0, [r3, #0]
    e1ea:	2106      	movs	r1, #6
    e1ec:	4b67      	ldr	r3, [pc, #412]	; (e38c <run_star_demo+0x1ec>)
    e1ee:	4798      	blx	r3
    e1f0:	b2ca      	uxtb	r2, r1
    e1f2:	0053      	lsls	r3, r2, #1
    e1f4:	189a      	adds	r2, r3, r2
    e1f6:	00d3      	lsls	r3, r2, #3
    e1f8:	1a9b      	subs	r3, r3, r2
    e1fa:	4a65      	ldr	r2, [pc, #404]	; (e390 <run_star_demo+0x1f0>)
    e1fc:	189b      	adds	r3, r3, r2
                    mac_ack_status = MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress,
    e1fe:	4965      	ldr	r1, [pc, #404]	; (e394 <run_star_demo+0x1f4>)
    e200:	780a      	ldrb	r2, [r1, #0]
    e202:	1c50      	adds	r0, r2, #1
    e204:	7008      	strb	r0, [r1, #0]
    e206:	4964      	ldr	r1, [pc, #400]	; (e398 <run_star_demo+0x1f8>)
    e208:	9102      	str	r1, [sp, #8]
    e20a:	2101      	movs	r1, #1
    e20c:	9101      	str	r1, [sp, #4]
    e20e:	9200      	str	r2, [sp, #0]
    e210:	2215      	movs	r2, #21
    e212:	0021      	movs	r1, r4
    e214:	2002      	movs	r0, #2
    e216:	4c61      	ldr	r4, [pc, #388]	; (e39c <run_star_demo+0x1fc>)
    e218:	47a0      	blx	r4
                    if (mac_ack_status)
    e21a:	2800      	cmp	r0, #0
    e21c:	d100      	bne.n	e220 <run_star_demo+0x80>
    e21e:	e085      	b.n	e32c <run_star_demo+0x18c>
                        TxSynCount++;
    e220:	4a59      	ldr	r2, [pc, #356]	; (e388 <run_star_demo+0x1e8>)
    e222:	7813      	ldrb	r3, [r2, #0]
    e224:	3301      	adds	r3, #1
    e226:	7013      	strb	r3, [r2, #0]
    e228:	e080      	b.n	e32c <run_star_demo+0x18c>
                                    update_ed = false;    // No Display of peer Device Info
    e22a:	2300      	movs	r3, #0
    e22c:	4642      	mov	r2, r8
    e22e:	7013      	strb	r3, [r2, #0]
                                    chk_sel_status = false;   // Selection Mode off
    e230:	4a54      	ldr	r2, [pc, #336]	; (e384 <run_star_demo+0x1e4>)
    e232:	7013      	strb	r3, [r2, #0]

                                    if (myConnectionIndex_in_PanCo == select_ed)
    e234:	4b52      	ldr	r3, [pc, #328]	; (e380 <run_star_demo+0x1e0>)
    e236:	781c      	ldrb	r4, [r3, #0]
    e238:	4b59      	ldr	r3, [pc, #356]	; (e3a0 <run_star_demo+0x200>)
    e23a:	781b      	ldrb	r3, [r3, #0]
    e23c:	42a3      	cmp	r3, r4
    e23e:	d042      	beq.n	e2c6 <run_star_demo+0x126>
                                           Edx --> Pan CO --> EDy
                                           To forward a Packet from one ED to another ED , address should be specified with length as 3
                                           and address as end dest device short address (3 bytes)
                                        */
                                        mac_ack_status = MiApp_SendData(3, END_DEVICES_Short_Address[select_ed].Address,
                                        MIWI_TEXT_LEN, (uint8_t*)&MiWi[(TxSynCount%6)][0], msghandledemo++, true, dataConfcb);
    e240:	4b51      	ldr	r3, [pc, #324]	; (e388 <run_star_demo+0x1e8>)
    e242:	7818      	ldrb	r0, [r3, #0]
    e244:	2106      	movs	r1, #6
    e246:	4b51      	ldr	r3, [pc, #324]	; (e38c <run_star_demo+0x1ec>)
    e248:	4798      	blx	r3
    e24a:	b2cb      	uxtb	r3, r1
    e24c:	0059      	lsls	r1, r3, #1
    e24e:	18c9      	adds	r1, r1, r3
    e250:	00cb      	lsls	r3, r1, #3
    e252:	1a5b      	subs	r3, r3, r1
    e254:	494e      	ldr	r1, [pc, #312]	; (e390 <run_star_demo+0x1f0>)
    e256:	185b      	adds	r3, r3, r1
                                        mac_ack_status = MiApp_SendData(3, END_DEVICES_Short_Address[select_ed].Address,
    e258:	494e      	ldr	r1, [pc, #312]	; (e394 <run_star_demo+0x1f4>)
    e25a:	780a      	ldrb	r2, [r1, #0]
    e25c:	1c50      	adds	r0, r2, #1
    e25e:	7008      	strb	r0, [r1, #0]
    e260:	00a4      	lsls	r4, r4, #2
    e262:	4950      	ldr	r1, [pc, #320]	; (e3a4 <run_star_demo+0x204>)
    e264:	1861      	adds	r1, r4, r1
    e266:	484c      	ldr	r0, [pc, #304]	; (e398 <run_star_demo+0x1f8>)
    e268:	9002      	str	r0, [sp, #8]
    e26a:	9701      	str	r7, [sp, #4]
    e26c:	9200      	str	r2, [sp, #0]
    e26e:	2215      	movs	r2, #21
    e270:	2003      	movs	r0, #3
    e272:	4c4a      	ldr	r4, [pc, #296]	; (e39c <run_star_demo+0x1fc>)
    e274:	47a0      	blx	r4

                                        if (mac_ack_status)
    e276:	2800      	cmp	r0, #0
    e278:	d003      	beq.n	e282 <run_star_demo+0xe2>
                                        {
                                            TxSynCount++;
    e27a:	4a43      	ldr	r2, [pc, #268]	; (e388 <run_star_demo+0x1e8>)
    e27c:	7813      	ldrb	r3, [r2, #0]
    e27e:	3301      	adds	r3, #1
    e280:	7013      	strb	r3, [r2, #0]
                        while(chk_sel_status)
    e282:	4b40      	ldr	r3, [pc, #256]	; (e384 <run_star_demo+0x1e4>)
    e284:	781b      	ldrb	r3, [r3, #0]
    e286:	2b00      	cmp	r3, #0
    e288:	d013      	beq.n	e2b2 <run_star_demo+0x112>
                                uint8_t switch_val = ButtonPressed();
    e28a:	47b0      	blx	r6
    e28c:	0004      	movs	r4, r0
                                P2PTasks ();
    e28e:	47a8      	blx	r5
                                if(switch_val == 1)
    e290:	2c01      	cmp	r4, #1
    e292:	d0ca      	beq.n	e22a <run_star_demo+0x8a>
                                        }
                                    }
                                }
                                else if(switch_val == 2)   /* SWITCH to new peer Device Info */
    e294:	2c02      	cmp	r4, #2
    e296:	d1f4      	bne.n	e282 <run_star_demo+0xe2>
                                {
                                    if (select_ed > end_nodes-1)  /* Reset Peer Device Info */
    e298:	4b39      	ldr	r3, [pc, #228]	; (e380 <run_star_demo+0x1e0>)
    e29a:	781a      	ldrb	r2, [r3, #0]
    e29c:	4b42      	ldr	r3, [pc, #264]	; (e3a8 <run_star_demo+0x208>)
    e29e:	781b      	ldrb	r3, [r3, #0]
    e2a0:	3b01      	subs	r3, #1
    e2a2:	429a      	cmp	r2, r3
    e2a4:	dd2f      	ble.n	e306 <run_star_demo+0x166>
                                    {
                                        /* If end of Peer Device Info reset the count */
                                        select_ed = 0;
    e2a6:	2200      	movs	r2, #0
    e2a8:	4b35      	ldr	r3, [pc, #212]	; (e380 <run_star_demo+0x1e0>)
    e2aa:	701a      	strb	r2, [r3, #0]
                                    else
                                    {
                                        /* New device Information */
                                        select_ed = select_ed+1;
                                    }
                                    chk_sel_status = false;
    e2ac:	2200      	movs	r2, #0
    e2ae:	4b35      	ldr	r3, [pc, #212]	; (e384 <run_star_demo+0x1e4>)
    e2b0:	701a      	strb	r2, [r3, #0]
                    while(update_ed == true)
    e2b2:	4b31      	ldr	r3, [pc, #196]	; (e378 <run_star_demo+0x1d8>)
    e2b4:	781b      	ldrb	r3, [r3, #0]
    e2b6:	2b00      	cmp	r3, #0
    e2b8:	d038      	beq.n	e32c <run_star_demo+0x18c>
                        chk_sel_status = true;
    e2ba:	4653      	mov	r3, sl
    e2bc:	464a      	mov	r2, r9
    e2be:	701a      	strb	r2, [r3, #0]
                                uint8_t switch_val = ButtonPressed();
    e2c0:	4e3a      	ldr	r6, [pc, #232]	; (e3ac <run_star_demo+0x20c>)
                                P2PTasks ();
    e2c2:	4d3b      	ldr	r5, [pc, #236]	; (e3b0 <run_star_demo+0x210>)
    e2c4:	e7e1      	b.n	e28a <run_star_demo+0xea>
                                        MIWI_TEXT_LEN, (uint8_t*)&MiWi[(TxSynCount%6)][0], msghandledemo++, true, dataConfcb);
    e2c6:	4b30      	ldr	r3, [pc, #192]	; (e388 <run_star_demo+0x1e8>)
    e2c8:	7818      	ldrb	r0, [r3, #0]
    e2ca:	2106      	movs	r1, #6
    e2cc:	4b2f      	ldr	r3, [pc, #188]	; (e38c <run_star_demo+0x1ec>)
    e2ce:	4798      	blx	r3
    e2d0:	b2c9      	uxtb	r1, r1
    e2d2:	004b      	lsls	r3, r1, #1
    e2d4:	1859      	adds	r1, r3, r1
    e2d6:	00cb      	lsls	r3, r1, #3
    e2d8:	1a5b      	subs	r3, r3, r1
    e2da:	4a2d      	ldr	r2, [pc, #180]	; (e390 <run_star_demo+0x1f0>)
    e2dc:	189b      	adds	r3, r3, r2
                                        mac_ack_status = MiApp_SendData(LONG_ADDR_LEN, connectionTable[0].Address,
    e2de:	492d      	ldr	r1, [pc, #180]	; (e394 <run_star_demo+0x1f4>)
    e2e0:	780a      	ldrb	r2, [r1, #0]
    e2e2:	1c50      	adds	r0, r2, #1
    e2e4:	7008      	strb	r0, [r1, #0]
    e2e6:	492c      	ldr	r1, [pc, #176]	; (e398 <run_star_demo+0x1f8>)
    e2e8:	9102      	str	r1, [sp, #8]
    e2ea:	9701      	str	r7, [sp, #4]
    e2ec:	9200      	str	r2, [sp, #0]
    e2ee:	2215      	movs	r2, #21
    e2f0:	4930      	ldr	r1, [pc, #192]	; (e3b4 <run_star_demo+0x214>)
    e2f2:	2008      	movs	r0, #8
    e2f4:	4c29      	ldr	r4, [pc, #164]	; (e39c <run_star_demo+0x1fc>)
    e2f6:	47a0      	blx	r4
                                        if (mac_ack_status)
    e2f8:	2800      	cmp	r0, #0
    e2fa:	d0c2      	beq.n	e282 <run_star_demo+0xe2>
                                            TxSynCount++;
    e2fc:	4a22      	ldr	r2, [pc, #136]	; (e388 <run_star_demo+0x1e8>)
    e2fe:	7813      	ldrb	r3, [r2, #0]
    e300:	3301      	adds	r3, #1
    e302:	7013      	strb	r3, [r2, #0]
    e304:	e7bd      	b.n	e282 <run_star_demo+0xe2>
                                        select_ed = select_ed+1;
    e306:	3201      	adds	r2, #1
    e308:	4b1d      	ldr	r3, [pc, #116]	; (e380 <run_star_demo+0x1e0>)
    e30a:	701a      	strb	r2, [r3, #0]
    e30c:	e7ce      	b.n	e2ac <run_star_demo+0x10c>
    while(display_connections)
    e30e:	4b19      	ldr	r3, [pc, #100]	; (e374 <run_star_demo+0x1d4>)
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	2b00      	cmp	r3, #0
    e314:	d024      	beq.n	e360 <run_star_demo+0x1c0>
        P2PTasks();
    e316:	4b26      	ldr	r3, [pc, #152]	; (e3b0 <run_star_demo+0x210>)
    e318:	4798      	blx	r3
        PDS_TaskHandler();
    e31a:	4b27      	ldr	r3, [pc, #156]	; (e3b8 <run_star_demo+0x218>)
    e31c:	4798      	blx	r3
            uint8_t PressedButton = ButtonPressed();
    e31e:	4b23      	ldr	r3, [pc, #140]	; (e3ac <run_star_demo+0x20c>)
    e320:	4798      	blx	r3
            if ( PressedButton == 1 || PressedButton == 2)
    e322:	3801      	subs	r0, #1
    e324:	b2c0      	uxtb	r0, r0
    e326:	2801      	cmp	r0, #1
    e328:	d800      	bhi.n	e32c <run_star_demo+0x18c>
    e32a:	e749      	b.n	e1c0 <run_star_demo+0x20>
                    } /* END of Display of PEER DEVICE Info */

                }/* end of END_DEVICE send packet option */
            } /* end of options on button press */

        t2.Val = MiWi_TickGet ();
    e32c:	4b0f      	ldr	r3, [pc, #60]	; (e36c <run_star_demo+0x1cc>)
    e32e:	4798      	blx	r3
    e330:	4b22      	ldr	r3, [pc, #136]	; (e3bc <run_star_demo+0x21c>)
    e332:	6018      	str	r0, [r3, #0]
        /* Display the no of End devices in Network */
        if( MiWi_TickGetDiff(t2, t1) > (15 * ONE_SECOND) && (role == PAN_COORD))
    e334:	4b0e      	ldr	r3, [pc, #56]	; (e370 <run_star_demo+0x1d0>)
    e336:	6819      	ldr	r1, [r3, #0]
    e338:	4b21      	ldr	r3, [pc, #132]	; (e3c0 <run_star_demo+0x220>)
    e33a:	4798      	blx	r3
    e33c:	4b21      	ldr	r3, [pc, #132]	; (e3c4 <run_star_demo+0x224>)
    e33e:	4298      	cmp	r0, r3
    e340:	d9e5      	bls.n	e30e <run_star_demo+0x16e>
    e342:	4b0e      	ldr	r3, [pc, #56]	; (e37c <run_star_demo+0x1dc>)
    e344:	781b      	ldrb	r3, [r3, #0]
    e346:	2b01      	cmp	r3, #1
    e348:	d1e1      	bne.n	e30e <run_star_demo+0x16e>
        {
            delay_ms(500);
    e34a:	20fa      	movs	r0, #250	; 0xfa
    e34c:	0040      	lsls	r0, r0, #1
    e34e:	4b1e      	ldr	r3, [pc, #120]	; (e3c8 <run_star_demo+0x228>)
    e350:	4798      	blx	r3
            display_connections = false;
    e352:	2200      	movs	r2, #0
    e354:	4b07      	ldr	r3, [pc, #28]	; (e374 <run_star_demo+0x1d4>)
    e356:	701a      	strb	r2, [r3, #0]
            STAR_DEMO_OPTIONS_MESSAGE (true);
    e358:	2001      	movs	r0, #1
    e35a:	4b1c      	ldr	r3, [pc, #112]	; (e3cc <run_star_demo+0x22c>)
    e35c:	4798      	blx	r3
    e35e:	e7d6      	b.n	e30e <run_star_demo+0x16e>

        }

    }
}
    e360:	b006      	add	sp, #24
    e362:	bc1c      	pop	{r2, r3, r4}
    e364:	4690      	mov	r8, r2
    e366:	4699      	mov	r9, r3
    e368:	46a2      	mov	sl, r4
    e36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e36c:	0000cfe5 	.word	0x0000cfe5
    e370:	20002160 	.word	0x20002160
    e374:	20002164 	.word	0x20002164
    e378:	20002154 	.word	0x20002154
    e37c:	20002074 	.word	0x20002074
    e380:	2000215c 	.word	0x2000215c
    e384:	20002155 	.word	0x20002155
    e388:	20001c86 	.word	0x20001c86
    e38c:	0000ea9d 	.word	0x0000ea9d
    e390:	000117a4 	.word	0x000117a4
    e394:	20001c87 	.word	0x20001c87
    e398:	0000e15d 	.word	0x0000e15d
    e39c:	0000c02d 	.word	0x0000c02d
    e3a0:	20001f8c 	.word	0x20001f8c
    e3a4:	20002018 	.word	0x20002018
    e3a8:	2000040c 	.word	0x2000040c
    e3ac:	0000e055 	.word	0x0000e055
    e3b0:	0000c269 	.word	0x0000c269
    e3b4:	2000216c 	.word	0x2000216c
    e3b8:	0000a0cd 	.word	0x0000a0cd
    e3bc:	20002158 	.word	0x20002158
    e3c0:	0000d035 	.word	0x0000d035
    e3c4:	00e4e1c0 	.word	0x00e4e1c0
    e3c8:	00006265 	.word	0x00006265
    e3cc:	0000e051 	.word	0x0000e051

0000e3d0 <ReceivedDataIndication>:
* PreCondition: MiApp_ProtocolInit
*
* Input:  RECEIVED_MESSAGE *ind - Indication structure
********************************************************************/
void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    e3d0:	b510      	push	{r4, lr}
    /* Print the received information via Console */
    DemoOutput_HandleMessage();
    e3d2:	4b12      	ldr	r3, [pc, #72]	; (e41c <ReceivedDataIndication+0x4c>)
    e3d4:	4798      	blx	r3

    /* Update the TX AND RX Counts on the display */
    DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    e3d6:	4b12      	ldr	r3, [pc, #72]	; (e420 <ReceivedDataIndication+0x50>)
    e3d8:	7818      	ldrb	r0, [r3, #0]
    e3da:	4b12      	ldr	r3, [pc, #72]	; (e424 <ReceivedDataIndication+0x54>)
    e3dc:	7819      	ldrb	r1, [r3, #0]
    e3de:	3101      	adds	r1, #1
    e3e0:	b2c9      	uxtb	r1, r1
    e3e2:	7019      	strb	r1, [r3, #0]
    e3e4:	4b10      	ldr	r3, [pc, #64]	; (e428 <ReceivedDataIndication+0x58>)
    e3e6:	4798      	blx	r3

    /* Delay for Showing the contents on the display before showing instructions */
    delay_ms(500);
    e3e8:	20fa      	movs	r0, #250	; 0xfa
    e3ea:	0040      	lsls	r0, r0, #1
    e3ec:	4b0f      	ldr	r3, [pc, #60]	; (e42c <ReceivedDataIndication+0x5c>)
    e3ee:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    e3f0:	2280      	movs	r2, #128	; 0x80
    e3f2:	01d2      	lsls	r2, r2, #7
    e3f4:	4b0e      	ldr	r3, [pc, #56]	; (e430 <ReceivedDataIndication+0x60>)
    e3f6:	61da      	str	r2, [r3, #28]
    LED_Toggle(LED0);
#endif

    /* Display the Source End Device Info on reception msg, Do not display if it is
       a PAN CO or if the message received was a broadcast packet */
    if ((role == END_DEVICE) && !rxMessage.flags.bits.broadcast)
    e3f8:	4b0e      	ldr	r3, [pc, #56]	; (e434 <ReceivedDataIndication+0x64>)
    e3fa:	781b      	ldrb	r3, [r3, #0]
    e3fc:	2b02      	cmp	r3, #2
    e3fe:	d004      	beq.n	e40a <ReceivedDataIndication+0x3a>
    {
        Source_END_DEVICE_INFO(rxMessage.Payload);
    }
    /* Display the Instructions message */
    STAR_DEMO_OPTIONS_MESSAGE (role);
    e400:	4b0c      	ldr	r3, [pc, #48]	; (e434 <ReceivedDataIndication+0x64>)
    e402:	7818      	ldrb	r0, [r3, #0]
    e404:	4b0c      	ldr	r3, [pc, #48]	; (e438 <ReceivedDataIndication+0x68>)
    e406:	4798      	blx	r3
    e408:	bd10      	pop	{r4, pc}
    if ((role == END_DEVICE) && !rxMessage.flags.bits.broadcast)
    e40a:	4b0c      	ldr	r3, [pc, #48]	; (e43c <ReceivedDataIndication+0x6c>)
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	079b      	lsls	r3, r3, #30
    e410:	d1f6      	bne.n	e400 <ReceivedDataIndication+0x30>
        Source_END_DEVICE_INFO(rxMessage.Payload);
    e412:	4b0a      	ldr	r3, [pc, #40]	; (e43c <ReceivedDataIndication+0x6c>)
    e414:	6898      	ldr	r0, [r3, #8]
    e416:	4b0a      	ldr	r3, [pc, #40]	; (e440 <ReceivedDataIndication+0x70>)
    e418:	4798      	blx	r3
    e41a:	e7f1      	b.n	e400 <ReceivedDataIndication+0x30>
    e41c:	0000df29 	.word	0x0000df29
    e420:	20001c85 	.word	0x20001c85
    e424:	20001c84 	.word	0x20001c84
    e428:	0000e011 	.word	0x0000e011
    e42c:	00006265 	.word	0x00006265
    e430:	40002800 	.word	0x40002800
    e434:	20002074 	.word	0x20002074
    e438:	0000e051 	.word	0x0000e051
    e43c:	2000208c 	.word	0x2000208c
    e440:	0000e041 	.word	0x0000e041

0000e444 <EstablishConfirm>:
* Overview: callback function called upon MiAPP_EstConnection
            when connection is lost
* Parameter: status of the completed operation
********************************************************************/
static void EstablishConfirm(miwi_status_t status)
{
    e444:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    e446:	2800      	cmp	r0, #0
    e448:	d001      	beq.n	e44e <EstablishConfirm+0xa>
    e44a:	2806      	cmp	r0, #6
    e44c:	d102      	bne.n	e454 <EstablishConfirm+0x10>
    {
        printf("Reconnected\n\r");
    e44e:	4802      	ldr	r0, [pc, #8]	; (e458 <EstablishConfirm+0x14>)
    e450:	4b02      	ldr	r3, [pc, #8]	; (e45c <EstablishConfirm+0x18>)
    e452:	4798      	blx	r3
    }
}
    e454:	bd10      	pop	{r4, pc}
    e456:	46c0      	nop			; (mov r8, r8)
    e458:	00011904 	.word	0x00011904
    e45c:	0000ff35 	.word	0x0000ff35

0000e460 <appLinkFailureCallback>:
* Function: static void appLinkFailureCallback(void)
*
* Overview: callback function called upon when connection is lost
********************************************************************/
static void appLinkFailureCallback(void)
{
    e460:	b510      	push	{r4, lr}
    e462:	b084      	sub	sp, #16
    uint16_t broadcastAddr = 0xFFFF;
    e464:	220e      	movs	r2, #14
    e466:	446a      	add	r2, sp
    e468:	2301      	movs	r3, #1
    e46a:	425b      	negs	r3, r3
    e46c:	8013      	strh	r3, [r2, #0]
    MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, EstablishConfirm);
    e46e:	4b05      	ldr	r3, [pc, #20]	; (e484 <appLinkFailureCallback+0x24>)
    e470:	7818      	ldrb	r0, [r3, #0]
    e472:	4b05      	ldr	r3, [pc, #20]	; (e488 <appLinkFailureCallback+0x28>)
    e474:	9300      	str	r3, [sp, #0]
    e476:	2300      	movs	r3, #0
    e478:	2102      	movs	r1, #2
    e47a:	4c04      	ldr	r4, [pc, #16]	; (e48c <appLinkFailureCallback+0x2c>)
    e47c:	47a0      	blx	r4
}
    e47e:	b004      	add	sp, #16
    e480:	bd10      	pop	{r4, pc}
    e482:	46c0      	nop			; (mov r8, r8)
    e484:	20000030 	.word	0x20000030
    e488:	0000e445 	.word	0x0000e445
    e48c:	0000bc35 	.word	0x0000bc35

0000e490 <freezer_feature>:
{
    e490:	b570      	push	{r4, r5, r6, lr}
    tick1.Val = MiWi_TickGet();
    e492:	4c0a      	ldr	r4, [pc, #40]	; (e4bc <freezer_feature+0x2c>)
    e494:	47a0      	blx	r4
    e496:	0005      	movs	r5, r0
        tick2.Val = MiWi_TickGet();
    e498:	47a0      	blx	r4
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    e49a:	0029      	movs	r1, r5
    e49c:	4b08      	ldr	r3, [pc, #32]	; (e4c0 <freezer_feature+0x30>)
    e49e:	4798      	blx	r3
    e4a0:	4a08      	ldr	r2, [pc, #32]	; (e4c4 <freezer_feature+0x34>)
    return false;
    e4a2:	2300      	movs	r3, #0
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    e4a4:	4290      	cmp	r0, r2
    e4a6:	d901      	bls.n	e4ac <freezer_feature+0x1c>
}
    e4a8:	0018      	movs	r0, r3
    e4aa:	bd70      	pop	{r4, r5, r6, pc}
        switch_val = ButtonPressed ();
    e4ac:	4b06      	ldr	r3, [pc, #24]	; (e4c8 <freezer_feature+0x38>)
    e4ae:	4798      	blx	r3
        if(switch_val == 1)
    e4b0:	3801      	subs	r0, #1
    e4b2:	4243      	negs	r3, r0
    e4b4:	4143      	adcs	r3, r0
    e4b6:	b2db      	uxtb	r3, r3
    e4b8:	e7f6      	b.n	e4a8 <freezer_feature+0x18>
    e4ba:	46c0      	nop			; (mov r8, r8)
    e4bc:	0000cfe5 	.word	0x0000cfe5
    e4c0:	0000d035 	.word	0x0000d035
    e4c4:	003d0900 	.word	0x003d0900
    e4c8:	0000e055 	.word	0x0000e055

0000e4cc <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    e4cc:	b570      	push	{r4, r5, r6, lr}
    e4ce:	b086      	sub	sp, #24
    e4d0:	0004      	movs	r4, r0
    uint16_t broadcastAddr = 0xFFFF;
    e4d2:	2201      	movs	r2, #1
    e4d4:	4252      	negs	r2, r2
    e4d6:	2316      	movs	r3, #22
    e4d8:	446b      	add	r3, sp
    e4da:	801a      	strh	r2, [r3, #0]

    /* Subscribe for data indication */
    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    e4dc:	4836      	ldr	r0, [pc, #216]	; (e5b8 <Initialize_Demo+0xec>)
    e4de:	4b37      	ldr	r3, [pc, #220]	; (e5bc <Initialize_Demo+0xf0>)
    e4e0:	4798      	blx	r3
    MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    e4e2:	4837      	ldr	r0, [pc, #220]	; (e5c0 <Initialize_Demo+0xf4>)
    e4e4:	4b37      	ldr	r3, [pc, #220]	; (e5c4 <Initialize_Demo+0xf8>)
    e4e6:	4798      	blx	r3
    /* Sleep manager initialization */
    sleepMgr_init();
#endif

    /* Update NetworkFreezerRestore parameter whether to restore from network freezer or not */
    defaultParamsRomOrRam.networkFreezerRestore = freezer_enable;
    e4e8:	4837      	ldr	r0, [pc, #220]	; (e5c8 <Initialize_Demo+0xfc>)
    e4ea:	7304      	strb	r4, [r0, #12]

    /* Initialize the P2P and Star Protocol */
    if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTED)
    e4ec:	4937      	ldr	r1, [pc, #220]	; (e5cc <Initialize_Demo+0x100>)
    e4ee:	4b38      	ldr	r3, [pc, #224]	; (e5d0 <Initialize_Demo+0x104>)
    e4f0:	4798      	blx	r3
    e4f2:	280f      	cmp	r0, #15
    e4f4:	d044      	beq.n	e580 <Initialize_Demo+0xb4>
    srand(PHY_RandomReq());
    e4f6:	4b37      	ldr	r3, [pc, #220]	; (e5d4 <Initialize_Demo+0x108>)
    e4f8:	4798      	blx	r3
    e4fa:	4b37      	ldr	r3, [pc, #220]	; (e5d8 <Initialize_Demo+0x10c>)
    e4fc:	4798      	blx	r3
    memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    e4fe:	2200      	movs	r2, #0
    e500:	2300      	movs	r3, #0
    e502:	9202      	str	r2, [sp, #8]
    e504:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    e506:	4e35      	ldr	r6, [pc, #212]	; (e5dc <Initialize_Demo+0x110>)
    e508:	3208      	adds	r2, #8
    e50a:	0031      	movs	r1, r6
    e50c:	a802      	add	r0, sp, #8
    e50e:	4d34      	ldr	r5, [pc, #208]	; (e5e0 <Initialize_Demo+0x114>)
    e510:	47a8      	blx	r5
    e512:	0004      	movs	r4, r0
    memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    e514:	2201      	movs	r2, #1
    e516:	4252      	negs	r2, r2
    e518:	17d3      	asrs	r3, r2, #31
    e51a:	9202      	str	r2, [sp, #8]
    e51c:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    e51e:	3209      	adds	r2, #9
    e520:	0031      	movs	r1, r6
    e522:	a802      	add	r0, sp, #8
    e524:	47a8      	blx	r5
    e526:	2800      	cmp	r0, #0
    e528:	d001      	beq.n	e52e <Initialize_Demo+0x62>
    if (invalidIEEEAddrFlag)
    e52a:	2c00      	cmp	r4, #0
    e52c:	d108      	bne.n	e540 <Initialize_Demo+0x74>
    e52e:	4c2b      	ldr	r4, [pc, #172]	; (e5dc <Initialize_Demo+0x110>)
    e530:	0026      	movs	r6, r4
    e532:	3608      	adds	r6, #8
            *peui64++ = (uint8_t)rand();
    e534:	4d2b      	ldr	r5, [pc, #172]	; (e5e4 <Initialize_Demo+0x118>)
    e536:	47a8      	blx	r5
    e538:	7020      	strb	r0, [r4, #0]
    e53a:	3401      	adds	r4, #1
        for(uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    e53c:	42b4      	cmp	r4, r6
    e53e:	d1fa      	bne.n	e536 <Initialize_Demo+0x6a>
    PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    e540:	4826      	ldr	r0, [pc, #152]	; (e5dc <Initialize_Demo+0x110>)
    e542:	4b29      	ldr	r3, [pc, #164]	; (e5e8 <Initialize_Demo+0x11c>)
    e544:	4798      	blx	r3
    /* Unable to boot from the Network Freezer parameters, so initiate connection */
    /* Check Valid address is found , else update with random */
    longAddressValidationAndUpdation();

    /* Enable all kinds of connection */
    MiApp_ConnectionMode(ENABLE_ALL_CONN);
    e546:	2000      	movs	r0, #0
    e548:	4b28      	ldr	r3, [pc, #160]	; (e5ec <Initialize_Demo+0x120>)
    e54a:	4798      	blx	r3

    // Set default channel
    if( MiApp_Set(CHANNEL, &myChannel) == false )
    e54c:	4928      	ldr	r1, [pc, #160]	; (e5f0 <Initialize_Demo+0x124>)
    e54e:	2000      	movs	r0, #0
    e550:	4b28      	ldr	r3, [pc, #160]	; (e5f4 <Initialize_Demo+0x128>)
    e552:	4798      	blx	r3
    e554:	1e04      	subs	r4, r0, #0
    e556:	d02a      	beq.n	e5ae <Initialize_Demo+0xe2>
    {
        DemoOutput_ChannelError(myChannel);
        return false;
    }

    DemoOutput_Channel(myChannel, 0);
    e558:	4c25      	ldr	r4, [pc, #148]	; (e5f0 <Initialize_Demo+0x124>)
    e55a:	7820      	ldrb	r0, [r4, #0]
    e55c:	2100      	movs	r1, #0
    e55e:	4b26      	ldr	r3, [pc, #152]	; (e5f8 <Initialize_Demo+0x12c>)
    e560:	4798      	blx	r3

    /* Try to establish a new connection with peer device by broadcast Connection Request */
    return MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
    e562:	7820      	ldrb	r0, [r4, #0]
    e564:	4b25      	ldr	r3, [pc, #148]	; (e5fc <Initialize_Demo+0x130>)
    e566:	9300      	str	r3, [sp, #0]
    e568:	2300      	movs	r3, #0
    e56a:	2216      	movs	r2, #22
    e56c:	446a      	add	r2, sp
    e56e:	2102      	movs	r1, #2
    e570:	4c23      	ldr	r4, [pc, #140]	; (e600 <Initialize_Demo+0x134>)
    e572:	47a0      	blx	r4
    e574:	1e44      	subs	r4, r0, #1
    e576:	41a0      	sbcs	r0, r4
    e578:	b2c4      	uxtb	r4, r0
}
    e57a:	0020      	movs	r0, r4
    e57c:	b006      	add	sp, #24
    e57e:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nPANID:");
    e580:	4820      	ldr	r0, [pc, #128]	; (e604 <Initialize_Demo+0x138>)
    e582:	4c21      	ldr	r4, [pc, #132]	; (e608 <Initialize_Demo+0x13c>)
    e584:	47a0      	blx	r4
        printf("%x",myPANID.v[1]);
    e586:	4e21      	ldr	r6, [pc, #132]	; (e60c <Initialize_Demo+0x140>)
    e588:	7871      	ldrb	r1, [r6, #1]
    e58a:	4d21      	ldr	r5, [pc, #132]	; (e610 <Initialize_Demo+0x144>)
    e58c:	0028      	movs	r0, r5
    e58e:	47a0      	blx	r4
        printf("%x",myPANID.v[0]);
    e590:	7831      	ldrb	r1, [r6, #0]
    e592:	0028      	movs	r0, r5
    e594:	47a0      	blx	r4
        printf(" Channel:");
    e596:	481f      	ldr	r0, [pc, #124]	; (e614 <Initialize_Demo+0x148>)
    e598:	47a0      	blx	r4
        printf("%d",currentChannel);
    e59a:	4b1f      	ldr	r3, [pc, #124]	; (e618 <Initialize_Demo+0x14c>)
    e59c:	7819      	ldrb	r1, [r3, #0]
    e59e:	481f      	ldr	r0, [pc, #124]	; (e61c <Initialize_Demo+0x150>)
    e5a0:	47a0      	blx	r4
        STAR_DEMO_OPTIONS_MESSAGE (role);
    e5a2:	4b1f      	ldr	r3, [pc, #124]	; (e620 <Initialize_Demo+0x154>)
    e5a4:	7818      	ldrb	r0, [r3, #0]
    e5a6:	4b1f      	ldr	r3, [pc, #124]	; (e624 <Initialize_Demo+0x158>)
    e5a8:	4798      	blx	r3
        return true;
    e5aa:	2401      	movs	r4, #1
    e5ac:	e7e5      	b.n	e57a <Initialize_Demo+0xae>
        DemoOutput_ChannelError(myChannel);
    e5ae:	4b10      	ldr	r3, [pc, #64]	; (e5f0 <Initialize_Demo+0x124>)
    e5b0:	7818      	ldrb	r0, [r3, #0]
    e5b2:	4b1d      	ldr	r3, [pc, #116]	; (e628 <Initialize_Demo+0x15c>)
    e5b4:	4798      	blx	r3
        return false;
    e5b6:	e7e0      	b.n	e57a <Initialize_Demo+0xae>
    e5b8:	0000e3d1 	.word	0x0000e3d1
    e5bc:	0000b8e9 	.word	0x0000b8e9
    e5c0:	0000e461 	.word	0x0000e461
    e5c4:	0000cb45 	.word	0x0000cb45
    e5c8:	20000020 	.word	0x20000020
    e5cc:	20001c88 	.word	0x20001c88
    e5d0:	0000b5f5 	.word	0x0000b5f5
    e5d4:	0000b261 	.word	0x0000b261
    e5d8:	0001003d 	.word	0x0001003d
    e5dc:	20000010 	.word	0x20000010
    e5e0:	0000f95d 	.word	0x0000f95d
    e5e4:	00010099 	.word	0x00010099
    e5e8:	0000b301 	.word	0x0000b301
    e5ec:	0000b7d5 	.word	0x0000b7d5
    e5f0:	20000030 	.word	0x20000030
    e5f4:	0000b5c5 	.word	0x0000b5c5
    e5f8:	0000dee1 	.word	0x0000dee1
    e5fc:	0000e7a5 	.word	0x0000e7a5
    e600:	0000bc35 	.word	0x0000bc35
    e604:	00011914 	.word	0x00011914
    e608:	0000ff35 	.word	0x0000ff35
    e60c:	20001f94 	.word	0x20001f94
    e610:	0001179c 	.word	0x0001179c
    e614:	00011920 	.word	0x00011920
    e618:	2000000d 	.word	0x2000000d
    e61c:	00011558 	.word	0x00011558
    e620:	20002074 	.word	0x20002074
    e624:	0000e051 	.word	0x0000e051
    e628:	0000e015 	.word	0x0000e015

0000e62c <Run_Demo>:
* Function: void Run_Demo(void)
*
* Overview: runs the demo based on user input
********************************************************************/
void Run_Demo(void)
{
    e62c:	b510      	push	{r4, lr}
    P2PTasks();
    e62e:	4b03      	ldr	r3, [pc, #12]	; (e63c <Run_Demo+0x10>)
    e630:	4798      	blx	r3

    PDS_TaskHandler();
    e632:	4b03      	ldr	r3, [pc, #12]	; (e640 <Run_Demo+0x14>)
    e634:	4798      	blx	r3
    run_star_demo();
    e636:	4b03      	ldr	r3, [pc, #12]	; (e644 <Run_Demo+0x18>)
    e638:	4798      	blx	r3
}
    e63a:	bd10      	pop	{r4, pc}
    e63c:	0000c269 	.word	0x0000c269
    e640:	0000a0cd 	.word	0x0000a0cd
    e644:	0000e1a1 	.word	0x0000e1a1

0000e648 <DumpConnection>:
    * Side Effects:    The content of the connection pointed by the index 
    *                  of the P2P Connection Entry will be printed out
    *
    ********************************************************************/
void DumpConnection(INPUT uint8_t index)
{
    e648:	b5f0      	push	{r4, r5, r6, r7, lr}
    e64a:	46de      	mov	lr, fp
    e64c:	4657      	mov	r7, sl
    e64e:	464e      	mov	r6, r9
    e650:	b5c0      	push	{r6, r7, lr}
    e652:	0005      	movs	r5, r0
    uint8_t i, j;
        
    if( index > CONNECTION_SIZE )
    e654:	2814      	cmp	r0, #20
    e656:	d80f      	bhi.n	e678 <DumpConnection+0x30>
        #endif
        printf("  Channel: ");
        printf("%d",currentChannel);
    }
            
    if( index < CONNECTION_SIZE )
    e658:	2d13      	cmp	r5, #19
    e65a:	d84d      	bhi.n	e6f8 <DumpConnection+0xb0>
    {
        printf("\r\nConnection \tPeerLongAddress \tPeerInfo\r\n");  
    e65c:	483d      	ldr	r0, [pc, #244]	; (e754 <DumpConnection+0x10c>)
    e65e:	4b3e      	ldr	r3, [pc, #248]	; (e758 <DumpConnection+0x110>)
    e660:	4798      	blx	r3
        if( connectionTable[index].status.bits.isValid )
    e662:	012a      	lsls	r2, r5, #4
    e664:	4b3d      	ldr	r3, [pc, #244]	; (e75c <DumpConnection+0x114>)
    e666:	189b      	adds	r3, r3, r2
    e668:	7b1b      	ldrb	r3, [r3, #12]
    e66a:	09db      	lsrs	r3, r3, #7
    e66c:	d123      	bne.n	e6b6 <DumpConnection+0x6e>
#endif
                printf("\r\n");
            }  
        }
    }
}
    e66e:	bc1c      	pop	{r2, r3, r4}
    e670:	4691      	mov	r9, r2
    e672:	469a      	mov	sl, r3
    e674:	46a3      	mov	fp, r4
    e676:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("\r\n\r\nMy Address: 0x");
    e678:	4839      	ldr	r0, [pc, #228]	; (e760 <DumpConnection+0x118>)
    e67a:	4b3a      	ldr	r3, [pc, #232]	; (e764 <DumpConnection+0x11c>)
    e67c:	4798      	blx	r3
    e67e:	4c3a      	ldr	r4, [pc, #232]	; (e768 <DumpConnection+0x120>)
    e680:	0026      	movs	r6, r4
    e682:	3e08      	subs	r6, #8
            printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    e684:	4f37      	ldr	r7, [pc, #220]	; (e764 <DumpConnection+0x11c>)
    e686:	79e1      	ldrb	r1, [r4, #7]
    e688:	4838      	ldr	r0, [pc, #224]	; (e76c <DumpConnection+0x124>)
    e68a:	47b8      	blx	r7
    e68c:	3c01      	subs	r4, #1
        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    e68e:	42b4      	cmp	r4, r6
    e690:	d1f9      	bne.n	e686 <DumpConnection+0x3e>
            printf("  PANID: 0x");
    e692:	4837      	ldr	r0, [pc, #220]	; (e770 <DumpConnection+0x128>)
    e694:	4c33      	ldr	r4, [pc, #204]	; (e764 <DumpConnection+0x11c>)
    e696:	47a0      	blx	r4
            printf("%x",myPANID.v[1]);
    e698:	4f36      	ldr	r7, [pc, #216]	; (e774 <DumpConnection+0x12c>)
    e69a:	7879      	ldrb	r1, [r7, #1]
    e69c:	4e36      	ldr	r6, [pc, #216]	; (e778 <DumpConnection+0x130>)
    e69e:	0030      	movs	r0, r6
    e6a0:	47a0      	blx	r4
            printf("%x",myPANID.v[0]);
    e6a2:	7839      	ldrb	r1, [r7, #0]
    e6a4:	0030      	movs	r0, r6
    e6a6:	47a0      	blx	r4
        printf("  Channel: ");
    e6a8:	4834      	ldr	r0, [pc, #208]	; (e77c <DumpConnection+0x134>)
    e6aa:	47a0      	blx	r4
        printf("%d",currentChannel);
    e6ac:	4b34      	ldr	r3, [pc, #208]	; (e780 <DumpConnection+0x138>)
    e6ae:	7819      	ldrb	r1, [r3, #0]
    e6b0:	4834      	ldr	r0, [pc, #208]	; (e784 <DumpConnection+0x13c>)
    e6b2:	47a0      	blx	r4
    e6b4:	e7d0      	b.n	e658 <DumpConnection+0x10>
            printf("%02x",index);
    e6b6:	0029      	movs	r1, r5
    e6b8:	482c      	ldr	r0, [pc, #176]	; (e76c <DumpConnection+0x124>)
    e6ba:	4c2a      	ldr	r4, [pc, #168]	; (e764 <DumpConnection+0x11c>)
    e6bc:	47a0      	blx	r4
            printf("\t\t\t");
    e6be:	4832      	ldr	r0, [pc, #200]	; (e788 <DumpConnection+0x140>)
    e6c0:	47a0      	blx	r4
    e6c2:	012f      	lsls	r7, r5, #4
    e6c4:	003c      	movs	r4, r7
    e6c6:	340b      	adds	r4, #11
    e6c8:	4b24      	ldr	r3, [pc, #144]	; (e75c <DumpConnection+0x114>)
    e6ca:	18e4      	adds	r4, r4, r3
    e6cc:	3703      	adds	r7, #3
    e6ce:	18ff      	adds	r7, r7, r3
                    printf("%02x", connectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    e6d0:	4e24      	ldr	r6, [pc, #144]	; (e764 <DumpConnection+0x11c>)
    e6d2:	7821      	ldrb	r1, [r4, #0]
    e6d4:	4825      	ldr	r0, [pc, #148]	; (e76c <DumpConnection+0x124>)
    e6d6:	47b0      	blx	r6
    e6d8:	3c01      	subs	r4, #1
            for(i = 0; i < 8; i++)
    e6da:	42bc      	cmp	r4, r7
    e6dc:	d1f9      	bne.n	e6d2 <DumpConnection+0x8a>
            printf("/t");
    e6de:	482b      	ldr	r0, [pc, #172]	; (e78c <DumpConnection+0x144>)
    e6e0:	4c20      	ldr	r4, [pc, #128]	; (e764 <DumpConnection+0x11c>)
    e6e2:	47a0      	blx	r4
                    printf("%02x", connectionTable[index].PeerInfo[i] );
    e6e4:	012d      	lsls	r5, r5, #4
    e6e6:	4b1d      	ldr	r3, [pc, #116]	; (e75c <DumpConnection+0x114>)
    e6e8:	195d      	adds	r5, r3, r5
    e6ea:	7b69      	ldrb	r1, [r5, #13]
    e6ec:	481f      	ldr	r0, [pc, #124]	; (e76c <DumpConnection+0x124>)
    e6ee:	47a0      	blx	r4
            printf("\r\n");
    e6f0:	4827      	ldr	r0, [pc, #156]	; (e790 <DumpConnection+0x148>)
    e6f2:	4b19      	ldr	r3, [pc, #100]	; (e758 <DumpConnection+0x110>)
    e6f4:	4798      	blx	r3
    e6f6:	e7ba      	b.n	e66e <DumpConnection+0x26>
        printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\r\n");  
    e6f8:	4826      	ldr	r0, [pc, #152]	; (e794 <DumpConnection+0x14c>)
    e6fa:	4b17      	ldr	r3, [pc, #92]	; (e758 <DumpConnection+0x110>)
    e6fc:	4798      	blx	r3
    e6fe:	4e26      	ldr	r6, [pc, #152]	; (e798 <DumpConnection+0x150>)
    e700:	2500      	movs	r5, #0
            if( connectionTable[i].status.bits.isValid )
    e702:	4b16      	ldr	r3, [pc, #88]	; (e75c <DumpConnection+0x114>)
    e704:	469a      	mov	sl, r3
                printf("%02x",i);
    e706:	4b17      	ldr	r3, [pc, #92]	; (e764 <DumpConnection+0x11c>)
    e708:	469b      	mov	fp, r3
    e70a:	e00c      	b.n	e726 <DumpConnection+0xde>
                printf("    ");
    e70c:	4823      	ldr	r0, [pc, #140]	; (e79c <DumpConnection+0x154>)
    e70e:	4c15      	ldr	r4, [pc, #84]	; (e764 <DumpConnection+0x11c>)
    e710:	47a0      	blx	r4
                        printf("%02x", connectionTable[i].PeerInfo[j] );
    e712:	78b1      	ldrb	r1, [r6, #2]
    e714:	4815      	ldr	r0, [pc, #84]	; (e76c <DumpConnection+0x124>)
    e716:	47a0      	blx	r4
                printf("\r\n");
    e718:	481d      	ldr	r0, [pc, #116]	; (e790 <DumpConnection+0x148>)
    e71a:	4b0f      	ldr	r3, [pc, #60]	; (e758 <DumpConnection+0x110>)
    e71c:	4798      	blx	r3
    e71e:	3501      	adds	r5, #1
    e720:	3610      	adds	r6, #16
        for(i = 0; i < CONNECTION_SIZE; i++)
    e722:	2d14      	cmp	r5, #20
    e724:	d0a3      	beq.n	e66e <DumpConnection+0x26>
            if( connectionTable[i].status.bits.isValid )
    e726:	012b      	lsls	r3, r5, #4
    e728:	4453      	add	r3, sl
    e72a:	7b1b      	ldrb	r3, [r3, #12]
    e72c:	09db      	lsrs	r3, r3, #7
    e72e:	d0f6      	beq.n	e71e <DumpConnection+0xd6>
                printf("%02x",i);
    e730:	0029      	movs	r1, r5
    e732:	480e      	ldr	r0, [pc, #56]	; (e76c <DumpConnection+0x124>)
    e734:	47d8      	blx	fp
                printf("             ");
    e736:	481a      	ldr	r0, [pc, #104]	; (e7a0 <DumpConnection+0x158>)
    e738:	47d8      	blx	fp
    e73a:	2308      	movs	r3, #8
    e73c:	425b      	negs	r3, r3
    e73e:	4699      	mov	r9, r3
    e740:	44b1      	add	r9, r6
    e742:	0034      	movs	r4, r6
                        printf("%02x", connectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    e744:	4f07      	ldr	r7, [pc, #28]	; (e764 <DumpConnection+0x11c>)
    e746:	7821      	ldrb	r1, [r4, #0]
    e748:	4808      	ldr	r0, [pc, #32]	; (e76c <DumpConnection+0x124>)
    e74a:	47b8      	blx	r7
    e74c:	3c01      	subs	r4, #1
                for(j = 0; j < 8; j++)
    e74e:	454c      	cmp	r4, r9
    e750:	d1f9      	bne.n	e746 <DumpConnection+0xfe>
    e752:	e7db      	b.n	e70c <DumpConnection+0xc4>
    e754:	00011884 	.word	0x00011884
    e758:	00010029 	.word	0x00010029
    e75c:	20002168 	.word	0x20002168
    e760:	00011858 	.word	0x00011858
    e764:	0000ff35 	.word	0x0000ff35
    e768:	20000010 	.word	0x20000010
    e76c:	0001178c 	.word	0x0001178c
    e770:	0001186c 	.word	0x0001186c
    e774:	20001f94 	.word	0x20001f94
    e778:	0001179c 	.word	0x0001179c
    e77c:	00011878 	.word	0x00011878
    e780:	2000000d 	.word	0x2000000d
    e784:	00011558 	.word	0x00011558
    e788:	000118b0 	.word	0x000118b0
    e78c:	000118b4 	.word	0x000118b4
    e790:	00011910 	.word	0x00011910
    e794:	000118b8 	.word	0x000118b8
    e798:	20002173 	.word	0x20002173
    e79c:	000118fc 	.word	0x000118fc
    e7a0:	000118ec 	.word	0x000118ec

0000e7a4 <Connection_Confirm>:
{
    e7a4:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    e7a6:	2800      	cmp	r0, #0
    e7a8:	d00b      	beq.n	e7c2 <Connection_Confirm+0x1e>
    e7aa:	2806      	cmp	r0, #6
    e7ac:	d009      	beq.n	e7c2 <Connection_Confirm+0x1e>
        MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    e7ae:	4b15      	ldr	r3, [pc, #84]	; (e804 <Connection_Confirm+0x60>)
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	2201      	movs	r2, #1
    e7b4:	409a      	lsls	r2, r3
    e7b6:	4b14      	ldr	r3, [pc, #80]	; (e808 <Connection_Confirm+0x64>)
    e7b8:	210a      	movs	r1, #10
    e7ba:	2000      	movs	r0, #0
    e7bc:	4c13      	ldr	r4, [pc, #76]	; (e80c <Connection_Confirm+0x68>)
    e7be:	47a0      	blx	r4
}
    e7c0:	e013      	b.n	e7ea <Connection_Confirm+0x46>
		port_base->OUTCLR.reg = pin_mask;
    e7c2:	2280      	movs	r2, #128	; 0x80
    e7c4:	01d2      	lsls	r2, r2, #7
    e7c6:	4b12      	ldr	r3, [pc, #72]	; (e810 <Connection_Confirm+0x6c>)
    e7c8:	615a      	str	r2, [r3, #20]
        if (role != PAN_COORD)
    e7ca:	4b12      	ldr	r3, [pc, #72]	; (e814 <Connection_Confirm+0x70>)
    e7cc:	781b      	ldrb	r3, [r3, #0]
    e7ce:	2b01      	cmp	r3, #1
    e7d0:	d00c      	beq.n	e7ec <Connection_Confirm+0x48>
            DemoOutput_Channel(myChannel, 1);
    e7d2:	4b0c      	ldr	r3, [pc, #48]	; (e804 <Connection_Confirm+0x60>)
    e7d4:	7818      	ldrb	r0, [r3, #0]
    e7d6:	2101      	movs	r1, #1
    e7d8:	4b0f      	ldr	r3, [pc, #60]	; (e818 <Connection_Confirm+0x74>)
    e7da:	4798      	blx	r3
        DumpConnection(0xFF);
    e7dc:	20ff      	movs	r0, #255	; 0xff
    e7de:	4b0f      	ldr	r3, [pc, #60]	; (e81c <Connection_Confirm+0x78>)
    e7e0:	4798      	blx	r3
        STAR_DEMO_OPTIONS_MESSAGE (role);
    e7e2:	4b0c      	ldr	r3, [pc, #48]	; (e814 <Connection_Confirm+0x70>)
    e7e4:	7818      	ldrb	r0, [r3, #0]
    e7e6:	4b0e      	ldr	r3, [pc, #56]	; (e820 <Connection_Confirm+0x7c>)
    e7e8:	4798      	blx	r3
}
    e7ea:	bd10      	pop	{r4, pc}
            printf("\r\nStarted Wireless Communication on Channel ");
    e7ec:	480d      	ldr	r0, [pc, #52]	; (e824 <Connection_Confirm+0x80>)
    e7ee:	4c0e      	ldr	r4, [pc, #56]	; (e828 <Connection_Confirm+0x84>)
    e7f0:	47a0      	blx	r4
            printf("%u",currentChannel);
    e7f2:	4b0e      	ldr	r3, [pc, #56]	; (e82c <Connection_Confirm+0x88>)
    e7f4:	7819      	ldrb	r1, [r3, #0]
    e7f6:	480e      	ldr	r0, [pc, #56]	; (e830 <Connection_Confirm+0x8c>)
    e7f8:	47a0      	blx	r4
            printf("\r\n");
    e7fa:	480e      	ldr	r0, [pc, #56]	; (e834 <Connection_Confirm+0x90>)
    e7fc:	4b0e      	ldr	r3, [pc, #56]	; (e838 <Connection_Confirm+0x94>)
    e7fe:	4798      	blx	r3
    e800:	e7ec      	b.n	e7dc <Connection_Confirm+0x38>
    e802:	46c0      	nop			; (mov r8, r8)
    e804:	20000030 	.word	0x20000030
    e808:	0000e7a5 	.word	0x0000e7a5
    e80c:	0000b805 	.word	0x0000b805
    e810:	40002800 	.word	0x40002800
    e814:	20002074 	.word	0x20002074
    e818:	0000dee1 	.word	0x0000dee1
    e81c:	0000e649 	.word	0x0000e649
    e820:	0000e051 	.word	0x0000e051
    e824:	00011824 	.word	0x00011824
    e828:	0000ff35 	.word	0x0000ff35
    e82c:	2000000d 	.word	0x2000000d
    e830:	00011854 	.word	0x00011854
    e834:	00011910 	.word	0x00011910
    e838:	00010029 	.word	0x00010029

0000e83c <common_tc_read_count>:
    e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e83e:	4b0d      	ldr	r3, [pc, #52]	; (e874 <common_tc_read_count+0x38>)
    e840:	4798      	blx	r3
    e842:	4b0d      	ldr	r3, [pc, #52]	; (e878 <common_tc_read_count+0x3c>)
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	2b00      	cmp	r3, #0
    e848:	d00e      	beq.n	e868 <common_tc_read_count+0x2c>
    e84a:	4b0c      	ldr	r3, [pc, #48]	; (e87c <common_tc_read_count+0x40>)
    e84c:	781d      	ldrb	r5, [r3, #0]
    e84e:	4b0a      	ldr	r3, [pc, #40]	; (e878 <common_tc_read_count+0x3c>)
    e850:	781f      	ldrb	r7, [r3, #0]
    e852:	4c0b      	ldr	r4, [pc, #44]	; (e880 <common_tc_read_count+0x44>)
    e854:	1c29      	adds	r1, r5, #0
    e856:	47a0      	blx	r4
    e858:	1c06      	adds	r6, r0, #0
    e85a:	480a      	ldr	r0, [pc, #40]	; (e884 <common_tc_read_count+0x48>)
    e85c:	1c29      	adds	r1, r5, #0
    e85e:	47a0      	blx	r4
    e860:	4378      	muls	r0, r7
    e862:	1830      	adds	r0, r6, r0
    e864:	b280      	uxth	r0, r0
    e866:	e004      	b.n	e872 <common_tc_read_count+0x36>
    e868:	4b04      	ldr	r3, [pc, #16]	; (e87c <common_tc_read_count+0x40>)
    e86a:	7819      	ldrb	r1, [r3, #0]
    e86c:	4b04      	ldr	r3, [pc, #16]	; (e880 <common_tc_read_count+0x44>)
    e86e:	4798      	blx	r3
    e870:	b280      	uxth	r0, r0
    e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e874:	0000d05d 	.word	0x0000d05d
    e878:	20001c8c 	.word	0x20001c8c
    e87c:	200022a8 	.word	0x200022a8
    e880:	0000eaa5 	.word	0x0000eaa5
    e884:	0000ffff 	.word	0x0000ffff

0000e888 <common_tc_delay>:
    e888:	b510      	push	{r4, lr}
    e88a:	1c04      	adds	r4, r0, #0
    e88c:	4b13      	ldr	r3, [pc, #76]	; (e8dc <common_tc_delay+0x54>)
    e88e:	4798      	blx	r3
    e890:	4b13      	ldr	r3, [pc, #76]	; (e8e0 <common_tc_delay+0x58>)
    e892:	781a      	ldrb	r2, [r3, #0]
    e894:	4362      	muls	r2, r4
    e896:	1881      	adds	r1, r0, r2
    e898:	4b12      	ldr	r3, [pc, #72]	; (e8e4 <common_tc_delay+0x5c>)
    e89a:	6059      	str	r1, [r3, #4]
    e89c:	6859      	ldr	r1, [r3, #4]
    e89e:	0c09      	lsrs	r1, r1, #16
    e8a0:	6059      	str	r1, [r3, #4]
    e8a2:	685b      	ldr	r3, [r3, #4]
    e8a4:	2b00      	cmp	r3, #0
    e8a6:	d007      	beq.n	e8b8 <common_tc_delay+0x30>
    e8a8:	4b0e      	ldr	r3, [pc, #56]	; (e8e4 <common_tc_delay+0x5c>)
    e8aa:	6859      	ldr	r1, [r3, #4]
    e8ac:	3201      	adds	r2, #1
    e8ae:	1880      	adds	r0, r0, r2
    e8b0:	8118      	strh	r0, [r3, #8]
    e8b2:	4b0d      	ldr	r3, [pc, #52]	; (e8e8 <common_tc_delay+0x60>)
    e8b4:	4798      	blx	r3
    e8b6:	e004      	b.n	e8c2 <common_tc_delay+0x3a>
    e8b8:	1882      	adds	r2, r0, r2
    e8ba:	4b0a      	ldr	r3, [pc, #40]	; (e8e4 <common_tc_delay+0x5c>)
    e8bc:	811a      	strh	r2, [r3, #8]
    e8be:	4b0b      	ldr	r3, [pc, #44]	; (e8ec <common_tc_delay+0x64>)
    e8c0:	4798      	blx	r3
    e8c2:	4b08      	ldr	r3, [pc, #32]	; (e8e4 <common_tc_delay+0x5c>)
    e8c4:	891b      	ldrh	r3, [r3, #8]
    e8c6:	2b63      	cmp	r3, #99	; 0x63
    e8c8:	d802      	bhi.n	e8d0 <common_tc_delay+0x48>
    e8ca:	3364      	adds	r3, #100	; 0x64
    e8cc:	4a05      	ldr	r2, [pc, #20]	; (e8e4 <common_tc_delay+0x5c>)
    e8ce:	8113      	strh	r3, [r2, #8]
    e8d0:	4b04      	ldr	r3, [pc, #16]	; (e8e4 <common_tc_delay+0x5c>)
    e8d2:	8918      	ldrh	r0, [r3, #8]
    e8d4:	4b06      	ldr	r3, [pc, #24]	; (e8f0 <common_tc_delay+0x68>)
    e8d6:	4798      	blx	r3
    e8d8:	bd10      	pop	{r4, pc}
    e8da:	46c0      	nop			; (mov r8, r8)
    e8dc:	0000d05d 	.word	0x0000d05d
    e8e0:	200022a8 	.word	0x200022a8
    e8e4:	20001c8c 	.word	0x20001c8c
    e8e8:	0000d071 	.word	0x0000d071
    e8ec:	0000d085 	.word	0x0000d085
    e8f0:	0000d0c5 	.word	0x0000d0c5

0000e8f4 <common_tc_init>:
    e8f4:	b508      	push	{r3, lr}
    e8f6:	2200      	movs	r2, #0
    e8f8:	4b03      	ldr	r3, [pc, #12]	; (e908 <common_tc_init+0x14>)
    e8fa:	701a      	strb	r2, [r3, #0]
    e8fc:	4b03      	ldr	r3, [pc, #12]	; (e90c <common_tc_init+0x18>)
    e8fe:	4798      	blx	r3
    e900:	4b03      	ldr	r3, [pc, #12]	; (e910 <common_tc_init+0x1c>)
    e902:	7018      	strb	r0, [r3, #0]
    e904:	bd08      	pop	{r3, pc}
    e906:	46c0      	nop			; (mov r8, r8)
    e908:	20001c8c 	.word	0x20001c8c
    e90c:	0000d0dd 	.word	0x0000d0dd
    e910:	200022a8 	.word	0x200022a8

0000e914 <tmr_ovf_callback>:
    e914:	b508      	push	{r3, lr}
    e916:	4b0e      	ldr	r3, [pc, #56]	; (e950 <tmr_ovf_callback+0x3c>)
    e918:	685b      	ldr	r3, [r3, #4]
    e91a:	2b00      	cmp	r3, #0
    e91c:	d007      	beq.n	e92e <tmr_ovf_callback+0x1a>
    e91e:	4a0c      	ldr	r2, [pc, #48]	; (e950 <tmr_ovf_callback+0x3c>)
    e920:	6853      	ldr	r3, [r2, #4]
    e922:	3b01      	subs	r3, #1
    e924:	6053      	str	r3, [r2, #4]
    e926:	2b00      	cmp	r3, #0
    e928:	d101      	bne.n	e92e <tmr_ovf_callback+0x1a>
    e92a:	4b0a      	ldr	r3, [pc, #40]	; (e954 <tmr_ovf_callback+0x40>)
    e92c:	4798      	blx	r3
    e92e:	4a08      	ldr	r2, [pc, #32]	; (e950 <tmr_ovf_callback+0x3c>)
    e930:	7813      	ldrb	r3, [r2, #0]
    e932:	3301      	adds	r3, #1
    e934:	b2db      	uxtb	r3, r3
    e936:	7013      	strb	r3, [r2, #0]
    e938:	4a07      	ldr	r2, [pc, #28]	; (e958 <tmr_ovf_callback+0x44>)
    e93a:	7812      	ldrb	r2, [r2, #0]
    e93c:	429a      	cmp	r2, r3
    e93e:	d806      	bhi.n	e94e <tmr_ovf_callback+0x3a>
    e940:	4b03      	ldr	r3, [pc, #12]	; (e950 <tmr_ovf_callback+0x3c>)
    e942:	2200      	movs	r2, #0
    e944:	701a      	strb	r2, [r3, #0]
    e946:	68db      	ldr	r3, [r3, #12]
    e948:	2b00      	cmp	r3, #0
    e94a:	d000      	beq.n	e94e <tmr_ovf_callback+0x3a>
    e94c:	4798      	blx	r3
    e94e:	bd08      	pop	{r3, pc}
    e950:	20001c8c 	.word	0x20001c8c
    e954:	0000d085 	.word	0x0000d085
    e958:	200022a8 	.word	0x200022a8

0000e95c <tmr_cca_callback>:
    e95c:	b508      	push	{r3, lr}
    e95e:	4b04      	ldr	r3, [pc, #16]	; (e970 <tmr_cca_callback+0x14>)
    e960:	4798      	blx	r3
    e962:	4b04      	ldr	r3, [pc, #16]	; (e974 <tmr_cca_callback+0x18>)
    e964:	691b      	ldr	r3, [r3, #16]
    e966:	2b00      	cmp	r3, #0
    e968:	d000      	beq.n	e96c <tmr_cca_callback+0x10>
    e96a:	4798      	blx	r3
    e96c:	bd08      	pop	{r3, pc}
    e96e:	46c0      	nop			; (mov r8, r8)
    e970:	0000d071 	.word	0x0000d071
    e974:	20001c8c 	.word	0x20001c8c

0000e978 <set_common_tc_overflow_callback>:
    e978:	4b01      	ldr	r3, [pc, #4]	; (e980 <set_common_tc_overflow_callback+0x8>)
    e97a:	60d8      	str	r0, [r3, #12]
    e97c:	4770      	bx	lr
    e97e:	46c0      	nop			; (mov r8, r8)
    e980:	20001c8c 	.word	0x20001c8c

0000e984 <set_common_tc_expiry_callback>:
    e984:	4b01      	ldr	r3, [pc, #4]	; (e98c <set_common_tc_expiry_callback+0x8>)
    e986:	6118      	str	r0, [r3, #16]
    e988:	4770      	bx	lr
    e98a:	46c0      	nop			; (mov r8, r8)
    e98c:	20001c8c 	.word	0x20001c8c

0000e990 <__udivsi3>:
    e990:	2200      	movs	r2, #0
    e992:	0843      	lsrs	r3, r0, #1
    e994:	428b      	cmp	r3, r1
    e996:	d374      	bcc.n	ea82 <__udivsi3+0xf2>
    e998:	0903      	lsrs	r3, r0, #4
    e99a:	428b      	cmp	r3, r1
    e99c:	d35f      	bcc.n	ea5e <__udivsi3+0xce>
    e99e:	0a03      	lsrs	r3, r0, #8
    e9a0:	428b      	cmp	r3, r1
    e9a2:	d344      	bcc.n	ea2e <__udivsi3+0x9e>
    e9a4:	0b03      	lsrs	r3, r0, #12
    e9a6:	428b      	cmp	r3, r1
    e9a8:	d328      	bcc.n	e9fc <__udivsi3+0x6c>
    e9aa:	0c03      	lsrs	r3, r0, #16
    e9ac:	428b      	cmp	r3, r1
    e9ae:	d30d      	bcc.n	e9cc <__udivsi3+0x3c>
    e9b0:	22ff      	movs	r2, #255	; 0xff
    e9b2:	0209      	lsls	r1, r1, #8
    e9b4:	ba12      	rev	r2, r2
    e9b6:	0c03      	lsrs	r3, r0, #16
    e9b8:	428b      	cmp	r3, r1
    e9ba:	d302      	bcc.n	e9c2 <__udivsi3+0x32>
    e9bc:	1212      	asrs	r2, r2, #8
    e9be:	0209      	lsls	r1, r1, #8
    e9c0:	d065      	beq.n	ea8e <__udivsi3+0xfe>
    e9c2:	0b03      	lsrs	r3, r0, #12
    e9c4:	428b      	cmp	r3, r1
    e9c6:	d319      	bcc.n	e9fc <__udivsi3+0x6c>
    e9c8:	e000      	b.n	e9cc <__udivsi3+0x3c>
    e9ca:	0a09      	lsrs	r1, r1, #8
    e9cc:	0bc3      	lsrs	r3, r0, #15
    e9ce:	428b      	cmp	r3, r1
    e9d0:	d301      	bcc.n	e9d6 <__udivsi3+0x46>
    e9d2:	03cb      	lsls	r3, r1, #15
    e9d4:	1ac0      	subs	r0, r0, r3
    e9d6:	4152      	adcs	r2, r2
    e9d8:	0b83      	lsrs	r3, r0, #14
    e9da:	428b      	cmp	r3, r1
    e9dc:	d301      	bcc.n	e9e2 <__udivsi3+0x52>
    e9de:	038b      	lsls	r3, r1, #14
    e9e0:	1ac0      	subs	r0, r0, r3
    e9e2:	4152      	adcs	r2, r2
    e9e4:	0b43      	lsrs	r3, r0, #13
    e9e6:	428b      	cmp	r3, r1
    e9e8:	d301      	bcc.n	e9ee <__udivsi3+0x5e>
    e9ea:	034b      	lsls	r3, r1, #13
    e9ec:	1ac0      	subs	r0, r0, r3
    e9ee:	4152      	adcs	r2, r2
    e9f0:	0b03      	lsrs	r3, r0, #12
    e9f2:	428b      	cmp	r3, r1
    e9f4:	d301      	bcc.n	e9fa <__udivsi3+0x6a>
    e9f6:	030b      	lsls	r3, r1, #12
    e9f8:	1ac0      	subs	r0, r0, r3
    e9fa:	4152      	adcs	r2, r2
    e9fc:	0ac3      	lsrs	r3, r0, #11
    e9fe:	428b      	cmp	r3, r1
    ea00:	d301      	bcc.n	ea06 <__udivsi3+0x76>
    ea02:	02cb      	lsls	r3, r1, #11
    ea04:	1ac0      	subs	r0, r0, r3
    ea06:	4152      	adcs	r2, r2
    ea08:	0a83      	lsrs	r3, r0, #10
    ea0a:	428b      	cmp	r3, r1
    ea0c:	d301      	bcc.n	ea12 <__udivsi3+0x82>
    ea0e:	028b      	lsls	r3, r1, #10
    ea10:	1ac0      	subs	r0, r0, r3
    ea12:	4152      	adcs	r2, r2
    ea14:	0a43      	lsrs	r3, r0, #9
    ea16:	428b      	cmp	r3, r1
    ea18:	d301      	bcc.n	ea1e <__udivsi3+0x8e>
    ea1a:	024b      	lsls	r3, r1, #9
    ea1c:	1ac0      	subs	r0, r0, r3
    ea1e:	4152      	adcs	r2, r2
    ea20:	0a03      	lsrs	r3, r0, #8
    ea22:	428b      	cmp	r3, r1
    ea24:	d301      	bcc.n	ea2a <__udivsi3+0x9a>
    ea26:	020b      	lsls	r3, r1, #8
    ea28:	1ac0      	subs	r0, r0, r3
    ea2a:	4152      	adcs	r2, r2
    ea2c:	d2cd      	bcs.n	e9ca <__udivsi3+0x3a>
    ea2e:	09c3      	lsrs	r3, r0, #7
    ea30:	428b      	cmp	r3, r1
    ea32:	d301      	bcc.n	ea38 <__udivsi3+0xa8>
    ea34:	01cb      	lsls	r3, r1, #7
    ea36:	1ac0      	subs	r0, r0, r3
    ea38:	4152      	adcs	r2, r2
    ea3a:	0983      	lsrs	r3, r0, #6
    ea3c:	428b      	cmp	r3, r1
    ea3e:	d301      	bcc.n	ea44 <__udivsi3+0xb4>
    ea40:	018b      	lsls	r3, r1, #6
    ea42:	1ac0      	subs	r0, r0, r3
    ea44:	4152      	adcs	r2, r2
    ea46:	0943      	lsrs	r3, r0, #5
    ea48:	428b      	cmp	r3, r1
    ea4a:	d301      	bcc.n	ea50 <__udivsi3+0xc0>
    ea4c:	014b      	lsls	r3, r1, #5
    ea4e:	1ac0      	subs	r0, r0, r3
    ea50:	4152      	adcs	r2, r2
    ea52:	0903      	lsrs	r3, r0, #4
    ea54:	428b      	cmp	r3, r1
    ea56:	d301      	bcc.n	ea5c <__udivsi3+0xcc>
    ea58:	010b      	lsls	r3, r1, #4
    ea5a:	1ac0      	subs	r0, r0, r3
    ea5c:	4152      	adcs	r2, r2
    ea5e:	08c3      	lsrs	r3, r0, #3
    ea60:	428b      	cmp	r3, r1
    ea62:	d301      	bcc.n	ea68 <__udivsi3+0xd8>
    ea64:	00cb      	lsls	r3, r1, #3
    ea66:	1ac0      	subs	r0, r0, r3
    ea68:	4152      	adcs	r2, r2
    ea6a:	0883      	lsrs	r3, r0, #2
    ea6c:	428b      	cmp	r3, r1
    ea6e:	d301      	bcc.n	ea74 <__udivsi3+0xe4>
    ea70:	008b      	lsls	r3, r1, #2
    ea72:	1ac0      	subs	r0, r0, r3
    ea74:	4152      	adcs	r2, r2
    ea76:	0843      	lsrs	r3, r0, #1
    ea78:	428b      	cmp	r3, r1
    ea7a:	d301      	bcc.n	ea80 <__udivsi3+0xf0>
    ea7c:	004b      	lsls	r3, r1, #1
    ea7e:	1ac0      	subs	r0, r0, r3
    ea80:	4152      	adcs	r2, r2
    ea82:	1a41      	subs	r1, r0, r1
    ea84:	d200      	bcs.n	ea88 <__udivsi3+0xf8>
    ea86:	4601      	mov	r1, r0
    ea88:	4152      	adcs	r2, r2
    ea8a:	4610      	mov	r0, r2
    ea8c:	4770      	bx	lr
    ea8e:	e7ff      	b.n	ea90 <__udivsi3+0x100>
    ea90:	b501      	push	{r0, lr}
    ea92:	2000      	movs	r0, #0
    ea94:	f000 f8f0 	bl	ec78 <__aeabi_idiv0>
    ea98:	bd02      	pop	{r1, pc}
    ea9a:	46c0      	nop			; (mov r8, r8)

0000ea9c <__aeabi_uidivmod>:
    ea9c:	2900      	cmp	r1, #0
    ea9e:	d0f7      	beq.n	ea90 <__udivsi3+0x100>
    eaa0:	e776      	b.n	e990 <__udivsi3>
    eaa2:	4770      	bx	lr

0000eaa4 <__divsi3>:
    eaa4:	4603      	mov	r3, r0
    eaa6:	430b      	orrs	r3, r1
    eaa8:	d47f      	bmi.n	ebaa <__divsi3+0x106>
    eaaa:	2200      	movs	r2, #0
    eaac:	0843      	lsrs	r3, r0, #1
    eaae:	428b      	cmp	r3, r1
    eab0:	d374      	bcc.n	eb9c <__divsi3+0xf8>
    eab2:	0903      	lsrs	r3, r0, #4
    eab4:	428b      	cmp	r3, r1
    eab6:	d35f      	bcc.n	eb78 <__divsi3+0xd4>
    eab8:	0a03      	lsrs	r3, r0, #8
    eaba:	428b      	cmp	r3, r1
    eabc:	d344      	bcc.n	eb48 <__divsi3+0xa4>
    eabe:	0b03      	lsrs	r3, r0, #12
    eac0:	428b      	cmp	r3, r1
    eac2:	d328      	bcc.n	eb16 <__divsi3+0x72>
    eac4:	0c03      	lsrs	r3, r0, #16
    eac6:	428b      	cmp	r3, r1
    eac8:	d30d      	bcc.n	eae6 <__divsi3+0x42>
    eaca:	22ff      	movs	r2, #255	; 0xff
    eacc:	0209      	lsls	r1, r1, #8
    eace:	ba12      	rev	r2, r2
    ead0:	0c03      	lsrs	r3, r0, #16
    ead2:	428b      	cmp	r3, r1
    ead4:	d302      	bcc.n	eadc <__divsi3+0x38>
    ead6:	1212      	asrs	r2, r2, #8
    ead8:	0209      	lsls	r1, r1, #8
    eada:	d065      	beq.n	eba8 <__divsi3+0x104>
    eadc:	0b03      	lsrs	r3, r0, #12
    eade:	428b      	cmp	r3, r1
    eae0:	d319      	bcc.n	eb16 <__divsi3+0x72>
    eae2:	e000      	b.n	eae6 <__divsi3+0x42>
    eae4:	0a09      	lsrs	r1, r1, #8
    eae6:	0bc3      	lsrs	r3, r0, #15
    eae8:	428b      	cmp	r3, r1
    eaea:	d301      	bcc.n	eaf0 <__divsi3+0x4c>
    eaec:	03cb      	lsls	r3, r1, #15
    eaee:	1ac0      	subs	r0, r0, r3
    eaf0:	4152      	adcs	r2, r2
    eaf2:	0b83      	lsrs	r3, r0, #14
    eaf4:	428b      	cmp	r3, r1
    eaf6:	d301      	bcc.n	eafc <__divsi3+0x58>
    eaf8:	038b      	lsls	r3, r1, #14
    eafa:	1ac0      	subs	r0, r0, r3
    eafc:	4152      	adcs	r2, r2
    eafe:	0b43      	lsrs	r3, r0, #13
    eb00:	428b      	cmp	r3, r1
    eb02:	d301      	bcc.n	eb08 <__divsi3+0x64>
    eb04:	034b      	lsls	r3, r1, #13
    eb06:	1ac0      	subs	r0, r0, r3
    eb08:	4152      	adcs	r2, r2
    eb0a:	0b03      	lsrs	r3, r0, #12
    eb0c:	428b      	cmp	r3, r1
    eb0e:	d301      	bcc.n	eb14 <__divsi3+0x70>
    eb10:	030b      	lsls	r3, r1, #12
    eb12:	1ac0      	subs	r0, r0, r3
    eb14:	4152      	adcs	r2, r2
    eb16:	0ac3      	lsrs	r3, r0, #11
    eb18:	428b      	cmp	r3, r1
    eb1a:	d301      	bcc.n	eb20 <__divsi3+0x7c>
    eb1c:	02cb      	lsls	r3, r1, #11
    eb1e:	1ac0      	subs	r0, r0, r3
    eb20:	4152      	adcs	r2, r2
    eb22:	0a83      	lsrs	r3, r0, #10
    eb24:	428b      	cmp	r3, r1
    eb26:	d301      	bcc.n	eb2c <__divsi3+0x88>
    eb28:	028b      	lsls	r3, r1, #10
    eb2a:	1ac0      	subs	r0, r0, r3
    eb2c:	4152      	adcs	r2, r2
    eb2e:	0a43      	lsrs	r3, r0, #9
    eb30:	428b      	cmp	r3, r1
    eb32:	d301      	bcc.n	eb38 <__divsi3+0x94>
    eb34:	024b      	lsls	r3, r1, #9
    eb36:	1ac0      	subs	r0, r0, r3
    eb38:	4152      	adcs	r2, r2
    eb3a:	0a03      	lsrs	r3, r0, #8
    eb3c:	428b      	cmp	r3, r1
    eb3e:	d301      	bcc.n	eb44 <__divsi3+0xa0>
    eb40:	020b      	lsls	r3, r1, #8
    eb42:	1ac0      	subs	r0, r0, r3
    eb44:	4152      	adcs	r2, r2
    eb46:	d2cd      	bcs.n	eae4 <__divsi3+0x40>
    eb48:	09c3      	lsrs	r3, r0, #7
    eb4a:	428b      	cmp	r3, r1
    eb4c:	d301      	bcc.n	eb52 <__divsi3+0xae>
    eb4e:	01cb      	lsls	r3, r1, #7
    eb50:	1ac0      	subs	r0, r0, r3
    eb52:	4152      	adcs	r2, r2
    eb54:	0983      	lsrs	r3, r0, #6
    eb56:	428b      	cmp	r3, r1
    eb58:	d301      	bcc.n	eb5e <__divsi3+0xba>
    eb5a:	018b      	lsls	r3, r1, #6
    eb5c:	1ac0      	subs	r0, r0, r3
    eb5e:	4152      	adcs	r2, r2
    eb60:	0943      	lsrs	r3, r0, #5
    eb62:	428b      	cmp	r3, r1
    eb64:	d301      	bcc.n	eb6a <__divsi3+0xc6>
    eb66:	014b      	lsls	r3, r1, #5
    eb68:	1ac0      	subs	r0, r0, r3
    eb6a:	4152      	adcs	r2, r2
    eb6c:	0903      	lsrs	r3, r0, #4
    eb6e:	428b      	cmp	r3, r1
    eb70:	d301      	bcc.n	eb76 <__divsi3+0xd2>
    eb72:	010b      	lsls	r3, r1, #4
    eb74:	1ac0      	subs	r0, r0, r3
    eb76:	4152      	adcs	r2, r2
    eb78:	08c3      	lsrs	r3, r0, #3
    eb7a:	428b      	cmp	r3, r1
    eb7c:	d301      	bcc.n	eb82 <__divsi3+0xde>
    eb7e:	00cb      	lsls	r3, r1, #3
    eb80:	1ac0      	subs	r0, r0, r3
    eb82:	4152      	adcs	r2, r2
    eb84:	0883      	lsrs	r3, r0, #2
    eb86:	428b      	cmp	r3, r1
    eb88:	d301      	bcc.n	eb8e <__divsi3+0xea>
    eb8a:	008b      	lsls	r3, r1, #2
    eb8c:	1ac0      	subs	r0, r0, r3
    eb8e:	4152      	adcs	r2, r2
    eb90:	0843      	lsrs	r3, r0, #1
    eb92:	428b      	cmp	r3, r1
    eb94:	d301      	bcc.n	eb9a <__divsi3+0xf6>
    eb96:	004b      	lsls	r3, r1, #1
    eb98:	1ac0      	subs	r0, r0, r3
    eb9a:	4152      	adcs	r2, r2
    eb9c:	1a41      	subs	r1, r0, r1
    eb9e:	d200      	bcs.n	eba2 <__divsi3+0xfe>
    eba0:	4601      	mov	r1, r0
    eba2:	4152      	adcs	r2, r2
    eba4:	4610      	mov	r0, r2
    eba6:	4770      	bx	lr
    eba8:	e05d      	b.n	ec66 <__divsi3+0x1c2>
    ebaa:	0fca      	lsrs	r2, r1, #31
    ebac:	d000      	beq.n	ebb0 <__divsi3+0x10c>
    ebae:	4249      	negs	r1, r1
    ebb0:	1003      	asrs	r3, r0, #32
    ebb2:	d300      	bcc.n	ebb6 <__divsi3+0x112>
    ebb4:	4240      	negs	r0, r0
    ebb6:	4053      	eors	r3, r2
    ebb8:	2200      	movs	r2, #0
    ebba:	469c      	mov	ip, r3
    ebbc:	0903      	lsrs	r3, r0, #4
    ebbe:	428b      	cmp	r3, r1
    ebc0:	d32d      	bcc.n	ec1e <__divsi3+0x17a>
    ebc2:	0a03      	lsrs	r3, r0, #8
    ebc4:	428b      	cmp	r3, r1
    ebc6:	d312      	bcc.n	ebee <__divsi3+0x14a>
    ebc8:	22fc      	movs	r2, #252	; 0xfc
    ebca:	0189      	lsls	r1, r1, #6
    ebcc:	ba12      	rev	r2, r2
    ebce:	0a03      	lsrs	r3, r0, #8
    ebd0:	428b      	cmp	r3, r1
    ebd2:	d30c      	bcc.n	ebee <__divsi3+0x14a>
    ebd4:	0189      	lsls	r1, r1, #6
    ebd6:	1192      	asrs	r2, r2, #6
    ebd8:	428b      	cmp	r3, r1
    ebda:	d308      	bcc.n	ebee <__divsi3+0x14a>
    ebdc:	0189      	lsls	r1, r1, #6
    ebde:	1192      	asrs	r2, r2, #6
    ebe0:	428b      	cmp	r3, r1
    ebe2:	d304      	bcc.n	ebee <__divsi3+0x14a>
    ebe4:	0189      	lsls	r1, r1, #6
    ebe6:	d03a      	beq.n	ec5e <__divsi3+0x1ba>
    ebe8:	1192      	asrs	r2, r2, #6
    ebea:	e000      	b.n	ebee <__divsi3+0x14a>
    ebec:	0989      	lsrs	r1, r1, #6
    ebee:	09c3      	lsrs	r3, r0, #7
    ebf0:	428b      	cmp	r3, r1
    ebf2:	d301      	bcc.n	ebf8 <__divsi3+0x154>
    ebf4:	01cb      	lsls	r3, r1, #7
    ebf6:	1ac0      	subs	r0, r0, r3
    ebf8:	4152      	adcs	r2, r2
    ebfa:	0983      	lsrs	r3, r0, #6
    ebfc:	428b      	cmp	r3, r1
    ebfe:	d301      	bcc.n	ec04 <__divsi3+0x160>
    ec00:	018b      	lsls	r3, r1, #6
    ec02:	1ac0      	subs	r0, r0, r3
    ec04:	4152      	adcs	r2, r2
    ec06:	0943      	lsrs	r3, r0, #5
    ec08:	428b      	cmp	r3, r1
    ec0a:	d301      	bcc.n	ec10 <__divsi3+0x16c>
    ec0c:	014b      	lsls	r3, r1, #5
    ec0e:	1ac0      	subs	r0, r0, r3
    ec10:	4152      	adcs	r2, r2
    ec12:	0903      	lsrs	r3, r0, #4
    ec14:	428b      	cmp	r3, r1
    ec16:	d301      	bcc.n	ec1c <__divsi3+0x178>
    ec18:	010b      	lsls	r3, r1, #4
    ec1a:	1ac0      	subs	r0, r0, r3
    ec1c:	4152      	adcs	r2, r2
    ec1e:	08c3      	lsrs	r3, r0, #3
    ec20:	428b      	cmp	r3, r1
    ec22:	d301      	bcc.n	ec28 <__divsi3+0x184>
    ec24:	00cb      	lsls	r3, r1, #3
    ec26:	1ac0      	subs	r0, r0, r3
    ec28:	4152      	adcs	r2, r2
    ec2a:	0883      	lsrs	r3, r0, #2
    ec2c:	428b      	cmp	r3, r1
    ec2e:	d301      	bcc.n	ec34 <__divsi3+0x190>
    ec30:	008b      	lsls	r3, r1, #2
    ec32:	1ac0      	subs	r0, r0, r3
    ec34:	4152      	adcs	r2, r2
    ec36:	d2d9      	bcs.n	ebec <__divsi3+0x148>
    ec38:	0843      	lsrs	r3, r0, #1
    ec3a:	428b      	cmp	r3, r1
    ec3c:	d301      	bcc.n	ec42 <__divsi3+0x19e>
    ec3e:	004b      	lsls	r3, r1, #1
    ec40:	1ac0      	subs	r0, r0, r3
    ec42:	4152      	adcs	r2, r2
    ec44:	1a41      	subs	r1, r0, r1
    ec46:	d200      	bcs.n	ec4a <__divsi3+0x1a6>
    ec48:	4601      	mov	r1, r0
    ec4a:	4663      	mov	r3, ip
    ec4c:	4152      	adcs	r2, r2
    ec4e:	105b      	asrs	r3, r3, #1
    ec50:	4610      	mov	r0, r2
    ec52:	d301      	bcc.n	ec58 <__divsi3+0x1b4>
    ec54:	4240      	negs	r0, r0
    ec56:	2b00      	cmp	r3, #0
    ec58:	d500      	bpl.n	ec5c <__divsi3+0x1b8>
    ec5a:	4249      	negs	r1, r1
    ec5c:	4770      	bx	lr
    ec5e:	4663      	mov	r3, ip
    ec60:	105b      	asrs	r3, r3, #1
    ec62:	d300      	bcc.n	ec66 <__divsi3+0x1c2>
    ec64:	4240      	negs	r0, r0
    ec66:	b501      	push	{r0, lr}
    ec68:	2000      	movs	r0, #0
    ec6a:	f000 f805 	bl	ec78 <__aeabi_idiv0>
    ec6e:	bd02      	pop	{r1, pc}

0000ec70 <__aeabi_idivmod>:
    ec70:	2900      	cmp	r1, #0
    ec72:	d0f8      	beq.n	ec66 <__divsi3+0x1c2>
    ec74:	e716      	b.n	eaa4 <__divsi3>
    ec76:	4770      	bx	lr

0000ec78 <__aeabi_idiv0>:
    ec78:	4770      	bx	lr
    ec7a:	46c0      	nop			; (mov r8, r8)

0000ec7c <__aeabi_cfrcmple>:
    ec7c:	4684      	mov	ip, r0
    ec7e:	1c08      	adds	r0, r1, #0
    ec80:	4661      	mov	r1, ip
    ec82:	e7ff      	b.n	ec84 <__aeabi_cfcmpeq>

0000ec84 <__aeabi_cfcmpeq>:
    ec84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ec86:	f000 fbb5 	bl	f3f4 <__lesf2>
    ec8a:	2800      	cmp	r0, #0
    ec8c:	d401      	bmi.n	ec92 <__aeabi_cfcmpeq+0xe>
    ec8e:	2100      	movs	r1, #0
    ec90:	42c8      	cmn	r0, r1
    ec92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ec94 <__aeabi_fcmpeq>:
    ec94:	b510      	push	{r4, lr}
    ec96:	f000 fb47 	bl	f328 <__eqsf2>
    ec9a:	4240      	negs	r0, r0
    ec9c:	3001      	adds	r0, #1
    ec9e:	bd10      	pop	{r4, pc}

0000eca0 <__aeabi_fcmplt>:
    eca0:	b510      	push	{r4, lr}
    eca2:	f000 fba7 	bl	f3f4 <__lesf2>
    eca6:	2800      	cmp	r0, #0
    eca8:	db01      	blt.n	ecae <__aeabi_fcmplt+0xe>
    ecaa:	2000      	movs	r0, #0
    ecac:	bd10      	pop	{r4, pc}
    ecae:	2001      	movs	r0, #1
    ecb0:	bd10      	pop	{r4, pc}
    ecb2:	46c0      	nop			; (mov r8, r8)

0000ecb4 <__aeabi_fcmple>:
    ecb4:	b510      	push	{r4, lr}
    ecb6:	f000 fb9d 	bl	f3f4 <__lesf2>
    ecba:	2800      	cmp	r0, #0
    ecbc:	dd01      	ble.n	ecc2 <__aeabi_fcmple+0xe>
    ecbe:	2000      	movs	r0, #0
    ecc0:	bd10      	pop	{r4, pc}
    ecc2:	2001      	movs	r0, #1
    ecc4:	bd10      	pop	{r4, pc}
    ecc6:	46c0      	nop			; (mov r8, r8)

0000ecc8 <__aeabi_fcmpgt>:
    ecc8:	b510      	push	{r4, lr}
    ecca:	f000 fb53 	bl	f374 <__gesf2>
    ecce:	2800      	cmp	r0, #0
    ecd0:	dc01      	bgt.n	ecd6 <__aeabi_fcmpgt+0xe>
    ecd2:	2000      	movs	r0, #0
    ecd4:	bd10      	pop	{r4, pc}
    ecd6:	2001      	movs	r0, #1
    ecd8:	bd10      	pop	{r4, pc}
    ecda:	46c0      	nop			; (mov r8, r8)

0000ecdc <__aeabi_fcmpge>:
    ecdc:	b510      	push	{r4, lr}
    ecde:	f000 fb49 	bl	f374 <__gesf2>
    ece2:	2800      	cmp	r0, #0
    ece4:	da01      	bge.n	ecea <__aeabi_fcmpge+0xe>
    ece6:	2000      	movs	r0, #0
    ece8:	bd10      	pop	{r4, pc}
    ecea:	2001      	movs	r0, #1
    ecec:	bd10      	pop	{r4, pc}
    ecee:	46c0      	nop			; (mov r8, r8)

0000ecf0 <__aeabi_lmul>:
    ecf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecf2:	46ce      	mov	lr, r9
    ecf4:	4647      	mov	r7, r8
    ecf6:	0415      	lsls	r5, r2, #16
    ecf8:	0c2d      	lsrs	r5, r5, #16
    ecfa:	002e      	movs	r6, r5
    ecfc:	b580      	push	{r7, lr}
    ecfe:	0407      	lsls	r7, r0, #16
    ed00:	0c14      	lsrs	r4, r2, #16
    ed02:	0c3f      	lsrs	r7, r7, #16
    ed04:	4699      	mov	r9, r3
    ed06:	0c03      	lsrs	r3, r0, #16
    ed08:	437e      	muls	r6, r7
    ed0a:	435d      	muls	r5, r3
    ed0c:	4367      	muls	r7, r4
    ed0e:	4363      	muls	r3, r4
    ed10:	197f      	adds	r7, r7, r5
    ed12:	0c34      	lsrs	r4, r6, #16
    ed14:	19e4      	adds	r4, r4, r7
    ed16:	469c      	mov	ip, r3
    ed18:	42a5      	cmp	r5, r4
    ed1a:	d903      	bls.n	ed24 <__aeabi_lmul+0x34>
    ed1c:	2380      	movs	r3, #128	; 0x80
    ed1e:	025b      	lsls	r3, r3, #9
    ed20:	4698      	mov	r8, r3
    ed22:	44c4      	add	ip, r8
    ed24:	464b      	mov	r3, r9
    ed26:	4351      	muls	r1, r2
    ed28:	4343      	muls	r3, r0
    ed2a:	0436      	lsls	r6, r6, #16
    ed2c:	0c36      	lsrs	r6, r6, #16
    ed2e:	0c25      	lsrs	r5, r4, #16
    ed30:	0424      	lsls	r4, r4, #16
    ed32:	4465      	add	r5, ip
    ed34:	19a4      	adds	r4, r4, r6
    ed36:	1859      	adds	r1, r3, r1
    ed38:	1949      	adds	r1, r1, r5
    ed3a:	0020      	movs	r0, r4
    ed3c:	bc0c      	pop	{r2, r3}
    ed3e:	4690      	mov	r8, r2
    ed40:	4699      	mov	r9, r3
    ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ed44 <__aeabi_f2uiz>:
    ed44:	219e      	movs	r1, #158	; 0x9e
    ed46:	b510      	push	{r4, lr}
    ed48:	05c9      	lsls	r1, r1, #23
    ed4a:	1c04      	adds	r4, r0, #0
    ed4c:	f7ff ffc6 	bl	ecdc <__aeabi_fcmpge>
    ed50:	2800      	cmp	r0, #0
    ed52:	d103      	bne.n	ed5c <__aeabi_f2uiz+0x18>
    ed54:	1c20      	adds	r0, r4, #0
    ed56:	f000 fd2b 	bl	f7b0 <__aeabi_f2iz>
    ed5a:	bd10      	pop	{r4, pc}
    ed5c:	219e      	movs	r1, #158	; 0x9e
    ed5e:	1c20      	adds	r0, r4, #0
    ed60:	05c9      	lsls	r1, r1, #23
    ed62:	f000 fb89 	bl	f478 <__aeabi_fsub>
    ed66:	f000 fd23 	bl	f7b0 <__aeabi_f2iz>
    ed6a:	2380      	movs	r3, #128	; 0x80
    ed6c:	061b      	lsls	r3, r3, #24
    ed6e:	469c      	mov	ip, r3
    ed70:	4460      	add	r0, ip
    ed72:	e7f2      	b.n	ed5a <__aeabi_f2uiz+0x16>

0000ed74 <__aeabi_fadd>:
    ed74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed76:	46c6      	mov	lr, r8
    ed78:	024e      	lsls	r6, r1, #9
    ed7a:	0247      	lsls	r7, r0, #9
    ed7c:	0a76      	lsrs	r6, r6, #9
    ed7e:	0a7b      	lsrs	r3, r7, #9
    ed80:	0044      	lsls	r4, r0, #1
    ed82:	0fc5      	lsrs	r5, r0, #31
    ed84:	00f7      	lsls	r7, r6, #3
    ed86:	0048      	lsls	r0, r1, #1
    ed88:	4698      	mov	r8, r3
    ed8a:	b500      	push	{lr}
    ed8c:	0e24      	lsrs	r4, r4, #24
    ed8e:	002a      	movs	r2, r5
    ed90:	00db      	lsls	r3, r3, #3
    ed92:	0e00      	lsrs	r0, r0, #24
    ed94:	0fc9      	lsrs	r1, r1, #31
    ed96:	46bc      	mov	ip, r7
    ed98:	428d      	cmp	r5, r1
    ed9a:	d067      	beq.n	ee6c <__aeabi_fadd+0xf8>
    ed9c:	1a22      	subs	r2, r4, r0
    ed9e:	2a00      	cmp	r2, #0
    eda0:	dc00      	bgt.n	eda4 <__aeabi_fadd+0x30>
    eda2:	e0a5      	b.n	eef0 <__aeabi_fadd+0x17c>
    eda4:	2800      	cmp	r0, #0
    eda6:	d13a      	bne.n	ee1e <__aeabi_fadd+0xaa>
    eda8:	2f00      	cmp	r7, #0
    edaa:	d100      	bne.n	edae <__aeabi_fadd+0x3a>
    edac:	e093      	b.n	eed6 <__aeabi_fadd+0x162>
    edae:	1e51      	subs	r1, r2, #1
    edb0:	2900      	cmp	r1, #0
    edb2:	d000      	beq.n	edb6 <__aeabi_fadd+0x42>
    edb4:	e0bc      	b.n	ef30 <__aeabi_fadd+0x1bc>
    edb6:	2401      	movs	r4, #1
    edb8:	1bdb      	subs	r3, r3, r7
    edba:	015a      	lsls	r2, r3, #5
    edbc:	d546      	bpl.n	ee4c <__aeabi_fadd+0xd8>
    edbe:	019b      	lsls	r3, r3, #6
    edc0:	099e      	lsrs	r6, r3, #6
    edc2:	0030      	movs	r0, r6
    edc4:	f000 fd5a 	bl	f87c <__clzsi2>
    edc8:	3805      	subs	r0, #5
    edca:	4086      	lsls	r6, r0
    edcc:	4284      	cmp	r4, r0
    edce:	dd00      	ble.n	edd2 <__aeabi_fadd+0x5e>
    edd0:	e09d      	b.n	ef0e <__aeabi_fadd+0x19a>
    edd2:	1b04      	subs	r4, r0, r4
    edd4:	0032      	movs	r2, r6
    edd6:	2020      	movs	r0, #32
    edd8:	3401      	adds	r4, #1
    edda:	40e2      	lsrs	r2, r4
    eddc:	1b04      	subs	r4, r0, r4
    edde:	40a6      	lsls	r6, r4
    ede0:	0033      	movs	r3, r6
    ede2:	1e5e      	subs	r6, r3, #1
    ede4:	41b3      	sbcs	r3, r6
    ede6:	2400      	movs	r4, #0
    ede8:	4313      	orrs	r3, r2
    edea:	075a      	lsls	r2, r3, #29
    edec:	d004      	beq.n	edf8 <__aeabi_fadd+0x84>
    edee:	220f      	movs	r2, #15
    edf0:	401a      	ands	r2, r3
    edf2:	2a04      	cmp	r2, #4
    edf4:	d000      	beq.n	edf8 <__aeabi_fadd+0x84>
    edf6:	3304      	adds	r3, #4
    edf8:	015a      	lsls	r2, r3, #5
    edfa:	d529      	bpl.n	ee50 <__aeabi_fadd+0xdc>
    edfc:	3401      	adds	r4, #1
    edfe:	2cff      	cmp	r4, #255	; 0xff
    ee00:	d100      	bne.n	ee04 <__aeabi_fadd+0x90>
    ee02:	e081      	b.n	ef08 <__aeabi_fadd+0x194>
    ee04:	002a      	movs	r2, r5
    ee06:	019b      	lsls	r3, r3, #6
    ee08:	0a5b      	lsrs	r3, r3, #9
    ee0a:	b2e4      	uxtb	r4, r4
    ee0c:	025b      	lsls	r3, r3, #9
    ee0e:	05e4      	lsls	r4, r4, #23
    ee10:	0a58      	lsrs	r0, r3, #9
    ee12:	07d2      	lsls	r2, r2, #31
    ee14:	4320      	orrs	r0, r4
    ee16:	4310      	orrs	r0, r2
    ee18:	bc04      	pop	{r2}
    ee1a:	4690      	mov	r8, r2
    ee1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee1e:	2cff      	cmp	r4, #255	; 0xff
    ee20:	d0e3      	beq.n	edea <__aeabi_fadd+0x76>
    ee22:	2180      	movs	r1, #128	; 0x80
    ee24:	0038      	movs	r0, r7
    ee26:	04c9      	lsls	r1, r1, #19
    ee28:	4308      	orrs	r0, r1
    ee2a:	4684      	mov	ip, r0
    ee2c:	2a1b      	cmp	r2, #27
    ee2e:	dd00      	ble.n	ee32 <__aeabi_fadd+0xbe>
    ee30:	e082      	b.n	ef38 <__aeabi_fadd+0x1c4>
    ee32:	2020      	movs	r0, #32
    ee34:	4661      	mov	r1, ip
    ee36:	40d1      	lsrs	r1, r2
    ee38:	1a82      	subs	r2, r0, r2
    ee3a:	4660      	mov	r0, ip
    ee3c:	4090      	lsls	r0, r2
    ee3e:	0002      	movs	r2, r0
    ee40:	1e50      	subs	r0, r2, #1
    ee42:	4182      	sbcs	r2, r0
    ee44:	430a      	orrs	r2, r1
    ee46:	1a9b      	subs	r3, r3, r2
    ee48:	015a      	lsls	r2, r3, #5
    ee4a:	d4b8      	bmi.n	edbe <__aeabi_fadd+0x4a>
    ee4c:	075a      	lsls	r2, r3, #29
    ee4e:	d1ce      	bne.n	edee <__aeabi_fadd+0x7a>
    ee50:	08de      	lsrs	r6, r3, #3
    ee52:	002a      	movs	r2, r5
    ee54:	2cff      	cmp	r4, #255	; 0xff
    ee56:	d13a      	bne.n	eece <__aeabi_fadd+0x15a>
    ee58:	2e00      	cmp	r6, #0
    ee5a:	d100      	bne.n	ee5e <__aeabi_fadd+0xea>
    ee5c:	e0ae      	b.n	efbc <__aeabi_fadd+0x248>
    ee5e:	2380      	movs	r3, #128	; 0x80
    ee60:	03db      	lsls	r3, r3, #15
    ee62:	4333      	orrs	r3, r6
    ee64:	025b      	lsls	r3, r3, #9
    ee66:	0a5b      	lsrs	r3, r3, #9
    ee68:	24ff      	movs	r4, #255	; 0xff
    ee6a:	e7cf      	b.n	ee0c <__aeabi_fadd+0x98>
    ee6c:	1a21      	subs	r1, r4, r0
    ee6e:	2900      	cmp	r1, #0
    ee70:	dd52      	ble.n	ef18 <__aeabi_fadd+0x1a4>
    ee72:	2800      	cmp	r0, #0
    ee74:	d031      	beq.n	eeda <__aeabi_fadd+0x166>
    ee76:	2cff      	cmp	r4, #255	; 0xff
    ee78:	d0b7      	beq.n	edea <__aeabi_fadd+0x76>
    ee7a:	2080      	movs	r0, #128	; 0x80
    ee7c:	003e      	movs	r6, r7
    ee7e:	04c0      	lsls	r0, r0, #19
    ee80:	4306      	orrs	r6, r0
    ee82:	46b4      	mov	ip, r6
    ee84:	291b      	cmp	r1, #27
    ee86:	dd00      	ble.n	ee8a <__aeabi_fadd+0x116>
    ee88:	e0aa      	b.n	efe0 <__aeabi_fadd+0x26c>
    ee8a:	2620      	movs	r6, #32
    ee8c:	4660      	mov	r0, ip
    ee8e:	40c8      	lsrs	r0, r1
    ee90:	1a71      	subs	r1, r6, r1
    ee92:	4666      	mov	r6, ip
    ee94:	408e      	lsls	r6, r1
    ee96:	0031      	movs	r1, r6
    ee98:	1e4e      	subs	r6, r1, #1
    ee9a:	41b1      	sbcs	r1, r6
    ee9c:	4301      	orrs	r1, r0
    ee9e:	185b      	adds	r3, r3, r1
    eea0:	0159      	lsls	r1, r3, #5
    eea2:	d5d3      	bpl.n	ee4c <__aeabi_fadd+0xd8>
    eea4:	3401      	adds	r4, #1
    eea6:	2cff      	cmp	r4, #255	; 0xff
    eea8:	d100      	bne.n	eeac <__aeabi_fadd+0x138>
    eeaa:	e087      	b.n	efbc <__aeabi_fadd+0x248>
    eeac:	2201      	movs	r2, #1
    eeae:	4978      	ldr	r1, [pc, #480]	; (f090 <__aeabi_fadd+0x31c>)
    eeb0:	401a      	ands	r2, r3
    eeb2:	085b      	lsrs	r3, r3, #1
    eeb4:	400b      	ands	r3, r1
    eeb6:	4313      	orrs	r3, r2
    eeb8:	e797      	b.n	edea <__aeabi_fadd+0x76>
    eeba:	2c00      	cmp	r4, #0
    eebc:	d000      	beq.n	eec0 <__aeabi_fadd+0x14c>
    eebe:	e0a7      	b.n	f010 <__aeabi_fadd+0x29c>
    eec0:	2b00      	cmp	r3, #0
    eec2:	d000      	beq.n	eec6 <__aeabi_fadd+0x152>
    eec4:	e0b6      	b.n	f034 <__aeabi_fadd+0x2c0>
    eec6:	1e3b      	subs	r3, r7, #0
    eec8:	d162      	bne.n	ef90 <__aeabi_fadd+0x21c>
    eeca:	2600      	movs	r6, #0
    eecc:	2200      	movs	r2, #0
    eece:	0273      	lsls	r3, r6, #9
    eed0:	0a5b      	lsrs	r3, r3, #9
    eed2:	b2e4      	uxtb	r4, r4
    eed4:	e79a      	b.n	ee0c <__aeabi_fadd+0x98>
    eed6:	0014      	movs	r4, r2
    eed8:	e787      	b.n	edea <__aeabi_fadd+0x76>
    eeda:	2f00      	cmp	r7, #0
    eedc:	d04d      	beq.n	ef7a <__aeabi_fadd+0x206>
    eede:	1e48      	subs	r0, r1, #1
    eee0:	2800      	cmp	r0, #0
    eee2:	d157      	bne.n	ef94 <__aeabi_fadd+0x220>
    eee4:	4463      	add	r3, ip
    eee6:	2401      	movs	r4, #1
    eee8:	015a      	lsls	r2, r3, #5
    eeea:	d5af      	bpl.n	ee4c <__aeabi_fadd+0xd8>
    eeec:	2402      	movs	r4, #2
    eeee:	e7dd      	b.n	eeac <__aeabi_fadd+0x138>
    eef0:	2a00      	cmp	r2, #0
    eef2:	d124      	bne.n	ef3e <__aeabi_fadd+0x1ca>
    eef4:	1c62      	adds	r2, r4, #1
    eef6:	b2d2      	uxtb	r2, r2
    eef8:	2a01      	cmp	r2, #1
    eefa:	ddde      	ble.n	eeba <__aeabi_fadd+0x146>
    eefc:	1bde      	subs	r6, r3, r7
    eefe:	0172      	lsls	r2, r6, #5
    ef00:	d535      	bpl.n	ef6e <__aeabi_fadd+0x1fa>
    ef02:	1afe      	subs	r6, r7, r3
    ef04:	000d      	movs	r5, r1
    ef06:	e75c      	b.n	edc2 <__aeabi_fadd+0x4e>
    ef08:	002a      	movs	r2, r5
    ef0a:	2300      	movs	r3, #0
    ef0c:	e77e      	b.n	ee0c <__aeabi_fadd+0x98>
    ef0e:	0033      	movs	r3, r6
    ef10:	4a60      	ldr	r2, [pc, #384]	; (f094 <__aeabi_fadd+0x320>)
    ef12:	1a24      	subs	r4, r4, r0
    ef14:	4013      	ands	r3, r2
    ef16:	e768      	b.n	edea <__aeabi_fadd+0x76>
    ef18:	2900      	cmp	r1, #0
    ef1a:	d163      	bne.n	efe4 <__aeabi_fadd+0x270>
    ef1c:	1c61      	adds	r1, r4, #1
    ef1e:	b2c8      	uxtb	r0, r1
    ef20:	2801      	cmp	r0, #1
    ef22:	dd4e      	ble.n	efc2 <__aeabi_fadd+0x24e>
    ef24:	29ff      	cmp	r1, #255	; 0xff
    ef26:	d049      	beq.n	efbc <__aeabi_fadd+0x248>
    ef28:	4463      	add	r3, ip
    ef2a:	085b      	lsrs	r3, r3, #1
    ef2c:	000c      	movs	r4, r1
    ef2e:	e75c      	b.n	edea <__aeabi_fadd+0x76>
    ef30:	2aff      	cmp	r2, #255	; 0xff
    ef32:	d041      	beq.n	efb8 <__aeabi_fadd+0x244>
    ef34:	000a      	movs	r2, r1
    ef36:	e779      	b.n	ee2c <__aeabi_fadd+0xb8>
    ef38:	2201      	movs	r2, #1
    ef3a:	1a9b      	subs	r3, r3, r2
    ef3c:	e784      	b.n	ee48 <__aeabi_fadd+0xd4>
    ef3e:	2c00      	cmp	r4, #0
    ef40:	d01d      	beq.n	ef7e <__aeabi_fadd+0x20a>
    ef42:	28ff      	cmp	r0, #255	; 0xff
    ef44:	d022      	beq.n	ef8c <__aeabi_fadd+0x218>
    ef46:	2480      	movs	r4, #128	; 0x80
    ef48:	04e4      	lsls	r4, r4, #19
    ef4a:	4252      	negs	r2, r2
    ef4c:	4323      	orrs	r3, r4
    ef4e:	2a1b      	cmp	r2, #27
    ef50:	dd00      	ble.n	ef54 <__aeabi_fadd+0x1e0>
    ef52:	e08a      	b.n	f06a <__aeabi_fadd+0x2f6>
    ef54:	001c      	movs	r4, r3
    ef56:	2520      	movs	r5, #32
    ef58:	40d4      	lsrs	r4, r2
    ef5a:	1aaa      	subs	r2, r5, r2
    ef5c:	4093      	lsls	r3, r2
    ef5e:	1e5a      	subs	r2, r3, #1
    ef60:	4193      	sbcs	r3, r2
    ef62:	4323      	orrs	r3, r4
    ef64:	4662      	mov	r2, ip
    ef66:	0004      	movs	r4, r0
    ef68:	1ad3      	subs	r3, r2, r3
    ef6a:	000d      	movs	r5, r1
    ef6c:	e725      	b.n	edba <__aeabi_fadd+0x46>
    ef6e:	2e00      	cmp	r6, #0
    ef70:	d000      	beq.n	ef74 <__aeabi_fadd+0x200>
    ef72:	e726      	b.n	edc2 <__aeabi_fadd+0x4e>
    ef74:	2200      	movs	r2, #0
    ef76:	2400      	movs	r4, #0
    ef78:	e7a9      	b.n	eece <__aeabi_fadd+0x15a>
    ef7a:	000c      	movs	r4, r1
    ef7c:	e735      	b.n	edea <__aeabi_fadd+0x76>
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d04d      	beq.n	f01e <__aeabi_fadd+0x2aa>
    ef82:	43d2      	mvns	r2, r2
    ef84:	2a00      	cmp	r2, #0
    ef86:	d0ed      	beq.n	ef64 <__aeabi_fadd+0x1f0>
    ef88:	28ff      	cmp	r0, #255	; 0xff
    ef8a:	d1e0      	bne.n	ef4e <__aeabi_fadd+0x1da>
    ef8c:	4663      	mov	r3, ip
    ef8e:	24ff      	movs	r4, #255	; 0xff
    ef90:	000d      	movs	r5, r1
    ef92:	e72a      	b.n	edea <__aeabi_fadd+0x76>
    ef94:	29ff      	cmp	r1, #255	; 0xff
    ef96:	d00f      	beq.n	efb8 <__aeabi_fadd+0x244>
    ef98:	0001      	movs	r1, r0
    ef9a:	e773      	b.n	ee84 <__aeabi_fadd+0x110>
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d061      	beq.n	f064 <__aeabi_fadd+0x2f0>
    efa0:	24ff      	movs	r4, #255	; 0xff
    efa2:	2f00      	cmp	r7, #0
    efa4:	d100      	bne.n	efa8 <__aeabi_fadd+0x234>
    efa6:	e720      	b.n	edea <__aeabi_fadd+0x76>
    efa8:	2280      	movs	r2, #128	; 0x80
    efaa:	4641      	mov	r1, r8
    efac:	03d2      	lsls	r2, r2, #15
    efae:	4211      	tst	r1, r2
    efb0:	d002      	beq.n	efb8 <__aeabi_fadd+0x244>
    efb2:	4216      	tst	r6, r2
    efb4:	d100      	bne.n	efb8 <__aeabi_fadd+0x244>
    efb6:	003b      	movs	r3, r7
    efb8:	24ff      	movs	r4, #255	; 0xff
    efba:	e716      	b.n	edea <__aeabi_fadd+0x76>
    efbc:	24ff      	movs	r4, #255	; 0xff
    efbe:	2300      	movs	r3, #0
    efc0:	e724      	b.n	ee0c <__aeabi_fadd+0x98>
    efc2:	2c00      	cmp	r4, #0
    efc4:	d1ea      	bne.n	ef9c <__aeabi_fadd+0x228>
    efc6:	2b00      	cmp	r3, #0
    efc8:	d058      	beq.n	f07c <__aeabi_fadd+0x308>
    efca:	2f00      	cmp	r7, #0
    efcc:	d100      	bne.n	efd0 <__aeabi_fadd+0x25c>
    efce:	e70c      	b.n	edea <__aeabi_fadd+0x76>
    efd0:	4463      	add	r3, ip
    efd2:	015a      	lsls	r2, r3, #5
    efd4:	d400      	bmi.n	efd8 <__aeabi_fadd+0x264>
    efd6:	e739      	b.n	ee4c <__aeabi_fadd+0xd8>
    efd8:	4a2e      	ldr	r2, [pc, #184]	; (f094 <__aeabi_fadd+0x320>)
    efda:	000c      	movs	r4, r1
    efdc:	4013      	ands	r3, r2
    efde:	e704      	b.n	edea <__aeabi_fadd+0x76>
    efe0:	2101      	movs	r1, #1
    efe2:	e75c      	b.n	ee9e <__aeabi_fadd+0x12a>
    efe4:	2c00      	cmp	r4, #0
    efe6:	d11e      	bne.n	f026 <__aeabi_fadd+0x2b2>
    efe8:	2b00      	cmp	r3, #0
    efea:	d040      	beq.n	f06e <__aeabi_fadd+0x2fa>
    efec:	43c9      	mvns	r1, r1
    efee:	2900      	cmp	r1, #0
    eff0:	d00b      	beq.n	f00a <__aeabi_fadd+0x296>
    eff2:	28ff      	cmp	r0, #255	; 0xff
    eff4:	d036      	beq.n	f064 <__aeabi_fadd+0x2f0>
    eff6:	291b      	cmp	r1, #27
    eff8:	dc47      	bgt.n	f08a <__aeabi_fadd+0x316>
    effa:	001c      	movs	r4, r3
    effc:	2620      	movs	r6, #32
    effe:	40cc      	lsrs	r4, r1
    f000:	1a71      	subs	r1, r6, r1
    f002:	408b      	lsls	r3, r1
    f004:	1e59      	subs	r1, r3, #1
    f006:	418b      	sbcs	r3, r1
    f008:	4323      	orrs	r3, r4
    f00a:	4463      	add	r3, ip
    f00c:	0004      	movs	r4, r0
    f00e:	e747      	b.n	eea0 <__aeabi_fadd+0x12c>
    f010:	2b00      	cmp	r3, #0
    f012:	d118      	bne.n	f046 <__aeabi_fadd+0x2d2>
    f014:	1e3b      	subs	r3, r7, #0
    f016:	d02d      	beq.n	f074 <__aeabi_fadd+0x300>
    f018:	000d      	movs	r5, r1
    f01a:	24ff      	movs	r4, #255	; 0xff
    f01c:	e6e5      	b.n	edea <__aeabi_fadd+0x76>
    f01e:	003b      	movs	r3, r7
    f020:	0004      	movs	r4, r0
    f022:	000d      	movs	r5, r1
    f024:	e6e1      	b.n	edea <__aeabi_fadd+0x76>
    f026:	28ff      	cmp	r0, #255	; 0xff
    f028:	d01c      	beq.n	f064 <__aeabi_fadd+0x2f0>
    f02a:	2480      	movs	r4, #128	; 0x80
    f02c:	04e4      	lsls	r4, r4, #19
    f02e:	4249      	negs	r1, r1
    f030:	4323      	orrs	r3, r4
    f032:	e7e0      	b.n	eff6 <__aeabi_fadd+0x282>
    f034:	2f00      	cmp	r7, #0
    f036:	d100      	bne.n	f03a <__aeabi_fadd+0x2c6>
    f038:	e6d7      	b.n	edea <__aeabi_fadd+0x76>
    f03a:	1bde      	subs	r6, r3, r7
    f03c:	0172      	lsls	r2, r6, #5
    f03e:	d51f      	bpl.n	f080 <__aeabi_fadd+0x30c>
    f040:	1afb      	subs	r3, r7, r3
    f042:	000d      	movs	r5, r1
    f044:	e6d1      	b.n	edea <__aeabi_fadd+0x76>
    f046:	24ff      	movs	r4, #255	; 0xff
    f048:	2f00      	cmp	r7, #0
    f04a:	d100      	bne.n	f04e <__aeabi_fadd+0x2da>
    f04c:	e6cd      	b.n	edea <__aeabi_fadd+0x76>
    f04e:	2280      	movs	r2, #128	; 0x80
    f050:	4640      	mov	r0, r8
    f052:	03d2      	lsls	r2, r2, #15
    f054:	4210      	tst	r0, r2
    f056:	d0af      	beq.n	efb8 <__aeabi_fadd+0x244>
    f058:	4216      	tst	r6, r2
    f05a:	d1ad      	bne.n	efb8 <__aeabi_fadd+0x244>
    f05c:	003b      	movs	r3, r7
    f05e:	000d      	movs	r5, r1
    f060:	24ff      	movs	r4, #255	; 0xff
    f062:	e6c2      	b.n	edea <__aeabi_fadd+0x76>
    f064:	4663      	mov	r3, ip
    f066:	24ff      	movs	r4, #255	; 0xff
    f068:	e6bf      	b.n	edea <__aeabi_fadd+0x76>
    f06a:	2301      	movs	r3, #1
    f06c:	e77a      	b.n	ef64 <__aeabi_fadd+0x1f0>
    f06e:	003b      	movs	r3, r7
    f070:	0004      	movs	r4, r0
    f072:	e6ba      	b.n	edea <__aeabi_fadd+0x76>
    f074:	2680      	movs	r6, #128	; 0x80
    f076:	2200      	movs	r2, #0
    f078:	03f6      	lsls	r6, r6, #15
    f07a:	e6f0      	b.n	ee5e <__aeabi_fadd+0xea>
    f07c:	003b      	movs	r3, r7
    f07e:	e6b4      	b.n	edea <__aeabi_fadd+0x76>
    f080:	1e33      	subs	r3, r6, #0
    f082:	d000      	beq.n	f086 <__aeabi_fadd+0x312>
    f084:	e6e2      	b.n	ee4c <__aeabi_fadd+0xd8>
    f086:	2200      	movs	r2, #0
    f088:	e721      	b.n	eece <__aeabi_fadd+0x15a>
    f08a:	2301      	movs	r3, #1
    f08c:	e7bd      	b.n	f00a <__aeabi_fadd+0x296>
    f08e:	46c0      	nop			; (mov r8, r8)
    f090:	7dffffff 	.word	0x7dffffff
    f094:	fbffffff 	.word	0xfbffffff

0000f098 <__aeabi_fdiv>:
    f098:	b5f0      	push	{r4, r5, r6, r7, lr}
    f09a:	4657      	mov	r7, sl
    f09c:	464e      	mov	r6, r9
    f09e:	46de      	mov	lr, fp
    f0a0:	4645      	mov	r5, r8
    f0a2:	b5e0      	push	{r5, r6, r7, lr}
    f0a4:	0244      	lsls	r4, r0, #9
    f0a6:	0043      	lsls	r3, r0, #1
    f0a8:	0fc6      	lsrs	r6, r0, #31
    f0aa:	b083      	sub	sp, #12
    f0ac:	1c0f      	adds	r7, r1, #0
    f0ae:	0a64      	lsrs	r4, r4, #9
    f0b0:	0e1b      	lsrs	r3, r3, #24
    f0b2:	46b2      	mov	sl, r6
    f0b4:	d053      	beq.n	f15e <__aeabi_fdiv+0xc6>
    f0b6:	2bff      	cmp	r3, #255	; 0xff
    f0b8:	d027      	beq.n	f10a <__aeabi_fdiv+0x72>
    f0ba:	2280      	movs	r2, #128	; 0x80
    f0bc:	00e4      	lsls	r4, r4, #3
    f0be:	04d2      	lsls	r2, r2, #19
    f0c0:	4314      	orrs	r4, r2
    f0c2:	227f      	movs	r2, #127	; 0x7f
    f0c4:	4252      	negs	r2, r2
    f0c6:	4690      	mov	r8, r2
    f0c8:	4498      	add	r8, r3
    f0ca:	2300      	movs	r3, #0
    f0cc:	4699      	mov	r9, r3
    f0ce:	469b      	mov	fp, r3
    f0d0:	027d      	lsls	r5, r7, #9
    f0d2:	0078      	lsls	r0, r7, #1
    f0d4:	0ffb      	lsrs	r3, r7, #31
    f0d6:	0a6d      	lsrs	r5, r5, #9
    f0d8:	0e00      	lsrs	r0, r0, #24
    f0da:	9300      	str	r3, [sp, #0]
    f0dc:	d024      	beq.n	f128 <__aeabi_fdiv+0x90>
    f0de:	28ff      	cmp	r0, #255	; 0xff
    f0e0:	d046      	beq.n	f170 <__aeabi_fdiv+0xd8>
    f0e2:	2380      	movs	r3, #128	; 0x80
    f0e4:	2100      	movs	r1, #0
    f0e6:	00ed      	lsls	r5, r5, #3
    f0e8:	04db      	lsls	r3, r3, #19
    f0ea:	431d      	orrs	r5, r3
    f0ec:	387f      	subs	r0, #127	; 0x7f
    f0ee:	4647      	mov	r7, r8
    f0f0:	1a38      	subs	r0, r7, r0
    f0f2:	464f      	mov	r7, r9
    f0f4:	430f      	orrs	r7, r1
    f0f6:	00bf      	lsls	r7, r7, #2
    f0f8:	46b9      	mov	r9, r7
    f0fa:	0033      	movs	r3, r6
    f0fc:	9a00      	ldr	r2, [sp, #0]
    f0fe:	4f87      	ldr	r7, [pc, #540]	; (f31c <__aeabi_fdiv+0x284>)
    f100:	4053      	eors	r3, r2
    f102:	464a      	mov	r2, r9
    f104:	58ba      	ldr	r2, [r7, r2]
    f106:	9301      	str	r3, [sp, #4]
    f108:	4697      	mov	pc, r2
    f10a:	2c00      	cmp	r4, #0
    f10c:	d14e      	bne.n	f1ac <__aeabi_fdiv+0x114>
    f10e:	2308      	movs	r3, #8
    f110:	4699      	mov	r9, r3
    f112:	33f7      	adds	r3, #247	; 0xf7
    f114:	4698      	mov	r8, r3
    f116:	3bfd      	subs	r3, #253	; 0xfd
    f118:	469b      	mov	fp, r3
    f11a:	027d      	lsls	r5, r7, #9
    f11c:	0078      	lsls	r0, r7, #1
    f11e:	0ffb      	lsrs	r3, r7, #31
    f120:	0a6d      	lsrs	r5, r5, #9
    f122:	0e00      	lsrs	r0, r0, #24
    f124:	9300      	str	r3, [sp, #0]
    f126:	d1da      	bne.n	f0de <__aeabi_fdiv+0x46>
    f128:	2d00      	cmp	r5, #0
    f12a:	d126      	bne.n	f17a <__aeabi_fdiv+0xe2>
    f12c:	2000      	movs	r0, #0
    f12e:	2101      	movs	r1, #1
    f130:	0033      	movs	r3, r6
    f132:	9a00      	ldr	r2, [sp, #0]
    f134:	4f7a      	ldr	r7, [pc, #488]	; (f320 <__aeabi_fdiv+0x288>)
    f136:	4053      	eors	r3, r2
    f138:	4642      	mov	r2, r8
    f13a:	1a10      	subs	r0, r2, r0
    f13c:	464a      	mov	r2, r9
    f13e:	430a      	orrs	r2, r1
    f140:	0092      	lsls	r2, r2, #2
    f142:	58ba      	ldr	r2, [r7, r2]
    f144:	001d      	movs	r5, r3
    f146:	4697      	mov	pc, r2
    f148:	9b00      	ldr	r3, [sp, #0]
    f14a:	002c      	movs	r4, r5
    f14c:	469a      	mov	sl, r3
    f14e:	468b      	mov	fp, r1
    f150:	465b      	mov	r3, fp
    f152:	2b02      	cmp	r3, #2
    f154:	d131      	bne.n	f1ba <__aeabi_fdiv+0x122>
    f156:	4653      	mov	r3, sl
    f158:	21ff      	movs	r1, #255	; 0xff
    f15a:	2400      	movs	r4, #0
    f15c:	e038      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f15e:	2c00      	cmp	r4, #0
    f160:	d117      	bne.n	f192 <__aeabi_fdiv+0xfa>
    f162:	2304      	movs	r3, #4
    f164:	4699      	mov	r9, r3
    f166:	2300      	movs	r3, #0
    f168:	4698      	mov	r8, r3
    f16a:	3301      	adds	r3, #1
    f16c:	469b      	mov	fp, r3
    f16e:	e7af      	b.n	f0d0 <__aeabi_fdiv+0x38>
    f170:	20ff      	movs	r0, #255	; 0xff
    f172:	2d00      	cmp	r5, #0
    f174:	d10b      	bne.n	f18e <__aeabi_fdiv+0xf6>
    f176:	2102      	movs	r1, #2
    f178:	e7da      	b.n	f130 <__aeabi_fdiv+0x98>
    f17a:	0028      	movs	r0, r5
    f17c:	f000 fb7e 	bl	f87c <__clzsi2>
    f180:	1f43      	subs	r3, r0, #5
    f182:	409d      	lsls	r5, r3
    f184:	2376      	movs	r3, #118	; 0x76
    f186:	425b      	negs	r3, r3
    f188:	1a18      	subs	r0, r3, r0
    f18a:	2100      	movs	r1, #0
    f18c:	e7af      	b.n	f0ee <__aeabi_fdiv+0x56>
    f18e:	2103      	movs	r1, #3
    f190:	e7ad      	b.n	f0ee <__aeabi_fdiv+0x56>
    f192:	0020      	movs	r0, r4
    f194:	f000 fb72 	bl	f87c <__clzsi2>
    f198:	1f43      	subs	r3, r0, #5
    f19a:	409c      	lsls	r4, r3
    f19c:	2376      	movs	r3, #118	; 0x76
    f19e:	425b      	negs	r3, r3
    f1a0:	1a1b      	subs	r3, r3, r0
    f1a2:	4698      	mov	r8, r3
    f1a4:	2300      	movs	r3, #0
    f1a6:	4699      	mov	r9, r3
    f1a8:	469b      	mov	fp, r3
    f1aa:	e791      	b.n	f0d0 <__aeabi_fdiv+0x38>
    f1ac:	230c      	movs	r3, #12
    f1ae:	4699      	mov	r9, r3
    f1b0:	33f3      	adds	r3, #243	; 0xf3
    f1b2:	4698      	mov	r8, r3
    f1b4:	3bfc      	subs	r3, #252	; 0xfc
    f1b6:	469b      	mov	fp, r3
    f1b8:	e78a      	b.n	f0d0 <__aeabi_fdiv+0x38>
    f1ba:	2b03      	cmp	r3, #3
    f1bc:	d100      	bne.n	f1c0 <__aeabi_fdiv+0x128>
    f1be:	e0a5      	b.n	f30c <__aeabi_fdiv+0x274>
    f1c0:	4655      	mov	r5, sl
    f1c2:	2b01      	cmp	r3, #1
    f1c4:	d000      	beq.n	f1c8 <__aeabi_fdiv+0x130>
    f1c6:	e081      	b.n	f2cc <__aeabi_fdiv+0x234>
    f1c8:	2301      	movs	r3, #1
    f1ca:	2100      	movs	r1, #0
    f1cc:	2400      	movs	r4, #0
    f1ce:	402b      	ands	r3, r5
    f1d0:	0264      	lsls	r4, r4, #9
    f1d2:	05c9      	lsls	r1, r1, #23
    f1d4:	0a60      	lsrs	r0, r4, #9
    f1d6:	07db      	lsls	r3, r3, #31
    f1d8:	4308      	orrs	r0, r1
    f1da:	4318      	orrs	r0, r3
    f1dc:	b003      	add	sp, #12
    f1de:	bc3c      	pop	{r2, r3, r4, r5}
    f1e0:	4690      	mov	r8, r2
    f1e2:	4699      	mov	r9, r3
    f1e4:	46a2      	mov	sl, r4
    f1e6:	46ab      	mov	fp, r5
    f1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1ea:	2480      	movs	r4, #128	; 0x80
    f1ec:	2300      	movs	r3, #0
    f1ee:	03e4      	lsls	r4, r4, #15
    f1f0:	21ff      	movs	r1, #255	; 0xff
    f1f2:	e7ed      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f1f4:	21ff      	movs	r1, #255	; 0xff
    f1f6:	2400      	movs	r4, #0
    f1f8:	e7ea      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f1fa:	2301      	movs	r3, #1
    f1fc:	1a59      	subs	r1, r3, r1
    f1fe:	291b      	cmp	r1, #27
    f200:	dd66      	ble.n	f2d0 <__aeabi_fdiv+0x238>
    f202:	9a01      	ldr	r2, [sp, #4]
    f204:	4013      	ands	r3, r2
    f206:	2100      	movs	r1, #0
    f208:	2400      	movs	r4, #0
    f20a:	e7e1      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f20c:	2380      	movs	r3, #128	; 0x80
    f20e:	03db      	lsls	r3, r3, #15
    f210:	421c      	tst	r4, r3
    f212:	d038      	beq.n	f286 <__aeabi_fdiv+0x1ee>
    f214:	421d      	tst	r5, r3
    f216:	d051      	beq.n	f2bc <__aeabi_fdiv+0x224>
    f218:	431c      	orrs	r4, r3
    f21a:	0264      	lsls	r4, r4, #9
    f21c:	0a64      	lsrs	r4, r4, #9
    f21e:	0033      	movs	r3, r6
    f220:	21ff      	movs	r1, #255	; 0xff
    f222:	e7d5      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f224:	0163      	lsls	r3, r4, #5
    f226:	016c      	lsls	r4, r5, #5
    f228:	42a3      	cmp	r3, r4
    f22a:	d23b      	bcs.n	f2a4 <__aeabi_fdiv+0x20c>
    f22c:	261b      	movs	r6, #27
    f22e:	2100      	movs	r1, #0
    f230:	3801      	subs	r0, #1
    f232:	2501      	movs	r5, #1
    f234:	001f      	movs	r7, r3
    f236:	0049      	lsls	r1, r1, #1
    f238:	005b      	lsls	r3, r3, #1
    f23a:	2f00      	cmp	r7, #0
    f23c:	db01      	blt.n	f242 <__aeabi_fdiv+0x1aa>
    f23e:	429c      	cmp	r4, r3
    f240:	d801      	bhi.n	f246 <__aeabi_fdiv+0x1ae>
    f242:	1b1b      	subs	r3, r3, r4
    f244:	4329      	orrs	r1, r5
    f246:	3e01      	subs	r6, #1
    f248:	2e00      	cmp	r6, #0
    f24a:	d1f3      	bne.n	f234 <__aeabi_fdiv+0x19c>
    f24c:	001c      	movs	r4, r3
    f24e:	1e63      	subs	r3, r4, #1
    f250:	419c      	sbcs	r4, r3
    f252:	430c      	orrs	r4, r1
    f254:	0001      	movs	r1, r0
    f256:	317f      	adds	r1, #127	; 0x7f
    f258:	2900      	cmp	r1, #0
    f25a:	ddce      	ble.n	f1fa <__aeabi_fdiv+0x162>
    f25c:	0763      	lsls	r3, r4, #29
    f25e:	d004      	beq.n	f26a <__aeabi_fdiv+0x1d2>
    f260:	230f      	movs	r3, #15
    f262:	4023      	ands	r3, r4
    f264:	2b04      	cmp	r3, #4
    f266:	d000      	beq.n	f26a <__aeabi_fdiv+0x1d2>
    f268:	3404      	adds	r4, #4
    f26a:	0123      	lsls	r3, r4, #4
    f26c:	d503      	bpl.n	f276 <__aeabi_fdiv+0x1de>
    f26e:	0001      	movs	r1, r0
    f270:	4b2c      	ldr	r3, [pc, #176]	; (f324 <__aeabi_fdiv+0x28c>)
    f272:	3180      	adds	r1, #128	; 0x80
    f274:	401c      	ands	r4, r3
    f276:	29fe      	cmp	r1, #254	; 0xfe
    f278:	dd0d      	ble.n	f296 <__aeabi_fdiv+0x1fe>
    f27a:	2301      	movs	r3, #1
    f27c:	9a01      	ldr	r2, [sp, #4]
    f27e:	21ff      	movs	r1, #255	; 0xff
    f280:	4013      	ands	r3, r2
    f282:	2400      	movs	r4, #0
    f284:	e7a4      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f286:	2380      	movs	r3, #128	; 0x80
    f288:	03db      	lsls	r3, r3, #15
    f28a:	431c      	orrs	r4, r3
    f28c:	0264      	lsls	r4, r4, #9
    f28e:	0a64      	lsrs	r4, r4, #9
    f290:	0033      	movs	r3, r6
    f292:	21ff      	movs	r1, #255	; 0xff
    f294:	e79c      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f296:	2301      	movs	r3, #1
    f298:	9a01      	ldr	r2, [sp, #4]
    f29a:	01a4      	lsls	r4, r4, #6
    f29c:	0a64      	lsrs	r4, r4, #9
    f29e:	b2c9      	uxtb	r1, r1
    f2a0:	4013      	ands	r3, r2
    f2a2:	e795      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f2a4:	1b1b      	subs	r3, r3, r4
    f2a6:	261a      	movs	r6, #26
    f2a8:	2101      	movs	r1, #1
    f2aa:	e7c2      	b.n	f232 <__aeabi_fdiv+0x19a>
    f2ac:	9b00      	ldr	r3, [sp, #0]
    f2ae:	468b      	mov	fp, r1
    f2b0:	469a      	mov	sl, r3
    f2b2:	2400      	movs	r4, #0
    f2b4:	e74c      	b.n	f150 <__aeabi_fdiv+0xb8>
    f2b6:	0263      	lsls	r3, r4, #9
    f2b8:	d5e5      	bpl.n	f286 <__aeabi_fdiv+0x1ee>
    f2ba:	2500      	movs	r5, #0
    f2bc:	2480      	movs	r4, #128	; 0x80
    f2be:	03e4      	lsls	r4, r4, #15
    f2c0:	432c      	orrs	r4, r5
    f2c2:	0264      	lsls	r4, r4, #9
    f2c4:	0a64      	lsrs	r4, r4, #9
    f2c6:	9b00      	ldr	r3, [sp, #0]
    f2c8:	21ff      	movs	r1, #255	; 0xff
    f2ca:	e781      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f2cc:	9501      	str	r5, [sp, #4]
    f2ce:	e7c1      	b.n	f254 <__aeabi_fdiv+0x1bc>
    f2d0:	0023      	movs	r3, r4
    f2d2:	2020      	movs	r0, #32
    f2d4:	40cb      	lsrs	r3, r1
    f2d6:	1a41      	subs	r1, r0, r1
    f2d8:	408c      	lsls	r4, r1
    f2da:	1e61      	subs	r1, r4, #1
    f2dc:	418c      	sbcs	r4, r1
    f2de:	431c      	orrs	r4, r3
    f2e0:	0763      	lsls	r3, r4, #29
    f2e2:	d004      	beq.n	f2ee <__aeabi_fdiv+0x256>
    f2e4:	230f      	movs	r3, #15
    f2e6:	4023      	ands	r3, r4
    f2e8:	2b04      	cmp	r3, #4
    f2ea:	d000      	beq.n	f2ee <__aeabi_fdiv+0x256>
    f2ec:	3404      	adds	r4, #4
    f2ee:	0163      	lsls	r3, r4, #5
    f2f0:	d505      	bpl.n	f2fe <__aeabi_fdiv+0x266>
    f2f2:	2301      	movs	r3, #1
    f2f4:	9a01      	ldr	r2, [sp, #4]
    f2f6:	2101      	movs	r1, #1
    f2f8:	4013      	ands	r3, r2
    f2fa:	2400      	movs	r4, #0
    f2fc:	e768      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f2fe:	2301      	movs	r3, #1
    f300:	9a01      	ldr	r2, [sp, #4]
    f302:	01a4      	lsls	r4, r4, #6
    f304:	0a64      	lsrs	r4, r4, #9
    f306:	4013      	ands	r3, r2
    f308:	2100      	movs	r1, #0
    f30a:	e761      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f30c:	2380      	movs	r3, #128	; 0x80
    f30e:	03db      	lsls	r3, r3, #15
    f310:	431c      	orrs	r4, r3
    f312:	0264      	lsls	r4, r4, #9
    f314:	0a64      	lsrs	r4, r4, #9
    f316:	4653      	mov	r3, sl
    f318:	21ff      	movs	r1, #255	; 0xff
    f31a:	e759      	b.n	f1d0 <__aeabi_fdiv+0x138>
    f31c:	0001192c 	.word	0x0001192c
    f320:	0001196c 	.word	0x0001196c
    f324:	f7ffffff 	.word	0xf7ffffff

0000f328 <__eqsf2>:
    f328:	b570      	push	{r4, r5, r6, lr}
    f32a:	0042      	lsls	r2, r0, #1
    f32c:	0245      	lsls	r5, r0, #9
    f32e:	024e      	lsls	r6, r1, #9
    f330:	004c      	lsls	r4, r1, #1
    f332:	0fc3      	lsrs	r3, r0, #31
    f334:	0a6d      	lsrs	r5, r5, #9
    f336:	0e12      	lsrs	r2, r2, #24
    f338:	0a76      	lsrs	r6, r6, #9
    f33a:	0e24      	lsrs	r4, r4, #24
    f33c:	0fc9      	lsrs	r1, r1, #31
    f33e:	2001      	movs	r0, #1
    f340:	2aff      	cmp	r2, #255	; 0xff
    f342:	d006      	beq.n	f352 <__eqsf2+0x2a>
    f344:	2cff      	cmp	r4, #255	; 0xff
    f346:	d003      	beq.n	f350 <__eqsf2+0x28>
    f348:	42a2      	cmp	r2, r4
    f34a:	d101      	bne.n	f350 <__eqsf2+0x28>
    f34c:	42b5      	cmp	r5, r6
    f34e:	d006      	beq.n	f35e <__eqsf2+0x36>
    f350:	bd70      	pop	{r4, r5, r6, pc}
    f352:	2d00      	cmp	r5, #0
    f354:	d1fc      	bne.n	f350 <__eqsf2+0x28>
    f356:	2cff      	cmp	r4, #255	; 0xff
    f358:	d1fa      	bne.n	f350 <__eqsf2+0x28>
    f35a:	2e00      	cmp	r6, #0
    f35c:	d1f8      	bne.n	f350 <__eqsf2+0x28>
    f35e:	428b      	cmp	r3, r1
    f360:	d006      	beq.n	f370 <__eqsf2+0x48>
    f362:	2001      	movs	r0, #1
    f364:	2a00      	cmp	r2, #0
    f366:	d1f3      	bne.n	f350 <__eqsf2+0x28>
    f368:	0028      	movs	r0, r5
    f36a:	1e45      	subs	r5, r0, #1
    f36c:	41a8      	sbcs	r0, r5
    f36e:	e7ef      	b.n	f350 <__eqsf2+0x28>
    f370:	2000      	movs	r0, #0
    f372:	e7ed      	b.n	f350 <__eqsf2+0x28>

0000f374 <__gesf2>:
    f374:	b5f0      	push	{r4, r5, r6, r7, lr}
    f376:	0042      	lsls	r2, r0, #1
    f378:	0245      	lsls	r5, r0, #9
    f37a:	024c      	lsls	r4, r1, #9
    f37c:	0fc3      	lsrs	r3, r0, #31
    f37e:	0048      	lsls	r0, r1, #1
    f380:	0a6d      	lsrs	r5, r5, #9
    f382:	0e12      	lsrs	r2, r2, #24
    f384:	0a64      	lsrs	r4, r4, #9
    f386:	0e00      	lsrs	r0, r0, #24
    f388:	0fc9      	lsrs	r1, r1, #31
    f38a:	2aff      	cmp	r2, #255	; 0xff
    f38c:	d01e      	beq.n	f3cc <__gesf2+0x58>
    f38e:	28ff      	cmp	r0, #255	; 0xff
    f390:	d021      	beq.n	f3d6 <__gesf2+0x62>
    f392:	2a00      	cmp	r2, #0
    f394:	d10a      	bne.n	f3ac <__gesf2+0x38>
    f396:	426e      	negs	r6, r5
    f398:	416e      	adcs	r6, r5
    f39a:	b2f6      	uxtb	r6, r6
    f39c:	2800      	cmp	r0, #0
    f39e:	d10f      	bne.n	f3c0 <__gesf2+0x4c>
    f3a0:	2c00      	cmp	r4, #0
    f3a2:	d10d      	bne.n	f3c0 <__gesf2+0x4c>
    f3a4:	2000      	movs	r0, #0
    f3a6:	2d00      	cmp	r5, #0
    f3a8:	d009      	beq.n	f3be <__gesf2+0x4a>
    f3aa:	e005      	b.n	f3b8 <__gesf2+0x44>
    f3ac:	2800      	cmp	r0, #0
    f3ae:	d101      	bne.n	f3b4 <__gesf2+0x40>
    f3b0:	2c00      	cmp	r4, #0
    f3b2:	d001      	beq.n	f3b8 <__gesf2+0x44>
    f3b4:	428b      	cmp	r3, r1
    f3b6:	d011      	beq.n	f3dc <__gesf2+0x68>
    f3b8:	2101      	movs	r1, #1
    f3ba:	4258      	negs	r0, r3
    f3bc:	4308      	orrs	r0, r1
    f3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3c0:	2e00      	cmp	r6, #0
    f3c2:	d0f7      	beq.n	f3b4 <__gesf2+0x40>
    f3c4:	2001      	movs	r0, #1
    f3c6:	3901      	subs	r1, #1
    f3c8:	4308      	orrs	r0, r1
    f3ca:	e7f8      	b.n	f3be <__gesf2+0x4a>
    f3cc:	2d00      	cmp	r5, #0
    f3ce:	d0de      	beq.n	f38e <__gesf2+0x1a>
    f3d0:	2002      	movs	r0, #2
    f3d2:	4240      	negs	r0, r0
    f3d4:	e7f3      	b.n	f3be <__gesf2+0x4a>
    f3d6:	2c00      	cmp	r4, #0
    f3d8:	d0db      	beq.n	f392 <__gesf2+0x1e>
    f3da:	e7f9      	b.n	f3d0 <__gesf2+0x5c>
    f3dc:	4282      	cmp	r2, r0
    f3de:	dceb      	bgt.n	f3b8 <__gesf2+0x44>
    f3e0:	db04      	blt.n	f3ec <__gesf2+0x78>
    f3e2:	42a5      	cmp	r5, r4
    f3e4:	d8e8      	bhi.n	f3b8 <__gesf2+0x44>
    f3e6:	2000      	movs	r0, #0
    f3e8:	42a5      	cmp	r5, r4
    f3ea:	d2e8      	bcs.n	f3be <__gesf2+0x4a>
    f3ec:	2101      	movs	r1, #1
    f3ee:	1e58      	subs	r0, r3, #1
    f3f0:	4308      	orrs	r0, r1
    f3f2:	e7e4      	b.n	f3be <__gesf2+0x4a>

0000f3f4 <__lesf2>:
    f3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3f6:	0042      	lsls	r2, r0, #1
    f3f8:	024d      	lsls	r5, r1, #9
    f3fa:	004c      	lsls	r4, r1, #1
    f3fc:	0246      	lsls	r6, r0, #9
    f3fe:	0a76      	lsrs	r6, r6, #9
    f400:	0e12      	lsrs	r2, r2, #24
    f402:	0fc3      	lsrs	r3, r0, #31
    f404:	0a6d      	lsrs	r5, r5, #9
    f406:	0e24      	lsrs	r4, r4, #24
    f408:	0fc9      	lsrs	r1, r1, #31
    f40a:	2aff      	cmp	r2, #255	; 0xff
    f40c:	d016      	beq.n	f43c <__lesf2+0x48>
    f40e:	2cff      	cmp	r4, #255	; 0xff
    f410:	d018      	beq.n	f444 <__lesf2+0x50>
    f412:	2a00      	cmp	r2, #0
    f414:	d10a      	bne.n	f42c <__lesf2+0x38>
    f416:	4270      	negs	r0, r6
    f418:	4170      	adcs	r0, r6
    f41a:	b2c0      	uxtb	r0, r0
    f41c:	2c00      	cmp	r4, #0
    f41e:	d015      	beq.n	f44c <__lesf2+0x58>
    f420:	2800      	cmp	r0, #0
    f422:	d005      	beq.n	f430 <__lesf2+0x3c>
    f424:	2001      	movs	r0, #1
    f426:	3901      	subs	r1, #1
    f428:	4308      	orrs	r0, r1
    f42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f42c:	2c00      	cmp	r4, #0
    f42e:	d013      	beq.n	f458 <__lesf2+0x64>
    f430:	4299      	cmp	r1, r3
    f432:	d014      	beq.n	f45e <__lesf2+0x6a>
    f434:	2001      	movs	r0, #1
    f436:	425b      	negs	r3, r3
    f438:	4318      	orrs	r0, r3
    f43a:	e7f6      	b.n	f42a <__lesf2+0x36>
    f43c:	2002      	movs	r0, #2
    f43e:	2e00      	cmp	r6, #0
    f440:	d1f3      	bne.n	f42a <__lesf2+0x36>
    f442:	e7e4      	b.n	f40e <__lesf2+0x1a>
    f444:	2002      	movs	r0, #2
    f446:	2d00      	cmp	r5, #0
    f448:	d1ef      	bne.n	f42a <__lesf2+0x36>
    f44a:	e7e2      	b.n	f412 <__lesf2+0x1e>
    f44c:	2d00      	cmp	r5, #0
    f44e:	d1e7      	bne.n	f420 <__lesf2+0x2c>
    f450:	2000      	movs	r0, #0
    f452:	2e00      	cmp	r6, #0
    f454:	d0e9      	beq.n	f42a <__lesf2+0x36>
    f456:	e7ed      	b.n	f434 <__lesf2+0x40>
    f458:	2d00      	cmp	r5, #0
    f45a:	d1e9      	bne.n	f430 <__lesf2+0x3c>
    f45c:	e7ea      	b.n	f434 <__lesf2+0x40>
    f45e:	42a2      	cmp	r2, r4
    f460:	dc06      	bgt.n	f470 <__lesf2+0x7c>
    f462:	dbdf      	blt.n	f424 <__lesf2+0x30>
    f464:	42ae      	cmp	r6, r5
    f466:	d803      	bhi.n	f470 <__lesf2+0x7c>
    f468:	2000      	movs	r0, #0
    f46a:	42ae      	cmp	r6, r5
    f46c:	d3da      	bcc.n	f424 <__lesf2+0x30>
    f46e:	e7dc      	b.n	f42a <__lesf2+0x36>
    f470:	2001      	movs	r0, #1
    f472:	4249      	negs	r1, r1
    f474:	4308      	orrs	r0, r1
    f476:	e7d8      	b.n	f42a <__lesf2+0x36>

0000f478 <__aeabi_fsub>:
    f478:	b5f0      	push	{r4, r5, r6, r7, lr}
    f47a:	464f      	mov	r7, r9
    f47c:	46d6      	mov	lr, sl
    f47e:	4646      	mov	r6, r8
    f480:	0044      	lsls	r4, r0, #1
    f482:	b5c0      	push	{r6, r7, lr}
    f484:	0fc2      	lsrs	r2, r0, #31
    f486:	0247      	lsls	r7, r0, #9
    f488:	0248      	lsls	r0, r1, #9
    f48a:	0a40      	lsrs	r0, r0, #9
    f48c:	4684      	mov	ip, r0
    f48e:	4666      	mov	r6, ip
    f490:	0a7b      	lsrs	r3, r7, #9
    f492:	0048      	lsls	r0, r1, #1
    f494:	0fc9      	lsrs	r1, r1, #31
    f496:	469a      	mov	sl, r3
    f498:	0e24      	lsrs	r4, r4, #24
    f49a:	0015      	movs	r5, r2
    f49c:	00db      	lsls	r3, r3, #3
    f49e:	0e00      	lsrs	r0, r0, #24
    f4a0:	4689      	mov	r9, r1
    f4a2:	00f6      	lsls	r6, r6, #3
    f4a4:	28ff      	cmp	r0, #255	; 0xff
    f4a6:	d100      	bne.n	f4aa <__aeabi_fsub+0x32>
    f4a8:	e08f      	b.n	f5ca <__aeabi_fsub+0x152>
    f4aa:	2101      	movs	r1, #1
    f4ac:	464f      	mov	r7, r9
    f4ae:	404f      	eors	r7, r1
    f4b0:	0039      	movs	r1, r7
    f4b2:	4291      	cmp	r1, r2
    f4b4:	d066      	beq.n	f584 <__aeabi_fsub+0x10c>
    f4b6:	1a22      	subs	r2, r4, r0
    f4b8:	2a00      	cmp	r2, #0
    f4ba:	dc00      	bgt.n	f4be <__aeabi_fsub+0x46>
    f4bc:	e09d      	b.n	f5fa <__aeabi_fsub+0x182>
    f4be:	2800      	cmp	r0, #0
    f4c0:	d13d      	bne.n	f53e <__aeabi_fsub+0xc6>
    f4c2:	2e00      	cmp	r6, #0
    f4c4:	d100      	bne.n	f4c8 <__aeabi_fsub+0x50>
    f4c6:	e08b      	b.n	f5e0 <__aeabi_fsub+0x168>
    f4c8:	1e51      	subs	r1, r2, #1
    f4ca:	2900      	cmp	r1, #0
    f4cc:	d000      	beq.n	f4d0 <__aeabi_fsub+0x58>
    f4ce:	e0b5      	b.n	f63c <__aeabi_fsub+0x1c4>
    f4d0:	2401      	movs	r4, #1
    f4d2:	1b9b      	subs	r3, r3, r6
    f4d4:	015a      	lsls	r2, r3, #5
    f4d6:	d544      	bpl.n	f562 <__aeabi_fsub+0xea>
    f4d8:	019b      	lsls	r3, r3, #6
    f4da:	099f      	lsrs	r7, r3, #6
    f4dc:	0038      	movs	r0, r7
    f4de:	f000 f9cd 	bl	f87c <__clzsi2>
    f4e2:	3805      	subs	r0, #5
    f4e4:	4087      	lsls	r7, r0
    f4e6:	4284      	cmp	r4, r0
    f4e8:	dd00      	ble.n	f4ec <__aeabi_fsub+0x74>
    f4ea:	e096      	b.n	f61a <__aeabi_fsub+0x1a2>
    f4ec:	1b04      	subs	r4, r0, r4
    f4ee:	003a      	movs	r2, r7
    f4f0:	2020      	movs	r0, #32
    f4f2:	3401      	adds	r4, #1
    f4f4:	40e2      	lsrs	r2, r4
    f4f6:	1b04      	subs	r4, r0, r4
    f4f8:	40a7      	lsls	r7, r4
    f4fa:	003b      	movs	r3, r7
    f4fc:	1e5f      	subs	r7, r3, #1
    f4fe:	41bb      	sbcs	r3, r7
    f500:	2400      	movs	r4, #0
    f502:	4313      	orrs	r3, r2
    f504:	075a      	lsls	r2, r3, #29
    f506:	d004      	beq.n	f512 <__aeabi_fsub+0x9a>
    f508:	220f      	movs	r2, #15
    f50a:	401a      	ands	r2, r3
    f50c:	2a04      	cmp	r2, #4
    f50e:	d000      	beq.n	f512 <__aeabi_fsub+0x9a>
    f510:	3304      	adds	r3, #4
    f512:	015a      	lsls	r2, r3, #5
    f514:	d527      	bpl.n	f566 <__aeabi_fsub+0xee>
    f516:	3401      	adds	r4, #1
    f518:	2cff      	cmp	r4, #255	; 0xff
    f51a:	d100      	bne.n	f51e <__aeabi_fsub+0xa6>
    f51c:	e079      	b.n	f612 <__aeabi_fsub+0x19a>
    f51e:	2201      	movs	r2, #1
    f520:	019b      	lsls	r3, r3, #6
    f522:	0a5b      	lsrs	r3, r3, #9
    f524:	b2e4      	uxtb	r4, r4
    f526:	402a      	ands	r2, r5
    f528:	025b      	lsls	r3, r3, #9
    f52a:	05e4      	lsls	r4, r4, #23
    f52c:	0a58      	lsrs	r0, r3, #9
    f52e:	07d2      	lsls	r2, r2, #31
    f530:	4320      	orrs	r0, r4
    f532:	4310      	orrs	r0, r2
    f534:	bc1c      	pop	{r2, r3, r4}
    f536:	4690      	mov	r8, r2
    f538:	4699      	mov	r9, r3
    f53a:	46a2      	mov	sl, r4
    f53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f53e:	2cff      	cmp	r4, #255	; 0xff
    f540:	d0e0      	beq.n	f504 <__aeabi_fsub+0x8c>
    f542:	2180      	movs	r1, #128	; 0x80
    f544:	04c9      	lsls	r1, r1, #19
    f546:	430e      	orrs	r6, r1
    f548:	2a1b      	cmp	r2, #27
    f54a:	dc7b      	bgt.n	f644 <__aeabi_fsub+0x1cc>
    f54c:	0031      	movs	r1, r6
    f54e:	2020      	movs	r0, #32
    f550:	40d1      	lsrs	r1, r2
    f552:	1a82      	subs	r2, r0, r2
    f554:	4096      	lsls	r6, r2
    f556:	1e72      	subs	r2, r6, #1
    f558:	4196      	sbcs	r6, r2
    f55a:	430e      	orrs	r6, r1
    f55c:	1b9b      	subs	r3, r3, r6
    f55e:	015a      	lsls	r2, r3, #5
    f560:	d4ba      	bmi.n	f4d8 <__aeabi_fsub+0x60>
    f562:	075a      	lsls	r2, r3, #29
    f564:	d1d0      	bne.n	f508 <__aeabi_fsub+0x90>
    f566:	2201      	movs	r2, #1
    f568:	08df      	lsrs	r7, r3, #3
    f56a:	402a      	ands	r2, r5
    f56c:	2cff      	cmp	r4, #255	; 0xff
    f56e:	d133      	bne.n	f5d8 <__aeabi_fsub+0x160>
    f570:	2f00      	cmp	r7, #0
    f572:	d100      	bne.n	f576 <__aeabi_fsub+0xfe>
    f574:	e0a8      	b.n	f6c8 <__aeabi_fsub+0x250>
    f576:	2380      	movs	r3, #128	; 0x80
    f578:	03db      	lsls	r3, r3, #15
    f57a:	433b      	orrs	r3, r7
    f57c:	025b      	lsls	r3, r3, #9
    f57e:	0a5b      	lsrs	r3, r3, #9
    f580:	24ff      	movs	r4, #255	; 0xff
    f582:	e7d1      	b.n	f528 <__aeabi_fsub+0xb0>
    f584:	1a21      	subs	r1, r4, r0
    f586:	2900      	cmp	r1, #0
    f588:	dd4c      	ble.n	f624 <__aeabi_fsub+0x1ac>
    f58a:	2800      	cmp	r0, #0
    f58c:	d02a      	beq.n	f5e4 <__aeabi_fsub+0x16c>
    f58e:	2cff      	cmp	r4, #255	; 0xff
    f590:	d0b8      	beq.n	f504 <__aeabi_fsub+0x8c>
    f592:	2080      	movs	r0, #128	; 0x80
    f594:	04c0      	lsls	r0, r0, #19
    f596:	4306      	orrs	r6, r0
    f598:	291b      	cmp	r1, #27
    f59a:	dd00      	ble.n	f59e <__aeabi_fsub+0x126>
    f59c:	e0af      	b.n	f6fe <__aeabi_fsub+0x286>
    f59e:	0030      	movs	r0, r6
    f5a0:	2720      	movs	r7, #32
    f5a2:	40c8      	lsrs	r0, r1
    f5a4:	1a79      	subs	r1, r7, r1
    f5a6:	408e      	lsls	r6, r1
    f5a8:	1e71      	subs	r1, r6, #1
    f5aa:	418e      	sbcs	r6, r1
    f5ac:	4306      	orrs	r6, r0
    f5ae:	199b      	adds	r3, r3, r6
    f5b0:	0159      	lsls	r1, r3, #5
    f5b2:	d5d6      	bpl.n	f562 <__aeabi_fsub+0xea>
    f5b4:	3401      	adds	r4, #1
    f5b6:	2cff      	cmp	r4, #255	; 0xff
    f5b8:	d100      	bne.n	f5bc <__aeabi_fsub+0x144>
    f5ba:	e085      	b.n	f6c8 <__aeabi_fsub+0x250>
    f5bc:	2201      	movs	r2, #1
    f5be:	497a      	ldr	r1, [pc, #488]	; (f7a8 <__aeabi_fsub+0x330>)
    f5c0:	401a      	ands	r2, r3
    f5c2:	085b      	lsrs	r3, r3, #1
    f5c4:	400b      	ands	r3, r1
    f5c6:	4313      	orrs	r3, r2
    f5c8:	e79c      	b.n	f504 <__aeabi_fsub+0x8c>
    f5ca:	2e00      	cmp	r6, #0
    f5cc:	d000      	beq.n	f5d0 <__aeabi_fsub+0x158>
    f5ce:	e770      	b.n	f4b2 <__aeabi_fsub+0x3a>
    f5d0:	e76b      	b.n	f4aa <__aeabi_fsub+0x32>
    f5d2:	1e3b      	subs	r3, r7, #0
    f5d4:	d1c5      	bne.n	f562 <__aeabi_fsub+0xea>
    f5d6:	2200      	movs	r2, #0
    f5d8:	027b      	lsls	r3, r7, #9
    f5da:	0a5b      	lsrs	r3, r3, #9
    f5dc:	b2e4      	uxtb	r4, r4
    f5de:	e7a3      	b.n	f528 <__aeabi_fsub+0xb0>
    f5e0:	0014      	movs	r4, r2
    f5e2:	e78f      	b.n	f504 <__aeabi_fsub+0x8c>
    f5e4:	2e00      	cmp	r6, #0
    f5e6:	d04d      	beq.n	f684 <__aeabi_fsub+0x20c>
    f5e8:	1e48      	subs	r0, r1, #1
    f5ea:	2800      	cmp	r0, #0
    f5ec:	d157      	bne.n	f69e <__aeabi_fsub+0x226>
    f5ee:	199b      	adds	r3, r3, r6
    f5f0:	2401      	movs	r4, #1
    f5f2:	015a      	lsls	r2, r3, #5
    f5f4:	d5b5      	bpl.n	f562 <__aeabi_fsub+0xea>
    f5f6:	2402      	movs	r4, #2
    f5f8:	e7e0      	b.n	f5bc <__aeabi_fsub+0x144>
    f5fa:	2a00      	cmp	r2, #0
    f5fc:	d125      	bne.n	f64a <__aeabi_fsub+0x1d2>
    f5fe:	1c62      	adds	r2, r4, #1
    f600:	b2d2      	uxtb	r2, r2
    f602:	2a01      	cmp	r2, #1
    f604:	dd72      	ble.n	f6ec <__aeabi_fsub+0x274>
    f606:	1b9f      	subs	r7, r3, r6
    f608:	017a      	lsls	r2, r7, #5
    f60a:	d535      	bpl.n	f678 <__aeabi_fsub+0x200>
    f60c:	1af7      	subs	r7, r6, r3
    f60e:	000d      	movs	r5, r1
    f610:	e764      	b.n	f4dc <__aeabi_fsub+0x64>
    f612:	2201      	movs	r2, #1
    f614:	2300      	movs	r3, #0
    f616:	402a      	ands	r2, r5
    f618:	e786      	b.n	f528 <__aeabi_fsub+0xb0>
    f61a:	003b      	movs	r3, r7
    f61c:	4a63      	ldr	r2, [pc, #396]	; (f7ac <__aeabi_fsub+0x334>)
    f61e:	1a24      	subs	r4, r4, r0
    f620:	4013      	ands	r3, r2
    f622:	e76f      	b.n	f504 <__aeabi_fsub+0x8c>
    f624:	2900      	cmp	r1, #0
    f626:	d16c      	bne.n	f702 <__aeabi_fsub+0x28a>
    f628:	1c61      	adds	r1, r4, #1
    f62a:	b2c8      	uxtb	r0, r1
    f62c:	2801      	cmp	r0, #1
    f62e:	dd4e      	ble.n	f6ce <__aeabi_fsub+0x256>
    f630:	29ff      	cmp	r1, #255	; 0xff
    f632:	d049      	beq.n	f6c8 <__aeabi_fsub+0x250>
    f634:	199b      	adds	r3, r3, r6
    f636:	085b      	lsrs	r3, r3, #1
    f638:	000c      	movs	r4, r1
    f63a:	e763      	b.n	f504 <__aeabi_fsub+0x8c>
    f63c:	2aff      	cmp	r2, #255	; 0xff
    f63e:	d041      	beq.n	f6c4 <__aeabi_fsub+0x24c>
    f640:	000a      	movs	r2, r1
    f642:	e781      	b.n	f548 <__aeabi_fsub+0xd0>
    f644:	2601      	movs	r6, #1
    f646:	1b9b      	subs	r3, r3, r6
    f648:	e789      	b.n	f55e <__aeabi_fsub+0xe6>
    f64a:	2c00      	cmp	r4, #0
    f64c:	d01c      	beq.n	f688 <__aeabi_fsub+0x210>
    f64e:	28ff      	cmp	r0, #255	; 0xff
    f650:	d021      	beq.n	f696 <__aeabi_fsub+0x21e>
    f652:	2480      	movs	r4, #128	; 0x80
    f654:	04e4      	lsls	r4, r4, #19
    f656:	4252      	negs	r2, r2
    f658:	4323      	orrs	r3, r4
    f65a:	2a1b      	cmp	r2, #27
    f65c:	dd00      	ble.n	f660 <__aeabi_fsub+0x1e8>
    f65e:	e096      	b.n	f78e <__aeabi_fsub+0x316>
    f660:	001c      	movs	r4, r3
    f662:	2520      	movs	r5, #32
    f664:	40d4      	lsrs	r4, r2
    f666:	1aaa      	subs	r2, r5, r2
    f668:	4093      	lsls	r3, r2
    f66a:	1e5a      	subs	r2, r3, #1
    f66c:	4193      	sbcs	r3, r2
    f66e:	4323      	orrs	r3, r4
    f670:	1af3      	subs	r3, r6, r3
    f672:	0004      	movs	r4, r0
    f674:	000d      	movs	r5, r1
    f676:	e72d      	b.n	f4d4 <__aeabi_fsub+0x5c>
    f678:	2f00      	cmp	r7, #0
    f67a:	d000      	beq.n	f67e <__aeabi_fsub+0x206>
    f67c:	e72e      	b.n	f4dc <__aeabi_fsub+0x64>
    f67e:	2200      	movs	r2, #0
    f680:	2400      	movs	r4, #0
    f682:	e7a9      	b.n	f5d8 <__aeabi_fsub+0x160>
    f684:	000c      	movs	r4, r1
    f686:	e73d      	b.n	f504 <__aeabi_fsub+0x8c>
    f688:	2b00      	cmp	r3, #0
    f68a:	d058      	beq.n	f73e <__aeabi_fsub+0x2c6>
    f68c:	43d2      	mvns	r2, r2
    f68e:	2a00      	cmp	r2, #0
    f690:	d0ee      	beq.n	f670 <__aeabi_fsub+0x1f8>
    f692:	28ff      	cmp	r0, #255	; 0xff
    f694:	d1e1      	bne.n	f65a <__aeabi_fsub+0x1e2>
    f696:	0033      	movs	r3, r6
    f698:	24ff      	movs	r4, #255	; 0xff
    f69a:	000d      	movs	r5, r1
    f69c:	e732      	b.n	f504 <__aeabi_fsub+0x8c>
    f69e:	29ff      	cmp	r1, #255	; 0xff
    f6a0:	d010      	beq.n	f6c4 <__aeabi_fsub+0x24c>
    f6a2:	0001      	movs	r1, r0
    f6a4:	e778      	b.n	f598 <__aeabi_fsub+0x120>
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d06e      	beq.n	f788 <__aeabi_fsub+0x310>
    f6aa:	24ff      	movs	r4, #255	; 0xff
    f6ac:	2e00      	cmp	r6, #0
    f6ae:	d100      	bne.n	f6b2 <__aeabi_fsub+0x23a>
    f6b0:	e728      	b.n	f504 <__aeabi_fsub+0x8c>
    f6b2:	2280      	movs	r2, #128	; 0x80
    f6b4:	4651      	mov	r1, sl
    f6b6:	03d2      	lsls	r2, r2, #15
    f6b8:	4211      	tst	r1, r2
    f6ba:	d003      	beq.n	f6c4 <__aeabi_fsub+0x24c>
    f6bc:	4661      	mov	r1, ip
    f6be:	4211      	tst	r1, r2
    f6c0:	d100      	bne.n	f6c4 <__aeabi_fsub+0x24c>
    f6c2:	0033      	movs	r3, r6
    f6c4:	24ff      	movs	r4, #255	; 0xff
    f6c6:	e71d      	b.n	f504 <__aeabi_fsub+0x8c>
    f6c8:	24ff      	movs	r4, #255	; 0xff
    f6ca:	2300      	movs	r3, #0
    f6cc:	e72c      	b.n	f528 <__aeabi_fsub+0xb0>
    f6ce:	2c00      	cmp	r4, #0
    f6d0:	d1e9      	bne.n	f6a6 <__aeabi_fsub+0x22e>
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d063      	beq.n	f79e <__aeabi_fsub+0x326>
    f6d6:	2e00      	cmp	r6, #0
    f6d8:	d100      	bne.n	f6dc <__aeabi_fsub+0x264>
    f6da:	e713      	b.n	f504 <__aeabi_fsub+0x8c>
    f6dc:	199b      	adds	r3, r3, r6
    f6de:	015a      	lsls	r2, r3, #5
    f6e0:	d400      	bmi.n	f6e4 <__aeabi_fsub+0x26c>
    f6e2:	e73e      	b.n	f562 <__aeabi_fsub+0xea>
    f6e4:	4a31      	ldr	r2, [pc, #196]	; (f7ac <__aeabi_fsub+0x334>)
    f6e6:	000c      	movs	r4, r1
    f6e8:	4013      	ands	r3, r2
    f6ea:	e70b      	b.n	f504 <__aeabi_fsub+0x8c>
    f6ec:	2c00      	cmp	r4, #0
    f6ee:	d11e      	bne.n	f72e <__aeabi_fsub+0x2b6>
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d12f      	bne.n	f754 <__aeabi_fsub+0x2dc>
    f6f4:	2e00      	cmp	r6, #0
    f6f6:	d04f      	beq.n	f798 <__aeabi_fsub+0x320>
    f6f8:	0033      	movs	r3, r6
    f6fa:	000d      	movs	r5, r1
    f6fc:	e702      	b.n	f504 <__aeabi_fsub+0x8c>
    f6fe:	2601      	movs	r6, #1
    f700:	e755      	b.n	f5ae <__aeabi_fsub+0x136>
    f702:	2c00      	cmp	r4, #0
    f704:	d11f      	bne.n	f746 <__aeabi_fsub+0x2ce>
    f706:	2b00      	cmp	r3, #0
    f708:	d043      	beq.n	f792 <__aeabi_fsub+0x31a>
    f70a:	43c9      	mvns	r1, r1
    f70c:	2900      	cmp	r1, #0
    f70e:	d00b      	beq.n	f728 <__aeabi_fsub+0x2b0>
    f710:	28ff      	cmp	r0, #255	; 0xff
    f712:	d039      	beq.n	f788 <__aeabi_fsub+0x310>
    f714:	291b      	cmp	r1, #27
    f716:	dc44      	bgt.n	f7a2 <__aeabi_fsub+0x32a>
    f718:	001c      	movs	r4, r3
    f71a:	2720      	movs	r7, #32
    f71c:	40cc      	lsrs	r4, r1
    f71e:	1a79      	subs	r1, r7, r1
    f720:	408b      	lsls	r3, r1
    f722:	1e59      	subs	r1, r3, #1
    f724:	418b      	sbcs	r3, r1
    f726:	4323      	orrs	r3, r4
    f728:	199b      	adds	r3, r3, r6
    f72a:	0004      	movs	r4, r0
    f72c:	e740      	b.n	f5b0 <__aeabi_fsub+0x138>
    f72e:	2b00      	cmp	r3, #0
    f730:	d11a      	bne.n	f768 <__aeabi_fsub+0x2f0>
    f732:	2e00      	cmp	r6, #0
    f734:	d124      	bne.n	f780 <__aeabi_fsub+0x308>
    f736:	2780      	movs	r7, #128	; 0x80
    f738:	2200      	movs	r2, #0
    f73a:	03ff      	lsls	r7, r7, #15
    f73c:	e71b      	b.n	f576 <__aeabi_fsub+0xfe>
    f73e:	0033      	movs	r3, r6
    f740:	0004      	movs	r4, r0
    f742:	000d      	movs	r5, r1
    f744:	e6de      	b.n	f504 <__aeabi_fsub+0x8c>
    f746:	28ff      	cmp	r0, #255	; 0xff
    f748:	d01e      	beq.n	f788 <__aeabi_fsub+0x310>
    f74a:	2480      	movs	r4, #128	; 0x80
    f74c:	04e4      	lsls	r4, r4, #19
    f74e:	4249      	negs	r1, r1
    f750:	4323      	orrs	r3, r4
    f752:	e7df      	b.n	f714 <__aeabi_fsub+0x29c>
    f754:	2e00      	cmp	r6, #0
    f756:	d100      	bne.n	f75a <__aeabi_fsub+0x2e2>
    f758:	e6d4      	b.n	f504 <__aeabi_fsub+0x8c>
    f75a:	1b9f      	subs	r7, r3, r6
    f75c:	017a      	lsls	r2, r7, #5
    f75e:	d400      	bmi.n	f762 <__aeabi_fsub+0x2ea>
    f760:	e737      	b.n	f5d2 <__aeabi_fsub+0x15a>
    f762:	1af3      	subs	r3, r6, r3
    f764:	000d      	movs	r5, r1
    f766:	e6cd      	b.n	f504 <__aeabi_fsub+0x8c>
    f768:	24ff      	movs	r4, #255	; 0xff
    f76a:	2e00      	cmp	r6, #0
    f76c:	d100      	bne.n	f770 <__aeabi_fsub+0x2f8>
    f76e:	e6c9      	b.n	f504 <__aeabi_fsub+0x8c>
    f770:	2280      	movs	r2, #128	; 0x80
    f772:	4650      	mov	r0, sl
    f774:	03d2      	lsls	r2, r2, #15
    f776:	4210      	tst	r0, r2
    f778:	d0a4      	beq.n	f6c4 <__aeabi_fsub+0x24c>
    f77a:	4660      	mov	r0, ip
    f77c:	4210      	tst	r0, r2
    f77e:	d1a1      	bne.n	f6c4 <__aeabi_fsub+0x24c>
    f780:	0033      	movs	r3, r6
    f782:	000d      	movs	r5, r1
    f784:	24ff      	movs	r4, #255	; 0xff
    f786:	e6bd      	b.n	f504 <__aeabi_fsub+0x8c>
    f788:	0033      	movs	r3, r6
    f78a:	24ff      	movs	r4, #255	; 0xff
    f78c:	e6ba      	b.n	f504 <__aeabi_fsub+0x8c>
    f78e:	2301      	movs	r3, #1
    f790:	e76e      	b.n	f670 <__aeabi_fsub+0x1f8>
    f792:	0033      	movs	r3, r6
    f794:	0004      	movs	r4, r0
    f796:	e6b5      	b.n	f504 <__aeabi_fsub+0x8c>
    f798:	2700      	movs	r7, #0
    f79a:	2200      	movs	r2, #0
    f79c:	e71c      	b.n	f5d8 <__aeabi_fsub+0x160>
    f79e:	0033      	movs	r3, r6
    f7a0:	e6b0      	b.n	f504 <__aeabi_fsub+0x8c>
    f7a2:	2301      	movs	r3, #1
    f7a4:	e7c0      	b.n	f728 <__aeabi_fsub+0x2b0>
    f7a6:	46c0      	nop			; (mov r8, r8)
    f7a8:	7dffffff 	.word	0x7dffffff
    f7ac:	fbffffff 	.word	0xfbffffff

0000f7b0 <__aeabi_f2iz>:
    f7b0:	0241      	lsls	r1, r0, #9
    f7b2:	0043      	lsls	r3, r0, #1
    f7b4:	0fc2      	lsrs	r2, r0, #31
    f7b6:	0a49      	lsrs	r1, r1, #9
    f7b8:	0e1b      	lsrs	r3, r3, #24
    f7ba:	2000      	movs	r0, #0
    f7bc:	2b7e      	cmp	r3, #126	; 0x7e
    f7be:	dd0d      	ble.n	f7dc <__aeabi_f2iz+0x2c>
    f7c0:	2b9d      	cmp	r3, #157	; 0x9d
    f7c2:	dc0c      	bgt.n	f7de <__aeabi_f2iz+0x2e>
    f7c4:	2080      	movs	r0, #128	; 0x80
    f7c6:	0400      	lsls	r0, r0, #16
    f7c8:	4301      	orrs	r1, r0
    f7ca:	2b95      	cmp	r3, #149	; 0x95
    f7cc:	dc0a      	bgt.n	f7e4 <__aeabi_f2iz+0x34>
    f7ce:	2096      	movs	r0, #150	; 0x96
    f7d0:	1ac3      	subs	r3, r0, r3
    f7d2:	40d9      	lsrs	r1, r3
    f7d4:	4248      	negs	r0, r1
    f7d6:	2a00      	cmp	r2, #0
    f7d8:	d100      	bne.n	f7dc <__aeabi_f2iz+0x2c>
    f7da:	0008      	movs	r0, r1
    f7dc:	4770      	bx	lr
    f7de:	4b03      	ldr	r3, [pc, #12]	; (f7ec <__aeabi_f2iz+0x3c>)
    f7e0:	18d0      	adds	r0, r2, r3
    f7e2:	e7fb      	b.n	f7dc <__aeabi_f2iz+0x2c>
    f7e4:	3b96      	subs	r3, #150	; 0x96
    f7e6:	4099      	lsls	r1, r3
    f7e8:	e7f4      	b.n	f7d4 <__aeabi_f2iz+0x24>
    f7ea:	46c0      	nop			; (mov r8, r8)
    f7ec:	7fffffff 	.word	0x7fffffff

0000f7f0 <__aeabi_ui2f>:
    f7f0:	b510      	push	{r4, lr}
    f7f2:	1e04      	subs	r4, r0, #0
    f7f4:	d027      	beq.n	f846 <__aeabi_ui2f+0x56>
    f7f6:	f000 f841 	bl	f87c <__clzsi2>
    f7fa:	239e      	movs	r3, #158	; 0x9e
    f7fc:	1a1b      	subs	r3, r3, r0
    f7fe:	2b96      	cmp	r3, #150	; 0x96
    f800:	dc0a      	bgt.n	f818 <__aeabi_ui2f+0x28>
    f802:	2296      	movs	r2, #150	; 0x96
    f804:	1ad2      	subs	r2, r2, r3
    f806:	4094      	lsls	r4, r2
    f808:	0264      	lsls	r4, r4, #9
    f80a:	0a64      	lsrs	r4, r4, #9
    f80c:	b2db      	uxtb	r3, r3
    f80e:	0264      	lsls	r4, r4, #9
    f810:	05db      	lsls	r3, r3, #23
    f812:	0a60      	lsrs	r0, r4, #9
    f814:	4318      	orrs	r0, r3
    f816:	bd10      	pop	{r4, pc}
    f818:	2b99      	cmp	r3, #153	; 0x99
    f81a:	dc17      	bgt.n	f84c <__aeabi_ui2f+0x5c>
    f81c:	2299      	movs	r2, #153	; 0x99
    f81e:	1ad2      	subs	r2, r2, r3
    f820:	2a00      	cmp	r2, #0
    f822:	dd27      	ble.n	f874 <__aeabi_ui2f+0x84>
    f824:	4094      	lsls	r4, r2
    f826:	0022      	movs	r2, r4
    f828:	4c13      	ldr	r4, [pc, #76]	; (f878 <__aeabi_ui2f+0x88>)
    f82a:	4014      	ands	r4, r2
    f82c:	0751      	lsls	r1, r2, #29
    f82e:	d004      	beq.n	f83a <__aeabi_ui2f+0x4a>
    f830:	210f      	movs	r1, #15
    f832:	400a      	ands	r2, r1
    f834:	2a04      	cmp	r2, #4
    f836:	d000      	beq.n	f83a <__aeabi_ui2f+0x4a>
    f838:	3404      	adds	r4, #4
    f83a:	0162      	lsls	r2, r4, #5
    f83c:	d412      	bmi.n	f864 <__aeabi_ui2f+0x74>
    f83e:	01a4      	lsls	r4, r4, #6
    f840:	0a64      	lsrs	r4, r4, #9
    f842:	b2db      	uxtb	r3, r3
    f844:	e7e3      	b.n	f80e <__aeabi_ui2f+0x1e>
    f846:	2300      	movs	r3, #0
    f848:	2400      	movs	r4, #0
    f84a:	e7e0      	b.n	f80e <__aeabi_ui2f+0x1e>
    f84c:	22b9      	movs	r2, #185	; 0xb9
    f84e:	0021      	movs	r1, r4
    f850:	1ad2      	subs	r2, r2, r3
    f852:	4091      	lsls	r1, r2
    f854:	000a      	movs	r2, r1
    f856:	1e51      	subs	r1, r2, #1
    f858:	418a      	sbcs	r2, r1
    f85a:	2105      	movs	r1, #5
    f85c:	1a09      	subs	r1, r1, r0
    f85e:	40cc      	lsrs	r4, r1
    f860:	4314      	orrs	r4, r2
    f862:	e7db      	b.n	f81c <__aeabi_ui2f+0x2c>
    f864:	4b04      	ldr	r3, [pc, #16]	; (f878 <__aeabi_ui2f+0x88>)
    f866:	401c      	ands	r4, r3
    f868:	239f      	movs	r3, #159	; 0x9f
    f86a:	01a4      	lsls	r4, r4, #6
    f86c:	1a1b      	subs	r3, r3, r0
    f86e:	0a64      	lsrs	r4, r4, #9
    f870:	b2db      	uxtb	r3, r3
    f872:	e7cc      	b.n	f80e <__aeabi_ui2f+0x1e>
    f874:	0022      	movs	r2, r4
    f876:	e7d7      	b.n	f828 <__aeabi_ui2f+0x38>
    f878:	fbffffff 	.word	0xfbffffff

0000f87c <__clzsi2>:
    f87c:	211c      	movs	r1, #28
    f87e:	2301      	movs	r3, #1
    f880:	041b      	lsls	r3, r3, #16
    f882:	4298      	cmp	r0, r3
    f884:	d301      	bcc.n	f88a <__clzsi2+0xe>
    f886:	0c00      	lsrs	r0, r0, #16
    f888:	3910      	subs	r1, #16
    f88a:	0a1b      	lsrs	r3, r3, #8
    f88c:	4298      	cmp	r0, r3
    f88e:	d301      	bcc.n	f894 <__clzsi2+0x18>
    f890:	0a00      	lsrs	r0, r0, #8
    f892:	3908      	subs	r1, #8
    f894:	091b      	lsrs	r3, r3, #4
    f896:	4298      	cmp	r0, r3
    f898:	d301      	bcc.n	f89e <__clzsi2+0x22>
    f89a:	0900      	lsrs	r0, r0, #4
    f89c:	3904      	subs	r1, #4
    f89e:	a202      	add	r2, pc, #8	; (adr r2, f8a8 <__clzsi2+0x2c>)
    f8a0:	5c10      	ldrb	r0, [r2, r0]
    f8a2:	1840      	adds	r0, r0, r1
    f8a4:	4770      	bx	lr
    f8a6:	46c0      	nop			; (mov r8, r8)
    f8a8:	02020304 	.word	0x02020304
    f8ac:	01010101 	.word	0x01010101
	...

0000f8b8 <__assert_func>:
    f8b8:	b530      	push	{r4, r5, lr}
    f8ba:	001c      	movs	r4, r3
    f8bc:	4b09      	ldr	r3, [pc, #36]	; (f8e4 <__assert_func+0x2c>)
    f8be:	0005      	movs	r5, r0
    f8c0:	681b      	ldr	r3, [r3, #0]
    f8c2:	b085      	sub	sp, #20
    f8c4:	68d8      	ldr	r0, [r3, #12]
    f8c6:	4b08      	ldr	r3, [pc, #32]	; (f8e8 <__assert_func+0x30>)
    f8c8:	2a00      	cmp	r2, #0
    f8ca:	d101      	bne.n	f8d0 <__assert_func+0x18>
    f8cc:	4b07      	ldr	r3, [pc, #28]	; (f8ec <__assert_func+0x34>)
    f8ce:	001a      	movs	r2, r3
    f8d0:	9202      	str	r2, [sp, #8]
    f8d2:	9301      	str	r3, [sp, #4]
    f8d4:	9100      	str	r1, [sp, #0]
    f8d6:	002b      	movs	r3, r5
    f8d8:	0022      	movs	r2, r4
    f8da:	4905      	ldr	r1, [pc, #20]	; (f8f0 <__assert_func+0x38>)
    f8dc:	f000 f80a 	bl	f8f4 <fiprintf>
    f8e0:	f000 fd98 	bl	10414 <abort>
    f8e4:	20000034 	.word	0x20000034
    f8e8:	000119ac 	.word	0x000119ac
    f8ec:	000119e7 	.word	0x000119e7
    f8f0:	000119b9 	.word	0x000119b9

0000f8f4 <fiprintf>:
    f8f4:	b40e      	push	{r1, r2, r3}
    f8f6:	b503      	push	{r0, r1, lr}
    f8f8:	0001      	movs	r1, r0
    f8fa:	ab03      	add	r3, sp, #12
    f8fc:	4804      	ldr	r0, [pc, #16]	; (f910 <fiprintf+0x1c>)
    f8fe:	cb04      	ldmia	r3!, {r2}
    f900:	6800      	ldr	r0, [r0, #0]
    f902:	9301      	str	r3, [sp, #4]
    f904:	f000 f872 	bl	f9ec <_vfiprintf_r>
    f908:	b002      	add	sp, #8
    f90a:	bc08      	pop	{r3}
    f90c:	b003      	add	sp, #12
    f90e:	4718      	bx	r3
    f910:	20000034 	.word	0x20000034

0000f914 <__libc_init_array>:
    f914:	b570      	push	{r4, r5, r6, lr}
    f916:	2600      	movs	r6, #0
    f918:	4d0c      	ldr	r5, [pc, #48]	; (f94c <__libc_init_array+0x38>)
    f91a:	4c0d      	ldr	r4, [pc, #52]	; (f950 <__libc_init_array+0x3c>)
    f91c:	1b64      	subs	r4, r4, r5
    f91e:	10a4      	asrs	r4, r4, #2
    f920:	42a6      	cmp	r6, r4
    f922:	d109      	bne.n	f938 <__libc_init_array+0x24>
    f924:	2600      	movs	r6, #0
    f926:	f002 f8ab 	bl	11a80 <_init>
    f92a:	4d0a      	ldr	r5, [pc, #40]	; (f954 <__libc_init_array+0x40>)
    f92c:	4c0a      	ldr	r4, [pc, #40]	; (f958 <__libc_init_array+0x44>)
    f92e:	1b64      	subs	r4, r4, r5
    f930:	10a4      	asrs	r4, r4, #2
    f932:	42a6      	cmp	r6, r4
    f934:	d105      	bne.n	f942 <__libc_init_array+0x2e>
    f936:	bd70      	pop	{r4, r5, r6, pc}
    f938:	00b3      	lsls	r3, r6, #2
    f93a:	58eb      	ldr	r3, [r5, r3]
    f93c:	4798      	blx	r3
    f93e:	3601      	adds	r6, #1
    f940:	e7ee      	b.n	f920 <__libc_init_array+0xc>
    f942:	00b3      	lsls	r3, r6, #2
    f944:	58eb      	ldr	r3, [r5, r3]
    f946:	4798      	blx	r3
    f948:	3601      	adds	r6, #1
    f94a:	e7f2      	b.n	f932 <__libc_init_array+0x1e>
    f94c:	00011a8c 	.word	0x00011a8c
    f950:	00011a8c 	.word	0x00011a8c
    f954:	00011a8c 	.word	0x00011a8c
    f958:	00011a90 	.word	0x00011a90

0000f95c <memcmp>:
    f95c:	b530      	push	{r4, r5, lr}
    f95e:	2400      	movs	r4, #0
    f960:	42a2      	cmp	r2, r4
    f962:	d101      	bne.n	f968 <memcmp+0xc>
    f964:	2000      	movs	r0, #0
    f966:	e005      	b.n	f974 <memcmp+0x18>
    f968:	5d03      	ldrb	r3, [r0, r4]
    f96a:	1c65      	adds	r5, r4, #1
    f96c:	5d0c      	ldrb	r4, [r1, r4]
    f96e:	42a3      	cmp	r3, r4
    f970:	d001      	beq.n	f976 <memcmp+0x1a>
    f972:	1b18      	subs	r0, r3, r4
    f974:	bd30      	pop	{r4, r5, pc}
    f976:	002c      	movs	r4, r5
    f978:	e7f2      	b.n	f960 <memcmp+0x4>

0000f97a <memcpy>:
    f97a:	2300      	movs	r3, #0
    f97c:	b510      	push	{r4, lr}
    f97e:	429a      	cmp	r2, r3
    f980:	d100      	bne.n	f984 <memcpy+0xa>
    f982:	bd10      	pop	{r4, pc}
    f984:	5ccc      	ldrb	r4, [r1, r3]
    f986:	54c4      	strb	r4, [r0, r3]
    f988:	3301      	adds	r3, #1
    f98a:	e7f8      	b.n	f97e <memcpy+0x4>

0000f98c <memset>:
    f98c:	0003      	movs	r3, r0
    f98e:	1882      	adds	r2, r0, r2
    f990:	4293      	cmp	r3, r2
    f992:	d100      	bne.n	f996 <memset+0xa>
    f994:	4770      	bx	lr
    f996:	7019      	strb	r1, [r3, #0]
    f998:	3301      	adds	r3, #1
    f99a:	e7f9      	b.n	f990 <memset+0x4>

0000f99c <__sfputc_r>:
    f99c:	6893      	ldr	r3, [r2, #8]
    f99e:	b510      	push	{r4, lr}
    f9a0:	3b01      	subs	r3, #1
    f9a2:	6093      	str	r3, [r2, #8]
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	da05      	bge.n	f9b4 <__sfputc_r+0x18>
    f9a8:	6994      	ldr	r4, [r2, #24]
    f9aa:	42a3      	cmp	r3, r4
    f9ac:	db08      	blt.n	f9c0 <__sfputc_r+0x24>
    f9ae:	b2cb      	uxtb	r3, r1
    f9b0:	2b0a      	cmp	r3, #10
    f9b2:	d005      	beq.n	f9c0 <__sfputc_r+0x24>
    f9b4:	6813      	ldr	r3, [r2, #0]
    f9b6:	1c58      	adds	r0, r3, #1
    f9b8:	6010      	str	r0, [r2, #0]
    f9ba:	7019      	strb	r1, [r3, #0]
    f9bc:	b2c8      	uxtb	r0, r1
    f9be:	bd10      	pop	{r4, pc}
    f9c0:	f000 fc5c 	bl	1027c <__swbuf_r>
    f9c4:	e7fb      	b.n	f9be <__sfputc_r+0x22>

0000f9c6 <__sfputs_r>:
    f9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9c8:	0006      	movs	r6, r0
    f9ca:	000f      	movs	r7, r1
    f9cc:	0014      	movs	r4, r2
    f9ce:	18d5      	adds	r5, r2, r3
    f9d0:	42ac      	cmp	r4, r5
    f9d2:	d101      	bne.n	f9d8 <__sfputs_r+0x12>
    f9d4:	2000      	movs	r0, #0
    f9d6:	e007      	b.n	f9e8 <__sfputs_r+0x22>
    f9d8:	7821      	ldrb	r1, [r4, #0]
    f9da:	003a      	movs	r2, r7
    f9dc:	0030      	movs	r0, r6
    f9de:	f7ff ffdd 	bl	f99c <__sfputc_r>
    f9e2:	3401      	adds	r4, #1
    f9e4:	1c43      	adds	r3, r0, #1
    f9e6:	d1f3      	bne.n	f9d0 <__sfputs_r+0xa>
    f9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9ea:	Address 0x0000f9ea is out of bounds.


0000f9ec <_vfiprintf_r>:
    f9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9ee:	b09f      	sub	sp, #124	; 0x7c
    f9f0:	0006      	movs	r6, r0
    f9f2:	000f      	movs	r7, r1
    f9f4:	0014      	movs	r4, r2
    f9f6:	9305      	str	r3, [sp, #20]
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d004      	beq.n	fa06 <_vfiprintf_r+0x1a>
    f9fc:	6983      	ldr	r3, [r0, #24]
    f9fe:	2b00      	cmp	r3, #0
    fa00:	d101      	bne.n	fa06 <_vfiprintf_r+0x1a>
    fa02:	f000 fe07 	bl	10614 <__sinit>
    fa06:	4b7f      	ldr	r3, [pc, #508]	; (fc04 <_vfiprintf_r+0x218>)
    fa08:	429f      	cmp	r7, r3
    fa0a:	d15c      	bne.n	fac6 <_vfiprintf_r+0xda>
    fa0c:	6877      	ldr	r7, [r6, #4]
    fa0e:	89bb      	ldrh	r3, [r7, #12]
    fa10:	071b      	lsls	r3, r3, #28
    fa12:	d562      	bpl.n	fada <_vfiprintf_r+0xee>
    fa14:	693b      	ldr	r3, [r7, #16]
    fa16:	2b00      	cmp	r3, #0
    fa18:	d05f      	beq.n	fada <_vfiprintf_r+0xee>
    fa1a:	2300      	movs	r3, #0
    fa1c:	ad06      	add	r5, sp, #24
    fa1e:	616b      	str	r3, [r5, #20]
    fa20:	3320      	adds	r3, #32
    fa22:	766b      	strb	r3, [r5, #25]
    fa24:	3310      	adds	r3, #16
    fa26:	76ab      	strb	r3, [r5, #26]
    fa28:	9402      	str	r4, [sp, #8]
    fa2a:	9c02      	ldr	r4, [sp, #8]
    fa2c:	7823      	ldrb	r3, [r4, #0]
    fa2e:	2b00      	cmp	r3, #0
    fa30:	d15d      	bne.n	faee <_vfiprintf_r+0x102>
    fa32:	9b02      	ldr	r3, [sp, #8]
    fa34:	1ae3      	subs	r3, r4, r3
    fa36:	9304      	str	r3, [sp, #16]
    fa38:	d00d      	beq.n	fa56 <_vfiprintf_r+0x6a>
    fa3a:	9b04      	ldr	r3, [sp, #16]
    fa3c:	9a02      	ldr	r2, [sp, #8]
    fa3e:	0039      	movs	r1, r7
    fa40:	0030      	movs	r0, r6
    fa42:	f7ff ffc0 	bl	f9c6 <__sfputs_r>
    fa46:	1c43      	adds	r3, r0, #1
    fa48:	d100      	bne.n	fa4c <_vfiprintf_r+0x60>
    fa4a:	e0cc      	b.n	fbe6 <_vfiprintf_r+0x1fa>
    fa4c:	696a      	ldr	r2, [r5, #20]
    fa4e:	9b04      	ldr	r3, [sp, #16]
    fa50:	4694      	mov	ip, r2
    fa52:	4463      	add	r3, ip
    fa54:	616b      	str	r3, [r5, #20]
    fa56:	7823      	ldrb	r3, [r4, #0]
    fa58:	2b00      	cmp	r3, #0
    fa5a:	d100      	bne.n	fa5e <_vfiprintf_r+0x72>
    fa5c:	e0c3      	b.n	fbe6 <_vfiprintf_r+0x1fa>
    fa5e:	2201      	movs	r2, #1
    fa60:	2300      	movs	r3, #0
    fa62:	4252      	negs	r2, r2
    fa64:	606a      	str	r2, [r5, #4]
    fa66:	a902      	add	r1, sp, #8
    fa68:	3254      	adds	r2, #84	; 0x54
    fa6a:	1852      	adds	r2, r2, r1
    fa6c:	3401      	adds	r4, #1
    fa6e:	602b      	str	r3, [r5, #0]
    fa70:	60eb      	str	r3, [r5, #12]
    fa72:	60ab      	str	r3, [r5, #8]
    fa74:	7013      	strb	r3, [r2, #0]
    fa76:	65ab      	str	r3, [r5, #88]	; 0x58
    fa78:	7821      	ldrb	r1, [r4, #0]
    fa7a:	2205      	movs	r2, #5
    fa7c:	4862      	ldr	r0, [pc, #392]	; (fc08 <_vfiprintf_r+0x21c>)
    fa7e:	f000 fed5 	bl	1082c <memchr>
    fa82:	1c63      	adds	r3, r4, #1
    fa84:	469c      	mov	ip, r3
    fa86:	2800      	cmp	r0, #0
    fa88:	d135      	bne.n	faf6 <_vfiprintf_r+0x10a>
    fa8a:	6829      	ldr	r1, [r5, #0]
    fa8c:	06cb      	lsls	r3, r1, #27
    fa8e:	d504      	bpl.n	fa9a <_vfiprintf_r+0xae>
    fa90:	2353      	movs	r3, #83	; 0x53
    fa92:	aa02      	add	r2, sp, #8
    fa94:	3020      	adds	r0, #32
    fa96:	189b      	adds	r3, r3, r2
    fa98:	7018      	strb	r0, [r3, #0]
    fa9a:	070b      	lsls	r3, r1, #28
    fa9c:	d504      	bpl.n	faa8 <_vfiprintf_r+0xbc>
    fa9e:	2353      	movs	r3, #83	; 0x53
    faa0:	202b      	movs	r0, #43	; 0x2b
    faa2:	aa02      	add	r2, sp, #8
    faa4:	189b      	adds	r3, r3, r2
    faa6:	7018      	strb	r0, [r3, #0]
    faa8:	7823      	ldrb	r3, [r4, #0]
    faaa:	2b2a      	cmp	r3, #42	; 0x2a
    faac:	d02c      	beq.n	fb08 <_vfiprintf_r+0x11c>
    faae:	2000      	movs	r0, #0
    fab0:	210a      	movs	r1, #10
    fab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fab4:	7822      	ldrb	r2, [r4, #0]
    fab6:	3a30      	subs	r2, #48	; 0x30
    fab8:	2a09      	cmp	r2, #9
    faba:	d800      	bhi.n	fabe <_vfiprintf_r+0xd2>
    fabc:	e06b      	b.n	fb96 <_vfiprintf_r+0x1aa>
    fabe:	2800      	cmp	r0, #0
    fac0:	d02a      	beq.n	fb18 <_vfiprintf_r+0x12c>
    fac2:	9309      	str	r3, [sp, #36]	; 0x24
    fac4:	e028      	b.n	fb18 <_vfiprintf_r+0x12c>
    fac6:	4b51      	ldr	r3, [pc, #324]	; (fc0c <_vfiprintf_r+0x220>)
    fac8:	429f      	cmp	r7, r3
    faca:	d101      	bne.n	fad0 <_vfiprintf_r+0xe4>
    facc:	68b7      	ldr	r7, [r6, #8]
    face:	e79e      	b.n	fa0e <_vfiprintf_r+0x22>
    fad0:	4b4f      	ldr	r3, [pc, #316]	; (fc10 <_vfiprintf_r+0x224>)
    fad2:	429f      	cmp	r7, r3
    fad4:	d19b      	bne.n	fa0e <_vfiprintf_r+0x22>
    fad6:	68f7      	ldr	r7, [r6, #12]
    fad8:	e799      	b.n	fa0e <_vfiprintf_r+0x22>
    fada:	0039      	movs	r1, r7
    fadc:	0030      	movs	r0, r6
    fade:	f000 fc23 	bl	10328 <__swsetup_r>
    fae2:	2800      	cmp	r0, #0
    fae4:	d099      	beq.n	fa1a <_vfiprintf_r+0x2e>
    fae6:	2001      	movs	r0, #1
    fae8:	4240      	negs	r0, r0
    faea:	b01f      	add	sp, #124	; 0x7c
    faec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faee:	2b25      	cmp	r3, #37	; 0x25
    faf0:	d09f      	beq.n	fa32 <_vfiprintf_r+0x46>
    faf2:	3401      	adds	r4, #1
    faf4:	e79a      	b.n	fa2c <_vfiprintf_r+0x40>
    faf6:	4b44      	ldr	r3, [pc, #272]	; (fc08 <_vfiprintf_r+0x21c>)
    faf8:	6829      	ldr	r1, [r5, #0]
    fafa:	1ac0      	subs	r0, r0, r3
    fafc:	2301      	movs	r3, #1
    fafe:	4083      	lsls	r3, r0
    fb00:	430b      	orrs	r3, r1
    fb02:	602b      	str	r3, [r5, #0]
    fb04:	4664      	mov	r4, ip
    fb06:	e7b7      	b.n	fa78 <_vfiprintf_r+0x8c>
    fb08:	9b05      	ldr	r3, [sp, #20]
    fb0a:	1d18      	adds	r0, r3, #4
    fb0c:	681b      	ldr	r3, [r3, #0]
    fb0e:	9005      	str	r0, [sp, #20]
    fb10:	2b00      	cmp	r3, #0
    fb12:	db3a      	blt.n	fb8a <_vfiprintf_r+0x19e>
    fb14:	9309      	str	r3, [sp, #36]	; 0x24
    fb16:	4664      	mov	r4, ip
    fb18:	7823      	ldrb	r3, [r4, #0]
    fb1a:	2b2e      	cmp	r3, #46	; 0x2e
    fb1c:	d10b      	bne.n	fb36 <_vfiprintf_r+0x14a>
    fb1e:	7863      	ldrb	r3, [r4, #1]
    fb20:	1c62      	adds	r2, r4, #1
    fb22:	2b2a      	cmp	r3, #42	; 0x2a
    fb24:	d13f      	bne.n	fba6 <_vfiprintf_r+0x1ba>
    fb26:	9b05      	ldr	r3, [sp, #20]
    fb28:	3402      	adds	r4, #2
    fb2a:	1d1a      	adds	r2, r3, #4
    fb2c:	681b      	ldr	r3, [r3, #0]
    fb2e:	9205      	str	r2, [sp, #20]
    fb30:	2b00      	cmp	r3, #0
    fb32:	db35      	blt.n	fba0 <_vfiprintf_r+0x1b4>
    fb34:	9307      	str	r3, [sp, #28]
    fb36:	7821      	ldrb	r1, [r4, #0]
    fb38:	2203      	movs	r2, #3
    fb3a:	4836      	ldr	r0, [pc, #216]	; (fc14 <_vfiprintf_r+0x228>)
    fb3c:	f000 fe76 	bl	1082c <memchr>
    fb40:	2800      	cmp	r0, #0
    fb42:	d007      	beq.n	fb54 <_vfiprintf_r+0x168>
    fb44:	4b33      	ldr	r3, [pc, #204]	; (fc14 <_vfiprintf_r+0x228>)
    fb46:	682a      	ldr	r2, [r5, #0]
    fb48:	1ac0      	subs	r0, r0, r3
    fb4a:	2340      	movs	r3, #64	; 0x40
    fb4c:	4083      	lsls	r3, r0
    fb4e:	4313      	orrs	r3, r2
    fb50:	602b      	str	r3, [r5, #0]
    fb52:	3401      	adds	r4, #1
    fb54:	7821      	ldrb	r1, [r4, #0]
    fb56:	1c63      	adds	r3, r4, #1
    fb58:	2206      	movs	r2, #6
    fb5a:	482f      	ldr	r0, [pc, #188]	; (fc18 <_vfiprintf_r+0x22c>)
    fb5c:	9302      	str	r3, [sp, #8]
    fb5e:	7629      	strb	r1, [r5, #24]
    fb60:	f000 fe64 	bl	1082c <memchr>
    fb64:	2800      	cmp	r0, #0
    fb66:	d044      	beq.n	fbf2 <_vfiprintf_r+0x206>
    fb68:	4b2c      	ldr	r3, [pc, #176]	; (fc1c <_vfiprintf_r+0x230>)
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d12f      	bne.n	fbce <_vfiprintf_r+0x1e2>
    fb6e:	6829      	ldr	r1, [r5, #0]
    fb70:	9b05      	ldr	r3, [sp, #20]
    fb72:	2207      	movs	r2, #7
    fb74:	05c9      	lsls	r1, r1, #23
    fb76:	d528      	bpl.n	fbca <_vfiprintf_r+0x1de>
    fb78:	189b      	adds	r3, r3, r2
    fb7a:	4393      	bics	r3, r2
    fb7c:	3308      	adds	r3, #8
    fb7e:	9305      	str	r3, [sp, #20]
    fb80:	696b      	ldr	r3, [r5, #20]
    fb82:	9a03      	ldr	r2, [sp, #12]
    fb84:	189b      	adds	r3, r3, r2
    fb86:	616b      	str	r3, [r5, #20]
    fb88:	e74f      	b.n	fa2a <_vfiprintf_r+0x3e>
    fb8a:	425b      	negs	r3, r3
    fb8c:	60eb      	str	r3, [r5, #12]
    fb8e:	2302      	movs	r3, #2
    fb90:	430b      	orrs	r3, r1
    fb92:	602b      	str	r3, [r5, #0]
    fb94:	e7bf      	b.n	fb16 <_vfiprintf_r+0x12a>
    fb96:	434b      	muls	r3, r1
    fb98:	3401      	adds	r4, #1
    fb9a:	189b      	adds	r3, r3, r2
    fb9c:	2001      	movs	r0, #1
    fb9e:	e789      	b.n	fab4 <_vfiprintf_r+0xc8>
    fba0:	2301      	movs	r3, #1
    fba2:	425b      	negs	r3, r3
    fba4:	e7c6      	b.n	fb34 <_vfiprintf_r+0x148>
    fba6:	2300      	movs	r3, #0
    fba8:	0014      	movs	r4, r2
    fbaa:	200a      	movs	r0, #10
    fbac:	001a      	movs	r2, r3
    fbae:	606b      	str	r3, [r5, #4]
    fbb0:	7821      	ldrb	r1, [r4, #0]
    fbb2:	3930      	subs	r1, #48	; 0x30
    fbb4:	2909      	cmp	r1, #9
    fbb6:	d903      	bls.n	fbc0 <_vfiprintf_r+0x1d4>
    fbb8:	2b00      	cmp	r3, #0
    fbba:	d0bc      	beq.n	fb36 <_vfiprintf_r+0x14a>
    fbbc:	9207      	str	r2, [sp, #28]
    fbbe:	e7ba      	b.n	fb36 <_vfiprintf_r+0x14a>
    fbc0:	4342      	muls	r2, r0
    fbc2:	3401      	adds	r4, #1
    fbc4:	1852      	adds	r2, r2, r1
    fbc6:	2301      	movs	r3, #1
    fbc8:	e7f2      	b.n	fbb0 <_vfiprintf_r+0x1c4>
    fbca:	3307      	adds	r3, #7
    fbcc:	e7d5      	b.n	fb7a <_vfiprintf_r+0x18e>
    fbce:	ab05      	add	r3, sp, #20
    fbd0:	9300      	str	r3, [sp, #0]
    fbd2:	003a      	movs	r2, r7
    fbd4:	4b12      	ldr	r3, [pc, #72]	; (fc20 <_vfiprintf_r+0x234>)
    fbd6:	0029      	movs	r1, r5
    fbd8:	0030      	movs	r0, r6
    fbda:	e000      	b.n	fbde <_vfiprintf_r+0x1f2>
    fbdc:	bf00      	nop
    fbde:	9003      	str	r0, [sp, #12]
    fbe0:	9b03      	ldr	r3, [sp, #12]
    fbe2:	3301      	adds	r3, #1
    fbe4:	d1cc      	bne.n	fb80 <_vfiprintf_r+0x194>
    fbe6:	89bb      	ldrh	r3, [r7, #12]
    fbe8:	065b      	lsls	r3, r3, #25
    fbea:	d500      	bpl.n	fbee <_vfiprintf_r+0x202>
    fbec:	e77b      	b.n	fae6 <_vfiprintf_r+0xfa>
    fbee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fbf0:	e77b      	b.n	faea <_vfiprintf_r+0xfe>
    fbf2:	ab05      	add	r3, sp, #20
    fbf4:	9300      	str	r3, [sp, #0]
    fbf6:	003a      	movs	r2, r7
    fbf8:	4b09      	ldr	r3, [pc, #36]	; (fc20 <_vfiprintf_r+0x234>)
    fbfa:	0029      	movs	r1, r5
    fbfc:	0030      	movs	r0, r6
    fbfe:	f000 f87f 	bl	fd00 <_printf_i>
    fc02:	e7ec      	b.n	fbde <_vfiprintf_r+0x1f2>
    fc04:	00011a40 	.word	0x00011a40
    fc08:	000119ec 	.word	0x000119ec
    fc0c:	00011a60 	.word	0x00011a60
    fc10:	00011a20 	.word	0x00011a20
    fc14:	000119f2 	.word	0x000119f2
    fc18:	000119f6 	.word	0x000119f6
    fc1c:	00000000 	.word	0x00000000
    fc20:	0000f9c7 	.word	0x0000f9c7

0000fc24 <_printf_common>:
    fc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc26:	0015      	movs	r5, r2
    fc28:	9301      	str	r3, [sp, #4]
    fc2a:	688a      	ldr	r2, [r1, #8]
    fc2c:	690b      	ldr	r3, [r1, #16]
    fc2e:	9000      	str	r0, [sp, #0]
    fc30:	000c      	movs	r4, r1
    fc32:	4293      	cmp	r3, r2
    fc34:	da00      	bge.n	fc38 <_printf_common+0x14>
    fc36:	0013      	movs	r3, r2
    fc38:	0022      	movs	r2, r4
    fc3a:	602b      	str	r3, [r5, #0]
    fc3c:	3243      	adds	r2, #67	; 0x43
    fc3e:	7812      	ldrb	r2, [r2, #0]
    fc40:	2a00      	cmp	r2, #0
    fc42:	d001      	beq.n	fc48 <_printf_common+0x24>
    fc44:	3301      	adds	r3, #1
    fc46:	602b      	str	r3, [r5, #0]
    fc48:	6823      	ldr	r3, [r4, #0]
    fc4a:	069b      	lsls	r3, r3, #26
    fc4c:	d502      	bpl.n	fc54 <_printf_common+0x30>
    fc4e:	682b      	ldr	r3, [r5, #0]
    fc50:	3302      	adds	r3, #2
    fc52:	602b      	str	r3, [r5, #0]
    fc54:	2706      	movs	r7, #6
    fc56:	6823      	ldr	r3, [r4, #0]
    fc58:	401f      	ands	r7, r3
    fc5a:	d027      	beq.n	fcac <_printf_common+0x88>
    fc5c:	0023      	movs	r3, r4
    fc5e:	3343      	adds	r3, #67	; 0x43
    fc60:	781b      	ldrb	r3, [r3, #0]
    fc62:	1e5a      	subs	r2, r3, #1
    fc64:	4193      	sbcs	r3, r2
    fc66:	6822      	ldr	r2, [r4, #0]
    fc68:	0692      	lsls	r2, r2, #26
    fc6a:	d430      	bmi.n	fcce <_printf_common+0xaa>
    fc6c:	0022      	movs	r2, r4
    fc6e:	9901      	ldr	r1, [sp, #4]
    fc70:	3243      	adds	r2, #67	; 0x43
    fc72:	9800      	ldr	r0, [sp, #0]
    fc74:	9e08      	ldr	r6, [sp, #32]
    fc76:	47b0      	blx	r6
    fc78:	1c43      	adds	r3, r0, #1
    fc7a:	d025      	beq.n	fcc8 <_printf_common+0xa4>
    fc7c:	2306      	movs	r3, #6
    fc7e:	6820      	ldr	r0, [r4, #0]
    fc80:	682a      	ldr	r2, [r5, #0]
    fc82:	68e1      	ldr	r1, [r4, #12]
    fc84:	4003      	ands	r3, r0
    fc86:	2500      	movs	r5, #0
    fc88:	2b04      	cmp	r3, #4
    fc8a:	d103      	bne.n	fc94 <_printf_common+0x70>
    fc8c:	1a8d      	subs	r5, r1, r2
    fc8e:	43eb      	mvns	r3, r5
    fc90:	17db      	asrs	r3, r3, #31
    fc92:	401d      	ands	r5, r3
    fc94:	68a3      	ldr	r3, [r4, #8]
    fc96:	6922      	ldr	r2, [r4, #16]
    fc98:	4293      	cmp	r3, r2
    fc9a:	dd01      	ble.n	fca0 <_printf_common+0x7c>
    fc9c:	1a9b      	subs	r3, r3, r2
    fc9e:	18ed      	adds	r5, r5, r3
    fca0:	2700      	movs	r7, #0
    fca2:	42bd      	cmp	r5, r7
    fca4:	d120      	bne.n	fce8 <_printf_common+0xc4>
    fca6:	2000      	movs	r0, #0
    fca8:	e010      	b.n	fccc <_printf_common+0xa8>
    fcaa:	3701      	adds	r7, #1
    fcac:	68e3      	ldr	r3, [r4, #12]
    fcae:	682a      	ldr	r2, [r5, #0]
    fcb0:	1a9b      	subs	r3, r3, r2
    fcb2:	429f      	cmp	r7, r3
    fcb4:	dad2      	bge.n	fc5c <_printf_common+0x38>
    fcb6:	0022      	movs	r2, r4
    fcb8:	2301      	movs	r3, #1
    fcba:	3219      	adds	r2, #25
    fcbc:	9901      	ldr	r1, [sp, #4]
    fcbe:	9800      	ldr	r0, [sp, #0]
    fcc0:	9e08      	ldr	r6, [sp, #32]
    fcc2:	47b0      	blx	r6
    fcc4:	1c43      	adds	r3, r0, #1
    fcc6:	d1f0      	bne.n	fcaa <_printf_common+0x86>
    fcc8:	2001      	movs	r0, #1
    fcca:	4240      	negs	r0, r0
    fccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcce:	2030      	movs	r0, #48	; 0x30
    fcd0:	18e1      	adds	r1, r4, r3
    fcd2:	3143      	adds	r1, #67	; 0x43
    fcd4:	7008      	strb	r0, [r1, #0]
    fcd6:	0021      	movs	r1, r4
    fcd8:	1c5a      	adds	r2, r3, #1
    fcda:	3145      	adds	r1, #69	; 0x45
    fcdc:	7809      	ldrb	r1, [r1, #0]
    fcde:	18a2      	adds	r2, r4, r2
    fce0:	3243      	adds	r2, #67	; 0x43
    fce2:	3302      	adds	r3, #2
    fce4:	7011      	strb	r1, [r2, #0]
    fce6:	e7c1      	b.n	fc6c <_printf_common+0x48>
    fce8:	0022      	movs	r2, r4
    fcea:	2301      	movs	r3, #1
    fcec:	321a      	adds	r2, #26
    fcee:	9901      	ldr	r1, [sp, #4]
    fcf0:	9800      	ldr	r0, [sp, #0]
    fcf2:	9e08      	ldr	r6, [sp, #32]
    fcf4:	47b0      	blx	r6
    fcf6:	1c43      	adds	r3, r0, #1
    fcf8:	d0e6      	beq.n	fcc8 <_printf_common+0xa4>
    fcfa:	3701      	adds	r7, #1
    fcfc:	e7d1      	b.n	fca2 <_printf_common+0x7e>
    fcfe:	Address 0x0000fcfe is out of bounds.


0000fd00 <_printf_i>:
    fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd02:	b08b      	sub	sp, #44	; 0x2c
    fd04:	9206      	str	r2, [sp, #24]
    fd06:	000a      	movs	r2, r1
    fd08:	3243      	adds	r2, #67	; 0x43
    fd0a:	9307      	str	r3, [sp, #28]
    fd0c:	9005      	str	r0, [sp, #20]
    fd0e:	9204      	str	r2, [sp, #16]
    fd10:	7e0a      	ldrb	r2, [r1, #24]
    fd12:	000c      	movs	r4, r1
    fd14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fd16:	2a6e      	cmp	r2, #110	; 0x6e
    fd18:	d100      	bne.n	fd1c <_printf_i+0x1c>
    fd1a:	e08f      	b.n	fe3c <_printf_i+0x13c>
    fd1c:	d817      	bhi.n	fd4e <_printf_i+0x4e>
    fd1e:	2a63      	cmp	r2, #99	; 0x63
    fd20:	d02c      	beq.n	fd7c <_printf_i+0x7c>
    fd22:	d808      	bhi.n	fd36 <_printf_i+0x36>
    fd24:	2a00      	cmp	r2, #0
    fd26:	d100      	bne.n	fd2a <_printf_i+0x2a>
    fd28:	e099      	b.n	fe5e <_printf_i+0x15e>
    fd2a:	2a58      	cmp	r2, #88	; 0x58
    fd2c:	d054      	beq.n	fdd8 <_printf_i+0xd8>
    fd2e:	0026      	movs	r6, r4
    fd30:	3642      	adds	r6, #66	; 0x42
    fd32:	7032      	strb	r2, [r6, #0]
    fd34:	e029      	b.n	fd8a <_printf_i+0x8a>
    fd36:	2a64      	cmp	r2, #100	; 0x64
    fd38:	d001      	beq.n	fd3e <_printf_i+0x3e>
    fd3a:	2a69      	cmp	r2, #105	; 0x69
    fd3c:	d1f7      	bne.n	fd2e <_printf_i+0x2e>
    fd3e:	6821      	ldr	r1, [r4, #0]
    fd40:	681a      	ldr	r2, [r3, #0]
    fd42:	0608      	lsls	r0, r1, #24
    fd44:	d523      	bpl.n	fd8e <_printf_i+0x8e>
    fd46:	1d11      	adds	r1, r2, #4
    fd48:	6019      	str	r1, [r3, #0]
    fd4a:	6815      	ldr	r5, [r2, #0]
    fd4c:	e025      	b.n	fd9a <_printf_i+0x9a>
    fd4e:	2a73      	cmp	r2, #115	; 0x73
    fd50:	d100      	bne.n	fd54 <_printf_i+0x54>
    fd52:	e088      	b.n	fe66 <_printf_i+0x166>
    fd54:	d808      	bhi.n	fd68 <_printf_i+0x68>
    fd56:	2a6f      	cmp	r2, #111	; 0x6f
    fd58:	d029      	beq.n	fdae <_printf_i+0xae>
    fd5a:	2a70      	cmp	r2, #112	; 0x70
    fd5c:	d1e7      	bne.n	fd2e <_printf_i+0x2e>
    fd5e:	2220      	movs	r2, #32
    fd60:	6809      	ldr	r1, [r1, #0]
    fd62:	430a      	orrs	r2, r1
    fd64:	6022      	str	r2, [r4, #0]
    fd66:	e003      	b.n	fd70 <_printf_i+0x70>
    fd68:	2a75      	cmp	r2, #117	; 0x75
    fd6a:	d020      	beq.n	fdae <_printf_i+0xae>
    fd6c:	2a78      	cmp	r2, #120	; 0x78
    fd6e:	d1de      	bne.n	fd2e <_printf_i+0x2e>
    fd70:	0022      	movs	r2, r4
    fd72:	2178      	movs	r1, #120	; 0x78
    fd74:	3245      	adds	r2, #69	; 0x45
    fd76:	7011      	strb	r1, [r2, #0]
    fd78:	4a6c      	ldr	r2, [pc, #432]	; (ff2c <_printf_i+0x22c>)
    fd7a:	e030      	b.n	fdde <_printf_i+0xde>
    fd7c:	000e      	movs	r6, r1
    fd7e:	681a      	ldr	r2, [r3, #0]
    fd80:	3642      	adds	r6, #66	; 0x42
    fd82:	1d11      	adds	r1, r2, #4
    fd84:	6019      	str	r1, [r3, #0]
    fd86:	6813      	ldr	r3, [r2, #0]
    fd88:	7033      	strb	r3, [r6, #0]
    fd8a:	2301      	movs	r3, #1
    fd8c:	e079      	b.n	fe82 <_printf_i+0x182>
    fd8e:	0649      	lsls	r1, r1, #25
    fd90:	d5d9      	bpl.n	fd46 <_printf_i+0x46>
    fd92:	1d11      	adds	r1, r2, #4
    fd94:	6019      	str	r1, [r3, #0]
    fd96:	2300      	movs	r3, #0
    fd98:	5ed5      	ldrsh	r5, [r2, r3]
    fd9a:	2d00      	cmp	r5, #0
    fd9c:	da03      	bge.n	fda6 <_printf_i+0xa6>
    fd9e:	232d      	movs	r3, #45	; 0x2d
    fda0:	9a04      	ldr	r2, [sp, #16]
    fda2:	426d      	negs	r5, r5
    fda4:	7013      	strb	r3, [r2, #0]
    fda6:	4b62      	ldr	r3, [pc, #392]	; (ff30 <_printf_i+0x230>)
    fda8:	270a      	movs	r7, #10
    fdaa:	9303      	str	r3, [sp, #12]
    fdac:	e02f      	b.n	fe0e <_printf_i+0x10e>
    fdae:	6820      	ldr	r0, [r4, #0]
    fdb0:	6819      	ldr	r1, [r3, #0]
    fdb2:	0605      	lsls	r5, r0, #24
    fdb4:	d503      	bpl.n	fdbe <_printf_i+0xbe>
    fdb6:	1d08      	adds	r0, r1, #4
    fdb8:	6018      	str	r0, [r3, #0]
    fdba:	680d      	ldr	r5, [r1, #0]
    fdbc:	e005      	b.n	fdca <_printf_i+0xca>
    fdbe:	0640      	lsls	r0, r0, #25
    fdc0:	d5f9      	bpl.n	fdb6 <_printf_i+0xb6>
    fdc2:	680d      	ldr	r5, [r1, #0]
    fdc4:	1d08      	adds	r0, r1, #4
    fdc6:	6018      	str	r0, [r3, #0]
    fdc8:	b2ad      	uxth	r5, r5
    fdca:	4b59      	ldr	r3, [pc, #356]	; (ff30 <_printf_i+0x230>)
    fdcc:	2708      	movs	r7, #8
    fdce:	9303      	str	r3, [sp, #12]
    fdd0:	2a6f      	cmp	r2, #111	; 0x6f
    fdd2:	d018      	beq.n	fe06 <_printf_i+0x106>
    fdd4:	270a      	movs	r7, #10
    fdd6:	e016      	b.n	fe06 <_printf_i+0x106>
    fdd8:	3145      	adds	r1, #69	; 0x45
    fdda:	700a      	strb	r2, [r1, #0]
    fddc:	4a54      	ldr	r2, [pc, #336]	; (ff30 <_printf_i+0x230>)
    fdde:	9203      	str	r2, [sp, #12]
    fde0:	681a      	ldr	r2, [r3, #0]
    fde2:	6821      	ldr	r1, [r4, #0]
    fde4:	1d10      	adds	r0, r2, #4
    fde6:	6018      	str	r0, [r3, #0]
    fde8:	6815      	ldr	r5, [r2, #0]
    fdea:	0608      	lsls	r0, r1, #24
    fdec:	d522      	bpl.n	fe34 <_printf_i+0x134>
    fdee:	07cb      	lsls	r3, r1, #31
    fdf0:	d502      	bpl.n	fdf8 <_printf_i+0xf8>
    fdf2:	2320      	movs	r3, #32
    fdf4:	4319      	orrs	r1, r3
    fdf6:	6021      	str	r1, [r4, #0]
    fdf8:	2710      	movs	r7, #16
    fdfa:	2d00      	cmp	r5, #0
    fdfc:	d103      	bne.n	fe06 <_printf_i+0x106>
    fdfe:	2320      	movs	r3, #32
    fe00:	6822      	ldr	r2, [r4, #0]
    fe02:	439a      	bics	r2, r3
    fe04:	6022      	str	r2, [r4, #0]
    fe06:	0023      	movs	r3, r4
    fe08:	2200      	movs	r2, #0
    fe0a:	3343      	adds	r3, #67	; 0x43
    fe0c:	701a      	strb	r2, [r3, #0]
    fe0e:	6863      	ldr	r3, [r4, #4]
    fe10:	60a3      	str	r3, [r4, #8]
    fe12:	2b00      	cmp	r3, #0
    fe14:	db5c      	blt.n	fed0 <_printf_i+0x1d0>
    fe16:	2204      	movs	r2, #4
    fe18:	6821      	ldr	r1, [r4, #0]
    fe1a:	4391      	bics	r1, r2
    fe1c:	6021      	str	r1, [r4, #0]
    fe1e:	2d00      	cmp	r5, #0
    fe20:	d158      	bne.n	fed4 <_printf_i+0x1d4>
    fe22:	9e04      	ldr	r6, [sp, #16]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d064      	beq.n	fef2 <_printf_i+0x1f2>
    fe28:	0026      	movs	r6, r4
    fe2a:	9b03      	ldr	r3, [sp, #12]
    fe2c:	3642      	adds	r6, #66	; 0x42
    fe2e:	781b      	ldrb	r3, [r3, #0]
    fe30:	7033      	strb	r3, [r6, #0]
    fe32:	e05e      	b.n	fef2 <_printf_i+0x1f2>
    fe34:	0648      	lsls	r0, r1, #25
    fe36:	d5da      	bpl.n	fdee <_printf_i+0xee>
    fe38:	b2ad      	uxth	r5, r5
    fe3a:	e7d8      	b.n	fdee <_printf_i+0xee>
    fe3c:	6809      	ldr	r1, [r1, #0]
    fe3e:	681a      	ldr	r2, [r3, #0]
    fe40:	0608      	lsls	r0, r1, #24
    fe42:	d505      	bpl.n	fe50 <_printf_i+0x150>
    fe44:	1d11      	adds	r1, r2, #4
    fe46:	6019      	str	r1, [r3, #0]
    fe48:	6813      	ldr	r3, [r2, #0]
    fe4a:	6962      	ldr	r2, [r4, #20]
    fe4c:	601a      	str	r2, [r3, #0]
    fe4e:	e006      	b.n	fe5e <_printf_i+0x15e>
    fe50:	0649      	lsls	r1, r1, #25
    fe52:	d5f7      	bpl.n	fe44 <_printf_i+0x144>
    fe54:	1d11      	adds	r1, r2, #4
    fe56:	6019      	str	r1, [r3, #0]
    fe58:	6813      	ldr	r3, [r2, #0]
    fe5a:	8aa2      	ldrh	r2, [r4, #20]
    fe5c:	801a      	strh	r2, [r3, #0]
    fe5e:	2300      	movs	r3, #0
    fe60:	9e04      	ldr	r6, [sp, #16]
    fe62:	6123      	str	r3, [r4, #16]
    fe64:	e054      	b.n	ff10 <_printf_i+0x210>
    fe66:	681a      	ldr	r2, [r3, #0]
    fe68:	1d11      	adds	r1, r2, #4
    fe6a:	6019      	str	r1, [r3, #0]
    fe6c:	6816      	ldr	r6, [r2, #0]
    fe6e:	2100      	movs	r1, #0
    fe70:	6862      	ldr	r2, [r4, #4]
    fe72:	0030      	movs	r0, r6
    fe74:	f000 fcda 	bl	1082c <memchr>
    fe78:	2800      	cmp	r0, #0
    fe7a:	d001      	beq.n	fe80 <_printf_i+0x180>
    fe7c:	1b80      	subs	r0, r0, r6
    fe7e:	6060      	str	r0, [r4, #4]
    fe80:	6863      	ldr	r3, [r4, #4]
    fe82:	6123      	str	r3, [r4, #16]
    fe84:	2300      	movs	r3, #0
    fe86:	9a04      	ldr	r2, [sp, #16]
    fe88:	7013      	strb	r3, [r2, #0]
    fe8a:	e041      	b.n	ff10 <_printf_i+0x210>
    fe8c:	6923      	ldr	r3, [r4, #16]
    fe8e:	0032      	movs	r2, r6
    fe90:	9906      	ldr	r1, [sp, #24]
    fe92:	9805      	ldr	r0, [sp, #20]
    fe94:	9d07      	ldr	r5, [sp, #28]
    fe96:	47a8      	blx	r5
    fe98:	1c43      	adds	r3, r0, #1
    fe9a:	d043      	beq.n	ff24 <_printf_i+0x224>
    fe9c:	6823      	ldr	r3, [r4, #0]
    fe9e:	2500      	movs	r5, #0
    fea0:	079b      	lsls	r3, r3, #30
    fea2:	d40f      	bmi.n	fec4 <_printf_i+0x1c4>
    fea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fea6:	68e0      	ldr	r0, [r4, #12]
    fea8:	4298      	cmp	r0, r3
    feaa:	da3d      	bge.n	ff28 <_printf_i+0x228>
    feac:	0018      	movs	r0, r3
    feae:	e03b      	b.n	ff28 <_printf_i+0x228>
    feb0:	0022      	movs	r2, r4
    feb2:	2301      	movs	r3, #1
    feb4:	3219      	adds	r2, #25
    feb6:	9906      	ldr	r1, [sp, #24]
    feb8:	9805      	ldr	r0, [sp, #20]
    feba:	9e07      	ldr	r6, [sp, #28]
    febc:	47b0      	blx	r6
    febe:	1c43      	adds	r3, r0, #1
    fec0:	d030      	beq.n	ff24 <_printf_i+0x224>
    fec2:	3501      	adds	r5, #1
    fec4:	68e3      	ldr	r3, [r4, #12]
    fec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fec8:	1a9b      	subs	r3, r3, r2
    feca:	429d      	cmp	r5, r3
    fecc:	dbf0      	blt.n	feb0 <_printf_i+0x1b0>
    fece:	e7e9      	b.n	fea4 <_printf_i+0x1a4>
    fed0:	2d00      	cmp	r5, #0
    fed2:	d0a9      	beq.n	fe28 <_printf_i+0x128>
    fed4:	9e04      	ldr	r6, [sp, #16]
    fed6:	0028      	movs	r0, r5
    fed8:	0039      	movs	r1, r7
    feda:	f7fe fddf 	bl	ea9c <__aeabi_uidivmod>
    fede:	9b03      	ldr	r3, [sp, #12]
    fee0:	3e01      	subs	r6, #1
    fee2:	5c5b      	ldrb	r3, [r3, r1]
    fee4:	0028      	movs	r0, r5
    fee6:	7033      	strb	r3, [r6, #0]
    fee8:	0039      	movs	r1, r7
    feea:	f7fe fd51 	bl	e990 <__udivsi3>
    feee:	1e05      	subs	r5, r0, #0
    fef0:	d1f1      	bne.n	fed6 <_printf_i+0x1d6>
    fef2:	2f08      	cmp	r7, #8
    fef4:	d109      	bne.n	ff0a <_printf_i+0x20a>
    fef6:	6823      	ldr	r3, [r4, #0]
    fef8:	07db      	lsls	r3, r3, #31
    fefa:	d506      	bpl.n	ff0a <_printf_i+0x20a>
    fefc:	6863      	ldr	r3, [r4, #4]
    fefe:	6922      	ldr	r2, [r4, #16]
    ff00:	4293      	cmp	r3, r2
    ff02:	dc02      	bgt.n	ff0a <_printf_i+0x20a>
    ff04:	2330      	movs	r3, #48	; 0x30
    ff06:	3e01      	subs	r6, #1
    ff08:	7033      	strb	r3, [r6, #0]
    ff0a:	9b04      	ldr	r3, [sp, #16]
    ff0c:	1b9b      	subs	r3, r3, r6
    ff0e:	6123      	str	r3, [r4, #16]
    ff10:	9b07      	ldr	r3, [sp, #28]
    ff12:	aa09      	add	r2, sp, #36	; 0x24
    ff14:	9300      	str	r3, [sp, #0]
    ff16:	0021      	movs	r1, r4
    ff18:	9b06      	ldr	r3, [sp, #24]
    ff1a:	9805      	ldr	r0, [sp, #20]
    ff1c:	f7ff fe82 	bl	fc24 <_printf_common>
    ff20:	1c43      	adds	r3, r0, #1
    ff22:	d1b3      	bne.n	fe8c <_printf_i+0x18c>
    ff24:	2001      	movs	r0, #1
    ff26:	4240      	negs	r0, r0
    ff28:	b00b      	add	sp, #44	; 0x2c
    ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff2c:	00011a0e 	.word	0x00011a0e
    ff30:	000119fd 	.word	0x000119fd

0000ff34 <iprintf>:
    ff34:	b40f      	push	{r0, r1, r2, r3}
    ff36:	4b0b      	ldr	r3, [pc, #44]	; (ff64 <iprintf+0x30>)
    ff38:	b513      	push	{r0, r1, r4, lr}
    ff3a:	681c      	ldr	r4, [r3, #0]
    ff3c:	2c00      	cmp	r4, #0
    ff3e:	d005      	beq.n	ff4c <iprintf+0x18>
    ff40:	69a3      	ldr	r3, [r4, #24]
    ff42:	2b00      	cmp	r3, #0
    ff44:	d102      	bne.n	ff4c <iprintf+0x18>
    ff46:	0020      	movs	r0, r4
    ff48:	f000 fb64 	bl	10614 <__sinit>
    ff4c:	ab05      	add	r3, sp, #20
    ff4e:	9a04      	ldr	r2, [sp, #16]
    ff50:	68a1      	ldr	r1, [r4, #8]
    ff52:	0020      	movs	r0, r4
    ff54:	9301      	str	r3, [sp, #4]
    ff56:	f7ff fd49 	bl	f9ec <_vfiprintf_r>
    ff5a:	bc16      	pop	{r1, r2, r4}
    ff5c:	bc08      	pop	{r3}
    ff5e:	b004      	add	sp, #16
    ff60:	4718      	bx	r3
    ff62:	46c0      	nop			; (mov r8, r8)
    ff64:	20000034 	.word	0x20000034

0000ff68 <_puts_r>:
    ff68:	b570      	push	{r4, r5, r6, lr}
    ff6a:	0005      	movs	r5, r0
    ff6c:	000e      	movs	r6, r1
    ff6e:	2800      	cmp	r0, #0
    ff70:	d004      	beq.n	ff7c <_puts_r+0x14>
    ff72:	6983      	ldr	r3, [r0, #24]
    ff74:	2b00      	cmp	r3, #0
    ff76:	d101      	bne.n	ff7c <_puts_r+0x14>
    ff78:	f000 fb4c 	bl	10614 <__sinit>
    ff7c:	69ab      	ldr	r3, [r5, #24]
    ff7e:	68ac      	ldr	r4, [r5, #8]
    ff80:	2b00      	cmp	r3, #0
    ff82:	d102      	bne.n	ff8a <_puts_r+0x22>
    ff84:	0028      	movs	r0, r5
    ff86:	f000 fb45 	bl	10614 <__sinit>
    ff8a:	4b24      	ldr	r3, [pc, #144]	; (1001c <_puts_r+0xb4>)
    ff8c:	429c      	cmp	r4, r3
    ff8e:	d10f      	bne.n	ffb0 <_puts_r+0x48>
    ff90:	686c      	ldr	r4, [r5, #4]
    ff92:	89a3      	ldrh	r3, [r4, #12]
    ff94:	071b      	lsls	r3, r3, #28
    ff96:	d502      	bpl.n	ff9e <_puts_r+0x36>
    ff98:	6923      	ldr	r3, [r4, #16]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d120      	bne.n	ffe0 <_puts_r+0x78>
    ff9e:	0021      	movs	r1, r4
    ffa0:	0028      	movs	r0, r5
    ffa2:	f000 f9c1 	bl	10328 <__swsetup_r>
    ffa6:	2800      	cmp	r0, #0
    ffa8:	d01a      	beq.n	ffe0 <_puts_r+0x78>
    ffaa:	2001      	movs	r0, #1
    ffac:	4240      	negs	r0, r0
    ffae:	bd70      	pop	{r4, r5, r6, pc}
    ffb0:	4b1b      	ldr	r3, [pc, #108]	; (10020 <_puts_r+0xb8>)
    ffb2:	429c      	cmp	r4, r3
    ffb4:	d101      	bne.n	ffba <_puts_r+0x52>
    ffb6:	68ac      	ldr	r4, [r5, #8]
    ffb8:	e7eb      	b.n	ff92 <_puts_r+0x2a>
    ffba:	4b1a      	ldr	r3, [pc, #104]	; (10024 <_puts_r+0xbc>)
    ffbc:	429c      	cmp	r4, r3
    ffbe:	d1e8      	bne.n	ff92 <_puts_r+0x2a>
    ffc0:	68ec      	ldr	r4, [r5, #12]
    ffc2:	e7e6      	b.n	ff92 <_puts_r+0x2a>
    ffc4:	3b01      	subs	r3, #1
    ffc6:	3601      	adds	r6, #1
    ffc8:	60a3      	str	r3, [r4, #8]
    ffca:	2b00      	cmp	r3, #0
    ffcc:	da04      	bge.n	ffd8 <_puts_r+0x70>
    ffce:	69a2      	ldr	r2, [r4, #24]
    ffd0:	4293      	cmp	r3, r2
    ffd2:	db16      	blt.n	10002 <_puts_r+0x9a>
    ffd4:	290a      	cmp	r1, #10
    ffd6:	d014      	beq.n	10002 <_puts_r+0x9a>
    ffd8:	6823      	ldr	r3, [r4, #0]
    ffda:	1c5a      	adds	r2, r3, #1
    ffdc:	6022      	str	r2, [r4, #0]
    ffde:	7019      	strb	r1, [r3, #0]
    ffe0:	7831      	ldrb	r1, [r6, #0]
    ffe2:	68a3      	ldr	r3, [r4, #8]
    ffe4:	2900      	cmp	r1, #0
    ffe6:	d1ed      	bne.n	ffc4 <_puts_r+0x5c>
    ffe8:	3b01      	subs	r3, #1
    ffea:	60a3      	str	r3, [r4, #8]
    ffec:	2b00      	cmp	r3, #0
    ffee:	da0f      	bge.n	10010 <_puts_r+0xa8>
    fff0:	0022      	movs	r2, r4
    fff2:	310a      	adds	r1, #10
    fff4:	0028      	movs	r0, r5
    fff6:	f000 f941 	bl	1027c <__swbuf_r>
    fffa:	1c43      	adds	r3, r0, #1
    fffc:	d0d5      	beq.n	ffaa <_puts_r+0x42>
    fffe:	200a      	movs	r0, #10
   10000:	e7d5      	b.n	ffae <_puts_r+0x46>
   10002:	0022      	movs	r2, r4
   10004:	0028      	movs	r0, r5
   10006:	f000 f939 	bl	1027c <__swbuf_r>
   1000a:	1c43      	adds	r3, r0, #1
   1000c:	d1e8      	bne.n	ffe0 <_puts_r+0x78>
   1000e:	e7cc      	b.n	ffaa <_puts_r+0x42>
   10010:	200a      	movs	r0, #10
   10012:	6823      	ldr	r3, [r4, #0]
   10014:	1c5a      	adds	r2, r3, #1
   10016:	6022      	str	r2, [r4, #0]
   10018:	7018      	strb	r0, [r3, #0]
   1001a:	e7c8      	b.n	ffae <_puts_r+0x46>
   1001c:	00011a40 	.word	0x00011a40
   10020:	00011a60 	.word	0x00011a60
   10024:	00011a20 	.word	0x00011a20

00010028 <puts>:
   10028:	b510      	push	{r4, lr}
   1002a:	4b03      	ldr	r3, [pc, #12]	; (10038 <puts+0x10>)
   1002c:	0001      	movs	r1, r0
   1002e:	6818      	ldr	r0, [r3, #0]
   10030:	f7ff ff9a 	bl	ff68 <_puts_r>
   10034:	bd10      	pop	{r4, pc}
   10036:	46c0      	nop			; (mov r8, r8)
   10038:	20000034 	.word	0x20000034

0001003c <srand>:
   1003c:	4b10      	ldr	r3, [pc, #64]	; (10080 <srand+0x44>)
   1003e:	b570      	push	{r4, r5, r6, lr}
   10040:	681c      	ldr	r4, [r3, #0]
   10042:	0005      	movs	r5, r0
   10044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10046:	2b00      	cmp	r3, #0
   10048:	d115      	bne.n	10076 <srand+0x3a>
   1004a:	2018      	movs	r0, #24
   1004c:	f000 fbe4 	bl	10818 <malloc>
   10050:	4b0c      	ldr	r3, [pc, #48]	; (10084 <srand+0x48>)
   10052:	63a0      	str	r0, [r4, #56]	; 0x38
   10054:	8003      	strh	r3, [r0, #0]
   10056:	4b0c      	ldr	r3, [pc, #48]	; (10088 <srand+0x4c>)
   10058:	2201      	movs	r2, #1
   1005a:	8043      	strh	r3, [r0, #2]
   1005c:	4b0b      	ldr	r3, [pc, #44]	; (1008c <srand+0x50>)
   1005e:	8083      	strh	r3, [r0, #4]
   10060:	4b0b      	ldr	r3, [pc, #44]	; (10090 <srand+0x54>)
   10062:	80c3      	strh	r3, [r0, #6]
   10064:	4b0b      	ldr	r3, [pc, #44]	; (10094 <srand+0x58>)
   10066:	8103      	strh	r3, [r0, #8]
   10068:	2305      	movs	r3, #5
   1006a:	8143      	strh	r3, [r0, #10]
   1006c:	3306      	adds	r3, #6
   1006e:	8183      	strh	r3, [r0, #12]
   10070:	2300      	movs	r3, #0
   10072:	6102      	str	r2, [r0, #16]
   10074:	6143      	str	r3, [r0, #20]
   10076:	2200      	movs	r2, #0
   10078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1007a:	611d      	str	r5, [r3, #16]
   1007c:	615a      	str	r2, [r3, #20]
   1007e:	bd70      	pop	{r4, r5, r6, pc}
   10080:	20000034 	.word	0x20000034
   10084:	0000330e 	.word	0x0000330e
   10088:	ffffabcd 	.word	0xffffabcd
   1008c:	00001234 	.word	0x00001234
   10090:	ffffe66d 	.word	0xffffe66d
   10094:	ffffdeec 	.word	0xffffdeec

00010098 <rand>:
   10098:	4b15      	ldr	r3, [pc, #84]	; (100f0 <rand+0x58>)
   1009a:	b510      	push	{r4, lr}
   1009c:	681c      	ldr	r4, [r3, #0]
   1009e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   100a0:	2b00      	cmp	r3, #0
   100a2:	d115      	bne.n	100d0 <rand+0x38>
   100a4:	2018      	movs	r0, #24
   100a6:	f000 fbb7 	bl	10818 <malloc>
   100aa:	4b12      	ldr	r3, [pc, #72]	; (100f4 <rand+0x5c>)
   100ac:	63a0      	str	r0, [r4, #56]	; 0x38
   100ae:	8003      	strh	r3, [r0, #0]
   100b0:	4b11      	ldr	r3, [pc, #68]	; (100f8 <rand+0x60>)
   100b2:	2201      	movs	r2, #1
   100b4:	8043      	strh	r3, [r0, #2]
   100b6:	4b11      	ldr	r3, [pc, #68]	; (100fc <rand+0x64>)
   100b8:	8083      	strh	r3, [r0, #4]
   100ba:	4b11      	ldr	r3, [pc, #68]	; (10100 <rand+0x68>)
   100bc:	80c3      	strh	r3, [r0, #6]
   100be:	4b11      	ldr	r3, [pc, #68]	; (10104 <rand+0x6c>)
   100c0:	8103      	strh	r3, [r0, #8]
   100c2:	2305      	movs	r3, #5
   100c4:	8143      	strh	r3, [r0, #10]
   100c6:	3306      	adds	r3, #6
   100c8:	8183      	strh	r3, [r0, #12]
   100ca:	2300      	movs	r3, #0
   100cc:	6102      	str	r2, [r0, #16]
   100ce:	6143      	str	r3, [r0, #20]
   100d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   100d2:	4a0d      	ldr	r2, [pc, #52]	; (10108 <rand+0x70>)
   100d4:	6920      	ldr	r0, [r4, #16]
   100d6:	6961      	ldr	r1, [r4, #20]
   100d8:	4b0c      	ldr	r3, [pc, #48]	; (1010c <rand+0x74>)
   100da:	f7fe fe09 	bl	ecf0 <__aeabi_lmul>
   100de:	2201      	movs	r2, #1
   100e0:	2300      	movs	r3, #0
   100e2:	1880      	adds	r0, r0, r2
   100e4:	4159      	adcs	r1, r3
   100e6:	6120      	str	r0, [r4, #16]
   100e8:	6161      	str	r1, [r4, #20]
   100ea:	0048      	lsls	r0, r1, #1
   100ec:	0840      	lsrs	r0, r0, #1
   100ee:	bd10      	pop	{r4, pc}
   100f0:	20000034 	.word	0x20000034
   100f4:	0000330e 	.word	0x0000330e
   100f8:	ffffabcd 	.word	0xffffabcd
   100fc:	00001234 	.word	0x00001234
   10100:	ffffe66d 	.word	0xffffe66d
   10104:	ffffdeec 	.word	0xffffdeec
   10108:	4c957f2d 	.word	0x4c957f2d
   1010c:	5851f42d 	.word	0x5851f42d

00010110 <setbuf>:
   10110:	424a      	negs	r2, r1
   10112:	414a      	adcs	r2, r1
   10114:	2380      	movs	r3, #128	; 0x80
   10116:	b510      	push	{r4, lr}
   10118:	0052      	lsls	r2, r2, #1
   1011a:	00db      	lsls	r3, r3, #3
   1011c:	f000 f802 	bl	10124 <setvbuf>
   10120:	bd10      	pop	{r4, pc}
   10122:	Address 0x00010122 is out of bounds.


00010124 <setvbuf>:
   10124:	b5f0      	push	{r4, r5, r6, r7, lr}
   10126:	001d      	movs	r5, r3
   10128:	4b4f      	ldr	r3, [pc, #316]	; (10268 <setvbuf+0x144>)
   1012a:	b085      	sub	sp, #20
   1012c:	681e      	ldr	r6, [r3, #0]
   1012e:	0004      	movs	r4, r0
   10130:	000f      	movs	r7, r1
   10132:	9200      	str	r2, [sp, #0]
   10134:	2e00      	cmp	r6, #0
   10136:	d005      	beq.n	10144 <setvbuf+0x20>
   10138:	69b3      	ldr	r3, [r6, #24]
   1013a:	2b00      	cmp	r3, #0
   1013c:	d102      	bne.n	10144 <setvbuf+0x20>
   1013e:	0030      	movs	r0, r6
   10140:	f000 fa68 	bl	10614 <__sinit>
   10144:	4b49      	ldr	r3, [pc, #292]	; (1026c <setvbuf+0x148>)
   10146:	429c      	cmp	r4, r3
   10148:	d150      	bne.n	101ec <setvbuf+0xc8>
   1014a:	6874      	ldr	r4, [r6, #4]
   1014c:	9b00      	ldr	r3, [sp, #0]
   1014e:	2b02      	cmp	r3, #2
   10150:	d005      	beq.n	1015e <setvbuf+0x3a>
   10152:	2b01      	cmp	r3, #1
   10154:	d900      	bls.n	10158 <setvbuf+0x34>
   10156:	e084      	b.n	10262 <setvbuf+0x13e>
   10158:	2d00      	cmp	r5, #0
   1015a:	da00      	bge.n	1015e <setvbuf+0x3a>
   1015c:	e081      	b.n	10262 <setvbuf+0x13e>
   1015e:	0021      	movs	r1, r4
   10160:	0030      	movs	r0, r6
   10162:	f000 f9e9 	bl	10538 <_fflush_r>
   10166:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10168:	2900      	cmp	r1, #0
   1016a:	d008      	beq.n	1017e <setvbuf+0x5a>
   1016c:	0023      	movs	r3, r4
   1016e:	3344      	adds	r3, #68	; 0x44
   10170:	4299      	cmp	r1, r3
   10172:	d002      	beq.n	1017a <setvbuf+0x56>
   10174:	0030      	movs	r0, r6
   10176:	f000 fb65 	bl	10844 <_free_r>
   1017a:	2300      	movs	r3, #0
   1017c:	6363      	str	r3, [r4, #52]	; 0x34
   1017e:	2300      	movs	r3, #0
   10180:	61a3      	str	r3, [r4, #24]
   10182:	6063      	str	r3, [r4, #4]
   10184:	89a3      	ldrh	r3, [r4, #12]
   10186:	061b      	lsls	r3, r3, #24
   10188:	d503      	bpl.n	10192 <setvbuf+0x6e>
   1018a:	6921      	ldr	r1, [r4, #16]
   1018c:	0030      	movs	r0, r6
   1018e:	f000 fb59 	bl	10844 <_free_r>
   10192:	89a3      	ldrh	r3, [r4, #12]
   10194:	4a36      	ldr	r2, [pc, #216]	; (10270 <setvbuf+0x14c>)
   10196:	4013      	ands	r3, r2
   10198:	81a3      	strh	r3, [r4, #12]
   1019a:	9b00      	ldr	r3, [sp, #0]
   1019c:	2b02      	cmp	r3, #2
   1019e:	d05a      	beq.n	10256 <setvbuf+0x132>
   101a0:	ab03      	add	r3, sp, #12
   101a2:	aa02      	add	r2, sp, #8
   101a4:	0021      	movs	r1, r4
   101a6:	0030      	movs	r0, r6
   101a8:	f000 faca 	bl	10740 <__swhatbuf_r>
   101ac:	89a3      	ldrh	r3, [r4, #12]
   101ae:	4318      	orrs	r0, r3
   101b0:	81a0      	strh	r0, [r4, #12]
   101b2:	2d00      	cmp	r5, #0
   101b4:	d124      	bne.n	10200 <setvbuf+0xdc>
   101b6:	9d02      	ldr	r5, [sp, #8]
   101b8:	0028      	movs	r0, r5
   101ba:	f000 fb2d 	bl	10818 <malloc>
   101be:	9501      	str	r5, [sp, #4]
   101c0:	1e07      	subs	r7, r0, #0
   101c2:	d142      	bne.n	1024a <setvbuf+0x126>
   101c4:	9b02      	ldr	r3, [sp, #8]
   101c6:	9301      	str	r3, [sp, #4]
   101c8:	42ab      	cmp	r3, r5
   101ca:	d139      	bne.n	10240 <setvbuf+0x11c>
   101cc:	2001      	movs	r0, #1
   101ce:	4240      	negs	r0, r0
   101d0:	2302      	movs	r3, #2
   101d2:	89a2      	ldrh	r2, [r4, #12]
   101d4:	4313      	orrs	r3, r2
   101d6:	81a3      	strh	r3, [r4, #12]
   101d8:	2300      	movs	r3, #0
   101da:	60a3      	str	r3, [r4, #8]
   101dc:	0023      	movs	r3, r4
   101de:	3347      	adds	r3, #71	; 0x47
   101e0:	6023      	str	r3, [r4, #0]
   101e2:	6123      	str	r3, [r4, #16]
   101e4:	2301      	movs	r3, #1
   101e6:	6163      	str	r3, [r4, #20]
   101e8:	b005      	add	sp, #20
   101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ec:	4b21      	ldr	r3, [pc, #132]	; (10274 <setvbuf+0x150>)
   101ee:	429c      	cmp	r4, r3
   101f0:	d101      	bne.n	101f6 <setvbuf+0xd2>
   101f2:	68b4      	ldr	r4, [r6, #8]
   101f4:	e7aa      	b.n	1014c <setvbuf+0x28>
   101f6:	4b20      	ldr	r3, [pc, #128]	; (10278 <setvbuf+0x154>)
   101f8:	429c      	cmp	r4, r3
   101fa:	d1a7      	bne.n	1014c <setvbuf+0x28>
   101fc:	68f4      	ldr	r4, [r6, #12]
   101fe:	e7a5      	b.n	1014c <setvbuf+0x28>
   10200:	2f00      	cmp	r7, #0
   10202:	d0d9      	beq.n	101b8 <setvbuf+0x94>
   10204:	69b3      	ldr	r3, [r6, #24]
   10206:	2b00      	cmp	r3, #0
   10208:	d102      	bne.n	10210 <setvbuf+0xec>
   1020a:	0030      	movs	r0, r6
   1020c:	f000 fa02 	bl	10614 <__sinit>
   10210:	9b00      	ldr	r3, [sp, #0]
   10212:	2b01      	cmp	r3, #1
   10214:	d103      	bne.n	1021e <setvbuf+0xfa>
   10216:	89a3      	ldrh	r3, [r4, #12]
   10218:	9a00      	ldr	r2, [sp, #0]
   1021a:	431a      	orrs	r2, r3
   1021c:	81a2      	strh	r2, [r4, #12]
   1021e:	2008      	movs	r0, #8
   10220:	89a3      	ldrh	r3, [r4, #12]
   10222:	6027      	str	r7, [r4, #0]
   10224:	6127      	str	r7, [r4, #16]
   10226:	6165      	str	r5, [r4, #20]
   10228:	4018      	ands	r0, r3
   1022a:	d018      	beq.n	1025e <setvbuf+0x13a>
   1022c:	2001      	movs	r0, #1
   1022e:	4018      	ands	r0, r3
   10230:	2300      	movs	r3, #0
   10232:	4298      	cmp	r0, r3
   10234:	d011      	beq.n	1025a <setvbuf+0x136>
   10236:	426d      	negs	r5, r5
   10238:	60a3      	str	r3, [r4, #8]
   1023a:	61a5      	str	r5, [r4, #24]
   1023c:	0018      	movs	r0, r3
   1023e:	e7d3      	b.n	101e8 <setvbuf+0xc4>
   10240:	9801      	ldr	r0, [sp, #4]
   10242:	f000 fae9 	bl	10818 <malloc>
   10246:	1e07      	subs	r7, r0, #0
   10248:	d0c0      	beq.n	101cc <setvbuf+0xa8>
   1024a:	2380      	movs	r3, #128	; 0x80
   1024c:	89a2      	ldrh	r2, [r4, #12]
   1024e:	9d01      	ldr	r5, [sp, #4]
   10250:	4313      	orrs	r3, r2
   10252:	81a3      	strh	r3, [r4, #12]
   10254:	e7d6      	b.n	10204 <setvbuf+0xe0>
   10256:	2000      	movs	r0, #0
   10258:	e7ba      	b.n	101d0 <setvbuf+0xac>
   1025a:	60a5      	str	r5, [r4, #8]
   1025c:	e7c4      	b.n	101e8 <setvbuf+0xc4>
   1025e:	60a0      	str	r0, [r4, #8]
   10260:	e7c2      	b.n	101e8 <setvbuf+0xc4>
   10262:	2001      	movs	r0, #1
   10264:	4240      	negs	r0, r0
   10266:	e7bf      	b.n	101e8 <setvbuf+0xc4>
   10268:	20000034 	.word	0x20000034
   1026c:	00011a40 	.word	0x00011a40
   10270:	fffff35c 	.word	0xfffff35c
   10274:	00011a60 	.word	0x00011a60
   10278:	00011a20 	.word	0x00011a20

0001027c <__swbuf_r>:
   1027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1027e:	0005      	movs	r5, r0
   10280:	000e      	movs	r6, r1
   10282:	0014      	movs	r4, r2
   10284:	2800      	cmp	r0, #0
   10286:	d004      	beq.n	10292 <__swbuf_r+0x16>
   10288:	6983      	ldr	r3, [r0, #24]
   1028a:	2b00      	cmp	r3, #0
   1028c:	d101      	bne.n	10292 <__swbuf_r+0x16>
   1028e:	f000 f9c1 	bl	10614 <__sinit>
   10292:	4b22      	ldr	r3, [pc, #136]	; (1031c <__swbuf_r+0xa0>)
   10294:	429c      	cmp	r4, r3
   10296:	d12d      	bne.n	102f4 <__swbuf_r+0x78>
   10298:	686c      	ldr	r4, [r5, #4]
   1029a:	69a3      	ldr	r3, [r4, #24]
   1029c:	60a3      	str	r3, [r4, #8]
   1029e:	89a3      	ldrh	r3, [r4, #12]
   102a0:	071b      	lsls	r3, r3, #28
   102a2:	d531      	bpl.n	10308 <__swbuf_r+0x8c>
   102a4:	6923      	ldr	r3, [r4, #16]
   102a6:	2b00      	cmp	r3, #0
   102a8:	d02e      	beq.n	10308 <__swbuf_r+0x8c>
   102aa:	6823      	ldr	r3, [r4, #0]
   102ac:	6922      	ldr	r2, [r4, #16]
   102ae:	b2f7      	uxtb	r7, r6
   102b0:	1a98      	subs	r0, r3, r2
   102b2:	6963      	ldr	r3, [r4, #20]
   102b4:	b2f6      	uxtb	r6, r6
   102b6:	4298      	cmp	r0, r3
   102b8:	db05      	blt.n	102c6 <__swbuf_r+0x4a>
   102ba:	0021      	movs	r1, r4
   102bc:	0028      	movs	r0, r5
   102be:	f000 f93b 	bl	10538 <_fflush_r>
   102c2:	2800      	cmp	r0, #0
   102c4:	d126      	bne.n	10314 <__swbuf_r+0x98>
   102c6:	68a3      	ldr	r3, [r4, #8]
   102c8:	3001      	adds	r0, #1
   102ca:	3b01      	subs	r3, #1
   102cc:	60a3      	str	r3, [r4, #8]
   102ce:	6823      	ldr	r3, [r4, #0]
   102d0:	1c5a      	adds	r2, r3, #1
   102d2:	6022      	str	r2, [r4, #0]
   102d4:	701f      	strb	r7, [r3, #0]
   102d6:	6963      	ldr	r3, [r4, #20]
   102d8:	4298      	cmp	r0, r3
   102da:	d004      	beq.n	102e6 <__swbuf_r+0x6a>
   102dc:	89a3      	ldrh	r3, [r4, #12]
   102de:	07db      	lsls	r3, r3, #31
   102e0:	d51a      	bpl.n	10318 <__swbuf_r+0x9c>
   102e2:	2e0a      	cmp	r6, #10
   102e4:	d118      	bne.n	10318 <__swbuf_r+0x9c>
   102e6:	0021      	movs	r1, r4
   102e8:	0028      	movs	r0, r5
   102ea:	f000 f925 	bl	10538 <_fflush_r>
   102ee:	2800      	cmp	r0, #0
   102f0:	d012      	beq.n	10318 <__swbuf_r+0x9c>
   102f2:	e00f      	b.n	10314 <__swbuf_r+0x98>
   102f4:	4b0a      	ldr	r3, [pc, #40]	; (10320 <__swbuf_r+0xa4>)
   102f6:	429c      	cmp	r4, r3
   102f8:	d101      	bne.n	102fe <__swbuf_r+0x82>
   102fa:	68ac      	ldr	r4, [r5, #8]
   102fc:	e7cd      	b.n	1029a <__swbuf_r+0x1e>
   102fe:	4b09      	ldr	r3, [pc, #36]	; (10324 <__swbuf_r+0xa8>)
   10300:	429c      	cmp	r4, r3
   10302:	d1ca      	bne.n	1029a <__swbuf_r+0x1e>
   10304:	68ec      	ldr	r4, [r5, #12]
   10306:	e7c8      	b.n	1029a <__swbuf_r+0x1e>
   10308:	0021      	movs	r1, r4
   1030a:	0028      	movs	r0, r5
   1030c:	f000 f80c 	bl	10328 <__swsetup_r>
   10310:	2800      	cmp	r0, #0
   10312:	d0ca      	beq.n	102aa <__swbuf_r+0x2e>
   10314:	2601      	movs	r6, #1
   10316:	4276      	negs	r6, r6
   10318:	0030      	movs	r0, r6
   1031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1031c:	00011a40 	.word	0x00011a40
   10320:	00011a60 	.word	0x00011a60
   10324:	00011a20 	.word	0x00011a20

00010328 <__swsetup_r>:
   10328:	4b36      	ldr	r3, [pc, #216]	; (10404 <__swsetup_r+0xdc>)
   1032a:	b570      	push	{r4, r5, r6, lr}
   1032c:	681d      	ldr	r5, [r3, #0]
   1032e:	0006      	movs	r6, r0
   10330:	000c      	movs	r4, r1
   10332:	2d00      	cmp	r5, #0
   10334:	d005      	beq.n	10342 <__swsetup_r+0x1a>
   10336:	69ab      	ldr	r3, [r5, #24]
   10338:	2b00      	cmp	r3, #0
   1033a:	d102      	bne.n	10342 <__swsetup_r+0x1a>
   1033c:	0028      	movs	r0, r5
   1033e:	f000 f969 	bl	10614 <__sinit>
   10342:	4b31      	ldr	r3, [pc, #196]	; (10408 <__swsetup_r+0xe0>)
   10344:	429c      	cmp	r4, r3
   10346:	d10f      	bne.n	10368 <__swsetup_r+0x40>
   10348:	686c      	ldr	r4, [r5, #4]
   1034a:	230c      	movs	r3, #12
   1034c:	5ee2      	ldrsh	r2, [r4, r3]
   1034e:	b293      	uxth	r3, r2
   10350:	0719      	lsls	r1, r3, #28
   10352:	d42d      	bmi.n	103b0 <__swsetup_r+0x88>
   10354:	06d9      	lsls	r1, r3, #27
   10356:	d411      	bmi.n	1037c <__swsetup_r+0x54>
   10358:	2309      	movs	r3, #9
   1035a:	2001      	movs	r0, #1
   1035c:	6033      	str	r3, [r6, #0]
   1035e:	3337      	adds	r3, #55	; 0x37
   10360:	4313      	orrs	r3, r2
   10362:	81a3      	strh	r3, [r4, #12]
   10364:	4240      	negs	r0, r0
   10366:	bd70      	pop	{r4, r5, r6, pc}
   10368:	4b28      	ldr	r3, [pc, #160]	; (1040c <__swsetup_r+0xe4>)
   1036a:	429c      	cmp	r4, r3
   1036c:	d101      	bne.n	10372 <__swsetup_r+0x4a>
   1036e:	68ac      	ldr	r4, [r5, #8]
   10370:	e7eb      	b.n	1034a <__swsetup_r+0x22>
   10372:	4b27      	ldr	r3, [pc, #156]	; (10410 <__swsetup_r+0xe8>)
   10374:	429c      	cmp	r4, r3
   10376:	d1e8      	bne.n	1034a <__swsetup_r+0x22>
   10378:	68ec      	ldr	r4, [r5, #12]
   1037a:	e7e6      	b.n	1034a <__swsetup_r+0x22>
   1037c:	075b      	lsls	r3, r3, #29
   1037e:	d513      	bpl.n	103a8 <__swsetup_r+0x80>
   10380:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10382:	2900      	cmp	r1, #0
   10384:	d008      	beq.n	10398 <__swsetup_r+0x70>
   10386:	0023      	movs	r3, r4
   10388:	3344      	adds	r3, #68	; 0x44
   1038a:	4299      	cmp	r1, r3
   1038c:	d002      	beq.n	10394 <__swsetup_r+0x6c>
   1038e:	0030      	movs	r0, r6
   10390:	f000 fa58 	bl	10844 <_free_r>
   10394:	2300      	movs	r3, #0
   10396:	6363      	str	r3, [r4, #52]	; 0x34
   10398:	2224      	movs	r2, #36	; 0x24
   1039a:	89a3      	ldrh	r3, [r4, #12]
   1039c:	4393      	bics	r3, r2
   1039e:	81a3      	strh	r3, [r4, #12]
   103a0:	2300      	movs	r3, #0
   103a2:	6063      	str	r3, [r4, #4]
   103a4:	6923      	ldr	r3, [r4, #16]
   103a6:	6023      	str	r3, [r4, #0]
   103a8:	2308      	movs	r3, #8
   103aa:	89a2      	ldrh	r2, [r4, #12]
   103ac:	4313      	orrs	r3, r2
   103ae:	81a3      	strh	r3, [r4, #12]
   103b0:	6923      	ldr	r3, [r4, #16]
   103b2:	2b00      	cmp	r3, #0
   103b4:	d10b      	bne.n	103ce <__swsetup_r+0xa6>
   103b6:	21a0      	movs	r1, #160	; 0xa0
   103b8:	2280      	movs	r2, #128	; 0x80
   103ba:	89a3      	ldrh	r3, [r4, #12]
   103bc:	0089      	lsls	r1, r1, #2
   103be:	0092      	lsls	r2, r2, #2
   103c0:	400b      	ands	r3, r1
   103c2:	4293      	cmp	r3, r2
   103c4:	d003      	beq.n	103ce <__swsetup_r+0xa6>
   103c6:	0021      	movs	r1, r4
   103c8:	0030      	movs	r0, r6
   103ca:	f000 f9e1 	bl	10790 <__smakebuf_r>
   103ce:	2301      	movs	r3, #1
   103d0:	89a2      	ldrh	r2, [r4, #12]
   103d2:	4013      	ands	r3, r2
   103d4:	d011      	beq.n	103fa <__swsetup_r+0xd2>
   103d6:	2300      	movs	r3, #0
   103d8:	60a3      	str	r3, [r4, #8]
   103da:	6963      	ldr	r3, [r4, #20]
   103dc:	425b      	negs	r3, r3
   103de:	61a3      	str	r3, [r4, #24]
   103e0:	2000      	movs	r0, #0
   103e2:	6923      	ldr	r3, [r4, #16]
   103e4:	4283      	cmp	r3, r0
   103e6:	d1be      	bne.n	10366 <__swsetup_r+0x3e>
   103e8:	230c      	movs	r3, #12
   103ea:	5ee2      	ldrsh	r2, [r4, r3]
   103ec:	0613      	lsls	r3, r2, #24
   103ee:	d5ba      	bpl.n	10366 <__swsetup_r+0x3e>
   103f0:	2340      	movs	r3, #64	; 0x40
   103f2:	4313      	orrs	r3, r2
   103f4:	81a3      	strh	r3, [r4, #12]
   103f6:	3801      	subs	r0, #1
   103f8:	e7b5      	b.n	10366 <__swsetup_r+0x3e>
   103fa:	0792      	lsls	r2, r2, #30
   103fc:	d400      	bmi.n	10400 <__swsetup_r+0xd8>
   103fe:	6963      	ldr	r3, [r4, #20]
   10400:	60a3      	str	r3, [r4, #8]
   10402:	e7ed      	b.n	103e0 <__swsetup_r+0xb8>
   10404:	20000034 	.word	0x20000034
   10408:	00011a40 	.word	0x00011a40
   1040c:	00011a60 	.word	0x00011a60
   10410:	00011a20 	.word	0x00011a20

00010414 <abort>:
   10414:	b510      	push	{r4, lr}
   10416:	2006      	movs	r0, #6
   10418:	f000 faf8 	bl	10a0c <raise>
   1041c:	2001      	movs	r0, #1
   1041e:	f7f8 f853 	bl	84c8 <_exit>
   10422:	Address 0x00010422 is out of bounds.


00010424 <__sflush_r>:
   10424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10426:	898a      	ldrh	r2, [r1, #12]
   10428:	0005      	movs	r5, r0
   1042a:	000c      	movs	r4, r1
   1042c:	0713      	lsls	r3, r2, #28
   1042e:	d460      	bmi.n	104f2 <__sflush_r+0xce>
   10430:	684b      	ldr	r3, [r1, #4]
   10432:	2b00      	cmp	r3, #0
   10434:	dc04      	bgt.n	10440 <__sflush_r+0x1c>
   10436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10438:	2b00      	cmp	r3, #0
   1043a:	dc01      	bgt.n	10440 <__sflush_r+0x1c>
   1043c:	2000      	movs	r0, #0
   1043e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10440:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10442:	2f00      	cmp	r7, #0
   10444:	d0fa      	beq.n	1043c <__sflush_r+0x18>
   10446:	2300      	movs	r3, #0
   10448:	682e      	ldr	r6, [r5, #0]
   1044a:	602b      	str	r3, [r5, #0]
   1044c:	2380      	movs	r3, #128	; 0x80
   1044e:	015b      	lsls	r3, r3, #5
   10450:	401a      	ands	r2, r3
   10452:	d034      	beq.n	104be <__sflush_r+0x9a>
   10454:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10456:	89a3      	ldrh	r3, [r4, #12]
   10458:	075b      	lsls	r3, r3, #29
   1045a:	d506      	bpl.n	1046a <__sflush_r+0x46>
   1045c:	6863      	ldr	r3, [r4, #4]
   1045e:	1ac0      	subs	r0, r0, r3
   10460:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10462:	2b00      	cmp	r3, #0
   10464:	d001      	beq.n	1046a <__sflush_r+0x46>
   10466:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10468:	1ac0      	subs	r0, r0, r3
   1046a:	0002      	movs	r2, r0
   1046c:	6a21      	ldr	r1, [r4, #32]
   1046e:	2300      	movs	r3, #0
   10470:	0028      	movs	r0, r5
   10472:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10474:	47b8      	blx	r7
   10476:	89a1      	ldrh	r1, [r4, #12]
   10478:	1c43      	adds	r3, r0, #1
   1047a:	d106      	bne.n	1048a <__sflush_r+0x66>
   1047c:	682b      	ldr	r3, [r5, #0]
   1047e:	2b1d      	cmp	r3, #29
   10480:	d831      	bhi.n	104e6 <__sflush_r+0xc2>
   10482:	4a2c      	ldr	r2, [pc, #176]	; (10534 <__sflush_r+0x110>)
   10484:	40da      	lsrs	r2, r3
   10486:	07d3      	lsls	r3, r2, #31
   10488:	d52d      	bpl.n	104e6 <__sflush_r+0xc2>
   1048a:	2300      	movs	r3, #0
   1048c:	6063      	str	r3, [r4, #4]
   1048e:	6923      	ldr	r3, [r4, #16]
   10490:	6023      	str	r3, [r4, #0]
   10492:	04cb      	lsls	r3, r1, #19
   10494:	d505      	bpl.n	104a2 <__sflush_r+0x7e>
   10496:	1c43      	adds	r3, r0, #1
   10498:	d102      	bne.n	104a0 <__sflush_r+0x7c>
   1049a:	682b      	ldr	r3, [r5, #0]
   1049c:	2b00      	cmp	r3, #0
   1049e:	d100      	bne.n	104a2 <__sflush_r+0x7e>
   104a0:	6560      	str	r0, [r4, #84]	; 0x54
   104a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   104a4:	602e      	str	r6, [r5, #0]
   104a6:	2900      	cmp	r1, #0
   104a8:	d0c8      	beq.n	1043c <__sflush_r+0x18>
   104aa:	0023      	movs	r3, r4
   104ac:	3344      	adds	r3, #68	; 0x44
   104ae:	4299      	cmp	r1, r3
   104b0:	d002      	beq.n	104b8 <__sflush_r+0x94>
   104b2:	0028      	movs	r0, r5
   104b4:	f000 f9c6 	bl	10844 <_free_r>
   104b8:	2000      	movs	r0, #0
   104ba:	6360      	str	r0, [r4, #52]	; 0x34
   104bc:	e7bf      	b.n	1043e <__sflush_r+0x1a>
   104be:	2301      	movs	r3, #1
   104c0:	6a21      	ldr	r1, [r4, #32]
   104c2:	0028      	movs	r0, r5
   104c4:	47b8      	blx	r7
   104c6:	1c43      	adds	r3, r0, #1
   104c8:	d1c5      	bne.n	10456 <__sflush_r+0x32>
   104ca:	682b      	ldr	r3, [r5, #0]
   104cc:	2b00      	cmp	r3, #0
   104ce:	d0c2      	beq.n	10456 <__sflush_r+0x32>
   104d0:	2b1d      	cmp	r3, #29
   104d2:	d001      	beq.n	104d8 <__sflush_r+0xb4>
   104d4:	2b16      	cmp	r3, #22
   104d6:	d101      	bne.n	104dc <__sflush_r+0xb8>
   104d8:	602e      	str	r6, [r5, #0]
   104da:	e7af      	b.n	1043c <__sflush_r+0x18>
   104dc:	2340      	movs	r3, #64	; 0x40
   104de:	89a2      	ldrh	r2, [r4, #12]
   104e0:	4313      	orrs	r3, r2
   104e2:	81a3      	strh	r3, [r4, #12]
   104e4:	e7ab      	b.n	1043e <__sflush_r+0x1a>
   104e6:	2340      	movs	r3, #64	; 0x40
   104e8:	430b      	orrs	r3, r1
   104ea:	2001      	movs	r0, #1
   104ec:	81a3      	strh	r3, [r4, #12]
   104ee:	4240      	negs	r0, r0
   104f0:	e7a5      	b.n	1043e <__sflush_r+0x1a>
   104f2:	690f      	ldr	r7, [r1, #16]
   104f4:	2f00      	cmp	r7, #0
   104f6:	d0a1      	beq.n	1043c <__sflush_r+0x18>
   104f8:	680b      	ldr	r3, [r1, #0]
   104fa:	600f      	str	r7, [r1, #0]
   104fc:	1bdb      	subs	r3, r3, r7
   104fe:	9301      	str	r3, [sp, #4]
   10500:	2300      	movs	r3, #0
   10502:	0792      	lsls	r2, r2, #30
   10504:	d100      	bne.n	10508 <__sflush_r+0xe4>
   10506:	694b      	ldr	r3, [r1, #20]
   10508:	60a3      	str	r3, [r4, #8]
   1050a:	9b01      	ldr	r3, [sp, #4]
   1050c:	2b00      	cmp	r3, #0
   1050e:	dc00      	bgt.n	10512 <__sflush_r+0xee>
   10510:	e794      	b.n	1043c <__sflush_r+0x18>
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	003a      	movs	r2, r7
   10516:	6a21      	ldr	r1, [r4, #32]
   10518:	0028      	movs	r0, r5
   1051a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1051c:	47b0      	blx	r6
   1051e:	2800      	cmp	r0, #0
   10520:	dc03      	bgt.n	1052a <__sflush_r+0x106>
   10522:	2340      	movs	r3, #64	; 0x40
   10524:	89a2      	ldrh	r2, [r4, #12]
   10526:	4313      	orrs	r3, r2
   10528:	e7df      	b.n	104ea <__sflush_r+0xc6>
   1052a:	9b01      	ldr	r3, [sp, #4]
   1052c:	183f      	adds	r7, r7, r0
   1052e:	1a1b      	subs	r3, r3, r0
   10530:	9301      	str	r3, [sp, #4]
   10532:	e7ea      	b.n	1050a <__sflush_r+0xe6>
   10534:	20400001 	.word	0x20400001

00010538 <_fflush_r>:
   10538:	690b      	ldr	r3, [r1, #16]
   1053a:	b570      	push	{r4, r5, r6, lr}
   1053c:	0005      	movs	r5, r0
   1053e:	000c      	movs	r4, r1
   10540:	2b00      	cmp	r3, #0
   10542:	d101      	bne.n	10548 <_fflush_r+0x10>
   10544:	2000      	movs	r0, #0
   10546:	bd70      	pop	{r4, r5, r6, pc}
   10548:	2800      	cmp	r0, #0
   1054a:	d004      	beq.n	10556 <_fflush_r+0x1e>
   1054c:	6983      	ldr	r3, [r0, #24]
   1054e:	2b00      	cmp	r3, #0
   10550:	d101      	bne.n	10556 <_fflush_r+0x1e>
   10552:	f000 f85f 	bl	10614 <__sinit>
   10556:	4b0b      	ldr	r3, [pc, #44]	; (10584 <_fflush_r+0x4c>)
   10558:	429c      	cmp	r4, r3
   1055a:	d109      	bne.n	10570 <_fflush_r+0x38>
   1055c:	686c      	ldr	r4, [r5, #4]
   1055e:	220c      	movs	r2, #12
   10560:	5ea3      	ldrsh	r3, [r4, r2]
   10562:	2b00      	cmp	r3, #0
   10564:	d0ee      	beq.n	10544 <_fflush_r+0xc>
   10566:	0021      	movs	r1, r4
   10568:	0028      	movs	r0, r5
   1056a:	f7ff ff5b 	bl	10424 <__sflush_r>
   1056e:	e7ea      	b.n	10546 <_fflush_r+0xe>
   10570:	4b05      	ldr	r3, [pc, #20]	; (10588 <_fflush_r+0x50>)
   10572:	429c      	cmp	r4, r3
   10574:	d101      	bne.n	1057a <_fflush_r+0x42>
   10576:	68ac      	ldr	r4, [r5, #8]
   10578:	e7f1      	b.n	1055e <_fflush_r+0x26>
   1057a:	4b04      	ldr	r3, [pc, #16]	; (1058c <_fflush_r+0x54>)
   1057c:	429c      	cmp	r4, r3
   1057e:	d1ee      	bne.n	1055e <_fflush_r+0x26>
   10580:	68ec      	ldr	r4, [r5, #12]
   10582:	e7ec      	b.n	1055e <_fflush_r+0x26>
   10584:	00011a40 	.word	0x00011a40
   10588:	00011a60 	.word	0x00011a60
   1058c:	00011a20 	.word	0x00011a20

00010590 <_cleanup_r>:
   10590:	b510      	push	{r4, lr}
   10592:	4902      	ldr	r1, [pc, #8]	; (1059c <_cleanup_r+0xc>)
   10594:	f000 f8b2 	bl	106fc <_fwalk_reent>
   10598:	bd10      	pop	{r4, pc}
   1059a:	46c0      	nop			; (mov r8, r8)
   1059c:	00010539 	.word	0x00010539

000105a0 <std.isra.0>:
   105a0:	2300      	movs	r3, #0
   105a2:	b510      	push	{r4, lr}
   105a4:	0004      	movs	r4, r0
   105a6:	6003      	str	r3, [r0, #0]
   105a8:	6043      	str	r3, [r0, #4]
   105aa:	6083      	str	r3, [r0, #8]
   105ac:	8181      	strh	r1, [r0, #12]
   105ae:	6643      	str	r3, [r0, #100]	; 0x64
   105b0:	81c2      	strh	r2, [r0, #14]
   105b2:	6103      	str	r3, [r0, #16]
   105b4:	6143      	str	r3, [r0, #20]
   105b6:	6183      	str	r3, [r0, #24]
   105b8:	0019      	movs	r1, r3
   105ba:	2208      	movs	r2, #8
   105bc:	305c      	adds	r0, #92	; 0x5c
   105be:	f7ff f9e5 	bl	f98c <memset>
   105c2:	4b05      	ldr	r3, [pc, #20]	; (105d8 <std.isra.0+0x38>)
   105c4:	6224      	str	r4, [r4, #32]
   105c6:	6263      	str	r3, [r4, #36]	; 0x24
   105c8:	4b04      	ldr	r3, [pc, #16]	; (105dc <std.isra.0+0x3c>)
   105ca:	62a3      	str	r3, [r4, #40]	; 0x28
   105cc:	4b04      	ldr	r3, [pc, #16]	; (105e0 <std.isra.0+0x40>)
   105ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   105d0:	4b04      	ldr	r3, [pc, #16]	; (105e4 <std.isra.0+0x44>)
   105d2:	6323      	str	r3, [r4, #48]	; 0x30
   105d4:	bd10      	pop	{r4, pc}
   105d6:	46c0      	nop			; (mov r8, r8)
   105d8:	00010a4d 	.word	0x00010a4d
   105dc:	00010a75 	.word	0x00010a75
   105e0:	00010aad 	.word	0x00010aad
   105e4:	00010ad9 	.word	0x00010ad9

000105e8 <__sfmoreglue>:
   105e8:	b570      	push	{r4, r5, r6, lr}
   105ea:	2568      	movs	r5, #104	; 0x68
   105ec:	1e4a      	subs	r2, r1, #1
   105ee:	4355      	muls	r5, r2
   105f0:	000e      	movs	r6, r1
   105f2:	0029      	movs	r1, r5
   105f4:	3174      	adds	r1, #116	; 0x74
   105f6:	f000 f96f 	bl	108d8 <_malloc_r>
   105fa:	1e04      	subs	r4, r0, #0
   105fc:	d008      	beq.n	10610 <__sfmoreglue+0x28>
   105fe:	2100      	movs	r1, #0
   10600:	002a      	movs	r2, r5
   10602:	6001      	str	r1, [r0, #0]
   10604:	6046      	str	r6, [r0, #4]
   10606:	300c      	adds	r0, #12
   10608:	60a0      	str	r0, [r4, #8]
   1060a:	3268      	adds	r2, #104	; 0x68
   1060c:	f7ff f9be 	bl	f98c <memset>
   10610:	0020      	movs	r0, r4
   10612:	bd70      	pop	{r4, r5, r6, pc}

00010614 <__sinit>:
   10614:	6983      	ldr	r3, [r0, #24]
   10616:	b513      	push	{r0, r1, r4, lr}
   10618:	0004      	movs	r4, r0
   1061a:	2b00      	cmp	r3, #0
   1061c:	d128      	bne.n	10670 <__sinit+0x5c>
   1061e:	6483      	str	r3, [r0, #72]	; 0x48
   10620:	64c3      	str	r3, [r0, #76]	; 0x4c
   10622:	6503      	str	r3, [r0, #80]	; 0x50
   10624:	4b13      	ldr	r3, [pc, #76]	; (10674 <__sinit+0x60>)
   10626:	4a14      	ldr	r2, [pc, #80]	; (10678 <__sinit+0x64>)
   10628:	681b      	ldr	r3, [r3, #0]
   1062a:	6282      	str	r2, [r0, #40]	; 0x28
   1062c:	9301      	str	r3, [sp, #4]
   1062e:	4298      	cmp	r0, r3
   10630:	d101      	bne.n	10636 <__sinit+0x22>
   10632:	2301      	movs	r3, #1
   10634:	6183      	str	r3, [r0, #24]
   10636:	0020      	movs	r0, r4
   10638:	f000 f820 	bl	1067c <__sfp>
   1063c:	6060      	str	r0, [r4, #4]
   1063e:	0020      	movs	r0, r4
   10640:	f000 f81c 	bl	1067c <__sfp>
   10644:	60a0      	str	r0, [r4, #8]
   10646:	0020      	movs	r0, r4
   10648:	f000 f818 	bl	1067c <__sfp>
   1064c:	2200      	movs	r2, #0
   1064e:	60e0      	str	r0, [r4, #12]
   10650:	2104      	movs	r1, #4
   10652:	6860      	ldr	r0, [r4, #4]
   10654:	f7ff ffa4 	bl	105a0 <std.isra.0>
   10658:	2201      	movs	r2, #1
   1065a:	2109      	movs	r1, #9
   1065c:	68a0      	ldr	r0, [r4, #8]
   1065e:	f7ff ff9f 	bl	105a0 <std.isra.0>
   10662:	2202      	movs	r2, #2
   10664:	2112      	movs	r1, #18
   10666:	68e0      	ldr	r0, [r4, #12]
   10668:	f7ff ff9a 	bl	105a0 <std.isra.0>
   1066c:	2301      	movs	r3, #1
   1066e:	61a3      	str	r3, [r4, #24]
   10670:	bd13      	pop	{r0, r1, r4, pc}
   10672:	46c0      	nop			; (mov r8, r8)
   10674:	000119e8 	.word	0x000119e8
   10678:	00010591 	.word	0x00010591

0001067c <__sfp>:
   1067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1067e:	4b1e      	ldr	r3, [pc, #120]	; (106f8 <__sfp+0x7c>)
   10680:	0007      	movs	r7, r0
   10682:	681e      	ldr	r6, [r3, #0]
   10684:	69b3      	ldr	r3, [r6, #24]
   10686:	2b00      	cmp	r3, #0
   10688:	d102      	bne.n	10690 <__sfp+0x14>
   1068a:	0030      	movs	r0, r6
   1068c:	f7ff ffc2 	bl	10614 <__sinit>
   10690:	3648      	adds	r6, #72	; 0x48
   10692:	68b4      	ldr	r4, [r6, #8]
   10694:	6873      	ldr	r3, [r6, #4]
   10696:	3b01      	subs	r3, #1
   10698:	d504      	bpl.n	106a4 <__sfp+0x28>
   1069a:	6833      	ldr	r3, [r6, #0]
   1069c:	2b00      	cmp	r3, #0
   1069e:	d007      	beq.n	106b0 <__sfp+0x34>
   106a0:	6836      	ldr	r6, [r6, #0]
   106a2:	e7f6      	b.n	10692 <__sfp+0x16>
   106a4:	220c      	movs	r2, #12
   106a6:	5ea5      	ldrsh	r5, [r4, r2]
   106a8:	2d00      	cmp	r5, #0
   106aa:	d00d      	beq.n	106c8 <__sfp+0x4c>
   106ac:	3468      	adds	r4, #104	; 0x68
   106ae:	e7f2      	b.n	10696 <__sfp+0x1a>
   106b0:	2104      	movs	r1, #4
   106b2:	0038      	movs	r0, r7
   106b4:	f7ff ff98 	bl	105e8 <__sfmoreglue>
   106b8:	6030      	str	r0, [r6, #0]
   106ba:	2800      	cmp	r0, #0
   106bc:	d1f0      	bne.n	106a0 <__sfp+0x24>
   106be:	230c      	movs	r3, #12
   106c0:	0004      	movs	r4, r0
   106c2:	603b      	str	r3, [r7, #0]
   106c4:	0020      	movs	r0, r4
   106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106c8:	2301      	movs	r3, #1
   106ca:	0020      	movs	r0, r4
   106cc:	425b      	negs	r3, r3
   106ce:	81e3      	strh	r3, [r4, #14]
   106d0:	3302      	adds	r3, #2
   106d2:	81a3      	strh	r3, [r4, #12]
   106d4:	6665      	str	r5, [r4, #100]	; 0x64
   106d6:	6025      	str	r5, [r4, #0]
   106d8:	60a5      	str	r5, [r4, #8]
   106da:	6065      	str	r5, [r4, #4]
   106dc:	6125      	str	r5, [r4, #16]
   106de:	6165      	str	r5, [r4, #20]
   106e0:	61a5      	str	r5, [r4, #24]
   106e2:	2208      	movs	r2, #8
   106e4:	0029      	movs	r1, r5
   106e6:	305c      	adds	r0, #92	; 0x5c
   106e8:	f7ff f950 	bl	f98c <memset>
   106ec:	6365      	str	r5, [r4, #52]	; 0x34
   106ee:	63a5      	str	r5, [r4, #56]	; 0x38
   106f0:	64a5      	str	r5, [r4, #72]	; 0x48
   106f2:	64e5      	str	r5, [r4, #76]	; 0x4c
   106f4:	e7e6      	b.n	106c4 <__sfp+0x48>
   106f6:	46c0      	nop			; (mov r8, r8)
   106f8:	000119e8 	.word	0x000119e8

000106fc <_fwalk_reent>:
   106fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   106fe:	0004      	movs	r4, r0
   10700:	0007      	movs	r7, r0
   10702:	2600      	movs	r6, #0
   10704:	9101      	str	r1, [sp, #4]
   10706:	3448      	adds	r4, #72	; 0x48
   10708:	2c00      	cmp	r4, #0
   1070a:	d101      	bne.n	10710 <_fwalk_reent+0x14>
   1070c:	0030      	movs	r0, r6
   1070e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10710:	6863      	ldr	r3, [r4, #4]
   10712:	68a5      	ldr	r5, [r4, #8]
   10714:	9300      	str	r3, [sp, #0]
   10716:	9b00      	ldr	r3, [sp, #0]
   10718:	3b01      	subs	r3, #1
   1071a:	9300      	str	r3, [sp, #0]
   1071c:	d501      	bpl.n	10722 <_fwalk_reent+0x26>
   1071e:	6824      	ldr	r4, [r4, #0]
   10720:	e7f2      	b.n	10708 <_fwalk_reent+0xc>
   10722:	89ab      	ldrh	r3, [r5, #12]
   10724:	2b01      	cmp	r3, #1
   10726:	d908      	bls.n	1073a <_fwalk_reent+0x3e>
   10728:	220e      	movs	r2, #14
   1072a:	5eab      	ldrsh	r3, [r5, r2]
   1072c:	3301      	adds	r3, #1
   1072e:	d004      	beq.n	1073a <_fwalk_reent+0x3e>
   10730:	0029      	movs	r1, r5
   10732:	0038      	movs	r0, r7
   10734:	9b01      	ldr	r3, [sp, #4]
   10736:	4798      	blx	r3
   10738:	4306      	orrs	r6, r0
   1073a:	3568      	adds	r5, #104	; 0x68
   1073c:	e7eb      	b.n	10716 <_fwalk_reent+0x1a>
   1073e:	Address 0x0001073e is out of bounds.


00010740 <__swhatbuf_r>:
   10740:	b570      	push	{r4, r5, r6, lr}
   10742:	000e      	movs	r6, r1
   10744:	001d      	movs	r5, r3
   10746:	230e      	movs	r3, #14
   10748:	5ec9      	ldrsh	r1, [r1, r3]
   1074a:	b090      	sub	sp, #64	; 0x40
   1074c:	0014      	movs	r4, r2
   1074e:	2900      	cmp	r1, #0
   10750:	da07      	bge.n	10762 <__swhatbuf_r+0x22>
   10752:	2300      	movs	r3, #0
   10754:	602b      	str	r3, [r5, #0]
   10756:	89b3      	ldrh	r3, [r6, #12]
   10758:	061b      	lsls	r3, r3, #24
   1075a:	d411      	bmi.n	10780 <__swhatbuf_r+0x40>
   1075c:	2380      	movs	r3, #128	; 0x80
   1075e:	00db      	lsls	r3, r3, #3
   10760:	e00f      	b.n	10782 <__swhatbuf_r+0x42>
   10762:	aa01      	add	r2, sp, #4
   10764:	f000 f9e4 	bl	10b30 <_fstat_r>
   10768:	2800      	cmp	r0, #0
   1076a:	dbf2      	blt.n	10752 <__swhatbuf_r+0x12>
   1076c:	22f0      	movs	r2, #240	; 0xf0
   1076e:	9b02      	ldr	r3, [sp, #8]
   10770:	0212      	lsls	r2, r2, #8
   10772:	4013      	ands	r3, r2
   10774:	4a05      	ldr	r2, [pc, #20]	; (1078c <__swhatbuf_r+0x4c>)
   10776:	189b      	adds	r3, r3, r2
   10778:	425a      	negs	r2, r3
   1077a:	4153      	adcs	r3, r2
   1077c:	602b      	str	r3, [r5, #0]
   1077e:	e7ed      	b.n	1075c <__swhatbuf_r+0x1c>
   10780:	2340      	movs	r3, #64	; 0x40
   10782:	2000      	movs	r0, #0
   10784:	6023      	str	r3, [r4, #0]
   10786:	b010      	add	sp, #64	; 0x40
   10788:	bd70      	pop	{r4, r5, r6, pc}
   1078a:	46c0      	nop			; (mov r8, r8)
   1078c:	ffffe000 	.word	0xffffe000

00010790 <__smakebuf_r>:
   10790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10792:	2602      	movs	r6, #2
   10794:	898b      	ldrh	r3, [r1, #12]
   10796:	0005      	movs	r5, r0
   10798:	000c      	movs	r4, r1
   1079a:	4233      	tst	r3, r6
   1079c:	d006      	beq.n	107ac <__smakebuf_r+0x1c>
   1079e:	0023      	movs	r3, r4
   107a0:	3347      	adds	r3, #71	; 0x47
   107a2:	6023      	str	r3, [r4, #0]
   107a4:	6123      	str	r3, [r4, #16]
   107a6:	2301      	movs	r3, #1
   107a8:	6163      	str	r3, [r4, #20]
   107aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   107ac:	ab01      	add	r3, sp, #4
   107ae:	466a      	mov	r2, sp
   107b0:	f7ff ffc6 	bl	10740 <__swhatbuf_r>
   107b4:	9900      	ldr	r1, [sp, #0]
   107b6:	0007      	movs	r7, r0
   107b8:	0028      	movs	r0, r5
   107ba:	f000 f88d 	bl	108d8 <_malloc_r>
   107be:	2800      	cmp	r0, #0
   107c0:	d108      	bne.n	107d4 <__smakebuf_r+0x44>
   107c2:	220c      	movs	r2, #12
   107c4:	5ea3      	ldrsh	r3, [r4, r2]
   107c6:	059a      	lsls	r2, r3, #22
   107c8:	d4ef      	bmi.n	107aa <__smakebuf_r+0x1a>
   107ca:	2203      	movs	r2, #3
   107cc:	4393      	bics	r3, r2
   107ce:	431e      	orrs	r6, r3
   107d0:	81a6      	strh	r6, [r4, #12]
   107d2:	e7e4      	b.n	1079e <__smakebuf_r+0xe>
   107d4:	4b0f      	ldr	r3, [pc, #60]	; (10814 <__smakebuf_r+0x84>)
   107d6:	62ab      	str	r3, [r5, #40]	; 0x28
   107d8:	2380      	movs	r3, #128	; 0x80
   107da:	89a2      	ldrh	r2, [r4, #12]
   107dc:	6020      	str	r0, [r4, #0]
   107de:	4313      	orrs	r3, r2
   107e0:	81a3      	strh	r3, [r4, #12]
   107e2:	9b00      	ldr	r3, [sp, #0]
   107e4:	6120      	str	r0, [r4, #16]
   107e6:	6163      	str	r3, [r4, #20]
   107e8:	9b01      	ldr	r3, [sp, #4]
   107ea:	2b00      	cmp	r3, #0
   107ec:	d00d      	beq.n	1080a <__smakebuf_r+0x7a>
   107ee:	230e      	movs	r3, #14
   107f0:	5ee1      	ldrsh	r1, [r4, r3]
   107f2:	0028      	movs	r0, r5
   107f4:	f000 f9ae 	bl	10b54 <_isatty_r>
   107f8:	2800      	cmp	r0, #0
   107fa:	d006      	beq.n	1080a <__smakebuf_r+0x7a>
   107fc:	2203      	movs	r2, #3
   107fe:	89a3      	ldrh	r3, [r4, #12]
   10800:	4393      	bics	r3, r2
   10802:	001a      	movs	r2, r3
   10804:	2301      	movs	r3, #1
   10806:	4313      	orrs	r3, r2
   10808:	81a3      	strh	r3, [r4, #12]
   1080a:	89a0      	ldrh	r0, [r4, #12]
   1080c:	4338      	orrs	r0, r7
   1080e:	81a0      	strh	r0, [r4, #12]
   10810:	e7cb      	b.n	107aa <__smakebuf_r+0x1a>
   10812:	46c0      	nop			; (mov r8, r8)
   10814:	00010591 	.word	0x00010591

00010818 <malloc>:
   10818:	b510      	push	{r4, lr}
   1081a:	4b03      	ldr	r3, [pc, #12]	; (10828 <malloc+0x10>)
   1081c:	0001      	movs	r1, r0
   1081e:	6818      	ldr	r0, [r3, #0]
   10820:	f000 f85a 	bl	108d8 <_malloc_r>
   10824:	bd10      	pop	{r4, pc}
   10826:	46c0      	nop			; (mov r8, r8)
   10828:	20000034 	.word	0x20000034

0001082c <memchr>:
   1082c:	b2c9      	uxtb	r1, r1
   1082e:	1882      	adds	r2, r0, r2
   10830:	4290      	cmp	r0, r2
   10832:	d101      	bne.n	10838 <memchr+0xc>
   10834:	2000      	movs	r0, #0
   10836:	4770      	bx	lr
   10838:	7803      	ldrb	r3, [r0, #0]
   1083a:	428b      	cmp	r3, r1
   1083c:	d0fb      	beq.n	10836 <memchr+0xa>
   1083e:	3001      	adds	r0, #1
   10840:	e7f6      	b.n	10830 <memchr+0x4>
   10842:	Address 0x00010842 is out of bounds.


00010844 <_free_r>:
   10844:	b570      	push	{r4, r5, r6, lr}
   10846:	0005      	movs	r5, r0
   10848:	2900      	cmp	r1, #0
   1084a:	d010      	beq.n	1086e <_free_r+0x2a>
   1084c:	1f0c      	subs	r4, r1, #4
   1084e:	6823      	ldr	r3, [r4, #0]
   10850:	2b00      	cmp	r3, #0
   10852:	da00      	bge.n	10856 <_free_r+0x12>
   10854:	18e4      	adds	r4, r4, r3
   10856:	0028      	movs	r0, r5
   10858:	f000 f9a2 	bl	10ba0 <__malloc_lock>
   1085c:	4a1d      	ldr	r2, [pc, #116]	; (108d4 <_free_r+0x90>)
   1085e:	6813      	ldr	r3, [r2, #0]
   10860:	2b00      	cmp	r3, #0
   10862:	d105      	bne.n	10870 <_free_r+0x2c>
   10864:	6063      	str	r3, [r4, #4]
   10866:	6014      	str	r4, [r2, #0]
   10868:	0028      	movs	r0, r5
   1086a:	f000 f99a 	bl	10ba2 <__malloc_unlock>
   1086e:	bd70      	pop	{r4, r5, r6, pc}
   10870:	42a3      	cmp	r3, r4
   10872:	d909      	bls.n	10888 <_free_r+0x44>
   10874:	6821      	ldr	r1, [r4, #0]
   10876:	1860      	adds	r0, r4, r1
   10878:	4283      	cmp	r3, r0
   1087a:	d1f3      	bne.n	10864 <_free_r+0x20>
   1087c:	6818      	ldr	r0, [r3, #0]
   1087e:	685b      	ldr	r3, [r3, #4]
   10880:	1841      	adds	r1, r0, r1
   10882:	6021      	str	r1, [r4, #0]
   10884:	e7ee      	b.n	10864 <_free_r+0x20>
   10886:	0013      	movs	r3, r2
   10888:	685a      	ldr	r2, [r3, #4]
   1088a:	2a00      	cmp	r2, #0
   1088c:	d001      	beq.n	10892 <_free_r+0x4e>
   1088e:	42a2      	cmp	r2, r4
   10890:	d9f9      	bls.n	10886 <_free_r+0x42>
   10892:	6819      	ldr	r1, [r3, #0]
   10894:	1858      	adds	r0, r3, r1
   10896:	42a0      	cmp	r0, r4
   10898:	d10b      	bne.n	108b2 <_free_r+0x6e>
   1089a:	6820      	ldr	r0, [r4, #0]
   1089c:	1809      	adds	r1, r1, r0
   1089e:	1858      	adds	r0, r3, r1
   108a0:	6019      	str	r1, [r3, #0]
   108a2:	4282      	cmp	r2, r0
   108a4:	d1e0      	bne.n	10868 <_free_r+0x24>
   108a6:	6810      	ldr	r0, [r2, #0]
   108a8:	6852      	ldr	r2, [r2, #4]
   108aa:	1841      	adds	r1, r0, r1
   108ac:	6019      	str	r1, [r3, #0]
   108ae:	605a      	str	r2, [r3, #4]
   108b0:	e7da      	b.n	10868 <_free_r+0x24>
   108b2:	42a0      	cmp	r0, r4
   108b4:	d902      	bls.n	108bc <_free_r+0x78>
   108b6:	230c      	movs	r3, #12
   108b8:	602b      	str	r3, [r5, #0]
   108ba:	e7d5      	b.n	10868 <_free_r+0x24>
   108bc:	6821      	ldr	r1, [r4, #0]
   108be:	1860      	adds	r0, r4, r1
   108c0:	4282      	cmp	r2, r0
   108c2:	d103      	bne.n	108cc <_free_r+0x88>
   108c4:	6810      	ldr	r0, [r2, #0]
   108c6:	6852      	ldr	r2, [r2, #4]
   108c8:	1841      	adds	r1, r0, r1
   108ca:	6021      	str	r1, [r4, #0]
   108cc:	6062      	str	r2, [r4, #4]
   108ce:	605c      	str	r4, [r3, #4]
   108d0:	e7ca      	b.n	10868 <_free_r+0x24>
   108d2:	46c0      	nop			; (mov r8, r8)
   108d4:	20001ca0 	.word	0x20001ca0

000108d8 <_malloc_r>:
   108d8:	2303      	movs	r3, #3
   108da:	b570      	push	{r4, r5, r6, lr}
   108dc:	1ccd      	adds	r5, r1, #3
   108de:	439d      	bics	r5, r3
   108e0:	3508      	adds	r5, #8
   108e2:	0006      	movs	r6, r0
   108e4:	2d0c      	cmp	r5, #12
   108e6:	d21e      	bcs.n	10926 <_malloc_r+0x4e>
   108e8:	250c      	movs	r5, #12
   108ea:	42a9      	cmp	r1, r5
   108ec:	d81d      	bhi.n	1092a <_malloc_r+0x52>
   108ee:	0030      	movs	r0, r6
   108f0:	f000 f956 	bl	10ba0 <__malloc_lock>
   108f4:	4a25      	ldr	r2, [pc, #148]	; (1098c <_malloc_r+0xb4>)
   108f6:	6814      	ldr	r4, [r2, #0]
   108f8:	0021      	movs	r1, r4
   108fa:	2900      	cmp	r1, #0
   108fc:	d119      	bne.n	10932 <_malloc_r+0x5a>
   108fe:	4c24      	ldr	r4, [pc, #144]	; (10990 <_malloc_r+0xb8>)
   10900:	6823      	ldr	r3, [r4, #0]
   10902:	2b00      	cmp	r3, #0
   10904:	d103      	bne.n	1090e <_malloc_r+0x36>
   10906:	0030      	movs	r0, r6
   10908:	f000 f844 	bl	10994 <_sbrk_r>
   1090c:	6020      	str	r0, [r4, #0]
   1090e:	0029      	movs	r1, r5
   10910:	0030      	movs	r0, r6
   10912:	f000 f83f 	bl	10994 <_sbrk_r>
   10916:	1c43      	adds	r3, r0, #1
   10918:	d12c      	bne.n	10974 <_malloc_r+0x9c>
   1091a:	230c      	movs	r3, #12
   1091c:	0030      	movs	r0, r6
   1091e:	6033      	str	r3, [r6, #0]
   10920:	f000 f93f 	bl	10ba2 <__malloc_unlock>
   10924:	e003      	b.n	1092e <_malloc_r+0x56>
   10926:	2d00      	cmp	r5, #0
   10928:	dadf      	bge.n	108ea <_malloc_r+0x12>
   1092a:	230c      	movs	r3, #12
   1092c:	6033      	str	r3, [r6, #0]
   1092e:	2000      	movs	r0, #0
   10930:	bd70      	pop	{r4, r5, r6, pc}
   10932:	680b      	ldr	r3, [r1, #0]
   10934:	1b5b      	subs	r3, r3, r5
   10936:	d41a      	bmi.n	1096e <_malloc_r+0x96>
   10938:	2b0b      	cmp	r3, #11
   1093a:	d903      	bls.n	10944 <_malloc_r+0x6c>
   1093c:	600b      	str	r3, [r1, #0]
   1093e:	18cc      	adds	r4, r1, r3
   10940:	6025      	str	r5, [r4, #0]
   10942:	e003      	b.n	1094c <_malloc_r+0x74>
   10944:	428c      	cmp	r4, r1
   10946:	d10e      	bne.n	10966 <_malloc_r+0x8e>
   10948:	6863      	ldr	r3, [r4, #4]
   1094a:	6013      	str	r3, [r2, #0]
   1094c:	0030      	movs	r0, r6
   1094e:	f000 f928 	bl	10ba2 <__malloc_unlock>
   10952:	0020      	movs	r0, r4
   10954:	2207      	movs	r2, #7
   10956:	300b      	adds	r0, #11
   10958:	1d23      	adds	r3, r4, #4
   1095a:	4390      	bics	r0, r2
   1095c:	1ac3      	subs	r3, r0, r3
   1095e:	d0e7      	beq.n	10930 <_malloc_r+0x58>
   10960:	425a      	negs	r2, r3
   10962:	50e2      	str	r2, [r4, r3]
   10964:	e7e4      	b.n	10930 <_malloc_r+0x58>
   10966:	684b      	ldr	r3, [r1, #4]
   10968:	6063      	str	r3, [r4, #4]
   1096a:	000c      	movs	r4, r1
   1096c:	e7ee      	b.n	1094c <_malloc_r+0x74>
   1096e:	000c      	movs	r4, r1
   10970:	6849      	ldr	r1, [r1, #4]
   10972:	e7c2      	b.n	108fa <_malloc_r+0x22>
   10974:	2303      	movs	r3, #3
   10976:	1cc4      	adds	r4, r0, #3
   10978:	439c      	bics	r4, r3
   1097a:	42a0      	cmp	r0, r4
   1097c:	d0e0      	beq.n	10940 <_malloc_r+0x68>
   1097e:	1a21      	subs	r1, r4, r0
   10980:	0030      	movs	r0, r6
   10982:	f000 f807 	bl	10994 <_sbrk_r>
   10986:	1c43      	adds	r3, r0, #1
   10988:	d1da      	bne.n	10940 <_malloc_r+0x68>
   1098a:	e7c6      	b.n	1091a <_malloc_r+0x42>
   1098c:	20001ca0 	.word	0x20001ca0
   10990:	20001ca4 	.word	0x20001ca4

00010994 <_sbrk_r>:
   10994:	2300      	movs	r3, #0
   10996:	b570      	push	{r4, r5, r6, lr}
   10998:	4c06      	ldr	r4, [pc, #24]	; (109b4 <_sbrk_r+0x20>)
   1099a:	0005      	movs	r5, r0
   1099c:	0008      	movs	r0, r1
   1099e:	6023      	str	r3, [r4, #0]
   109a0:	f7f7 fd74 	bl	848c <_sbrk>
   109a4:	1c43      	adds	r3, r0, #1
   109a6:	d103      	bne.n	109b0 <_sbrk_r+0x1c>
   109a8:	6823      	ldr	r3, [r4, #0]
   109aa:	2b00      	cmp	r3, #0
   109ac:	d000      	beq.n	109b0 <_sbrk_r+0x1c>
   109ae:	602b      	str	r3, [r5, #0]
   109b0:	bd70      	pop	{r4, r5, r6, pc}
   109b2:	46c0      	nop			; (mov r8, r8)
   109b4:	200022ac 	.word	0x200022ac

000109b8 <_raise_r>:
   109b8:	b570      	push	{r4, r5, r6, lr}
   109ba:	0004      	movs	r4, r0
   109bc:	000d      	movs	r5, r1
   109be:	291f      	cmp	r1, #31
   109c0:	d904      	bls.n	109cc <_raise_r+0x14>
   109c2:	2316      	movs	r3, #22
   109c4:	6003      	str	r3, [r0, #0]
   109c6:	2001      	movs	r0, #1
   109c8:	4240      	negs	r0, r0
   109ca:	bd70      	pop	{r4, r5, r6, pc}
   109cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   109ce:	2b00      	cmp	r3, #0
   109d0:	d004      	beq.n	109dc <_raise_r+0x24>
   109d2:	008a      	lsls	r2, r1, #2
   109d4:	189b      	adds	r3, r3, r2
   109d6:	681a      	ldr	r2, [r3, #0]
   109d8:	2a00      	cmp	r2, #0
   109da:	d108      	bne.n	109ee <_raise_r+0x36>
   109dc:	0020      	movs	r0, r4
   109de:	f000 f831 	bl	10a44 <_getpid_r>
   109e2:	002a      	movs	r2, r5
   109e4:	0001      	movs	r1, r0
   109e6:	0020      	movs	r0, r4
   109e8:	f000 f81a 	bl	10a20 <_kill_r>
   109ec:	e7ed      	b.n	109ca <_raise_r+0x12>
   109ee:	2000      	movs	r0, #0
   109f0:	2a01      	cmp	r2, #1
   109f2:	d0ea      	beq.n	109ca <_raise_r+0x12>
   109f4:	1c51      	adds	r1, r2, #1
   109f6:	d103      	bne.n	10a00 <_raise_r+0x48>
   109f8:	2316      	movs	r3, #22
   109fa:	3001      	adds	r0, #1
   109fc:	6023      	str	r3, [r4, #0]
   109fe:	e7e4      	b.n	109ca <_raise_r+0x12>
   10a00:	2400      	movs	r4, #0
   10a02:	0028      	movs	r0, r5
   10a04:	601c      	str	r4, [r3, #0]
   10a06:	4790      	blx	r2
   10a08:	0020      	movs	r0, r4
   10a0a:	e7de      	b.n	109ca <_raise_r+0x12>

00010a0c <raise>:
   10a0c:	b510      	push	{r4, lr}
   10a0e:	4b03      	ldr	r3, [pc, #12]	; (10a1c <raise+0x10>)
   10a10:	0001      	movs	r1, r0
   10a12:	6818      	ldr	r0, [r3, #0]
   10a14:	f7ff ffd0 	bl	109b8 <_raise_r>
   10a18:	bd10      	pop	{r4, pc}
   10a1a:	46c0      	nop			; (mov r8, r8)
   10a1c:	20000034 	.word	0x20000034

00010a20 <_kill_r>:
   10a20:	2300      	movs	r3, #0
   10a22:	b570      	push	{r4, r5, r6, lr}
   10a24:	4c06      	ldr	r4, [pc, #24]	; (10a40 <_kill_r+0x20>)
   10a26:	0005      	movs	r5, r0
   10a28:	0008      	movs	r0, r1
   10a2a:	0011      	movs	r1, r2
   10a2c:	6023      	str	r3, [r4, #0]
   10a2e:	f7f7 fd4d 	bl	84cc <_kill>
   10a32:	1c43      	adds	r3, r0, #1
   10a34:	d103      	bne.n	10a3e <_kill_r+0x1e>
   10a36:	6823      	ldr	r3, [r4, #0]
   10a38:	2b00      	cmp	r3, #0
   10a3a:	d000      	beq.n	10a3e <_kill_r+0x1e>
   10a3c:	602b      	str	r3, [r5, #0]
   10a3e:	bd70      	pop	{r4, r5, r6, pc}
   10a40:	200022ac 	.word	0x200022ac

00010a44 <_getpid_r>:
   10a44:	b510      	push	{r4, lr}
   10a46:	f7f7 fd42 	bl	84ce <_getpid>
   10a4a:	bd10      	pop	{r4, pc}

00010a4c <__sread>:
   10a4c:	b570      	push	{r4, r5, r6, lr}
   10a4e:	000c      	movs	r4, r1
   10a50:	250e      	movs	r5, #14
   10a52:	5f49      	ldrsh	r1, [r1, r5]
   10a54:	f000 f8a6 	bl	10ba4 <_read_r>
   10a58:	2800      	cmp	r0, #0
   10a5a:	db03      	blt.n	10a64 <__sread+0x18>
   10a5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10a5e:	181b      	adds	r3, r3, r0
   10a60:	6563      	str	r3, [r4, #84]	; 0x54
   10a62:	bd70      	pop	{r4, r5, r6, pc}
   10a64:	89a3      	ldrh	r3, [r4, #12]
   10a66:	4a02      	ldr	r2, [pc, #8]	; (10a70 <__sread+0x24>)
   10a68:	4013      	ands	r3, r2
   10a6a:	81a3      	strh	r3, [r4, #12]
   10a6c:	e7f9      	b.n	10a62 <__sread+0x16>
   10a6e:	46c0      	nop			; (mov r8, r8)
   10a70:	ffffefff 	.word	0xffffefff

00010a74 <__swrite>:
   10a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a76:	001f      	movs	r7, r3
   10a78:	898b      	ldrh	r3, [r1, #12]
   10a7a:	0005      	movs	r5, r0
   10a7c:	000c      	movs	r4, r1
   10a7e:	0016      	movs	r6, r2
   10a80:	05db      	lsls	r3, r3, #23
   10a82:	d505      	bpl.n	10a90 <__swrite+0x1c>
   10a84:	230e      	movs	r3, #14
   10a86:	5ec9      	ldrsh	r1, [r1, r3]
   10a88:	2200      	movs	r2, #0
   10a8a:	2302      	movs	r3, #2
   10a8c:	f000 f874 	bl	10b78 <_lseek_r>
   10a90:	89a3      	ldrh	r3, [r4, #12]
   10a92:	4a05      	ldr	r2, [pc, #20]	; (10aa8 <__swrite+0x34>)
   10a94:	0028      	movs	r0, r5
   10a96:	4013      	ands	r3, r2
   10a98:	81a3      	strh	r3, [r4, #12]
   10a9a:	0032      	movs	r2, r6
   10a9c:	230e      	movs	r3, #14
   10a9e:	5ee1      	ldrsh	r1, [r4, r3]
   10aa0:	003b      	movs	r3, r7
   10aa2:	f000 f81f 	bl	10ae4 <_write_r>
   10aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10aa8:	ffffefff 	.word	0xffffefff

00010aac <__sseek>:
   10aac:	b570      	push	{r4, r5, r6, lr}
   10aae:	000c      	movs	r4, r1
   10ab0:	250e      	movs	r5, #14
   10ab2:	5f49      	ldrsh	r1, [r1, r5]
   10ab4:	f000 f860 	bl	10b78 <_lseek_r>
   10ab8:	89a3      	ldrh	r3, [r4, #12]
   10aba:	1c42      	adds	r2, r0, #1
   10abc:	d103      	bne.n	10ac6 <__sseek+0x1a>
   10abe:	4a05      	ldr	r2, [pc, #20]	; (10ad4 <__sseek+0x28>)
   10ac0:	4013      	ands	r3, r2
   10ac2:	81a3      	strh	r3, [r4, #12]
   10ac4:	bd70      	pop	{r4, r5, r6, pc}
   10ac6:	2280      	movs	r2, #128	; 0x80
   10ac8:	0152      	lsls	r2, r2, #5
   10aca:	4313      	orrs	r3, r2
   10acc:	81a3      	strh	r3, [r4, #12]
   10ace:	6560      	str	r0, [r4, #84]	; 0x54
   10ad0:	e7f8      	b.n	10ac4 <__sseek+0x18>
   10ad2:	46c0      	nop			; (mov r8, r8)
   10ad4:	ffffefff 	.word	0xffffefff

00010ad8 <__sclose>:
   10ad8:	b510      	push	{r4, lr}
   10ada:	230e      	movs	r3, #14
   10adc:	5ec9      	ldrsh	r1, [r1, r3]
   10ade:	f000 f815 	bl	10b0c <_close_r>
   10ae2:	bd10      	pop	{r4, pc}

00010ae4 <_write_r>:
   10ae4:	b570      	push	{r4, r5, r6, lr}
   10ae6:	0005      	movs	r5, r0
   10ae8:	0008      	movs	r0, r1
   10aea:	0011      	movs	r1, r2
   10aec:	2200      	movs	r2, #0
   10aee:	4c06      	ldr	r4, [pc, #24]	; (10b08 <_write_r+0x24>)
   10af0:	6022      	str	r2, [r4, #0]
   10af2:	001a      	movs	r2, r3
   10af4:	f7f7 fca2 	bl	843c <_write>
   10af8:	1c43      	adds	r3, r0, #1
   10afa:	d103      	bne.n	10b04 <_write_r+0x20>
   10afc:	6823      	ldr	r3, [r4, #0]
   10afe:	2b00      	cmp	r3, #0
   10b00:	d000      	beq.n	10b04 <_write_r+0x20>
   10b02:	602b      	str	r3, [r5, #0]
   10b04:	bd70      	pop	{r4, r5, r6, pc}
   10b06:	46c0      	nop			; (mov r8, r8)
   10b08:	200022ac 	.word	0x200022ac

00010b0c <_close_r>:
   10b0c:	2300      	movs	r3, #0
   10b0e:	b570      	push	{r4, r5, r6, lr}
   10b10:	4c06      	ldr	r4, [pc, #24]	; (10b2c <_close_r+0x20>)
   10b12:	0005      	movs	r5, r0
   10b14:	0008      	movs	r0, r1
   10b16:	6023      	str	r3, [r4, #0]
   10b18:	f7f7 fcca 	bl	84b0 <_close>
   10b1c:	1c43      	adds	r3, r0, #1
   10b1e:	d103      	bne.n	10b28 <_close_r+0x1c>
   10b20:	6823      	ldr	r3, [r4, #0]
   10b22:	2b00      	cmp	r3, #0
   10b24:	d000      	beq.n	10b28 <_close_r+0x1c>
   10b26:	602b      	str	r3, [r5, #0]
   10b28:	bd70      	pop	{r4, r5, r6, pc}
   10b2a:	46c0      	nop			; (mov r8, r8)
   10b2c:	200022ac 	.word	0x200022ac

00010b30 <_fstat_r>:
   10b30:	2300      	movs	r3, #0
   10b32:	b570      	push	{r4, r5, r6, lr}
   10b34:	4c06      	ldr	r4, [pc, #24]	; (10b50 <_fstat_r+0x20>)
   10b36:	0005      	movs	r5, r0
   10b38:	0008      	movs	r0, r1
   10b3a:	0011      	movs	r1, r2
   10b3c:	6023      	str	r3, [r4, #0]
   10b3e:	f7f7 fcba 	bl	84b6 <_fstat>
   10b42:	1c43      	adds	r3, r0, #1
   10b44:	d103      	bne.n	10b4e <_fstat_r+0x1e>
   10b46:	6823      	ldr	r3, [r4, #0]
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d000      	beq.n	10b4e <_fstat_r+0x1e>
   10b4c:	602b      	str	r3, [r5, #0]
   10b4e:	bd70      	pop	{r4, r5, r6, pc}
   10b50:	200022ac 	.word	0x200022ac

00010b54 <_isatty_r>:
   10b54:	2300      	movs	r3, #0
   10b56:	b570      	push	{r4, r5, r6, lr}
   10b58:	4c06      	ldr	r4, [pc, #24]	; (10b74 <_isatty_r+0x20>)
   10b5a:	0005      	movs	r5, r0
   10b5c:	0008      	movs	r0, r1
   10b5e:	6023      	str	r3, [r4, #0]
   10b60:	f7f7 fcae 	bl	84c0 <_isatty>
   10b64:	1c43      	adds	r3, r0, #1
   10b66:	d103      	bne.n	10b70 <_isatty_r+0x1c>
   10b68:	6823      	ldr	r3, [r4, #0]
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d000      	beq.n	10b70 <_isatty_r+0x1c>
   10b6e:	602b      	str	r3, [r5, #0]
   10b70:	bd70      	pop	{r4, r5, r6, pc}
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	200022ac 	.word	0x200022ac

00010b78 <_lseek_r>:
   10b78:	b570      	push	{r4, r5, r6, lr}
   10b7a:	0005      	movs	r5, r0
   10b7c:	0008      	movs	r0, r1
   10b7e:	0011      	movs	r1, r2
   10b80:	2200      	movs	r2, #0
   10b82:	4c06      	ldr	r4, [pc, #24]	; (10b9c <_lseek_r+0x24>)
   10b84:	6022      	str	r2, [r4, #0]
   10b86:	001a      	movs	r2, r3
   10b88:	f7f7 fc9c 	bl	84c4 <_lseek>
   10b8c:	1c43      	adds	r3, r0, #1
   10b8e:	d103      	bne.n	10b98 <_lseek_r+0x20>
   10b90:	6823      	ldr	r3, [r4, #0]
   10b92:	2b00      	cmp	r3, #0
   10b94:	d000      	beq.n	10b98 <_lseek_r+0x20>
   10b96:	602b      	str	r3, [r5, #0]
   10b98:	bd70      	pop	{r4, r5, r6, pc}
   10b9a:	46c0      	nop			; (mov r8, r8)
   10b9c:	200022ac 	.word	0x200022ac

00010ba0 <__malloc_lock>:
   10ba0:	4770      	bx	lr

00010ba2 <__malloc_unlock>:
   10ba2:	4770      	bx	lr

00010ba4 <_read_r>:
   10ba4:	b570      	push	{r4, r5, r6, lr}
   10ba6:	0005      	movs	r5, r0
   10ba8:	0008      	movs	r0, r1
   10baa:	0011      	movs	r1, r2
   10bac:	2200      	movs	r2, #0
   10bae:	4c06      	ldr	r4, [pc, #24]	; (10bc8 <_read_r+0x24>)
   10bb0:	6022      	str	r2, [r4, #0]
   10bb2:	001a      	movs	r2, r3
   10bb4:	f7f7 fc20 	bl	83f8 <_read>
   10bb8:	1c43      	adds	r3, r0, #1
   10bba:	d103      	bne.n	10bc4 <_read_r+0x20>
   10bbc:	6823      	ldr	r3, [r4, #0]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d000      	beq.n	10bc4 <_read_r+0x20>
   10bc2:	602b      	str	r3, [r5, #0]
   10bc4:	bd70      	pop	{r4, r5, r6, pc}
   10bc6:	46c0      	nop			; (mov r8, r8)
   10bc8:	200022ac 	.word	0x200022ac
   10bcc:	00006704 	.word	0x00006704
   10bd0:	00006704 	.word	0x00006704
   10bd4:	000066d2 	.word	0x000066d2
   10bd8:	00006704 	.word	0x00006704
   10bdc:	000066d2 	.word	0x000066d2
   10be0:	000066b8 	.word	0x000066b8
   10be4:	000066b8 	.word	0x000066b8
   10be8:	00006704 	.word	0x00006704
   10bec:	00006704 	.word	0x00006704
   10bf0:	00006704 	.word	0x00006704
   10bf4:	00006704 	.word	0x00006704
   10bf8:	00006704 	.word	0x00006704
   10bfc:	00006704 	.word	0x00006704
   10c00:	00006704 	.word	0x00006704
   10c04:	00006704 	.word	0x00006704
   10c08:	00006704 	.word	0x00006704
   10c0c:	00006704 	.word	0x00006704
   10c10:	00006704 	.word	0x00006704
   10c14:	00006704 	.word	0x00006704
   10c18:	00006704 	.word	0x00006704
   10c1c:	00006704 	.word	0x00006704
   10c20:	00006704 	.word	0x00006704
   10c24:	00006704 	.word	0x00006704
   10c28:	00006704 	.word	0x00006704
   10c2c:	00006704 	.word	0x00006704
   10c30:	00006704 	.word	0x00006704
   10c34:	000066d2 	.word	0x000066d2
   10c38:	00006704 	.word	0x00006704
   10c3c:	000066d2 	.word	0x000066d2
   10c40:	00006704 	.word	0x00006704
   10c44:	00006704 	.word	0x00006704
   10c48:	00006704 	.word	0x00006704
   10c4c:	00006704 	.word	0x00006704
   10c50:	00006704 	.word	0x00006704
   10c54:	00006704 	.word	0x00006704
   10c58:	00006704 	.word	0x00006704
   10c5c:	00006704 	.word	0x00006704
   10c60:	00006704 	.word	0x00006704
   10c64:	00006704 	.word	0x00006704
   10c68:	00006704 	.word	0x00006704
   10c6c:	00006704 	.word	0x00006704
   10c70:	00006704 	.word	0x00006704
   10c74:	00006704 	.word	0x00006704
   10c78:	00006704 	.word	0x00006704
   10c7c:	00006704 	.word	0x00006704
   10c80:	00006704 	.word	0x00006704
   10c84:	00006704 	.word	0x00006704
   10c88:	00006704 	.word	0x00006704
   10c8c:	00006704 	.word	0x00006704
   10c90:	00006704 	.word	0x00006704
   10c94:	00006704 	.word	0x00006704
   10c98:	00006704 	.word	0x00006704
   10c9c:	00006704 	.word	0x00006704
   10ca0:	00006704 	.word	0x00006704
   10ca4:	00006704 	.word	0x00006704
   10ca8:	00006704 	.word	0x00006704
   10cac:	00006704 	.word	0x00006704
   10cb0:	00006704 	.word	0x00006704
   10cb4:	00006704 	.word	0x00006704
   10cb8:	00006704 	.word	0x00006704
   10cbc:	00006704 	.word	0x00006704
   10cc0:	00006704 	.word	0x00006704
   10cc4:	00006704 	.word	0x00006704
   10cc8:	00006704 	.word	0x00006704
   10ccc:	000066d2 	.word	0x000066d2
   10cd0:	000066d2 	.word	0x000066d2
   10cd4:	000066da 	.word	0x000066da
   10cd8:	000066da 	.word	0x000066da
   10cdc:	000066da 	.word	0x000066da
   10ce0:	000066da 	.word	0x000066da
   10ce4:	42000000 	.word	0x42000000
   10ce8:	42000400 	.word	0x42000400
   10cec:	42000800 	.word	0x42000800
   10cf0:	42000c00 	.word	0x42000c00
   10cf4:	42001000 	.word	0x42001000
   10cf8:	43000400 	.word	0x43000400
   10cfc:	00007836 	.word	0x00007836
   10d00:	00007832 	.word	0x00007832
   10d04:	00007832 	.word	0x00007832
   10d08:	0000789c 	.word	0x0000789c
   10d0c:	0000789c 	.word	0x0000789c
   10d10:	0000784c 	.word	0x0000784c
   10d14:	0000783c 	.word	0x0000783c
   10d18:	00007852 	.word	0x00007852
   10d1c:	0000788a 	.word	0x0000788a
   10d20:	0000791c 	.word	0x0000791c
   10d24:	000078fc 	.word	0x000078fc
   10d28:	000078fc 	.word	0x000078fc
   10d2c:	00007996 	.word	0x00007996
   10d30:	0000790e 	.word	0x0000790e
   10d34:	0000792a 	.word	0x0000792a
   10d38:	00007900 	.word	0x00007900
   10d3c:	00007938 	.word	0x00007938
   10d40:	0000797a 	.word	0x0000797a
   10d44:	000079d4 	.word	0x000079d4
   10d48:	00007a16 	.word	0x00007a16
   10d4c:	00007a16 	.word	0x00007a16
   10d50:	00007a16 	.word	0x00007a16
   10d54:	000079c6 	.word	0x000079c6
   10d58:	000079e2 	.word	0x000079e2
   10d5c:	000079b8 	.word	0x000079b8
   10d60:	000079f0 	.word	0x000079f0
   10d64:	00007a06 	.word	0x00007a06
   10d68:	00008090 	.word	0x00008090
   10d6c:	00008184 	.word	0x00008184
   10d70:	0000818e 	.word	0x0000818e
   10d74:	00008198 	.word	0x00008198
   10d78:	000081a2 	.word	0x000081a2
   10d7c:	000081d4 	.word	0x000081d4
   10d80:	000081de 	.word	0x000081de
   10d84:	000081e8 	.word	0x000081e8
   10d88:	000081f2 	.word	0x000081f2
   10d8c:	000081fc 	.word	0x000081fc
   10d90:	42002000 	.word	0x42002000
   10d94:	42002400 	.word	0x42002400
   10d98:	43000800 	.word	0x43000800
   10d9c:	00000002 	.word	0x00000002
   10da0:	00000100 	.word	0x00000100
   10da4:	00000002 	.word	0x00000002
   10da8:	00000200 	.word	0x00000200
   10dac:	00000003 	.word	0x00000003
   10db0:	00000004 	.word	0x00000004
   10db4:	626d756e 	.word	0x626d756e
   10db8:	664f7265 	.word	0x664f7265
   10dbc:	65747942 	.word	0x65747942
   10dc0:	00000073 	.word	0x00000073
   10dc4:	732f2e2e 	.word	0x732f2e2e
   10dc8:	412f6372 	.word	0x412f6372
   10dcc:	742f4653 	.word	0x742f4653
   10dd0:	64726968 	.word	0x64726968
   10dd4:	74726170 	.word	0x74726170
   10dd8:	69772f79 	.word	0x69772f79
   10ddc:	656c6572 	.word	0x656c6572
   10de0:	6d2f7373 	.word	0x6d2f7373
   10de4:	2f697769 	.word	0x2f697769
   10de8:	76726573 	.word	0x76726573
   10dec:	73656369 	.word	0x73656369
   10df0:	7364702f 	.word	0x7364702f
   10df4:	6372732f 	.word	0x6372732f
   10df8:	2f766e2f 	.word	0x2f766e2f
   10dfc:	764e5f44 	.word	0x764e5f44
   10e00:	0000632e 	.word	0x0000632e
   10e04:	72646461 	.word	0x72646461
   10e08:	20737365 	.word	0x20737365
   10e0c:	44203d3c 	.word	0x44203d3c
   10e10:	5f564e5f 	.word	0x5f564e5f
   10e14:	4f4d454d 	.word	0x4f4d454d
   10e18:	455f5952 	.word	0x455f5952
   10e1c:	0000444e 	.word	0x0000444e
   10e20:	64646128 	.word	0x64646128
   10e24:	73736572 	.word	0x73736572
   10e28:	6e202b20 	.word	0x6e202b20
   10e2c:	65626d75 	.word	0x65626d75
   10e30:	42664f72 	.word	0x42664f72
   10e34:	73657479 	.word	0x73657479
   10e38:	3d3c2029 	.word	0x3d3c2029
   10e3c:	5f442820 	.word	0x5f442820
   10e40:	4d5f564e 	.word	0x4d5f564e
   10e44:	524f4d45 	.word	0x524f4d45
   10e48:	4e455f59 	.word	0x4e455f59
   10e4c:	202b2044 	.word	0x202b2044
   10e50:	00295531 	.word	0x00295531
   10e54:	66666f28 	.word	0x66666f28
   10e58:	20746573 	.word	0x20746573
   10e5c:	756e202b 	.word	0x756e202b
   10e60:	7265626d 	.word	0x7265626d
   10e64:	7942664f 	.word	0x7942664f
   10e68:	29736574 	.word	0x29736574
   10e6c:	203d3c20 	.word	0x203d3c20
   10e70:	564e5f44 	.word	0x564e5f44
   10e74:	4345535f 	.word	0x4345535f
   10e78:	5f524f54 	.word	0x5f524f54
   10e7c:	455a4953 	.word	0x455a4953
   10e80:	ffffff00 	.word	0xffffff00
   10e84:	4e5f4428 	.word	0x4e5f4428
   10e88:	454d5f56 	.word	0x454d5f56
   10e8c:	59524f4d 	.word	0x59524f4d
   10e90:	4154535f 	.word	0x4154535f
   10e94:	25205452 	.word	0x25205452
   10e98:	4d564e20 	.word	0x4d564e20
   10e9c:	4c525443 	.word	0x4c525443
   10ea0:	574f525f 	.word	0x574f525f
   10ea4:	5a49535f 	.word	0x5a49535f
   10ea8:	3d202945 	.word	0x3d202945
   10eac:	5530203d 	.word	0x5530203d
   10eb0:	00000000 	.word	0x00000000
   10eb4:	4e5f4428 	.word	0x4e5f4428
   10eb8:	454d5f56 	.word	0x454d5f56
   10ebc:	59524f4d 	.word	0x59524f4d
   10ec0:	444e455f 	.word	0x444e455f
   10ec4:	44202d20 	.word	0x44202d20
   10ec8:	5f564e5f 	.word	0x5f564e5f
   10ecc:	4f4d454d 	.word	0x4f4d454d
   10ed0:	535f5952 	.word	0x535f5952
   10ed4:	54524154 	.word	0x54524154
   10ed8:	31202b20 	.word	0x31202b20
   10edc:	3d202955 	.word	0x3d202955
   10ee0:	5f44203d 	.word	0x5f44203d
   10ee4:	4d5f564e 	.word	0x4d5f564e
   10ee8:	524f4d45 	.word	0x524f4d45
   10eec:	49535f59 	.word	0x49535f59
   10ef0:	ff00455a 	.word	0xff00455a

00010ef4 <__func__.12931>:
   10ef4:	764e5f44 696e495f ffff0074              D_Nv_Init...

00010f00 <__func__.12943>:
   10f00:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00010f10 <__func__.12956>:
   10f10:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00010f20 <__func__.12968>:
   10f20:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   10f30:	706d495f ffff006c                       _Impl...

00010f38 <__func__.12981>:
   10f38:	706d6f43 44657261 00617461 68636163     CompareData.cach
   10f48:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   10f58:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   10f68:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   10f78:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   10f88:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   10f98:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   10fa8:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   10fb8:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   10fc8:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   10fd8:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   10fe8:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   10ff8:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   11008:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   11018:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   11028:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   11038:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   11048:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   11058:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   11068:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   11078:	203d2120 4c4c554e ffff0029               != NULL)...

00011084 <__func__.12964>:
   11084:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   11094:	69467265 00646572                       erFired.

0001109c <__func__.13000>:
   1109c:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

000110ac <__func__.13007>:
   110ac:	61657243 74496574 61436d65 00656863     CreateItemCache.

000110bc <__func__.13012>:
   110bc:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

000110cc <__func__.13105>:
   110cc:	64616f4c 74636553 ff00726f              LoadSector..

000110d8 <__func__.13127>:
   110d8:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

000110e8 <__func__.13147>:
   110e8:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   110f8:	65646565 ffff0064                       eeded...

00011100 <__func__.13154>:
   11100:	706d6f43 49746361 006d6574              CompactItem.

0001110c <__func__.13178>:
   1110c:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

0001111c <__func__.13188>:
   1111c:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   1112c:	ff006c70                                pl..

00011130 <__func__.13201>:
   11130:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00011140 <__func__.13212>:
   11140:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00011150 <__func__.13217>:
   11150:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   11160:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   11170:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   11180:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   11190:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   111a0:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   111b0:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   111c0:	6d2f7373 2f697769 76726573 73656369     ss/miwi/services
   111d0:	7364702f 6372732f 2f6c772f 64506c77     /pds/src/wl/wlPd
   111e0:	74614473 72655361 2e726576 00000063     sDataServer.c...
   111f0:	4e5f5328 65525f76 6e727574 756c6156     (S_Nv_ReturnValu
   11200:	69445f65 746f4e64 73697845 3d3d2074     e_DidNotExist ==
   11210:	74657220 7c7c2029 5f532820 525f764e      ret) || (S_Nv_R
   11220:	72757465 6c61566e 4f5f6575 3d3d206b     eturnValue_Ok ==
   11230:	74657220 ffff0029                        ret)...

00011238 <__func__.12877>:
   11238:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   11248:	646e6148 0072656c                       Handler.

00011250 <__func__.12897>:
   11250:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00011260 <__func__.12904>:
   11260:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   11270:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   11280:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   11290:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   112a0:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   112b0:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   112c0:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   112d0:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   112e0:	00632e74                                t.c.

000112e4 <__func__.12635>:
   112e4:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...

000112f4 <__func__.13099>:
   112f4:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   11304:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   11314:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   11324:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   11334:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   11344:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   11354:	76726573 73656369 7364702f 6372732f     services/pds/src
   11364:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   11374:	7265766e 2e726574 ffff0063              nverter.c...

00011380 <mySecurityKey>:
   11380:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00011390 <MiWiItemIdsTable>:
   11390:	00040002 00060005 00030007 00080001     ................
   113a0:	ffff0009 0000c660 0000c8f4 0000c8f4     ....`...........
   113b0:	0000c7e6 0000c8f4 0000c8f4 0000c8f4     ................
   113c0:	0000c8f4 0000c8f4 0000c8f4 0000c37a     ............z...
   113d0:	0000c82a 0000c8f4 0000c8f4 0000c8f4     *...............
   113e0:	0000c8f4 0000c542 0000c8f4 0000c8f4     ....B...........
   113f0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11400:	0000c8f4 0000c8f4 0000c8f4 0000c4b0     ................
   11410:	0000c8ae 0000c8f4 0000c8f4 0000c8f4     ................
   11420:	0000c8f4 0000c63c 0000c8f4 0000c8f4     ....<...........
   11430:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11440:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11450:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11460:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11470:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11480:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11490:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114a0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114b0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114c0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114d0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114e0:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   114f0:	0000c8f4 0000c8f4 0000c714 0000c8f4     ................
   11500:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11510:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11520:	0000c8f4 0000c8f4 0000c8f4 0000c8f4     ................
   11530:	0000c6ee                                ....

00011534 <tc_interrupt_vectors.13115>:
   11534:	ff151211 6f430a0d 63656e6e 676e6974     ......Connecting
   11544:	65655020 6e6f2072 61684320 6c656e6e      Peer on Channel
   11554:	00000020 00006425 6f430a0d 63656e6e      ...%d....Connec
   11564:	20646574 72656550 206e6f20 6e616843     ted Peer on Chan
   11574:	206c656e ffffff00 65530a0d 7463656c     nel ......Select
   11584:	206e6f69 6320666f 6e6e6168 00206c65     ion of channel .
   11594:	20736920 20746f6e 70707573 6574726f      is not supporte
   115a4:	6e692064 72756320 746e6572 6e6f6320     d in current con
   115b4:	75676966 69746172 0d2e6e6f ffffff00     figuration......
   115c4:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   115d4:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   115e4:	726f6620 57694d20 4d542869 54532029      for MiWi(TM) ST
   115f4:	53205241 6b636174 2e2e2e20 00000000     AR Stack .......
   11604:	20200a0d 52202020 72542046 63736e61     ..     RF Transc
   11614:	65766965 41203a72 52363854 32313246     eiver: AT86RF212
   11624:	00000042 20200a0d 6d654420 6e49206f     B.....   Demo In
   11634:	75727473 6f697463 00003a6e 20200a0d     struction:....  
   11644:	20202020 20202020 20202020 20202020                     
   11654:	50202020 7265776f 206e6f20 20656874        Power on the 
   11664:	72616f62 6e752064 206c6974 2044454c     board until LED 
   11674:	696c2031 73746867 00707520 20200a0d     1 lights up...  
   11684:	20202020 20202020 20202020 20202020                     
   11694:	74202020 6e69206f 61636964 63206574        to indicate c
   116a4:	656e6e6f 6e697463 69772067 70206874     onnecting with p
   116b4:	2e726565 00000000 20200a0d 20202020     eer.......      
   116c4:	20202020 20202020 20202020 50202020                    P
   116d4:	73736572 20575320 74747542 74206e6f     ress SW Button t
   116e4:	7262206f 6364616f 20747361 7373656d     o broadcast mess
   116f4:	2e656761 00000000 20200a0d 20202020     age.......      
   11704:	20202020 20202020 20202020 4c202020                    L
   11714:	31204445 6c697720 6562206c 676f7420     ED 1 will be tog
   11724:	64656c67 6f707520 6572206e 76696563     gled upon receiv
   11734:	20676e69 7373656d 73656761 0000202e     ing messages. ..
   11744:	000d0a0d 75636553 20646572 00000000     ....Secured ....
   11754:	616f7242 73616364 61502074 74656b63     Broadcast Packet
   11764:	74697720 53522068 00204953 63696e55      with RSSI .Unic
   11774:	20747361 6b636150 77207465 20687469     ast Packet with 
   11784:	49535352 00000020 78323025 00000000     RSSI ...%02x....
   11794:	6f726620 0000206d 00007825 ff00203a      from ..%x..: ..

000117a4 <MiWi>:
   117a4:	2020b220 2020b220 20b220b2 20202020      .   .  . .     
   117b4:	0db220b2 b220b20a b220b220 b2202020     . .... . . .   .
   117c4:	20b22020 2020b220 20b20a0d 2020b220       .  .  ...  .  
   117d4:	20b220b2 b22020b2 20b22020 b20a0db2     . . .  .  . ....
   117e4:	20b22020 b220b220 20b22020 20b220b2       .  . .  . . . 
   117f4:	0a0db220 b22020b2 20b22020 202020b2      ....  .  . .   
   11804:	20b220b2 0db22020 2020200a 20202020     . .   ...       
   11814:	20202020 20202020 20202020 ffff0a0d                 ....
   11824:	74530a0d 65747261 69572064 656c6572     ..Started Wirele
   11834:	43207373 756d6d6f 6163696e 6e6f6974     ss Communication
   11844:	206e6f20 6e616843 206c656e 00000000      on Channel ....
   11854:	ff007525 0a0d0a0d 4120794d 65726464     %u......My Addre
   11864:	203a7373 00007830 41502020 3a44494e     ss: 0x..  PANID:
   11874:	00783020 68432020 656e6e61 00203a6c      0x.  Channel: .
   11884:	6f430a0d 63656e6e 6e6f6974 65500920     ..Connection .Pe
   11894:	6f4c7265 6441676e 73657264 50092073     erLongAddress .P
   118a4:	49726565 0d6f666e 00000000 00090909     eerInfo.........
   118b4:	0000742f 0a0d0a0d 6e6e6f43 69746365     /t......Connecti
   118c4:	20206e6f 50202020 4c726565 41676e6f     on     PeerLongA
   118d4:	65726464 20207373 50202020 49726565     ddress     PeerI
   118e4:	0d6f666e 00000000 20202020 20202020     nfo.....        
   118f4:	20202020 00000020 20202020 ffffff00          ...    ....
   11904:	6f636552 63656e6e 0a646574 ffff000d     Reconnected.....
   11914:	41500a0d 3a44494e 00000000 61684320     ..PANID:.... Cha
   11924:	6c656e6e 0000003a 0000f224 0000f1f4     nnel:...$.......
   11934:	0000f206 0000f148 0000f206 0000f1ea     ....H...........
   11944:	0000f206 0000f148 0000f1f4 0000f1f4     ....H...........
   11954:	0000f1ea 0000f148 0000f150 0000f150     ....H...P...P...
   11964:	0000f150 0000f20c 0000f1f4 0000f1f4     P...............
   11974:	0000f1c8 0000f2ac 0000f1c8 0000f1ea     ................
   11984:	0000f1c8 0000f2ac 0000f1f4 0000f1f4     ................
   11994:	0000f1ea 0000f2ac 0000f150 0000f150     ........P...P...
   119a4:	0000f150 0000f2b6 7566202c 6974636e     P......., functi
   119b4:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
   119c4:	20227325 6c696166 203a6465 656c6966     %s" failed: file
   119d4:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
   119e4:	000a7325                                %s..

000119e8 <_global_impure_ptr>:
   119e8:	20000038 2b302d23 6c680020 6665004c     8.. #-0+ .hlL.ef
   119f8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   11a08:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   11a18:	64636261 ff006665                       abcdef..

00011a20 <__sf_fake_stderr>:
	...

00011a40 <__sf_fake_stdin>:
	...

00011a60 <__sf_fake_stdout>:
	...

00011a80 <_init>:
   11a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a82:	46c0      	nop			; (mov r8, r8)
   11a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11a86:	bc08      	pop	{r3}
   11a88:	469e      	mov	lr, r3
   11a8a:	4770      	bx	lr

00011a8c <__init_array_start>:
   11a8c:	000061c1 	.word	0x000061c1

00011a90 <_fini>:
   11a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a92:	46c0      	nop			; (mov r8, r8)
   11a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11a96:	bc08      	pop	{r3}
   11a98:	469e      	mov	lr, r3
   11a9a:	4770      	bx	lr

00011a9c <__fini_array_start>:
   11a9c:	00006199 	.word	0x00006199
